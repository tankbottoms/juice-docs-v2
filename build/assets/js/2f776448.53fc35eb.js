"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[67411],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),h=a,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},89783:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={},i="Airdrop Guide: Rewarding Your Community",s={unversionedId:"user/guides/rewarding-your-community",id:"user/guides/rewarding-your-community",title:"Airdrop Guide: Rewarding Your Community",description:"This is a mirror of y4000.eth's amazing blog post",source:"@site/docs/user/guides/rewarding-your-community.md",sourceDirName:"user/guides",slug:"/user/guides/rewarding-your-community",permalink:"/user/guides/rewarding-your-community",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/user/guides/rewarding-your-community.md",tags:[],version:"current",frontMatter:{},sidebar:"user",previous:{title:"What's New in v2?",permalink:"/user/guides/new-in-v2"},next:{title:"How to use Juicebox tokens in a Snapshot strategy",permalink:"/user/guides/snapshot-strategy"}},l={},c=[{value:"Building a Merkle Tree",id:"building-a-merkle-tree",level:2},{value:"Setting up a Webservice to Generate Merkle Proofs",id:"setting-up-a-webservice-to-generate-merkle-proofs",level:2},{value:"Finally, verify the Merkle Proof in the Smart Contract",id:"finally-verify-the-merkle-proof-in-the-smart-contract",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:c};function u(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"airdrop-guide-rewarding-your-community"},"Airdrop Guide: Rewarding Your Community"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This is a mirror of y4000.eth's ",(0,a.kt)("a",{parentName:"p",href:"https://mirror.xyz/y4000.eth/DwtMwn_rOOqTyTvvshlRLy9jNiKa__hag9zQgAQtSHw"},"amazing blog post"))),(0,a.kt)("p",null,"It\u2019s amazing when a community comes together in the world of web3. It\u2019s a bit sad to see one fizzle out just as quickly as it forms."),(0,a.kt)("p",null,"Rewards play a key role in galvanizing a community further. As we\u2019re figuring out these experiments with DAOs \u2014 I wanted to share the technicals of how I was able to whitelist 39,895 wallet addresses for an Ethereum mainnet smart contract while avoiding a cost prohibitive gas expense. This article dives into ",(0,a.kt)("inlineCode",{parentName:"p"},"NodeJS, JavaScript, Merkle Trees, and Solidity.")),(0,a.kt)("p",null,"The \u201cDAO\u201d in question is one that has partially fizzled out, ConstitutionDAO, the original team responsibly abandoned the project after the initial goal (to win an auction to acquire a historic copy of the Constitution) failed. They made sure everyone who donated could get a refund \u2014 and avoided ever looking like scammers, which was definitely a good move. ",(0,a.kt)("a",{parentName:"p",href:"https://www.people-dao.com/"},"PeopleDAO")," formed shortly after, organizing around the $People ERC-20 token (which contributors could opt to claim instead of their refund). The token is inherently a fairly distributed token and it is great to see a community evolve out of it."),(0,a.kt)("p",null,"I had come up with a generative art NFT Collection concept around the time the auction was lost \u2014 and I wanted to make it available for anyone who took part in the DAO. It was great to see so many new entrants into the world of web3 and I wanted to help keep them engaged. More about that ",(0,a.kt)("a",{parentName:"p",href:"https://constitution.y4000.xyz/"},"can be found here"),"."),(0,a.kt)("p",null,"To get to the nuts and bolts of it all the starting point was getting an export of all the contributor wallets."),(0,a.kt)("p",null,"JuiceBox \u2014 Get an Array of wallet addresses"),(0,a.kt)("p",null,"If you\u2019ve run your DAO fundraising via JuiceBox, as the ConstitutionDAO did, they make it pretty easy to export the wallet list as a CSV file:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(28893).Z,width:"1034",height:"374"})),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},'Simply click on "Holders"'))),(0,a.kt)("p",null,"On the holders dialog you\u2019ll be able to select \u201cAmount paid\u201d:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(62216).Z,width:"1038",height:"660"})),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},'Clicking the little blue "download" icon on the right will get you a CSV'))),(0,a.kt)("p",null,"Once you\u2019ve got the CSV, you will want to process that into a JavaScript Array list of wallet addresses. Here is a snip of NodeJS to generate the JSON:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs');  const allFileContents = fs.readFileSync('../cdao_wallets.csv', 'utf-8'); let wallets = new Array(); allFileContents.split(/\\r?\\n/).forEach(line =>  {     wallets.push(line.split(',')[0]); }); fs.writeFileSync('./wallets.json', JSON.stringify(wallets, null, 2) , 'utf-8');\n")),(0,a.kt)("h2",{id:"building-a-merkle-tree"},"Building a Merkle Tree"),(0,a.kt)("p",null,"To get a basic understanding of what Merkle Trees are, I suggest starting ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Merkle_tree"},"with the Wikipedia entry"),"."),(0,a.kt)("p",null,"Now that we have a list of wallets as a JavaScript Array we can process that array into a Merkle Tree and generate a ",(0,a.kt)("inlineCode",{parentName:"p"},"rootHash")," \u2014 this is basically the \u201cpublic key\u201d for the tree, any proof can be validated with knowledge of the ",(0,a.kt)("inlineCode",{parentName:"p"},"rootHash")," \u2014 once this is generated we use the value within our Solidity smart contract. We leverage two open source projects to achieve this: ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/keccak256"},"keccak256")," and ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/merkletreejs"},"merkletreejs")," \u2014 here is a NodeJS code snip to generate the ",(0,a.kt)("inlineCode",{parentName:"p"},"rootHash"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const wallets = require('./wallets.json');\nconst keccak256 = require('keccak256')\nconst { MerkleTree } = require('merkletreejs')\n\nconst leafNodes = wallets.map(addr => keccak256(addr))\n\nconst merkleTree = new MerkleTree(leafNodes, keccak256, {sortPairs: true})\nconst rootHash = merkleTree.getRoot()\n\nconsole.log('rootHash', rootHash.toString('hex'))\n")),(0,a.kt)("h2",{id:"setting-up-a-webservice-to-generate-merkle-proofs"},"Setting up a Webservice to Generate Merkle Proofs"),(0,a.kt)("p",null,"To verify if a wallet is a contributor we will need to generate a proof for that wallet and send that proof into the smart contract function the wallet wishes to transact on. In the case of the ",(0,a.kt)("a",{parentName:"p",href:"https://constitution.y4000.xyz/"},"CFRAC")," project, we\u2019re allowing a contributor to mint an NFT for free\u2026. On our mint website, the user is prompted to connect their wallet, once connected we verify if they are a contributing address, if so we generate the proof and allow them to run the ",(0,a.kt)("inlineCode",{parentName:"p"},"daoMint")," function on our smart contract. Here a code snip of the simple webservice (built with ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/express"},"expressjs"),") to generate the proof:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const wallets = require('./util/wallets.json');\nconst keccak256 = require('keccak256')\nconst { MerkleTree } = require('merkletreejs')\nconst leafNodes = wallets.map(addr => keccak256(addr))\nconst merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true })\n\napp.get(\"/proof/:address\", (req, res) => {\n  let addrs = req.params.address.toLowerCase();\n  let hexProof = merkleTree.getHexProof(keccak256(addrs))\n  // send json of res\n  res.json(hexProof);\n});\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"address")," is simply the hex wallet address the user connected with passed in by the mint website frontend code."),(0,a.kt)("h2",{id:"finally-verify-the-merkle-proof-in-the-smart-contract"},"Finally, verify the Merkle Proof in the Smart Contract"),(0,a.kt)("p",null,"Once the frontend code has the proof in hand, it is ready to be sent to the ",(0,a.kt)("inlineCode",{parentName:"p"},"daoMint")," function on the smart contract. Luckily for us, ",(0,a.kt)("a",{parentName:"p",href:"https://openzeppelin.com/"},"OpenZeppeliln")," makes available a library that makes this task super easy. Here is a Solidity code snip of the smart contract:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"import \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n...\n\n    function daoMint(bytes32[] calldata _merkleProof) public whenNotPaused {\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n        require(MerkleProof.verify(_merkleProof, MERKLE_ROOT, leaf), 'NOT_DAO_MEMBER');\n\n        _safeMint(msg.sender, _tokenIdCounter.current());\n        _tokenIdCounter.increment();\n    }\n")),(0,a.kt)("p",null,"Note the ",(0,a.kt)("inlineCode",{parentName:"p"},"MERKLE_ROOT")," is a constant variable with the value of the earlier generated ",(0,a.kt)("inlineCode",{parentName:"p"},"rootHash"),". You can view our full smart contract on Etherscan: ",(0,a.kt)("a",{parentName:"p",href:"https://etherscan.io/address/0x0fB73942cdffd45ccC8517061ae7430cDdde6b50#code"},"0x0fB73942cdffd45ccC8517061ae7430cDdde6b50")),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"Given the maturity of all the open source libraries available, this otherwise complex concept can be distilled into a simple and elegant implementation. Feel free to reach out to me on Twitter: ",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/Y_4_K"},"twitter.com/Y_4_K")," \u2014 and be sure to check out the ",(0,a.kt)("a",{parentName:"p",href:"https://constitution.y4000.xyz/"},"CFRAC NFT collection"),"."))}u.isMDXComponent=!0},28893:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/erc20-6a18facfcd9b42603e57374e15309b4a.png"},62216:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/holders-09588714cb5a6971bf3900ed4e36aed0.png"}}]);