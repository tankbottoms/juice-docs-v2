"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[47417],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>y});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(r),y=a,m=u["".concat(p,".").concat(y)]||u[y]||d[y]||o;return r?n.createElement(m,i(i({ref:t},s),{},{components:r})):n.createElement(m,i({ref:t},s))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},79197:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={},i="Project payer",c={unversionedId:"dev/build/utilities/project-payer",id:"dev/build/utilities/project-payer",title:"Project payer",description:"JBETHERC20ProjectPayer contracts make it easy to route funds to projects' treasuries from other contracts or within inheriting contracts. This is useful for routing funds to a Juicebox treasury within other contracts such as an NFT's minting function, or creating contracts that will automatically route any received funds to a project's treasury with preconfigured parameters to send along with the payment.",source:"@site/docs/dev/build/utilities/project-payer.md",sourceDirName:"dev/build/utilities",slug:"/dev/build/utilities/project-payer",permalink:"/dev/build/utilities/project-payer",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/build/utilities/project-payer.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"Split allocator",permalink:"/dev/build/treasury-extensions/split-allocator"},next:{title:"Splits payer",permalink:"/dev/build/utilities/splits-payer"}},p={},l=[{value:"Inheriting JBProjectPayer",id:"inheriting-jbprojectpayer",level:4},{value:"Deploying project payers",id:"deploying-project-payers",level:4},{value:"Examples",id:"examples",level:4}],s={toc:l};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"project-payer"},"Project payer"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-utilities/jbetherc20projectpayer/"},(0,a.kt)("inlineCode",{parentName:"a"},"JBETHERC20ProjectPayer"))," contracts make it easy to route funds to projects' treasuries from other contracts or within inheriting contracts. This is useful for routing funds to a Juicebox treasury within other contracts such as an NFT's minting function, or creating contracts that will automatically route any received funds to a project's treasury with preconfigured parameters to send along with the payment.  "),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-utilities/jbetherc20projectpayer/"},(0,a.kt)("inlineCode",{parentName:"a"},"JBETHERC20ProjectPayer"))," can be inherited from any contract to facilitate internal transactions to Juicebox treasuries in ETH or any ERC-20, assuming the project is using a payment terminal that accepts the tokens. They can also be deployed as standalone project payer copies using ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-utilities/jbetherc20projectpayerdeployer"},(0,a.kt)("inlineCode",{parentName:"a"},"JBProjectPayerDeployer")),"."),(0,a.kt)("h4",{id:"inheriting-jbprojectpayer"},"Inheriting JBProjectPayer"),(0,a.kt)("p",null,"Inheriting from ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-utilities/jbetherc20projectpayer/"},(0,a.kt)("inlineCode",{parentName:"a"},"JBETHERC20ProjectPayer"))," will give a contract access to a public ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-utilities/jbetherc20projectpayer/write/pay"},(0,a.kt)("inlineCode",{parentName:"a"},"JBProjectPayer.pay(...)"))," function, a public ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-utilities/jbetherc20projectpayer/write/addtobalanceof"},(0,a.kt)("inlineCode",{parentName:"a"},"JBProjectPayer.addToBalanceOf(...)"))," function, an internal ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-utilities/jbetherc20projectpayer/write/-_pay"},(0,a.kt)("inlineCode",{parentName:"a"},"JBProjectPayer._pay(...)"))," function, and an internal ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-utilities/jbetherc20projectpayer/write/-_addtobalanceof"},(0,a.kt)("inlineCode",{parentName:"a"},"JBProjectPayer._addToBalanceOf(...)"))," function. These can be used from within the contract to route funds to a Juicebox treasury while specifying all relevant parameters to contextualize the payment. Use the internal versions if the inheriting contract has already handled receiving the funds being forwarded."),(0,a.kt)("p",null,"Follow instructions in ",(0,a.kt)("a",{parentName:"p",href:"/dev/build/getting-started"},"Getting started")," to import the ",(0,a.kt)("inlineCode",{parentName:"p"},"JBProjectPayer")," files into a project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"function pay(\n  uint256 _projectId,\n  address _token,\n  uint256 _amount,\n  uint256 _decimals,\n  address _beneficiary,\n  uint256 _minReturnedTokens,\n  bool _preferClaimedTokens,\n  string calldata _memo,\n  bytes calldata _metadata\n) public payable virtual override {}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"function addToBalanceOf(\n  uint256 _projectId,\n  address _token,\n  uint256 _amount,\n  uint256 _decimals,\n  string calldata _memo\n  bytes calldata _metadata\n) public payable virtual override {}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"function _pay(\n  uint256 _projectId,\n  address _token,\n  uint256 _amount,\n  uint256 _decimals,\n  address _beneficiary,\n  uint256 _minReturnedTokens,\n  bool _preferClaimedTokens,\n  string memory _memo,\n  bytes memory _metadata\n) internal virtual {}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"function _addToBalanceOf(\n  uint256 _projectId,\n  address _token,\n  uint256 _amount,\n  uint256 _decimals,\n  string memory _memo,\n  string memory _metadata\n) internal virtual  {}\n")),(0,a.kt)("p",null,"If your contract does not wish to route payments received via the native ",(0,a.kt)("inlineCode",{parentName:"p"},"receive")," interaction to a Juicebox treasury, all default constructor arguments can be left as null values. The contract will revert any payment received."),(0,a.kt)("h4",{id:"deploying-project-payers"},"Deploying project payers"),(0,a.kt)("p",null,"Instances of the ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-utilities/jbetherc20projectpayer/"},(0,a.kt)("inlineCode",{parentName:"a"},"JBETHERC20ProjectPayer"))," contract can also be deployed as stand-alone forwarders of payments to Juicebox treasuries. A new project payer can be deployed using ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-utilities/jbetherc20projectpayerdeployer/write/deployprojectpayer"},(0,a.kt)("inlineCode",{parentName:"a"},"JBProjectPayerDeployer.deployProjectPayer(...)")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"function deployProjectPayer(\n  uint256 _defaultProjectId,\n  address payable _defaultBeneficiary,\n  bool _defaultPreferClaimedTokens,\n  string memory _defaultMemo,\n  bytes memory _defaultMetadata,\n  bool _defaultPreferAddToBalance,\n  IJBDirectory _directory,\n  address _owner\n) external override returns (IJBProjectPayer projectPayer) { ... }\n")),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@jbx-protocol/contracts-v2/contracts/JBETHERC20ProjectPayer.sol';\n\ncontract NFTProjectPayer is ERC721, JBETHERC20ProjectPayer {\n  uint256 projectId;\n\n  constructor(uint256 _projectId, IJBDirectory _directory, address _owner) JBETHERC20ProjectPayer(0, address(0), false, \"\", bytes(0), false, _directory, _owner) {\n    projectId = _projectId;\n  },\n  \n  // Minting an NFT routes funds to the juicebox treasury and mints project tokens for msg.sender. Use addToBalance if you don't want tokens minted.\n  function mint(uint256 _tokenId) external payable override {\n    _mint(msg.sender, _tokenId);\n    _pay(_projectId, JBTokens.ETH, msg.value, 18, msg.sender, 0, false, \"I love buffalos\", bytes(''));\n    // _addToBalance(_projectId, JBTokens.ETH, msg.value, 18, \"I love buffalos\", bytes(0));\n  }\n}\n")))}d.isMDXComponent=!0}}]);