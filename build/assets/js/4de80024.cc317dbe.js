"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[76986],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>y});var i=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=i.createContext({}),s=function(e){var t=i.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(r),y=n,m=u["".concat(p,".").concat(y)]||u[y]||c[y]||a;return r?i.createElement(m,l(l({ref:t},d),{},{components:r})):i.createElement(m,l({ref:t},d))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var s=2;s<a;s++)l[s]=r[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2057:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var i=r(87462),n=(r(67294),r(3905));const a={},l="DeployProjectPayer",o={unversionedId:"dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/events/deploysplitspayer",id:"dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/events/deploysplitspayer",title:"DeployProjectPayer",description:"Emitted from:",source:"@site/docs/dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/events/deploysplitspayer.md",sourceDirName:"dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/events",slug:"/dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/events/deploysplitspayer",permalink:"/dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/events/deploysplitspayer",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/events/deploysplitspayer.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"JBETHERC20SplitsPayerDeployer",permalink:"/dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/"},next:{title:"deploySplitsPayer",permalink:"/dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/write/deploysplitspayer"}},p={},s=[{value:"Definition",id:"definition",level:4}],d={toc:s};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"deployprojectpayer"},"DeployProjectPayer"),(0,n.kt)("p",null,"Emitted from:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/write/deploysplitspayer"},(0,n.kt)("inlineCode",{parentName:"a"},"deploySplitsPayer")))),(0,n.kt)("h4",{id:"definition"},"Definition"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"event DeploySplitsPayer(\n  IJBSplitsPayer indexed splitsPayer,\n  uint256 defaultSplitsProjectId,\n  uint256 defaultSplitsDomain,\n  uint256 defaultSplitsGroup,\n  IJBSplitsStore splitsStore,\n  uint256 defaultProjectId,\n  address defaultBeneficiary,\n  bool defaultPreferClaimedTokens,\n  string defaultMemo,\n  bytes defaultMetadata,\n  bool preferAddToBalance,\n  address owner,\n  address caller\n);\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"splitsPayer")," is the address of the splits payer contract that was deployed. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"defaultSplitsProjectId")," is the project ID to use when looking up splits to distribute between when receiving payments. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"defaultSplitsDomain")," is the domain to use when looking up splits to distribute between when receiving payments. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"defaultSplitsGroup")," is the group to use when looking up splits to distribute between when receiving payments. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"splitsStore")," is a contract that stores splits for each project."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"defaultProjectId")," is the ID of the project whose treasury should be forwarded the split payer contract's received payment leftovers after settling splits."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"defaultBeneficiary")," is the address that'll receive the project's tokens."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"defaultPreferClaimedTokens")," is a flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"defaultMemo")," is the memo that'll be passed along to the emitted event."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"defaultMetadata")," are bytes to send along to the project's data source and delegate, if provided."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"preferAddToBalance")," is a flag indicating if received payments should be forwarded to the project's ",(0,n.kt)("inlineCode",{parentName:"li"},"addToBalance")," function or ",(0,n.kt)("inlineCode",{parentName:"li"},"pay")," function. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"_owner")," is the address that owns the project payer contract."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"caller")," is the address that issued the transaction within which the event was emitted.")))}c.isMDXComponent=!0}}]);