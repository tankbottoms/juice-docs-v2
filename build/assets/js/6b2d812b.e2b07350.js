"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[709],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,y=p["".concat(d,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(y,i(i({ref:t},s),{},{components:n})):a.createElement(y,i({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},67793:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},i="Pay delegate",l={unversionedId:"dev/build/treasury-extensions/pay-delegate",id:"dev/build/treasury-extensions/pay-delegate",title:"Pay delegate",description:"Before implementing, learn about delegates here.",source:"@site/docs/dev/build/treasury-extensions/pay-delegate.md",sourceDirName:"dev/build/treasury-extensions",slug:"/dev/build/treasury-extensions/pay-delegate",permalink:"/dev/build/treasury-extensions/pay-delegate",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/build/treasury-extensions/pay-delegate.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"Data source",permalink:"/dev/build/treasury-extensions/data-source"},next:{title:"Redemption delegate",permalink:"/dev/build/treasury-extensions/redemption-delegate"}},d={},c=[{value:"Specs",id:"specs",level:4},{value:"Attaching",id:"attaching",level:4},{value:"Examples",id:"examples",level:4}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pay-delegate"},"Pay delegate"),(0,r.kt)("p",null,"Before implementing, learn about delegates ",(0,r.kt)("a",{parentName:"p",href:"/dev/learn/glossary/delegate"},"here"),"."),(0,r.kt)("h4",{id:"specs"},"Specs"),(0,r.kt)("p",null,"A contract can become a treasury pay delegate by adhering to ",(0,r.kt)("a",{parentName:"p",href:"/dev/api/interfaces/ijbpaydelegate"},(0,r.kt)("inlineCode",{parentName:"a"},"IJBPayDelegate")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"interface IJBPayDelegate {\n  function didPay(JBDidPayData calldata _data) external;\n}\n")),(0,r.kt)("p",null,"When extending pay functionality with a delegate, the protocol will pass a ",(0,r.kt)("a",{parentName:"p",href:"/dev/api/data-structures/jbdidpaydata"},(0,r.kt)("inlineCode",{parentName:"a"},"JBDidPayData"))," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"didPay(...)")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"struct JBDidPayData {\n  address payer;\n  uint256 projectId;\n  uint256 currentFundingCycleConfiguration;\n  JBTokenAmount amount;\n  uint256 projectTokenCount;\n  address beneficiary;\n  bool preferClaimedTokens;\n  string memo;\n  bytes metadata;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"struct JBTokenAmount {\n  address token;\n  uint256 value;\n  uint256 decimals;\n  uint256 currency;\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"msg.sender")," to the delegate will be the payment terminal that facilitated the payment. "),(0,r.kt)("p",null,"In payment terminals based on the ",(0,r.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal"},(0,r.kt)("inlineCode",{parentName:"a"},"JBPayoutRedemptionPaymentTerminal")),", such as ",(0,r.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-payment-terminals/jbethpaymentterminal/"},(0,r.kt)("inlineCode",{parentName:"a"},"JBETHPaymentTerminal")),"'s and ",(0,r.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-payment-terminals/jberc20paymentterminal/"},(0,r.kt)("inlineCode",{parentName:"a"},"JBERC20PaymentTerminal")),"'s, the pay delegate hook gets called ",(0,r.kt)("em",{parentName:"p"},"after")," the project's tokens have been minted and distributed. ",(0,r.kt)("a",{parentName:"p",href:"/dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_pay"},"View the docs"),". "),(0,r.kt)("p",null,"Make sure to only allow trusted contracts to access the ",(0,r.kt)("inlineCode",{parentName:"p"},"didPay(...)")," transaction."),(0,r.kt)("h4",{id:"attaching"},"Attaching"),(0,r.kt)("p",null,"New delegate contracts should be deployed independently. Once deployed, its address can be returned from a data source hook. See ",(0,r.kt)("a",{parentName:"p",href:"/dev/build/treasury-extensions/data-source"},"how to build a data source")," for more."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@jbx-protocol/contracts-v2/contracts/interfaces/IJBFundingCycleDataSource.sol';\nimport '@jbx-protocol/contracts-v2/contracts/interfaces/IJBPayDelegate.sol';\nimport '@jbx-protocol/contracts-v2/contracts/structs/JBTokenAmount.sol';\n\ncontract NFTPayDelegate is ERC721, IJBFundingCycleDataSource, IJBPayDelegate {\n  error INVALID_PAYMENT_EVENT();\n\n  IJBDirectory directory;\n  uint256 projectId;\n  JBTokenAmount contributionThreshold;\n  uint256 supply;\n  \n  // This contract can be used as a funding cycle data source to ensure its didPay function is called once the payment has gone through.\n  function payParams(JBPayParamsData calldata _data)\n    external\n    view\n    override\n    returns (\n      uint256 weight,\n      string memory memo,\n      IJBPayDelegate delegate\n    )\n  {\n    // Forward the recieved weight and memo, and use this contract as a pay delegate.\n    return (_data.weight, _data.memo, IJBPayDelegate(address(this)));\n  }\n  \n  // This is unused but needs to be included to fulfill IJBFundingCycleDataSource.\n  function redeemParams(JBRedeemParamsData calldata _data)\n    external\n    pure\n    override\n    returns (\n      uint256 reclaimAmount,\n      string memory memo,\n      IJBRedemptionDelegate delegate\n    )\n  {\n    // Return the default values.\n    return (_data.reclaimAmount.value, _data.memo, IJBRedemptionDelegate(address(0)));\n  }\n\n  constructor(IJBDirectory _directory, uint256 _projectId, JBTokenAmount _contributionThreshold, string calldata _name, string calldata _symbol) ERC721(_name, _symbol) {\n    directory = _directory;\n    projectId = _projectId;\n  },\n  \n  // Called once the payment has gone through if the project's current funding cycle is using a data source that returns this delegate.\n  function didPay(JBDidPayData calldata _data) external override {\n    // Make sure the caller is a terminal of the project, and the call is being made on behalf of an interaction with the correct project.\n    if (\n      !directory.isTerminalOf(projectId, IJBPaymentTerminal(msg.sender)) ||\n      _data.projectId != projectId\n    ) revert INVALID_PAYMENT_EVENT();\n\n    // Make the contribution is being made in the expected token.\n    if (_data.amount.token != contributionThreshold.token) return;\n\n    // Make sure the values use the same number of decimals.\n    if (_data.amount.decimals < contributionThreshold.decimals) return;\n\n    // Make sure the threshold is met.\n    if (_data.amount.value < contributionThreshold.value) return;\n\n    uint256 _tokenId = ++supply;\n\n    _mint(_data.beneficiary, _tokenId);\n  }\n}\n")))}u.isMDXComponent=!0}}]);