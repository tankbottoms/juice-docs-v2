"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[79381],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),s=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},c=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,p=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,l(l({ref:e},c),{},{components:n})):r.createElement(f,l({ref:e},c))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(t,e,n)=>{n.d(e,{Z:()=>l});var r=n(67294),a=n(86010);const i="tabItem_Ymn6";function l(t){let{children:e,hidden:n,className:l}=t;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,l),hidden:n},e)}},65488:(t,e,n)=>{n.d(e,{Z:()=>m});var r=n(87462),a=n(67294),i=n(86010),l=n(72389),o=n(67392),p=n(7094),s=n(12466);const c="tabList__CuJ",u="tabItem_LNqP";function d(t){var e,n;const{lazy:l,block:d,defaultValue:m,values:f,groupId:k,className:h}=t,b=a.Children.map(t.children,(t=>{if((0,a.isValidElement)(t)&&"value"in t.props)return t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof t.type?t.type:t.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),_=null!=f?f:b.map((t=>{let{props:{value:e,label:n,attributes:r}}=t;return{value:e,label:n,attributes:r}})),v=(0,o.l)(_,((t,e)=>t.value===e.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((t=>t.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===m?m:null!=(e=null!=m?m:null==(n=b.find((t=>t.props.default)))?void 0:n.props.value)?e:b[0].props.value;if(null!==y&&!_.some((t=>t.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+_.map((t=>t.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:g,setTabGroupChoices:N}=(0,p.U)(),[S,j]=(0,a.useState)(y),w=[],{blockElementScrollPositionUntilNextRender:P}=(0,s.o5)();if(null!=k){const t=g[k];null!=t&&t!==S&&_.some((e=>e.value===t))&&j(t)}const O=t=>{const e=t.currentTarget,n=w.indexOf(e),r=_[n].value;r!==S&&(P(e),j(r),null!=k&&N(k,String(r)))},T=t=>{var e;let n=null;switch(t.key){case"ArrowRight":{var r;const e=w.indexOf(t.currentTarget)+1;n=null!=(r=w[e])?r:w[0];break}case"ArrowLeft":{var a;const e=w.indexOf(t.currentTarget)-1;n=null!=(a=w[e])?a:w[w.length-1];break}}null==(e=n)||e.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},h)},_.map((t=>{let{value:e,label:n,attributes:l}=t;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:S===e?0:-1,"aria-selected":S===e,key:e,ref:t=>w.push(t),onKeyDown:T,onFocus:O,onClick:O},l,{className:(0,i.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":S===e})}),null!=n?n:e)}))),l?(0,a.cloneElement)(b.filter((t=>t.props.value===S))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((t,e)=>(0,a.cloneElement)(t,{key:e,hidden:t.props.value!==S})))))}function m(t){const e=(0,l.Z)();return a.createElement(d,(0,r.Z)({key:String(e)},t))}},92353:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(87462),a=(n(67294),n(3905)),i=n(65488),l=n(85162);const o={},p="_getStructsFor",s={unversionedId:"dev/api/contracts/jbsplitsstore/read/-_getstructsfor",id:"dev/api/contracts/jbsplitsstore/read/-_getstructsfor",title:"_getStructsFor",description:"Contract: JBSplitsStore\u200b\u200c",source:"@site/docs/dev/api/contracts/jbsplitsstore/read/-_getstructsfor.md",sourceDirName:"dev/api/contracts/jbsplitsstore/read",slug:"/dev/api/contracts/jbsplitsstore/read/-_getstructsfor",permalink:"/dev/api/contracts/jbsplitsstore/read/-_getstructsfor",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/api/contracts/jbsplitsstore/read/-_getstructsfor.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"projects",permalink:"/dev/api/contracts/jbsplitsstore/properties/projects"},next:{title:"splitsOf",permalink:"/dev/api/contracts/jbsplitsstore/read/splitsof"}},c={},u=[{value:"Definition",id:"definition",level:4},{value:"Body",id:"body",level:4}],d={toc:u};function m(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"_getstructsfor"},"_getStructsFor"),(0,a.kt)("p",null,"Contract: ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/contracts/jbsplitsstore/"},(0,a.kt)("inlineCode",{parentName:"a"},"JBSplitsStore")),"\u200b\u200c"),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"Step by step",label:"Step by step",mdxType:"TabItem"},(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Unpack splits' packed stored values into easy-to-work-with split structs.")),(0,a.kt)("h4",{id:"definition"},"Definition"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"function _getStructsFor(\n  uint256 _projectId,\n  uint256 _domain,\n  uint256 _group\n) private view returns (JBSplit[] memory) { ... }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Arguments:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_projectId")," is the ID of the project to get splits for."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_domain")," is an identifier within which the returned splits should be considered active."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_group")," is the identifying group of the splits."))),(0,a.kt)("li",{parentName:"ul"},"The view function is private to this contract."),(0,a.kt)("li",{parentName:"ul"},"The view function does not alter state on the blockchain."),(0,a.kt)("li",{parentName:"ul"},"The function returns an array of ",(0,a.kt)("a",{parentName:"li",href:"/dev/api/data-structures/jbsplit"},(0,a.kt)("inlineCode",{parentName:"a"},"JBSplit")),"s.")),(0,a.kt)("h4",{id:"body"},"Body"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Get a reference to the expected number of splits for the specified domain and group."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"// Get a reference to the number of splits that need to be added to the returned array.\nuint256 _splitCount = _splitCountOf[_projectId][_domain][_group];\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"Internal references:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/dev/api/contracts/jbsplitsstore/properties/-_splitcountof"},(0,a.kt)("inlineCode",{parentName:"a"},"_splitCountOf"))))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Inititalize an array of ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/data-structures/jbsplit"},(0,a.kt)("inlineCode",{parentName:"a"},"JBSplit"))," with length equal to the number of splits expected."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"// Initialize an array to be returned that has the set length.\nJBSplit[] memory _splits = new JBSplit[](_splitCount);\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"For each index, parse out the packed split parts into ",(0,a.kt)("a",{parentName:"p",href:"/dev/api/data-structures/jbsplit"},(0,a.kt)("inlineCode",{parentName:"a"},"JBSplit"))," structs and add to the array. The packed splits are stored in two different ",(0,a.kt)("inlineCode",{parentName:"p"},"uint256")," slots, the second of which contains info that is populated way less frequently."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"// Loop through each split and unpack the values into structs.\nfor (uint256 _i = 0; _i < _splitCount; _i++) {\n  // Get a reference to the fist packed data.\n  uint256 _packedSplitPart1 = _packedSplitParts1Of[_projectId][_domain][_group][_i];\n\n  // Store the first spit part. \n  JBSplit memory _split;\n\n  // prefer claimed in bit 0.\n  _split.preferClaimed = _packedSplitPart1 & 1 == 1;\n  // prefer add to balance in bit 1.\n  _split.preferAddToBalance = (_packedSplitPart1 >> 1) & 1 == 1;\n  // percent in bits 2-33.\n  _split.percent = uint256(uint32(_packedSplitPart1 >> 2));\n  // projectId in bits 32-89.\n  _split.projectId = uint256(uint56(_packedSplitPart1 >> 34));\n  // beneficiary in bits 90-249.\n  _split.beneficiary = payable(address(uint160(_packedSplitPart1 >> 90)));\n\n  // Get a reference to the second packed data.\n  uint256 _packedSplitPart2 = _packedSplitParts2Of[_projectId][_domain][_group][_i];\n\n  // If there's anything in it, unpack.\n  if (_packedSplitPart2 > 0) {\n    // Locked until in bits 0-47.\n    _split.lockedUntil = uint256(uint48(_packedSplitPart2));\n    // Locked until in bits 48-207.\n    _split.allocator = IJBSplitAllocator(address(uint160(_packedSplitPart2 >> 48)));\n  }\n\n  // Add the split to the value being returned.\n  _splits[_i] = _split;\n}\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"Internal references:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/dev/api/contracts/jbsplitsstore/properties/-_packedsplitparts1of"},(0,a.kt)("inlineCode",{parentName:"a"},"_packedSplitParts1Of"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/dev/api/contracts/jbsplitsstore/properties/-_packedsplitparts2of"},(0,a.kt)("inlineCode",{parentName:"a"},"_packedSplitParts2Of"))))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Return the array of splits."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"return _splits;\n"))))),(0,a.kt)(l.Z,{value:"Code",label:"Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/**\n  @notice \n  Unpack splits' packed stored values into easy-to-work-with split structs.\n\n  @param _projectId The ID of the project to which the split belongs.\n  @param _domain The identifier within which the returned splits should be considered active.\n  @param _group The identifying group of the splits.\n\n  @return splits The split structs.\n*/\nfunction _getStructsFor(\n  uint256 _projectId,\n  uint256 _domain,\n  uint256 _group\n) private view returns (JBSplit[] memory) {\n  // Get a reference to the number of splits that need to be added to the returned array.\n  uint256 _splitCount = _splitCountOf[_projectId][_domain][_group];\n\n  // Initialize an array to be returned that has the set length.\n  JBSplit[] memory _splits = new JBSplit[](_splitCount);\n\n  // Loop through each split and unpack the values into structs.\n  for (uint256 _i = 0; _i < _splitCount; _i++) {\n    // Get a reference to the fist packed data.\n    uint256 _packedSplitPart1 = _packedSplitParts1Of[_projectId][_domain][_group][_i];\n\n    // Populate the split struct.\n    JBSplit memory _split;\n\n    // prefer claimed in bit 0.\n    _split.preferClaimed = _packedSplitPart1 & 1 == 1;\n    // prefer add to balance in bit 1.\n    _split.preferAddToBalance = (_packedSplitPart1 >> 1) & 1 == 1;\n    // percent in bits 2-33.\n    _split.percent = uint256(uint32(_packedSplitPart1 >> 2));\n    // projectId in bits 32-89.\n    _split.projectId = uint256(uint56(_packedSplitPart1 >> 34));\n    // beneficiary in bits 90-249.\n    _split.beneficiary = payable(address(uint160(_packedSplitPart1 >> 90)));\n\n    // Get a reference to the second packed data.\n    uint256 _packedSplitPart2 = _packedSplitParts2Of[_projectId][_domain][_group][_i];\n\n    // If there's anything in it, unpack.\n    if (_packedSplitPart2 > 0) {\n      // Locked until in bits 0-47.\n      _split.lockedUntil = uint256(uint48(_packedSplitPart2));\n      // Locked until in bits 48-207.\n      _split.allocator = IJBSplitAllocator(address(uint160(_packedSplitPart2 >> 48)));\n    }\n\n    // Add the split to the value being returned.\n    _splits[_i] = _split;\n  }\n\n  return _splits;\n}\n"))),(0,a.kt)(l.Z,{value:"Bug bounty",label:"Bug bounty",mdxType:"TabItem"},(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Category"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Reward"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Optimization")),(0,a.kt)("td",{parentName:"tr",align:null},"Help make this operation more efficient."),(0,a.kt)("td",{parentName:"tr",align:null},"0.5ETH")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Low severity")),(0,a.kt)("td",{parentName:"tr",align:null},"Identify a vulnerability in this operation that could lead to an inconvenience for a user of the protocol or for a protocol developer."),(0,a.kt)("td",{parentName:"tr",align:null},"1ETH")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"High severity")),(0,a.kt)("td",{parentName:"tr",align:null},"Identify a vulnerability in this operation that could lead to data corruption or loss of funds."),(0,a.kt)("td",{parentName:"tr",align:null},"5+ETH")))))))}m.isMDXComponent=!0}}]);