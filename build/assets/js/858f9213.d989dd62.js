"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[88872],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=o.createContext({}),s=function(e){var t=o.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},d=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(r),m=n,f=u["".concat(p,".").concat(m)]||u[m]||l[m]||a;return r?o.createElement(f,c(c({ref:t},d),{},{components:r})):o.createElement(f,c({ref:t},d))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,c=new Array(a);c[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var s=2;s<a;s++)c[s]=r[s];return o.createElement.apply(null,c)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},83420:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=r(87462),n=(r(67294),r(3905));const a={},c="ModStore",i={unversionedId:"dev/protocol-v1/ticketbooth/modstore",id:"dev/protocol-v1/ticketbooth/modstore",title:"ModStore",description:"Constructor",source:"@site/docs/dev/protocol-v1/ticketbooth/modstore.md",sourceDirName:"dev/protocol-v1/ticketbooth",slug:"/dev/protocol-v1/ticketbooth/modstore",permalink:"/dev/protocol-v1/ticketbooth/modstore",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/protocol-v1/ticketbooth/modstore.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"Governance",permalink:"/dev/protocol-v1/ticketbooth/governance"},next:{title:"OperatorStore",permalink:"/dev/protocol-v1/ticketbooth/operatorstore"}},p={},s=[{value:"Constructor",id:"constructor",level:3},{value:"Read",id:"read",level:3},{value:"Write",id:"write",level:3}],d={toc:s};function l(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"modstore"},"ModStore"),(0,n.kt)("h3",{id:"constructor"},"Constructor"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"/** \n  @param _projects The contract storing project information\n  @param _operatorStore A contract storing operator assignments.\n  @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in.\n*/\nconstructor(\n    IProjects _projects,\n    IOperatorStore _operatorStore,\n    ITerminalDirectory _terminalDirectory\n) Operatable(_operatorStore) TerminalUtility(_terminalDirectory)\n")),(0,n.kt)("h3",{id:"read"},"Read"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n  @notice \n  Get all payout mods for the specified project ID.\n\n  @param _projectId The ID of the project to get mods for.\n  @param _configuration The configuration to get mods for.\n\n  @return An array of all mods for the project.\n */\nfunction payoutModsOf(uint256 _projectId, uint256 _configuration)\n    external\n    view\n    override\n    returns (PayoutMod[] memory)\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n  @notice \n  Get all ticket mods for the specified project ID.\n\n  @param _projectId The ID of the project to get mods for.\n  @param _configuration The configuration to get mods for.\n\n  @return An array of all mods for the project.\n */\nfunction ticketModsOf(uint256 _projectId, uint256 _configuration)\n    external\n    view\n    override\n    returns (TicketMod[] memory)\n")),(0,n.kt)("h3",{id:"write"},"Write"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"/** \n  @notice \n  Adds a mod to the payout mods list.\n\n  @dev\n  Only the owner or operator of a project can make this call, or the current terminal of the project.\n\n  @param _projectId The project to add a mod to.\n  @param _configuration The configuration to set the mods to be active during.\n  @param _mods The payout mods to set.\n*/\nfunction setPayoutMods(\n    uint256 _projectId,\n    uint256 _configuration,\n    PayoutMod[] memory _mods\n)\n    external\n    override\n    requirePermissionAcceptingAlternateAddress(\n        projects.ownerOf(_projectId),\n        _projectId,\n        Operations.SetPayoutMods,\n        address(terminalDirectory.terminalOf(_projectId))\n    )\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"/** \n  @notice \n  Adds a mod to the ticket mods list.\n\n  @dev\n  Only the owner or operator of a project can make this call, or the current terminal of the project.\n\n  @param _projectId The project to add a mod to.\n  @param _configuration The configuration to set the mods to be active during.\n  @param _mods The ticket mods to set.\n*/\nfunction setTicketMods(\n    uint256 _projectId,\n    uint256 _configuration,\n    TicketMod[] memory _mods\n)\n    external\n    override\n    requirePermissionAcceptingAlternateAddress(\n        projects.ownerOf(_projectId),\n        _projectId,\n        Operations.SetTicketMods,\n        address(terminalDirectory.terminalOf(_projectId))\n    )\n")))}l.isMDXComponent=!0}}]);