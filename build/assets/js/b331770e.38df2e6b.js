"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[38570],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},l=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=s(r),f=i,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||a;return r?n.createElement(m,c(c({ref:t},l),{},{components:r})):n.createElement(m,c({ref:t},l))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,c=new Array(a);c[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,c[1]=o;for(var s=2;s<a;s++)c[s]=r[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},34917:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var n=r(87462),i=(r(67294),r(3905));const a={},c="feedFor",o={unversionedId:"dev/api/contracts/jbprices/properties/feedfor",id:"dev/api/contracts/jbprices/properties/feedfor",title:"feedFor",description:"Contract: JBPrices",source:"@site/docs/dev/api/contracts/jbprices/properties/feedfor.md",sourceDirName:"dev/api/contracts/jbprices/properties",slug:"/dev/api/contracts/jbprices/properties/feedfor",permalink:"/dev/api/contracts/jbprices/properties/feedfor",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/api/contracts/jbprices/properties/feedfor.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"AddFeed",permalink:"/dev/api/contracts/jbprices/events/addfeed"},next:{title:"priceFor",permalink:"/dev/api/contracts/jbprices/read/pricefor"}},p={},s=[{value:"Definition",id:"definition",level:4}],l={toc:s};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"feedfor"},"feedFor"),(0,i.kt)("p",null,"Contract: ",(0,i.kt)("a",{parentName:"p",href:"/dev/api/contracts/jbprices/"},(0,i.kt)("inlineCode",{parentName:"a"},"JBPrices"))),(0,i.kt)("p",null,"Interface: ",(0,i.kt)("a",{parentName:"p",href:"/dev/api/interfaces/ijbprices"},(0,i.kt)("inlineCode",{parentName:"a"},"IJBPrices"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"The available price feeds.")),(0,i.kt)("h4",{id:"definition"},"Definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/** \n  @notice \n  The available price feeds.\n\n  @dev\n  The feed returns the number of `_currency` units that can be converted to 1 `_base` unit.\n\n  _currency The currency units the feed's resulting price is in terms of.\n  _base The base currency unit being priced by the feed.\n*/\nmapping(uint256 => mapping(uint256 => IJBPriceFeed)) public override feedFor;\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Arguments:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"uint256")," is the currency units the feed's resulting price is in terms of."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"uint256")," is the base currency unit being priced by the feed."))),(0,i.kt)("li",{parentName:"ul"},"The resulting view function can be accessed externally by anyone."),(0,i.kt)("li",{parentName:"ul"},"The resulting function overrides a function definition from the ",(0,i.kt)("a",{parentName:"li",href:"/dev/api/interfaces/ijbprices"},(0,i.kt)("inlineCode",{parentName:"a"},"IJBPrices"))," interface.")))}u.isMDXComponent=!0}}]);