"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[96046],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=l(t),f=o,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||i;return t?r.createElement(m,a(a({ref:n},s),{},{components:t})):r.createElement(m,a({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d.mdxType="string"==typeof e?e:o,a[1]=d;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},54630:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const i={},a="IJBTokenStore",d={unversionedId:"dev/api/interfaces/ijbtokenstore",id:"dev/api/interfaces/ijbtokenstore",title:"IJBTokenStore",description:"Code",source:"@site/docs/dev/api/interfaces/ijbtokenstore.md",sourceDirName:"dev/api/interfaces",slug:"/dev/api/interfaces/ijbtokenstore",permalink:"/dev/api/interfaces/ijbtokenstore",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/api/interfaces/ijbtokenstore.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"IJBToken",permalink:"/dev/api/interfaces/ijbtoken"},next:{title:"IJBTokenUriResolver",permalink:"/dev/api/interfaces/ijbtokenuriresolver"}},c={},l=[{value:"Code",id:"code",level:4},{value:"Definition",id:"definition",level:4}],s={toc:l};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ijbtokenstore"},"IJBTokenStore"),(0,o.kt)("h4",{id:"code"},"Code"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBTokenStore.sol"},"https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBTokenStore.sol")),(0,o.kt)("h4",{id:"definition"},"Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IJBTokenStore {\n  event Issue(\n    uint256 indexed projectId,\n    IJBToken indexed token,\n    string name,\n    string symbol,\n    address caller\n  );\n\n  event Mint(\n    address indexed holder,\n    uint256 indexed projectId,\n    uint256 amount,\n    bool tokensWereClaimed,\n    bool preferClaimedTokens,\n    address caller\n  );\n\n  event Burn(\n    address indexed holder,\n    uint256 indexed projectId,\n    uint256 amount,\n    uint256 initialUnclaimedBalance,\n    uint256 initialClaimedBalance,\n    bool preferClaimedTokens,\n    address caller\n  );\n\n  event Claim(\n    address indexed holder,\n    uint256 indexed projectId,\n    uint256 initialUnclaimedBalance,\n    uint256 amount,\n    address caller\n  );\n\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\n\n  event Change(\n    uint256 indexed projectId,\n    IJBToken indexed newToken,\n    IJBToken indexed oldToken,\n    address owner,\n    address caller\n  );\n\n  event Transfer(\n    address indexed holder,\n    uint256 indexed projectId,\n    address indexed recipient,\n    uint256 amount,\n    address caller\n  );\n\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\n\n  function projectOf(IJBToken _token) external view returns (uint256);\n\n  function projects() external view returns (IJBProjects);\n\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\n\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\n\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\n\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\n\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\n\n  function issueFor(\n    uint256 _projectId,\n    string calldata _name,\n    string calldata _symbol\n  ) external returns (IJBToken token);\n\n  function changeFor(\n    uint256 _projectId,\n    IJBToken _token,\n    address _newOwner\n  ) external returns (IJBToken oldToken);\n\n  function burnFrom(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount,\n    bool _preferClaimedTokens\n  ) external;\n\n  function mintFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount,\n    bool _preferClaimedTokens\n  ) external;\n\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\n\n  function claimFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount\n  ) external;\n\n  function transferFrom(\n    address _holder,\n    uint256 _projectId,\n    address _recipient,\n    uint256 _amount\n  ) external;\n}\n")))}u.isMDXComponent=!0}}]);