"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[29253],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,k=u["".concat(o,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(87462),r=n(67294),i=n(86010),l=n(72389),p=n(67392),o=n(7094),s=n(12466);const c="tabList__CuJ",d="tabItem_LNqP";function u(e){var t,n;const{lazy:l,block:u,defaultValue:m,values:k,groupId:_,className:h}=e,N=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=k?k:N.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,p.l)(f,((e,t)=>e.value===t.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===m?m:null!=(t=null!=m?m:null==(n=N.find((e=>e.props.default)))?void 0:n.props.value)?t:N[0].props.value;if(null!==g&&!f.some((e=>e.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:v,setTabGroupChoices:y}=(0,o.U)(),[S,I]=(0,r.useState)(g),j=[],{blockElementScrollPositionUntilNextRender:T}=(0,s.o5)();if(null!=_){const e=v[_];null!=e&&e!==S&&f.some((t=>t.value===e))&&I(e)}const w=e=>{const t=e.currentTarget,n=j.indexOf(t),a=f[n].value;a!==S&&(T(t),I(a),null!=_&&y(_,String(a)))},C=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=j.indexOf(e.currentTarget)+1;n=null!=(a=j[t])?a:j[0];break}case"ArrowLeft":{var r;const t=j.indexOf(e.currentTarget)-1;n=null!=(r=j[t])?r:j[j.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},h)},f.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:e=>j.push(e),onKeyDown:C,onFocus:w,onClick:w},l,{className:(0,i.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":S===t})}),null!=n?n:t)}))),l?(0,r.cloneElement)(N.filter((e=>e.props.value===S))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},N.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==S})))))}function m(e){const t=(0,l.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},44510:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>p,metadata:()=>s,toc:()=>d});var a=n(87462),r=(n(67294),n(3905)),i=n(65488),l=n(85162);const p={},o="_set",s={unversionedId:"dev/api/contracts/jbsplitsstore/write/-_set",id:"dev/api/contracts/jbsplitsstore/write/-_set",title:"_set",description:"Contract: JBSplitsStore\u200b\u200c",source:"@site/docs/dev/api/contracts/jbsplitsstore/write/-_set.md",sourceDirName:"dev/api/contracts/jbsplitsstore/write",slug:"/dev/api/contracts/jbsplitsstore/write/-_set",permalink:"/zh/dev/api/contracts/jbsplitsstore/write/-_set",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/api/contracts/jbsplitsstore/write/-_set.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"splitsOf",permalink:"/zh/dev/api/contracts/jbsplitsstore/read/splitsof"},next:{title:"set",permalink:"/zh/dev/api/contracts/jbsplitsstore/write/set"}},c={},d=[{value:"Definition",id:"definition",level:4},{value:"Body",id:"body",level:4}],u={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"_set"},"_set"),(0,r.kt)("p",null,"Contract: ",(0,r.kt)("a",{parentName:"p",href:"/zh/dev/api/contracts/jbsplitsstore/"},(0,r.kt)("inlineCode",{parentName:"a"},"JBSplitsStore")),"\u200b\u200c"),(0,r.kt)("p",null,"Interface: ",(0,r.kt)("a",{parentName:"p",href:"/zh/dev/api/interfaces/ijbsplitsstore"},(0,r.kt)("inlineCode",{parentName:"a"},"IJBSplitsStore"))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Step by step",label:"Step by step",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Sets a project's splits.")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"The new splits must include any currently set splits that are locked.")),(0,r.kt)("h4",{id:"definition"},"Definition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"function _set(\n  uint256 _projectId,\n  uint256 _domain,\n  uint256 _group,\n  JBSplit[] memory _splits\n) internal { ... }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Arguments:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_projectId")," is the ID of the project for which splits are being added."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_domain")," is an identifier within which the splits should be considered active."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_group")," is an identifier between of splits being set. All splits within this ",(0,r.kt)("inlineCode",{parentName:"li"},"_group")," must add up to within 100%."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_splits")," are the ",(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/data-structures/jbsplit"},(0,r.kt)("inlineCode",{parentName:"a"},"JBSplit")),"s to set."))),(0,r.kt)("li",{parentName:"ul"},"The resulting function is internal to this contract and its inheriters. "),(0,r.kt)("li",{parentName:"ul"},"The function doesn't return anything.")),(0,r.kt)("h4",{id:"body"},"Body"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Get a reference to the current splits set for the specified project's domain, within the specified group."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Get a reference to the project's current splits.\nJBSplit[] memory _currentSplits = _getStructsFor(_projectId, _domain, _group);\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Internal references:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbsplitsstore/read/-_getstructsfor"},(0,r.kt)("inlineCode",{parentName:"a"},"_getStructsFor"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Loop through each current split to make sure the new splits being set respect any current split bound by a lock constraint."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Check to see if all locked splits are included.\nfor (uint256 _i = 0; _i < _currentSplits.length; _i++) { ... }\n")),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If the current split isn't locked, move on to the next one."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// If not locked, continue.\nif (block.timestamp >= _currentSplits[_i].lockedUntil) continue;\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If the current split is locked, check to make sure the new splits includes it. The only property of a locked split that can have changed is its locked deadline, which can be extended."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Keep a reference to whether or not the locked split being iterated on is included.\nbool _includesLocked = false;\n\nfor (uint256 _j = 0; _j < _splits.length; _j++) {\n  // Check for sameness.\n  if (\n    _splits[_j].percent == _currentSplits[_i].percent &&\n    _splits[_j].beneficiary == _currentSplits[_i].beneficiary &&\n    _splits[_j].allocator == _currentSplits[_i].allocator &&\n    _splits[_j].projectId == _currentSplits[_i].projectId &&\n    // Allow lock extention.\n    _splits[_j].lockedUntil >= _currentSplits[_i].lockedUntil\n  ) _includesLocked = true;\n}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check to make sure the provided splits includes any locked current splits."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"if (!_includesLocked) revert PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\n"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Store a local variable to keep track of all the percents from the splits."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Add up all the percents to make sure they cumulative are under 100%.\nuint256 _percentTotal = 0;\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Loop through each newly provided splits to validate the provided properties."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"for (uint256 _i = 0; _i < _splits.length; _i++) { ... }\n")),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check that the percent for the current split is not zero."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// The percent should be greater than 0.\nif (_splits[_i].percent == 0) revert INVALID_SPLIT_PERCENT();\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check that the ID of the project for the current split is within the max value that can be packed."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// ProjectId should be within a uint56\nif (_splits[_i].projectId > type(uint56).max) revert INVALID_PROJECT_ID();\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Increment the total percents that have been accumulated so far."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Add to the total percents.\n_percentTotal = _percentTotal + _splits[_i].percent;\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Make sure the accumulated percents are under 100%."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Validate the total does not exceed the expected value.\nif (_percentTotal > JBConstants.SPLITS_TOTAL_PERCENT) revert INVALID_TOTAL_PERCENT();\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Library references:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/libraries/jbconstants"},(0,r.kt)("inlineCode",{parentName:"a"},"JBConstants")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".SPLITS_TOTAL_PERCENT")))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Pack common split properties into a storage slot."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Pack the first split part properties.\nuint256 _packedSplitParts1;\n\n// prefer claimed in bit 0.\nif (_splits[_i].preferClaimed) _packedSplitParts1 = 1;\n// prefer add to balance in bit 1.\nif (_splits[_i].preferAddToBalance) _packedSplitParts1 |= 1 << 1;\n// percent in bits 2-33.\n_packedSplitParts1 |= _splits[_i].percent << 2;\n// projectId in bits 32-89.\n_packedSplitParts1 |= _splits[_i].projectId << 34;\n// beneficiary in bits 90-249.\n_packedSplitParts1 |= uint256(uint160(address(_splits[_i].beneficiary))) << 90;\n\n// Store the first split part.\n_packedSplitParts1Of[_projectId][_domain][_group][_i] = _packedSplitParts1;\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Internal references:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbsplitsstore/properties/-_packedsplitparts1of"},(0,r.kt)("inlineCode",{parentName:"a"},"_packedSplitParts1Of"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Pack less common split properties into another storage slot if needed. Otherwise, delete any content in storage at the index being iterated on."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// If there's data to store in the second packed split part, pack and store.\nif (_splits[_i].lockedUntil > 0 || _splits[_i].allocator != IJBSplitAllocator(address(0))) {\n  // Locked until should be within a uint48\n  if (_splits[_i].lockedUntil > type(uint48).max) revert INVALID_LOCKED_UNTIL();\n\n   // lockedUntil in bits 0-47.\n   uint256 _packedSplitParts2 = uint48(_splits[_i].lockedUntil);\n   // allocator in bits 48-207.\n   _packedSplitParts2 |= uint256(uint160(address(_splits[_i].allocator))) << 48;\n\n   // Store the second split part.\n  _packedSplitParts2Of[_projectId][_domain][_group][_i] = _packedSplitParts2;\n\n  // Otherwise if there's a value stored in the indexed position, delete it.\n} else if (_packedSplitParts2Of[_projectId][_domain][_group][_i] > 0)\n  delete _packedSplitParts2Of[_projectId][_domain][_group][_i];\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Internal references:")))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbsplitsstore/properties/-_packedsplitparts2of"},(0,r.kt)("inlineCode",{parentName:"a"},"_packedSplitParts2Of")))),(0,r.kt)("ol",{parentName:"li",start:7},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"For each added split, emit a ",(0,r.kt)("inlineCode",{parentName:"p"},"SetSplit")," event with all relevant parameters."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"emit SetSplit(_projectId, _domain, _group, _splits[_i], msg.sender);\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Event references:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbsplitsstore/events/setsplit"},(0,r.kt)("inlineCode",{parentName:"a"},"SetSplit"))))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Store the new array length."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Set the new length of the splits.\n_splitCountOf[_projectId][_domain][_group] = _splits.length;\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Internal references:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbsplitsstore/properties/-_splitcountof"},(0,r.kt)("inlineCode",{parentName:"a"},"_splitCountOf"))))))),(0,r.kt)(l.Z,{value:"Code",label:"Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/** \n  @notice \n  Sets a project's splits.\n\n  @dev\n  The new splits must include any currently set splits that are locked.\n\n  @param _projectId The ID of the project for which splits are being added.\n  @param _domain An identifier within which the splits should be considered active.\n  @param _group An identifier between of splits being set. All splits within this _group must add up to within 100%.\n  @param _splits The splits to set.\n*/\nfunction _set(\n  uint256 _projectId,\n  uint256 _domain,\n  uint256 _group,\n  JBSplit[] memory _splits\n) internal {\n  // Get a reference to the project's current splits.\n  JBSplit[] memory _currentSplits = _getStructsFor(_projectId, _domain, _group);\n\n  // Check to see if all locked splits are included.\n  for (uint256 _i = 0; _i < _currentSplits.length; _i++) {\n    // If not locked, continue.\n    if (block.timestamp >= _currentSplits[_i].lockedUntil) continue;\n\n    // Keep a reference to whether or not the locked split being iterated on is included.\n    bool _includesLocked = false;\n\n    for (uint256 _j = 0; _j < _splits.length; _j++) {\n      // Check for sameness.\n      if (\n        _splits[_j].percent == _currentSplits[_i].percent &&\n        _splits[_j].beneficiary == _currentSplits[_i].beneficiary &&\n        _splits[_j].allocator == _currentSplits[_i].allocator &&\n        _splits[_j].projectId == _currentSplits[_i].projectId &&\n        // Allow lock extention.\n        _splits[_j].lockedUntil >= _currentSplits[_i].lockedUntil\n      ) _includesLocked = true;\n    }\n\n    if (!_includesLocked) revert PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\n  }\n\n  // Add up all the percents to make sure they cumulative are under 100%.\n  uint256 _percentTotal = 0;\n\n  for (uint256 _i = 0; _i < _splits.length; _i++) {\n    // The percent should be greater than 0.\n    if (_splits[_i].percent == 0) revert INVALID_SPLIT_PERCENT();\n\n    // ProjectId should be within a uint56\n    if (_splits[_i].projectId > type(uint56).max) revert INVALID_PROJECT_ID();\n\n    // Add to the total percents.\n    _percentTotal = _percentTotal + _splits[_i].percent;\n\n    // Validate the total does not exceed the expected value.\n    if (_percentTotal > JBConstants.SPLITS_TOTAL_PERCENT) revert INVALID_TOTAL_PERCENT();\n\n    // Pack the first split part properties.\n    uint256 _packedSplitParts1;\n    \n    // prefer claimed in bit 0.\n    if (_splits[_i].preferClaimed) _packedSplitParts1 = 1;\n    // prefer add to balance in bit 1.\n    if (_splits[_i].preferAddToBalance) _packedSplitParts1 |= 1 << 1;\n    // percent in bits 2-33.\n    _packedSplitParts1 |= _splits[_i].percent << 2;\n    // projectId in bits 32-89.\n    _packedSplitParts1 |= _splits[_i].projectId << 34;\n    // beneficiary in bits 90-249.\n    _packedSplitParts1 |= uint256(uint160(address(_splits[_i].beneficiary))) << 90;\n\n    // Store the first split part.\n    _packedSplitParts1Of[_projectId][_domain][_group][_i] = _packedSplitParts1;\n\n    // If there's data to store in the second packed split part, pack and store.\n    if (_splits[_i].lockedUntil > 0 || _splits[_i].allocator != IJBSplitAllocator(address(0))) {\n      // Locked until should be within a uint48\n      if (_splits[_i].lockedUntil > type(uint48).max) revert INVALID_LOCKED_UNTIL();\n\n      // lockedUntil in bits 0-47.\n      uint256 _packedSplitParts2 = uint48(_splits[_i].lockedUntil);\n      // allocator in bits 48-207.\n      _packedSplitParts2 |= uint256(uint160(address(_splits[_i].allocator))) << 48;\n\n      // Store the second split part.\n      _packedSplitParts2Of[_projectId][_domain][_group][_i] = _packedSplitParts2;\n\n      // Otherwise if there's a value stored in the indexed position, delete it.\n    } else if (_packedSplitParts2Of[_projectId][_domain][_group][_i] > 0)\n      delete _packedSplitParts2Of[_projectId][_domain][_group][_i];\n\n    emit SetSplit(_projectId, _domain, _group, _splits[_i], msg.sender);\n  }\n\n  // Set the new length of the splits.\n  _splitCountOf[_projectId][_domain][_group] = _splits.length;\n}\n"))),(0,r.kt)(l.Z,{value:"Errors",label:"Errors",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"String"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED"))),(0,r.kt)("td",{parentName:"tr",align:null},"Thrown if the splits that are being set override some splits that are locked.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"INVALID_PROJECT_ID"))),(0,r.kt)("td",{parentName:"tr",align:null},"Thrown if the split has a project ID that wont fit in its packed storage slot.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"INVALID_SPLIT_PERCENT"))),(0,r.kt)("td",{parentName:"tr",align:null},"Thrown if the split has specified a percent of 0.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"INVALID_TOTAL_PERCENT"))),(0,r.kt)("td",{parentName:"tr",align:null},"Thrown if the split percents add up more than 100%.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"INVALID_LOCKED_UNTIL"))),(0,r.kt)("td",{parentName:"tr",align:null},"Thrown if the split has a lockedUntil that wont fit in its packed storage slot."))))),(0,r.kt)(l.Z,{value:"Events",label:"Events",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/zh/dev/api/contracts/jbsplitsstore/events/setsplit"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"SetSplit")))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"uint256 indexed projectId")),(0,r.kt)("li",null,(0,r.kt)("code",null,"uint256 indexed domain")),(0,r.kt)("li",null,(0,r.kt)("code",null,"uint256 indexed group")),(0,r.kt)("li",null,(0,r.kt)("code",null,(0,r.kt)("a",{parentName:"td",href:"/zh/dev/api/data-structures/jbsplit"},"JBSplit")," split")),(0,r.kt)("li",null,(0,r.kt)("code",null,"address caller")))))))),(0,r.kt)(l.Z,{value:"Bug bounty",label:"Bug bounty",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Reward"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Optimization")),(0,r.kt)("td",{parentName:"tr",align:null},"Help make this operation more efficient."),(0,r.kt)("td",{parentName:"tr",align:null},"0.5ETH")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Low severity")),(0,r.kt)("td",{parentName:"tr",align:null},"Identify a vulnerability in this operation that could lead to an inconvenience for a user of the protocol or for a protocol developer."),(0,r.kt)("td",{parentName:"tr",align:null},"1ETH")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"High severity")),(0,r.kt)("td",{parentName:"tr",align:null},"Identify a vulnerability in this operation that could lead to data corruption or loss of funds."),(0,r.kt)("td",{parentName:"tr",align:null},"5+ETH")))))))}m.isMDXComponent=!0}}]);