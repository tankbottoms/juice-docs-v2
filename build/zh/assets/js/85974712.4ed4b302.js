"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[74323],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,k=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(67294),a=n(86010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(87462),a=n(67294),o=n(86010),l=n(72389),i=n(67392),p=n(7094),s=n(12466);const c="tabList__CuJ",u="tabItem_LNqP";function d(e){var t,n;const{lazy:l,block:d,defaultValue:m,values:k,groupId:f,className:b}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=k?k:h.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),v=(0,i.l)(N,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===m?m:null!=(t=null!=m?m:null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)?t:h[0].props.value;if(null!==g&&!N.some((e=>e.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+N.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:_}=(0,p.U)(),[T,j]=(0,a.useState)(g),C=[],{blockElementScrollPositionUntilNextRender:O}=(0,s.o5)();if(null!=f){const e=y[f];null!=e&&e!==T&&N.some((t=>t.value===e))&&j(e)}const E=e=>{const t=e.currentTarget,n=C.indexOf(t),r=N[n].value;r!==T&&(O(t),j(r),null!=f&&_(f,String(r)))},I=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var r;const t=C.indexOf(e.currentTarget)+1;n=null!=(r=C[t])?r:C[0];break}case"ArrowLeft":{var a;const t=C.indexOf(e.currentTarget)-1;n=null!=(a=C[t])?a:C[C.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},b)},N.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>C.push(e),onKeyDown:I,onFocus:E,onClick:E},l,{className:(0,o.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),l?(0,a.cloneElement)(h.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function m(e){const t=(0,l.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},70389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(87462),a=(n(67294),n(3905)),o=n(65488),l=n(85162);const i={},p="burnTokensOf",s={unversionedId:"dev/api/contracts/or-controllers/jbcontroller/write/burntokensof",id:"dev/api/contracts/or-controllers/jbcontroller/write/burntokensof",title:"burnTokensOf",description:"Contract: JBController\u200b\u200c",source:"@site/docs/dev/api/contracts/or-controllers/jbcontroller/write/burntokensof.md",sourceDirName:"dev/api/contracts/or-controllers/jbcontroller/write",slug:"/dev/api/contracts/or-controllers/jbcontroller/write/burntokensof",permalink:"/zh/dev/api/contracts/or-controllers/jbcontroller/write/burntokensof",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/api/contracts/or-controllers/jbcontroller/write/burntokensof.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"_distributeToReservedTokenSplitsOf",permalink:"/zh/dev/api/contracts/or-controllers/jbcontroller/write/-_distributetoreservedtokensplitsof"},next:{title:"changeTokenOf",permalink:"/zh/dev/api/contracts/or-controllers/jbcontroller/write/changetokenof"}},c={},u=[{value:"Definition",id:"definition",level:4},{value:"Body",id:"body",level:4}],d={toc:u};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"burntokensof"},"burnTokensOf"),(0,a.kt)("p",null,"Contract: ",(0,a.kt)("a",{parentName:"p",href:"/zh/dev/api/contracts/or-controllers/jbcontroller/"},(0,a.kt)("inlineCode",{parentName:"a"},"JBController")),"\u200b\u200c"),(0,a.kt)("p",null,"Interface: ",(0,a.kt)("a",{parentName:"p",href:"/zh/dev/api/interfaces/ijbcontroller"},(0,a.kt)("inlineCode",{parentName:"a"},"IJBController"))),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"Step by step",label:"Step by step",mdxType:"TabItem"},(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Burns a token holder's supply.")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Only a token's holder, a designated operator, or a project's terminal can burn it.")),(0,a.kt)("h4",{id:"definition"},"Definition"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"function burnTokensOf(\n  address _holder,\n  uint256 _projectId,\n  uint256 _tokenCount,\n  string calldata _memo,\n  bool _preferClaimedTokens\n)\n  external\n  virtual\n  override\n  nonReentrant\n  requirePermissionAllowingOverride(\n    _holder,\n    _projectId,\n    JBOperations.BURN,\n    directory.isTerminalDelegateOf(_projectId, msg.sender)\n  ) { ... }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Arguments:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_holder")," is the account that is having its tokens burned."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_projectId")," is the ID of the project to which the tokens being burned belong."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_tokenCount")," is the number of tokens to burn."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_memo")," is a memo to pass along to the emitted event."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_preferClaimedTokens")," is flag indicating whether a project's attached token contract should be burned first if they have been issued."))),(0,a.kt)("li",{parentName:"ul"},"Through the ",(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/or-abstract/jboperatable/modifiers/requirepermissionallowingoverride"},(0,a.kt)("inlineCode",{parentName:"a"},"requirePermissionAllowingOverride"))," modifier, the function is only accessible by the project's owner, from an operator that has been given the ",(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/libraries/jboperations"},(0,a.kt)("inlineCode",{parentName:"a"},"JBOperations.BURN"))," permission by the project owner for the provided ",(0,a.kt)("inlineCode",{parentName:"li"},"_projectId"),", or from one of the project's terminal's delegates."),(0,a.kt)("li",{parentName:"ul"},"The function can be overriden by inheriting contracts."),(0,a.kt)("li",{parentName:"ul"},"The function overrides a function definition from the ",(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/interfaces/ijbcontroller"},(0,a.kt)("inlineCode",{parentName:"a"},"IJBController"))," interface."),(0,a.kt)("li",{parentName:"ul"},"The function doesn't return anything.")),(0,a.kt)("h4",{id:"body"},"Body"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Make sure there is a specified number of tokens to burn."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"// There should be tokens to burn\nif (_tokenCount == 0) revert NO_BURNABLE_TOKENS();\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Get a reference to the current funding cycle for the project."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"// Get a reference to the project's current funding cycle.\nJBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"Internal references:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/or-controllers/jbcontroller/properties/fundingcyclestore"},(0,a.kt)("inlineCode",{parentName:"a"},"fundingCycleStore")))),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"External references:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbfundingcyclestore/read/currentof"},(0,a.kt)("inlineCode",{parentName:"a"},"currentOf"))))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Make sure the current funding cycle for the project hasn't paused burning if the request is not coming from one of the project's terminals. If the request is coming from a terminal, allow burning regardless of the pause state because it could be a sub-routine of another operation such as redemption."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"// If the message sender is not a terminal, the current funding cycle must not be paused.\nif (\n  _fundingCycle.burnPaused() &&\n  !directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender))\n) revert BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE();\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"Internal references:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/or-controllers/jbcontroller/properties/directory"},(0,a.kt)("inlineCode",{parentName:"a"},"directory")))),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"Library references:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/libraries/jbfundingcyclemetadataresolver"},(0,a.kt)("inlineCode",{parentName:"a"},"JBFundingCycleMetadataResolver")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".burnPaused(...)"))))),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"External references:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbdirectory/read/isterminalof"},(0,a.kt)("inlineCode",{parentName:"a"},"isTerminalOf"))))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Update the token tracker so that the correct amount of reserved tokens are still mintable after the burn."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"// Update the token tracker so that reserved tokens will still be correctly mintable.\n_processedTokenTrackerOf[_projectId] =\n  _processedTokenTrackerOf[_projectId] -\n  int256(_tokenCount);\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"Internal references:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/or-controllers/jbcontroller/properties/-_processedtokentrackerof"},(0,a.kt)("inlineCode",{parentName:"a"},"_processedTokenTrackerOf"))))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Burn the tokens."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"// Burn the tokens.\ntokenStore.burnFrom(_holder, _projectId, _tokenCount, _preferClaimedTokens);\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"Internal references:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/or-controllers/jbcontroller/properties/tokenstore"},(0,a.kt)("inlineCode",{parentName:"a"},"tokenStore")))),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"External references:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbtokenstore/write/burnfrom"},(0,a.kt)("inlineCode",{parentName:"a"},"burnFrom"))))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Emit a ",(0,a.kt)("inlineCode",{parentName:"p"},"BurnTokens")," event with the relevant parameters."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"emit BurnTokens(_holder, _projectId, _tokenCount, _memo, msg.sender);\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"Event references:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/or-controllers/jbcontroller/events/burntokens"},(0,a.kt)("inlineCode",{parentName:"a"},"BurnTokens"))))))),(0,a.kt)(l.Z,{value:"Code",label:"Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/**\n  @notice\n  Burns a token holder's supply.\n\n  @dev\n  Only a token's holder, a designated operator, or a project's terminal can burn it.\n\n  @param _holder The account that is having its tokens burned.\n  @param _projectId The ID of the project to which the tokens being burned belong.\n  @param _tokenCount The number of tokens to burn.\n  @param _memo A memo to pass along to the emitted event.\n  @param _preferClaimedTokens A flag indicating whether a project's attached token contract should be burned first if they have been issued.\n*/\nfunction burnTokensOf(\n  address _holder,\n  uint256 _projectId,\n  uint256 _tokenCount,\n  string calldata _memo,\n  bool _preferClaimedTokens\n)\n  external\n  virtual\n  override\n  requirePermissionAllowingOverride(\n    _holder,\n    _projectId,\n    JBOperations.BURN,\n    directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender))\n  )\n{\n  // There should be tokens to burn\n  if (_tokenCount == 0) revert NO_BURNABLE_TOKENS();\n\n  // Get a reference to the project's current funding cycle.\n  JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n  // If the message sender is not a terminal, the current funding cycle must not be paused.\n  if (\n    _fundingCycle.burnPaused() &&\n    !directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender))\n  ) revert BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE();\n\n  // Update the token tracker so that reserved tokens will still be correctly mintable.\n  _processedTokenTrackerOf[_projectId] =\n    _processedTokenTrackerOf[_projectId] -\n    int256(_tokenCount);\n\n  // Burn the tokens.\n  tokenStore.burnFrom(_holder, _projectId, _tokenCount, _preferClaimedTokens);\n\n  emit BurnTokens(_holder, _projectId, _tokenCount, _memo, msg.sender);\n}\n"))),(0,a.kt)(l.Z,{value:"Errors",label:"Errors",mdxType:"TabItem"},(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"String"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("inlineCode",{parentName:"strong"},"NO_BURNABLE_TOKENS"))),(0,a.kt)("td",{parentName:"tr",align:null},"Thrown if no tokens are being burned.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("inlineCode",{parentName:"strong"},"BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE"))),(0,a.kt)("td",{parentName:"tr",align:null},"Thrown if the request is not being made by a payment terminal, and the project's current funding cycle has paused burning."))))),(0,a.kt)(l.Z,{value:"Events",label:"Events",mdxType:"TabItem"},(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Data"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/zh/dev/api/contracts/or-controllers/jbcontroller/events/burntokens"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"BurnTokens")))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("code",null,"address indexed holder")),(0,a.kt)("li",null,(0,a.kt)("code",null,"uint256 indexed projectId")),(0,a.kt)("li",null,(0,a.kt)("code",null,"uint256 tokenCount")),(0,a.kt)("li",null,(0,a.kt)("code",null,"string memo")),(0,a.kt)("li",null,(0,a.kt)("code",null,"address caller")))))))),(0,a.kt)(l.Z,{value:"Bug bounty",label:"Bug bounty",mdxType:"TabItem"},(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Category"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Reward"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Optimization")),(0,a.kt)("td",{parentName:"tr",align:null},"Help make this operation more efficient."),(0,a.kt)("td",{parentName:"tr",align:null},"0.5ETH")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Low severity")),(0,a.kt)("td",{parentName:"tr",align:null},"Identify a vulnerability in this operation that could lead to an inconvenience for a user of the protocol or for a protocol developer."),(0,a.kt)("td",{parentName:"tr",align:null},"1ETH")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"High severity")),(0,a.kt)("td",{parentName:"tr",align:null},"Identify a vulnerability in this operation that could lead to data corruption or loss of funds."),(0,a.kt)("td",{parentName:"tr",align:null},"5+ETH")))))))}m.isMDXComponent=!0}}]);