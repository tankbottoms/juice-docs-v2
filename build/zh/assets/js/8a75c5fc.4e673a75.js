"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[95231],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>f});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var l=r.createContext({}),u=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},d=function(n){var e=u(n.components);return r.createElement(l.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,l=n.parentName,d=c(n,["components","mdxType","originalType","parentName"]),m=u(t),f=i,p=m["".concat(l,".").concat(f)]||m[f]||s[f]||o;return t?r.createElement(p,a(a({ref:e},d),{},{components:t})):r.createElement(p,a({ref:e},d))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,a=new Array(o);a[0]=m;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=n,c.mdxType="string"==typeof n?n:i,a[1]=c;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},16911:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=t(87462),i=(t(67294),t(3905));const o={},a="IJBController",c={unversionedId:"dev/api/interfaces/ijbcontroller",id:"dev/api/interfaces/ijbcontroller",title:"IJBController",description:"Code",source:"@site/docs/dev/api/interfaces/ijbcontroller.md",sourceDirName:"dev/api/interfaces",slug:"/dev/api/interfaces/ijbcontroller",permalink:"/zh/dev/api/interfaces/ijbcontroller",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/api/interfaces/ijbcontroller.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"IJBAllowanceTerminal",permalink:"/zh/dev/api/interfaces/ijballowanceterminal"},next:{title:"IJBControllerUtility",permalink:"/zh/dev/api/interfaces/ijbcontrollerutility"}},l={},u=[{value:"Code",id:"code",level:4},{value:"Definition",id:"definition",level:4}],d={toc:u};function s(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ijbcontroller"},"IJBController"),(0,i.kt)("h4",{id:"code"},"Code"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBController.sol"},"https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBController.sol")),(0,i.kt)("h4",{id:"definition"},"Definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"interface IJBController is IERC165 {\n  event LaunchProject(uint256 configuration, uint256 projectId, string memo, address caller);\n\n  event LaunchFundingCycles(uint256 configuration, uint256 projectId, string memo, address caller);\n\n  event ReconfigureFundingCycles(\n    uint256 configuration,\n    uint256 projectId,\n    string memo,\n    address caller\n  );\n\n  event SetFundAccessConstraints(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    JBFundAccessConstraints constraints,\n    address caller\n  );\n\n  event DistributeReservedTokens(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    address beneficiary,\n    uint256 tokenCount,\n    uint256 beneficiaryTokenCount,\n    string memo,\n    address caller\n  );\n\n  event DistributeToReservedTokenSplit(\n    uint256 indexed projectId,\n    uint256 indexed domain,\n    uint256 indexed group,\n    JBSplit split,\n    uint256 tokenCount,\n    address caller\n  );\n\n  event MintTokens(\n    address indexed beneficiary,\n    uint256 indexed projectId,\n    uint256 tokenCount,\n    uint256 beneficiaryTokenCount,\n    string memo,\n    uint256 reservedRate,\n    address caller\n  );\n\n  event BurnTokens(\n    address indexed holder,\n    uint256 indexed projectId,\n    uint256 tokenCount,\n    string memo,\n    address caller\n  );\n\n  event Migrate(uint256 indexed projectId, IJBMigratable to, address caller);\n\n  event PrepMigration(uint256 indexed projectId, address from, address caller);\n\n  function projects() external view returns (IJBProjects);\n\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\n\n  function tokenStore() external view returns (IJBTokenStore);\n\n  function splitsStore() external view returns (IJBSplitsStore);\n\n  function directory() external view returns (IJBDirectory);\n\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\n    external\n    view\n    returns (uint256);\n\n  function distributionLimitOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    IJBPaymentTerminal _terminal,\n    address _token\n  ) external view returns (uint256 distributionLimit, uint256 distributionLimitCurrency);\n\n  function overflowAllowanceOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    IJBPaymentTerminal _terminal,\n    address _token\n  ) external view returns (uint256 overflowAllowance, uint256 overflowAllowanceCurrency);\n\n  function totalOutstandingTokensOf(uint256 _projectId, uint256 _reservedRate)\n    external\n    view\n    returns (uint256);\n\n  function latestConfiguredFundingCycleOf(uint256 _projectId)\n    external\n    view\n    returns (\n      JBFundingCycle memory,\n      JBFundingCycleMetadata memory metadata,\n      JBBallotState\n    );\n\n  function currentFundingCycleOf(uint256 _projectId)\n    external\n    view\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\n\n  function queuedFundingCycleOf(uint256 _projectId)\n    external\n    view\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\n\n  function launchProjectFor(\n    address _owner,\n    JBProjectMetadata calldata _projectMetadata,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] memory _groupedSplits,\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\n    IJBPaymentTerminal[] memory _terminals,\n    string calldata _memo\n  ) external returns (uint256 projectId);\n\n  function launchFundingCyclesFor(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] memory _groupedSplits,\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\n    IJBPaymentTerminal[] memory _terminals,\n    string calldata _memo\n  ) external returns (uint256 configuration);\n\n  function reconfigureFundingCyclesOf(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] memory _groupedSplits,\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\n    string calldata _memo\n  ) external returns (uint256);\n\n  function issueTokenFor(\n    uint256 _projectId,\n    string calldata _name,\n    string calldata _symbol\n  ) external returns (IJBToken token);\n\n  function changeTokenOf(\n    uint256 _projectId,\n    IJBToken _token,\n    address _newOwner\n  ) external;\n\n  function mintTokensOf(\n    uint256 _projectId,\n    uint256 _tokenCount,\n    address _beneficiary,\n    string calldata _memo,\n    bool _preferClaimedTokens,\n    bool _useReservedRate\n  ) external returns (uint256 beneficiaryTokenCount);\n\n  function burnTokensOf(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    string calldata _memo,\n    bool _preferClaimedTokens\n  ) external;\n\n  function distributeReservedTokensOf(uint256 _projectId, string memory _memo)\n    external\n    returns (uint256);\n\n  function migrate(uint256 _projectId, IJBMigratable _to) external;\n}\n")))}s.isMDXComponent=!0}}]);