"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[52089],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>m});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=a.createContext({}),p=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},s=function(t){var e=p(t.components);return a.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),d=p(n),m=r,b=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(b,i(i({ref:e},s),{},{components:n})):a.createElement(b,i({ref:e},s))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l.mdxType="string"==typeof t?t:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},77069:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},i="JBSplitAllocationData",l={unversionedId:"dev/api/data-structures/jbsplitallocationdata",id:"dev/api/data-structures/jbsplitallocationdata",title:"JBSplitAllocationData",description:"Code",source:"@site/docs/dev/api/data-structures/jbsplitallocationdata.md",sourceDirName:"dev/api/data-structures",slug:"/dev/api/data-structures/jbsplitallocationdata",permalink:"/zh/dev/api/data-structures/jbsplitallocationdata",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/api/data-structures/jbsplitallocationdata.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"JBSplit",permalink:"/zh/dev/api/data-structures/jbsplit"},next:{title:"JBTokenAmount",permalink:"/zh/dev/api/data-structures/jbtokenamount"}},c={},p=[{value:"Code",id:"code",level:4},{value:"Definition",id:"definition",level:4}],s={toc:p};function u(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jbsplitallocationdata"},"JBSplitAllocationData"),(0,r.kt)("h4",{id:"code"},"Code"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBSplitAllocationData.sol"},"https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBSplitAllocationData.sol")),(0,r.kt)("h4",{id:"definition"},"Definition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/** \n  @member token The token being sent to the split allocator.\n  @member amount The amount being sent to the split allocator, as a fixed point number.\n  @member decimals The number of decimals in the amount.\n  @member projectId The project to which the split belongs.\n  @member group The group to which the split belongs.\n  @member split The split that caused the allocation.\n*/\nstruct JBSplitAllocationData {\n  address token;\n  uint256 amount;\n  uint256 decimals;\n  uint256 projectId;\n  uint256 group;\n  JBSplit split;\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"token")," is the token being sent to the split allocator."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount")," is the amount being sent to the split allocator, as a fixed point number."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"decimals")," is the number of decimals in the amount."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"projectId")," is the project to which the split belongs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"group")," is the group to which the split belongs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"split")," is the split that caused the allocation.")))}u.isMDXComponent=!0}}]);