"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[48032],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>d});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var a=n.createContext({}),c=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=c(r),d=i,m=f["".concat(a,".").concat(d)]||f[d]||u[d]||o;return r?n.createElement(m,p(p({ref:t},l),{},{components:r})):n.createElement(m,p({ref:t},l))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,p=new Array(o);p[0]=f;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s.mdxType="string"==typeof e?e:i,p[1]=s;for(var c=2;c<o;c++)p[c]=r[c];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},78165:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),i=(r(67294),r(3905));const o={},p="_splitCountOf",s={unversionedId:"dev/api/contracts/jbsplitsstore/properties/-_splitcountof",id:"dev/api/contracts/jbsplitsstore/properties/-_splitcountof",title:"_splitCountOf",description:"Contract: JBSplitsStore\u200b\u200c",source:"@site/docs/dev/api/contracts/jbsplitsstore/properties/-_splitcountof.md",sourceDirName:"dev/api/contracts/jbsplitsstore/properties",slug:"/dev/api/contracts/jbsplitsstore/properties/-_splitcountof",permalink:"/zh/dev/api/contracts/jbsplitsstore/properties/-_splitcountof",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/api/contracts/jbsplitsstore/properties/-_splitcountof.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"_packedsplitParts2Of",permalink:"/zh/dev/api/contracts/jbsplitsstore/properties/-_packedsplitparts2of"},next:{title:"directory",permalink:"/zh/dev/api/contracts/jbsplitsstore/properties/directory"}},a={},c=[{value:"Definition",id:"definition",level:4}],l={toc:c};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"_splitcountof"},"_splitCountOf"),(0,i.kt)("p",null,"Contract: ",(0,i.kt)("a",{parentName:"p",href:"/zh/dev/api/contracts/jbsplitsstore/"},(0,i.kt)("inlineCode",{parentName:"a"},"JBSplitsStore")),"\u200b\u200c"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"The number of splits currently set for each project ID's configurations.")),(0,i.kt)("h4",{id:"definition"},"Definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/** \n  @notice\n  The number of splits currently set for each project ID's configurations.\n\n  _projectId The ID of the project to get the split count for.\n  _domain An identifier within which the returned splits should be considered active.\n  _group The identifying group of the splits.\n*/\nmapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) private _splitCountOf;\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Arguments:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_projectId")," is the ID of the project to get the split count for."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_domain")," is an identifier within which the returned splits should be considered active."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_group")," is the identifying group of the splits."))),(0,i.kt)("li",{parentName:"ul"},"Returns the number of splits the project has under the specified domain and gorup."),(0,i.kt)("li",{parentName:"ul"},"The resulting view function is private to this contract.")))}u.isMDXComponent=!0}}]);