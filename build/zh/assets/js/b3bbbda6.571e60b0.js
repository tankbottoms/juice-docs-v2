"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[62296],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>s});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=u(n),s=r,k=m["".concat(c,".").concat(s)]||m[s]||p[s]||o;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(87462),r=n(67294),o=n(86010),l=n(72389),i=n(67392),c=n(7094),u=n(12466);const d="tabList__CuJ",p="tabItem_LNqP";function m(e){var t,n;const{lazy:l,block:m,defaultValue:s,values:k,groupId:h,className:f}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=k?k:b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),_=(0,i.l)(N,((e,t)=>e.value===t.value));if(_.length>0)throw new Error('Docusaurus error: Duplicate values "'+_.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===s?s:null!=(t=null!=s?s:null==(n=b.find((e=>e.props.default)))?void 0:n.props.value)?t:b[0].props.value;if(null!==v&&!N.some((e=>e.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+N.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:T,setTabGroupChoices:y}=(0,c.U)(),[g,j]=(0,r.useState)(v),B=[],{blockElementScrollPositionUntilNextRender:I}=(0,u.o5)();if(null!=h){const e=T[h];null!=e&&e!==g&&N.some((t=>t.value===e))&&j(e)}const w=e=>{const t=e.currentTarget,n=B.indexOf(t),a=N[n].value;a!==g&&(I(t),j(a),null!=h&&y(h,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=B.indexOf(e.currentTarget)+1;n=null!=(a=B[t])?a:B[0];break}case"ArrowLeft":{var r;const t=B.indexOf(e.currentTarget)-1;n=null!=(r=B[t])?r:B[B.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},f)},N.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,key:t,ref:e=>B.push(e),onKeyDown:O,onFocus:w,onClick:w},l,{className:(0,o.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":g===t})}),null!=n?n:t)}))),l?(0,r.cloneElement)(b.filter((e=>e.props.value===g))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==g})))))}function s(e){const t=(0,l.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},51395:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>s,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=n(65488),l=n(85162);const i={},c="burnFrom",u={unversionedId:"dev/api/contracts/jbtokenstore/write/burnfrom",id:"dev/api/contracts/jbtokenstore/write/burnfrom",title:"burnFrom",description:"Contract: JBTokenStore\u200b\u200c",source:"@site/docs/dev/api/contracts/jbtokenstore/write/burnfrom.md",sourceDirName:"dev/api/contracts/jbtokenstore/write",slug:"/dev/api/contracts/jbtokenstore/write/burnfrom",permalink:"/zh/dev/api/contracts/jbtokenstore/write/burnfrom",draft:!1,editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/docs/dev/api/contracts/jbtokenstore/write/burnfrom.md",tags:[],version:"current",frontMatter:{},sidebar:"dev",previous:{title:"totalSupplyOf",permalink:"/zh/dev/api/contracts/jbtokenstore/read/totalsupplyof"},next:{title:"changeFor",permalink:"/zh/dev/api/contracts/jbtokenstore/write/changefor"}},d={},p=[{value:"Definition",id:"definition",level:3},{value:"Body",id:"body",level:4}],m={toc:p};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"burnfrom"},"burnFrom"),(0,r.kt)("p",null,"Contract: ",(0,r.kt)("a",{parentName:"p",href:"/zh/dev/api/contracts/jbtokenstore/"},(0,r.kt)("inlineCode",{parentName:"a"},"JBTokenStore")),"\u200b\u200c"),(0,r.kt)("p",null,"Interface: ",(0,r.kt)("a",{parentName:"p",href:"/zh/dev/api/interfaces/ijbtokenstore"},(0,r.kt)("inlineCode",{parentName:"a"},"IJBTokenStore"))),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Step by step",label:"Step by step",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Burns a project's tokens.")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Only a project's current controller can burn its tokens.")),(0,r.kt)("h3",{id:"definition"},"Definition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"function burnFrom(\n  address _holder,\n  uint256 _projectId,\n  uint256 _amount,\n  bool _preferClaimedTokens\n) external override onlyController(_projectId) { ... }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Arguments:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_holder")," is the address that owns the tokens being burned."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_projectId")," is the ID of the project to which the burned tokens belong."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_amount")," is the amount of tokens to burn."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_preferClaimedTokens")," is a flag indicating whether there's a preference for tokens to burned from the ",(0,r.kt)("inlineCode",{parentName:"li"},"_holder"),"s wallet if the project currently has a token contract attached."))),(0,r.kt)("li",{parentName:"ul"},"Through the ",(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/or-abstract/jbcontrollerutility/modifiers/onlycontroller"},(0,r.kt)("inlineCode",{parentName:"a"},"onlyController"))," modifier, the function can only be accessed by the controller of the ",(0,r.kt)("inlineCode",{parentName:"li"},"_projectId"),"."),(0,r.kt)("li",{parentName:"ul"},"The function overrides a function definition from the ",(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/interfaces/ijbtokenstore"},(0,r.kt)("inlineCode",{parentName:"a"},"IJBTokenStore"))," interface."),(0,r.kt)("li",{parentName:"ul"},"The function doesn't return anything.")),(0,r.kt)("h4",{id:"body"},"Body"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Get a reference to the project's current token."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Get a reference to the project's current token.\nIJBToken _token = tokenOf[_projectId];\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Internal references:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbtokenstore/properties/tokenof"},(0,r.kt)("inlineCode",{parentName:"a"},"tokenOf"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Get a reference to the amount of unclaimed project tokens the holder has."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Get a reference to the amount of unclaimed project tokens the holder has.\nuint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Internal references:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbtokenstore/properties/unclaimedbalanceof"},(0,r.kt)("inlineCode",{parentName:"a"},"unclaimedBalanceOf"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Get a reference to the amount of the project's tokens the holder has in their wallet. If the project does not yet have tokens issued, the holder must not have a claimed balance."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Get a reference to the amount of the project's current token the holder has in their wallet.\nuint256 _claimedBalance = _token == IJBToken(address(0))\n  ? 0\n  : _token.balanceOf(_holder, _projectId);\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"External references:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbtoken/read/balanceof"},(0,r.kt)("inlineCode",{parentName:"a"},"balanceOf"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Make sure the holder has enough tokens to burn. "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// There must be adequate tokens to burn across the holder's claimed and unclaimed balance.\nif (_amount > _claimedBalance + _unclaimedBalance) revert INSUFFICIENT_FUNDS();\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Find the amount of claimed tokens that should be burned. This will be 0 if the holder has no claimed balance, an amount up to the holder's claimed balance if there is a preference for burning claimed tokens, or the difference between the amount being burned and the holder's unclaimed balance otherwise."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// The amount of tokens to burn.\nuint256 _claimedTokensToBurn;\n\n// If there's no balance, redeem no tokens.\nif (_claimedBalance == 0)\n  _claimedTokensToBurn = 0;\n  // If prefer converted, redeem tokens before redeeming unclaimed tokens.\nelse if (_preferClaimedTokens)\n  _claimedTokensToBurn = _claimedBalance < _amount ? _claimedBalance : _amount;\n  // Otherwise, redeem unclaimed tokens before claimed tokens.\nelse _claimedTokensToBurn = _unclaimedBalance < _amount ? _amount - _unclaimedBalance : 0;\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The amount of unclaimed tokens to burn is necessarily the amount of tokens to burn minus the amount of claimed tokens to burn."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// The amount of unclaimed tokens to redeem.\nuint256 _unclaimedTokensToBurn = _amount - _claimedTokensToBurn;\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If there are unclaimed tokens to burn, subtract the amount from the unclaimed balance of the holder for the project, and from the unclaimed total supply of the project."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Subtract the tokens from the unclaimed balance and total supply.\nif (_unclaimedTokensToBurn > 0) {\n  // Reduce the holders balance and the total supply.\n  unclaimedBalanceOf[_holder][_projectId] =\n    unclaimedBalanceOf[_holder][_projectId] -\n    _unclaimedTokensToBurn;\n  unclaimedTotalSupplyOf[_projectId] =\n    unclaimedTotalSupplyOf[_projectId] -\n    _unclaimedTokensToBurn;\n}\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Internal references:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbtokenstore/properties/unclaimedbalanceof"},(0,r.kt)("inlineCode",{parentName:"a"},"unclaimedBalanceOf"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbtokenstore/properties/unclaimedtotalsupplyof"},(0,r.kt)("inlineCode",{parentName:"a"},"unclaimedTotalSupplyOf"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If there are claimed tokens to burn, burn them from the holder's wallet."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"// Burn the claimed tokens.\nif (_claimedTokensToBurn > 0) _token.burn(_projectId, _holder, _claimedTokensToBurn);\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"External references:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbtoken/write/burn"},(0,r.kt)("inlineCode",{parentName:"a"},"burn"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Emit a ",(0,r.kt)("inlineCode",{parentName:"p"},"Burn")," event with the relevant parameters."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"emit Burn(\n  _holder,\n  _projectId,\n  _amount,\n  _unclaimedBalance,\n  _claimedBalance,\n  _preferClaimedTokens,\n  msg.sender\n);\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Event references:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zh/dev/api/contracts/jbtokenstore/events/burn"},(0,r.kt)("inlineCode",{parentName:"a"},"Burn"))))))),(0,r.kt)(l.Z,{value:"Code",label:"Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/**\n  @notice\n  Burns a project's tokens.\n\n  @dev\n  Only a project's current controller can burn its tokens.\n\n  @param _holder The address that owns the tokens being burned.\n  @param _projectId The ID of the project to which the burned tokens belong.\n  @param _amount The amount of tokens to burn.\n  @param _preferClaimedTokens A flag indicating whether there's a preference for tokens to burned from the `_holder`s wallet if the project currently has a token contract attached.\n*/\nfunction burnFrom(\n  address _holder,\n  uint256 _projectId,\n  uint256 _amount,\n  bool _preferClaimedTokens\n) external override onlyController(_projectId) {\n  // Get a reference to the project's current token.\n  IJBToken _token = tokenOf[_projectId];\n\n  // Get a reference to the amount of unclaimed project tokens the holder has.\n  uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\n\n  // Get a reference to the amount of the project's current token the holder has in their wallet.\n  uint256 _claimedBalance = _token == IJBToken(address(0))\n    ? 0\n    : _token.balanceOf(_holder, _projectId);\n\n  // There must be adequate tokens to burn across the holder's claimed and unclaimed balance.\n  if (_amount > _claimedBalance + _unclaimedBalance) revert INSUFFICIENT_FUNDS();\n\n  // The amount of tokens to burn.\n  uint256 _claimedTokensToBurn;\n\n  // If there's no balance, redeem no tokens.\n  if (_claimedBalance == 0)\n    _claimedTokensToBurn = 0;\n    // If prefer converted, redeem tokens before redeeming unclaimed tokens.\n  else if (_preferClaimedTokens)\n    _claimedTokensToBurn = _claimedBalance < _amount ? _claimedBalance : _amount;\n    // Otherwise, redeem unclaimed tokens before claimed tokens.\n  else _claimedTokensToBurn = _unclaimedBalance < _amount ? _amount - _unclaimedBalance : 0;\n\n  // The amount of unclaimed tokens to redeem.\n  uint256 _unclaimedTokensToBurn = _amount - _claimedTokensToBurn;\n\n  // Subtract the tokens from the unclaimed balance and total supply.\n  if (_unclaimedTokensToBurn > 0) {\n    // Reduce the holders balance and the total supply.\n    unclaimedBalanceOf[_holder][_projectId] =\n      unclaimedBalanceOf[_holder][_projectId] -\n      _unclaimedTokensToBurn;\n    unclaimedTotalSupplyOf[_projectId] =\n      unclaimedTotalSupplyOf[_projectId] -\n      _unclaimedTokensToBurn;\n  }\n\n  // Burn the claimed tokens.\n  if (_claimedTokensToBurn > 0) _token.burn(_projectId, _holder, _claimedTokensToBurn);\n\n  emit Burn(\n    _holder,\n    _projectId,\n    _amount,\n    _unclaimedBalance,\n    _claimedBalance,\n    _preferClaimedTokens,\n    msg.sender\n  );\n}\n"))),(0,r.kt)(l.Z,{value:"Errors",label:"Errors",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"String"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"INSUFFICIENT_FUNDS"))),(0,r.kt)("td",{parentName:"tr",align:null},"Thrown if the holder doesn't have enough tokens to burn."))))),(0,r.kt)(l.Z,{value:"Events",label:"Events",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/zh/dev/api/contracts/jbtokenstore/events/burn"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"Burn")))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"address indexed holder")),(0,r.kt)("li",null,(0,r.kt)("code",null,"uint256 indexed projectId")),(0,r.kt)("li",null,(0,r.kt)("code",null,"uint256 amount")),(0,r.kt)("li",null,(0,r.kt)("code",null,"uint256 initialUnclaimedBalance")),(0,r.kt)("li",null,(0,r.kt)("code",null,"uint256 initialClaimedBalance")),(0,r.kt)("li",null,(0,r.kt)("code",null,"bool preferClaimedTokens")),(0,r.kt)("li",null,(0,r.kt)("code",null,"address caller")))))))),(0,r.kt)(l.Z,{value:"Bug bounty",label:"Bug bounty",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Reward"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Optimization")),(0,r.kt)("td",{parentName:"tr",align:null},"Help make this operation more efficient."),(0,r.kt)("td",{parentName:"tr",align:null},"0.5ETH")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Low severity")),(0,r.kt)("td",{parentName:"tr",align:null},"Identify a vulnerability in this operation that could lead to an inconvenience for a user of the protocol or for a protocol developer."),(0,r.kt)("td",{parentName:"tr",align:null},"1ETH")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"High severity")),(0,r.kt)("td",{parentName:"tr",align:null},"Identify a vulnerability in this operation that could lead to data corruption or loss of funds."),(0,r.kt)("td",{parentName:"tr",align:null},"5+ETH")))))))}s.isMDXComponent=!0}}]);