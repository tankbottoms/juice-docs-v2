"use strict";(self.webpackChunkjuice_docs_v_2=self.webpackChunkjuice_docs_v_2||[]).push([[74688],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(a),m=o,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},58437:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),o=(a(67294),a(3905));const r={slug:"juicebox-v2",title:"JuiceboxV2 Protocol",authors:["jango"],tags:["protocol"]},i=void 0,l={permalink:"/zh/blog/juicebox-v2",editUrl:"https://github.com/jbx-protocol/juice-docs-v2/blob/main/blog/2021-09-03-juicebox-v2.md",source:"@site/blog/2021-09-03-juicebox-v2.md",title:"JuiceboxV2 Protocol",description:"Current state of things",date:"2021-09-03T00:00:00.000Z",formattedDate:"2021\u5e749\u67083\u65e5",tags:[{label:"protocol",permalink:"/zh/blog/tags/protocol"}],readingTime:10.015,hasTruncateMarker:!1,authors:[{name:"Jango",title:"JuiceboxDAO Contributor",url:"https://twitter.com/me_jango",imageURL:"https://pbs.twimg.com/profile_images/1414958948189413395/l89bNR2m_400x400.jpg",key:"jango"}],frontMatter:{slug:"juicebox-v2",title:"JuiceboxV2 Protocol",authors:["jango"],tags:["protocol"]},prevItem:{title:"Project updates 9/7/2021",permalink:"/zh/blog/project-update"},nextItem:{title:"Juicebox: Project update and FC4 proposal",permalink:"/zh/blog/juicebox-funding-cycle-4-proposal"}},s={authorsImageUrls:[void 0]},u=[{value:"Current state of things",id:"current-state-of-things",level:2},{value:"Proposed changes",id:"proposed-changes",level:2},{value:"Bring your own mint/burn strategy",id:"bring-your-own-mintburn-strategy",level:3},{value:"Overflow allowance",id:"overflow-allowance",level:3},{value:"Open mint/burn",id:"open-mintburn",level:3},{value:"Reserved token distribution endpoints",id:"reserved-token-distribution-endpoints",level:3},{value:"Pay, withdraw, and redeem can all be paused.",id:"pay-withdraw-and-redeem-can-all-be-paused",level:3},{value:"Adjustable fee",id:"adjustable-fee",level:3},{value:"Conclusion",id:"conclusion",level:3}],c={toc:u};function p(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"current-state-of-things"},"Current state of things"),(0,o.kt)("p",null,"First thing's first: a huge thank you to everyone who has played with the first version of the Juicebox protocol over the past month. You've taken a leap of faith on a very experimental and untested set of contracts and user experiences with the hopes that it would help you smoothly realize your vision. The protocol has helped a number of projects bootstrap their treasury and community, and these communities have in turn helped Juicebox root into the fertile soil that is the Ethereum social layer."),(0,o.kt)("p",null,"I've been observing how each project has been interacting with the protocol. I've been a part of exciting discussions where JB was a total enabler of ideas and creativity, and also ones where I've unfortunately had to be the bearer of bad news that the protocol doesn't support the wild thought being proposed. I've seen people spin up projects and raise hundreds of ETH in hours, and seen people give up on the first screen because the \"button\" they were trying to click wasn't actually a button. After only a few weeks of action I have a sense of what's working, and I've got a laundry list of what could be better."),(0,o.kt)("p",null,"The goal is to steadily improve things over time. At the base contract layer however, progress must made in big leaps initially with the goal of eventually reaching a steady state as innovation moves to subsequent application layers. JuiceboxV2 is the first big leap. Its goal is simple: to enable more creativity, and remove all points of friction."),(0,o.kt)("p",null,"JuiceboxV1 was designed with the assumption that communities and project owners have adverse incentives. By using Juicebox, a project owner was committing to particular constraints so that their community could confidently embrace the finances of the game being proposed. Project owners could not mint or burn tokens at will, project owners could not dictate how many tokens were minted per ETH contributed, project owners could not limit who participated in a crowdfund, and project owners did not have a pause button."),(0,o.kt)("p",null,"Turns out this was a bad assumption to roll with at the base protocol layer. If a community and its owners are one and the same, flexibility is a requirement for total creative expression. It turns out that communities almost always crave a custom treasury strategy that fits their ethos and proposes a game that differentiates them from others. "),(0,o.kt)("p",null,"Projects don't usually have the engineering resources to build, test, and verify such solutions though. This has been a core value Juicebox has provided for people, along with a simple and powerful UI for community members to join in through and follow along with. So far, the frictions that Juicebox removes has justified the treasury strategy constraints that it introduces. "),(0,o.kt)("p",null,"Let's see if we can now do even better."),(0,o.kt)("h2",{id:"proposed-changes"},"Proposed changes"),(0,o.kt)("h3",{id:"bring-your-own-mintburn-strategy"},"Bring your own mint/burn strategy"),(0,o.kt)("p",null,"You'll now be able to bring your own contracts that outline the game you want to propose to your community. You'll be able to plug and play with already-written strategies, or write your own custom one that fulfills your wildest ideas."),(0,o.kt)("p",null,"Writing a strategy can be simple, or as complex as you want. All that is required is providing a contract that adheres to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jbx-protocol/juice-juicehouse/blob/version/2/packages/hardhat/contracts/interfaces/IFundingCycleDataSource.sol"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"IFundingCycleDataSource")," interface"),". You'll be able to provide a strategy that decides what happens when someone makes a payment to your project, as well as one for when someone redeems their treasury tokens. "),(0,o.kt)("p",null,"Here's how writing a strategy around a payment works:"),(0,o.kt)("p",null,"You can add a data source contract as a parameter to a funding cycle. Your data source must provide a function that implements the following function specification."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"function payData(\n    address _payer,\n    uint256 _amount,\n    uint256 _baseWeight,\n    uint256 _reservedRate,\n    address _beneficiary,\n    string calldata _memo\n)\n    external\n    returns (\n        uint256 weight,\n        string calldata memo,\n        IPayDelegate delegate\n    );\n")),(0,o.kt)("p",null,"The function receives a handful of parameters from the Juicebox protocol, and is expected to return a handful of parameters back. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Inputs:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_payer")," is the address that issued the ETH payment."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_amount")," is the amount of the ETH payment received."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_baseWeight")," is the weight of the funding cycle during which the payment is being made. This weight is determined by multiplying the previous cycle's weight by the previous cycle's discount rate. Each project's first funding cycle's weight is 10^24. "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_reservedRate")," is the reserved rate of the funding cycle during which the payment is being made. This percent is out of 200. "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_beneficiary")," is the address that the payer has specified to receive the resulting treasury tokens. "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_memo")," is the note that the payer has included in the payment.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Outputs:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"weight")," is the weight that the Juicebox protocol should use when minting treasury tokens. The total tokens minted will be ",(0,o.kt)("inlineCode",{parentName:"p"},"amount")," * ",(0,o.kt)("inlineCode",{parentName:"p"},"weight"),", where both variables are assumed to have 18 decimal places. Out of these minted tokens, some will be allocated to the ",(0,o.kt)("inlineCode",{parentName:"p"},"_beneficiary"),", and the rest will be reserved to be distributed to the reserved token recipients according to the ",(0,o.kt)("inlineCode",{parentName:"p"},"_reservedRate"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"memo")," is the memo to include with the protocol event that will be emitted as a result of the payment. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"delegate")," is the address of a contract that adheres to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jbx-protocol/juice-juicehouse/blob/version/2/packages/hardhat/contracts/interfaces/IPayDelegate.sol"},(0,o.kt)("inlineCode",{parentName:"a"},"IPaymentDelegate")," interface"),". If a ",(0,o.kt)("inlineCode",{parentName:"p"},"delegate")," is provided, it will receive a callback from the Juicebox protocol once it has fully processed the payment. You can return the zero address if you don't need this functionality. The callback your delegate contract should implement is as follows:"),(0,o.kt)("p",{parentName:"li"},"  function didPay(\naddress _payer,\nuint256 _amount,\nuint256 _weight,\nuint256 _count,\naddress _beneficiary,\nstring calldata memo\n) external;")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"_payer")," is the same as the one ",(0,o.kt)("em",{parentName:"p"},"passed in")," to your data source.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"_amount")," is the same as the one ",(0,o.kt)("em",{parentName:"p"},"passed in")," to your data source.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"_weight")," is the same as the one ",(0,o.kt)("em",{parentName:"p"},"returned from")," your data source.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"_count")," is the number of tokens that were minted for the ",(0,o.kt)("inlineCode",{parentName:"p"},"_beneficiary"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"_beneficiary")," is the same as the one ",(0,o.kt)("em",{parentName:"p"},"passed in")," to your data source.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"_memo")," is the same as the one ",(0,o.kt)("em",{parentName:"p"},"returned from")," your data source."))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"recordPayment")," function where all of these pieces come together can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jbx-protocol/juice-juicehouse/blob/a668f03cd926bc4b0afdf35aa2d6e73a566b5d48/packages/hardhat/contracts/TerminalV2DataLayer.sol#L582"},"here"),"."),(0,o.kt)("p",null,"A data source and delegate can similarly be provided to your funding cycle that'll shape the ",(0,o.kt)("inlineCode",{parentName:"p"},"recordRedemption")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"function redeemData(\n    address _holder,\n    uint256 _count,\n    uint256 _redemptionRate,\n    uint256 _ballotRedemptionRate,\n    address _beneficiary,\n    string calldata _memo\n)\n    external\n    returns (\n        uint256 amount,\n        string calldata memo,\n        IRedeemDelegate delegate\n    );\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Inputs:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_holder")," is the token holder that is redeeming."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_count")," is the number of tokens being redeemed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_redemptionRate")," is the redemption rate of the funding cycle during which the redemption is being made."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_ballotRedemptionRate")," is the redemption rate that should be used if the project currently has an active funding cycle reconfiguration ballot."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_beneficiary")," is the address that the redeemer has specified to claim the treasury ETH as a result of redeeming tokens."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_memo")," is the note that the redeemer has included in the redemption.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Outputs:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"amount")," is the amount of ETH that should be sent from your treasury to the ",(0,o.kt)("inlineCode",{parentName:"p"},"_beneficiary")," as a result of redeeming/burning ",(0,o.kt)("inlineCode",{parentName:"p"},"_count")," tokens.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"memo")," is the memo to include with the protocol event that will be emitted as a result of the redemption. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"delegate")," is the address of a contract that adheres to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jbx-protocol/juice-juicehouse/blob/version/2/packages/hardhat/contracts/interfaces/IRedemptionDelegate.sol"},(0,o.kt)("inlineCode",{parentName:"a"},"IRedemptionDelegate")," interface"),". If a ",(0,o.kt)("inlineCode",{parentName:"p"},"delegate")," is provided, it will receive a callback from the Juicebox protocol once it has fully processed the redemption, but before the ",(0,o.kt)("inlineCode",{parentName:"p"},"amount")," is dispersed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"_beneficiary"),". You can return the zero address if you don't want this functionality. \xa0The callback your delegate contract should implement is as follows:"),(0,o.kt)("p",{parentName:"li"},"  function didRedeem(\naddress _holder,\nuint256 _count,\nuint256 _amount,\naddress _beneficiary,\nstring calldata memo\n) external")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"_holder")," is the same as the one ",(0,o.kt)("em",{parentName:"p"},"passed in")," to your data source.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"_count")," is the same as the one ",(0,o.kt)("em",{parentName:"p"},"passed in")," to your data source.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"_amount")," is the same as the one ",(0,o.kt)("em",{parentName:"p"},"returned from")," your data source.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"_beneficiary")," is the same as the one ",(0,o.kt)("em",{parentName:"p"},"passed in")," to your data source.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"_memo")," is the same as the one ",(0,o.kt)("em",{parentName:"p"},"returned from")," your data source."))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"recordRedemption")," function where all of these pieces come together can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jbx-protocol/juice-juicehouse/blob/2c4a549d22dbcbce393672157636a75fe0e29b45/packages/hardhat/contracts/TerminalV2DataLayer.sol#L821"},"here"),"."),(0,o.kt)("p",null,"With these new tools projects can roll out all kinds of treasury strategies, such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"restricting payments to only certain addresses."),(0,o.kt)("li",{parentName:"ul"},"restricting payments to only addresses that hold certain other assets."),(0,o.kt)("li",{parentName:"ul"},"offering different levels of \xa0community membership depending on the state of the blockchain."),(0,o.kt)("li",{parentName:"ul"},"restricting payments to be within min/max payment amounts."),(0,o.kt)("li",{parentName:"ul"},"creating time weighted rewards."),(0,o.kt)("li",{parentName:"ul"},"restricting the max supply of community tokens."),(0,o.kt)("li",{parentName:"ul"},"customizing the amount of treasury tokens distributed per ETH received."),(0,o.kt)("li",{parentName:"ul"},"minting NFTs for new members.")),(0,o.kt)("p",null,"...or any combination of any of these, alongside any other rule you can express contractually."),(0,o.kt)("h3",{id:"overflow-allowance"},"Overflow allowance"),(0,o.kt)("p",null,"Previously, a project could only access funds within its specified funding cycle target. All overflowed treasury funds over this target was only accessibly by treasury token holders."),(0,o.kt)("p",null,"Now, alongside specifying your funding cycle's target, you can specify an amount that you can use from your project's overflow on demand. "),(0,o.kt)("p",null,"This is useful for allocating treasury funds for on-off use cases like bug-bounties, one-time contributions, audits, NFT bids, etc."),(0,o.kt)("h3",{id:"open-mintburn"},"Open mint/burn"),(0,o.kt)("p",null,"Previously, you could only mint tokens before receiving your first payment, and burning was only done through the redemption mechanism. All other tickets were distributed purely through the payment process according to funding cycle weights that decreased according to your configured discount rates over time."),(0,o.kt)("p",null,"You can now mint and allocate new treasury tokens at will. All token holders also now have the option to burn their tokens, for whatever reason."),(0,o.kt)("p",null,"This gives projects more flexibility to design their tokenomics the way they want, while also having an auto-distribution mechanism through Juicebox's flexible built-in payment mechanism alongside."),(0,o.kt)("h3",{id:"reserved-token-distribution-endpoints"},"Reserved token distribution endpoints"),(0,o.kt)("p",null,"Previously, payout splits could be directed at Ethereum addresses, other Juicebox projects, and arbitrary contracts that inherit from a common interface. Reserved tokens could only go to Ethereum addresses."),(0,o.kt)("p",null,"Now, reserved token distributions can also be pointed at Ethereum addresses, the owner of other Juicebox projects, and arbitrary contracts that inherit from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jbx-protocol/juice-juicehouse/blob/version/2/packages/hardhat/contracts/interfaces/ISplitAllocator.sol"},"this common interface"),"."),(0,o.kt)("p",null,"This is useful to allow for more composable token distributions. "),(0,o.kt)("h3",{id:"pay-withdraw-and-redeem-can-all-be-paused"},"Pay, withdraw, and redeem can all be paused."),(0,o.kt)("p",null,"Previously, projects had not quick way to pause community interactions with its treasury."),(0,o.kt)("p",null,"Now, projects are able to individually pause function calls to pay, withdraw funds, and redeem tokens. These controls are configured into each funding cycle."),(0,o.kt)("p",null,"This gives projects quick levers to use to achieve certain treasury effects. "),(0,o.kt)("h3",{id:"adjustable-fee"},"Adjustable fee"),(0,o.kt)("p",null,"Previously, all projects paid a 5% fee from payouts. "),(0,o.kt)("p",null,"Now, projects will pay at maximum a 5% fee that is adjustable by the JuiceboxDAO. There is also a ceiling fee price that is adjustable by the JuiceboxDAO."),(0,o.kt)("p",null,"This helps the JuiceboxDAO accommodate more projects and experiments into its ecosystem."),(0,o.kt)("h3",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"JuiceboxV2 introduces a suite of tools that allow for wild new treasury strategies. What remains constant from V1 is the fact that configurations are locked into funding cycles \u2013 if a project runs on 30 day funding cycles, they can specify creative dynamics into the funding cycle, but once the cycle begins changes can't be made until the following one. Also like V1, projects that opt for no duration are choosing the flexibility to make any change on demand. "),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jbx-protocol/juice-juicehouse/tree/version/2/packages/hardhat/contracts"},"implementation of the new contracts")," is done, we've just now got to document, test, and audit everything. All code is public, as will be all documentation and conversation around this upgrade. "),(0,o.kt)("p",null,"We need eyes and scrutiny. Please don't hesitate to take a look and help pick things apart. If you plan on spending time on this, please reach out to the DAO in ",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/vwdZrUZb8r"},"our discord")," and introduce yourself so we can make sure you're rightly compensated for your work."),(0,o.kt)("p",null,"All projects currently running on Juicebox will be able to seamlessly migrate their treasury to V2. "),(0,o.kt)("p",null,"LFG."))}p.isMDXComponent=!0}}]);