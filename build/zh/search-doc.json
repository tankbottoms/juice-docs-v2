[{"title":"2022-05-11 Town Hall Summary","type":0,"sectionRef":"#","url":"blog/2022-05-11-town-hall","content":"","keywords":""},{"title":"1. Intro​","type":1,"pageTitle":"2022-05-11 Town Hall Summary","url":"blog/2022-05-11-town-hall#1-intro","content":""},{"title":"2. Front end update from @aeolian:​","type":1,"pageTitle":"2022-05-11 Town Hall Summary","url":"blog/2022-05-11-town-hall#2-front-end-update-from-aeolian","content":"We had another good week, and pretty much on track for a Mainnet launch in the next 3-4days. We started a feature freeze 36h ago, which means not merging anything unless it’s a critical bug, none of which is found, to allow us to merge a big PR that supports a new subgraph. New subgraph is currently indexing the mainnet, now it’s a waiting game that needs logical coordination to get things to happen. Once that’s in, we are basically ready to launch V2 on mainnet. The good thing is, that the launch is not a one-way door, if we have major issues, we can always switch back to V1 to fix the issues and switch back to V2 after that. It has been a much bigger effort than we all imagined, but it is now coming to a close here. "},{"title":"3. Quick inventory check by @jango:​","type":1,"pageTitle":"2022-05-11 Town Hall Summary","url":"blog/2022-05-11-town-hall#3-quick-inventory-check-by-jango","content":"Not sure if it’s useful but I think the past few days after V2 has been up, folks have been more future and forward looking. There’s been a lot of ideas coming up that people are prototyping and playing with. Sometimes people are in tune with things happening while sometimes not. I just want to make sure that we all somewhere are aware of what’s on our mind and where different projects are at. 1) V2 contracts (deployed) : V2 contracts have been shared quite a few times in Town Hall. These have been deployed in the 4th iteration which is feeling great. So, our products are basically done in their initial capacity and in the needs of contracts. I just want to make sure it’s communicated out enough so folks know how to use it. 2) Docs (deployed, iterating): The docs are started by @filipv and a bunch of stuff has been added from a technical perspective. Those are done as well and constantly iterated on. @filipv: I am very excited to help centralize a lot of resources to build extensions to the protocol, and it is like a repository of information about everything related to Juicebox). @jango: Big shouts for helps in setting that up in the beginning and shouts for WAGMI studio, @sage and @mieos for starting to create a whole-worldly vibe for what a repository of higher knowledge could look like. 3) Fee extension (formalizing): This is a solution to use V2 tooling to route incoming payments to JuiceboxDAO to best yielding places for JBX, on AMM or first party issuance mechanical. It is looking great and we are wrapping up tests and playing with optimization, kind of in a formalizing stage. 4) veBanny contracts (formalizing): This is a way of staking JBX for an NFT ve position, which is locking your JBX over time to have a new kind of accounting primitive to use for governance. I hope we can align decision-making with a longer term community interest in this way. Alongside it, a lot of art is being experimented by the WAGMI team, tankbottoms and natasha. This job is also being formalized, we are trying to piece together, according to CURVE ve contracts, how we might do delegation in this scheme. It’s very promising. 5) V1→V2 migration terminal (prototyped, formalizable): Once V2 is up, projects can have a V2 token issued if they choose to operate on V2 as well as V1, which is what JuiceboxDAO will do. We are going to prototype a terminal where the V2 treasury will accept the V1 treasury token as payment and issue its V2 version one for one (1:1). It, to some extent, works within the mental model of how Juicebox treasuries are working, and we are trying to manage the migration in that way. 6) NFT market (prototyped): It is a topic that has been lingering for a while and happened in conversations quite many times and might be on the horizon. It’s a set of contracts that allow folks to list NFT with the sales routed through a particular Juicebox treasury or a set of treasuries. The goal of this project is, instead of having the pay button as the way to pay projects, anyone could upload an NFT that could basically serve as the pay button. Someone could just buy the NFT and the funds would be routed to the treasury. This is in effect a more engaging pay button that is extended to do the NFT related treasury things. This is also prototyped, and it seems we also have a few prototypes from @tankbottoms as well. It still need some design iterations. 7) V2 versioning fire drill (prototyping): There’s an idea floating around once we get V2 up to sooner rather than later organize how versioning might work on V2, like we might deploy subsequent version of the payment terminal V2, which is a feature of V2 as hyperforkability. People can roll their treasuries and migrate between terminals. Might be interesting to be right off the bat, before some happenings or pressure, to migrate from one terminal to another slightly optimized one. This is not really a big deal but more so to get the cadence of feeling confident in how we might organize files. It’s not an urgent matter, but we should think of doing it instead of waiting till things get chaotic and we’re driven by necessity to migrate, by then things tend to be more delicate. 8) 1:1 terminals for L2 strategy (pre-prototyping): The L2 strategy allows projects to manage treasuries on not just mainnet but any other L2, then to have their tokens organized across chains, taking redemption into account, etc. There is a good design for it, it just needs to be prototyped. 9) Subscription terminal (pre-prototyping): It’s not really worth touching on but @jigglyjam brought up a cool use case that might be fun to sail for. 10) Juicebox reverse ENS registry (pre-prototyping):With the V2 tool box available, front end brought up a good point regarding Juicebox reverse ENS registry. In V1 we had handles for projects which is great in the short term, but it has a whole lot we need to think about for a long-term perspective. In V2, we just started with project IDs, so that people can build things on top of it. Front end has already accommodated ENS support for projects to use as URLs to access their treasury, but there’s couple of things in the UI that need to be nicer if there's an additional Juicebox reverse ENS registry. 11) Treasure hunt: @mieos has been working on a treasure hunt on cryptovoxels.com which is pretty exciting. updates on treasure hunt by @wackozacco: We are trying to experiment to coordinate something special with V2 promotion. Please go to the 3rd floor of the parcel, where there are clues for seed phrases of the treasure chest. There is already 150k JBX inside the wallet. After V2, @mieos will set up another discord to give clues for the decoder. We try to plan some more scavenger hunt type of things. "},{"title":"4. Nance bot by @jigglyjams:​","type":1,"pageTitle":"2022-05-11 Town Hall Summary","url":"blog/2022-05-11-town-hall#4-nance-bot-by-jigglyjams","content":"Nance bot has been up and running since the last Funding Cycle, and I am working on scheduling it now. I am definitely interested in how subscription payments tied into it for future DAOs. Nance is like automating the governance pipeline, e.g. Juicebox has a notion-discord-snapshot pipeline, this feels like their valves, and also works for other Juicebox projects using similar structure. The notion page by @filipv and @jigglyjams is here Utilizing nance bot is currently through CanuDAO, I am planning to use the subscription contract for future DAOs to pay for the use of nance bot. @jango: I am interested in taking a step in the subscription terminal, it could be an interesting project and a decent entry in building Juicebox extensions too. "},{"title":"5. Podcast updates by @matthewbrooks and @brileigh​","type":1,"pageTitle":"2022-05-11 Town Hall Summary","url":"blog/2022-05-11-town-hall#5-podcast-updates-by-matthewbrooks-and-brileigh","content":"We have just posted the 1st podcast with @dropnerd from SharkDAO, currently we are editing the 2nd episode which was recorded with @drgorilla and @zhape about Moody’sDAO, and working on finishing that up. I think the results are good so far, and we are open to constructive feedback. @jango: I suppose Moody’sDAO should be another project worth mentioning here. We are trying to make everyone aware of what’s happening, say it out loud the priorities, and see how to nudge each other towards bringing things over the finish line one at a time. Surely everything is making an impressive progress over the past months, some of them are really hefty projects that are not easy to spec out let alone bring it to the finish line. "},{"title":"6. Presentation by @tankbottoms and @filipv​","type":1,"pageTitle":"2022-05-11 Town Hall Summary","url":"blog/2022-05-11-town-hall#6-presentation-by-tankbottoms-and-filipv","content":"In general, this presentation talks about different objectives based on the foundation which is helping people confidently run programmable and community fund treasuries, from start to scale openly on Ethereum. A lot of people are using Juicebox so far because these are short term project instances which Juicebox is amazing for. You go to the website and in a minute you can have a treasury set up with the project’s page. But a lot of projects are more oriented towards longer term development, and would want to have their own website and an interface custom suited to what they need to do. Something @aeolian brought up today is super valuable in building out different libraries of components which makes it super easy for projects like Flamingo or Muse0 to interface with the Juicebox protocol. Part of enabling people to build longer term oriented projects is to help approach legal things in a way that makes people more confident. We can add terms of use and a privacy policy for juicebox.money and other front end. And we are also working with dao-lawfirm.eth, the one @tankbottoms is working with, to set up some accessible packages for Juicebox projects and potential templates and generic policies which will hopefully help people build on Juicebox with more legal peace of mind. Another idea is to bring in some DEFI capability by using some of the functionalities that V2 provides and we can start by doing stablecoin, overtime we can work with different services providers to set up bot terminals which people can add as a payout and then be able to interface with different DEFI protocols. If JuiceboxDAO is focused on treasury management for DAOs with long term orientation, being able to diversify and split ETH into a bunch of stuff is probably more attractive than just keeping ETH in the treasury in terms of minimizing risk. Another part will be genesis NFT creation. I just did the pull request for the NFT delegate. The first 100 people that contribute to your project should get an commemorative NFT or people who contribute more can get the NFT. The delegate is a new function or a feature in V2 that executes an arbitrary smart contract or basically does whatever you want whenever someone pays or redeems with a Juicebox treasury. Q: When this stuff is implemented, how much longer is it to launch a project? Are you going to have the option to not use these things by bypassing them, like, if i don’t want them but just something simple, can I click a button to bypass? @filipv: I wonder if it makes sense to implement these things as an optional library or even on a separate website from the main juicebox.money interface. If you want to do NFT, you can go to the other website. There are a ton of functionalities tank has been working on. Like this NFT market is to some extent extending the functionality of minting NFT which projects can use, and contributions on the market place can be sent to the DAO treasury. The bot terminal basically creates treasuries which will interface with different DEFI protocols and we can create custom strategies to diversify assets and to manage treasury as easy as adding another payout. What’s great is that there is no fee in between projects in V2. The idea is to make it sticky and make people want to build in Juicebox because it’ll give them access to these tools such as NFT and DEFI stuff like that. First these are built for JuiceboxDAO, but eventually hopefully will be accessible to the entire ecosystem. @jango: We should continue to go out and prioritize and try to refactor until the right way to present it to folks, in a way that preserves the users’ focus as they are trying to find out how to set up projects and achieve certain things. I am curious how you see a lot of these new features playing in one place because a lot of mocks belong to juicebox.money or navigatable from the same UI. Maybe this is a question that we should keep in mind as a group going forward. There are going to be some competing for space in the interface, or competing for attention. @filipv: In my opinion, one super valuable work flow would be to compartmentalize all of these into APPs. we can build this library of extensions in the Juicebox protocol. If you want to use it for your project, you can click “add”, and people can put in their custom contract. "},{"title":"7. On Gorilla Marketing:​","type":1,"pageTitle":"2022-05-11 Town Hall Summary","url":"blog/2022-05-11-town-hall#7--on-gorilla-marketing","content":"@filipv: I want to mention the Gorilla marketing that @Zeugh is up to. There’s a lot of discussion of physical presence at conferences. I think it has a lot of potential. Anyone interested can reach out to us. @Zeugh: That’s something I am excited for. I’ve been talking a little more this week with @felixander and @casstoshi about joining some forces to make it better by integrating gorilla marketing, pulp writing and search optimization. I believe we are going to have some nice news soon on getting better visibility. I was reading about treasure management, talked with @twodam, @jango and @drgorilla about the runway we have in ETH. And one of the solutions I believe is to get more projects inside and make that treasury grow. So ETH goes down, treasury goes up. It makes a whole lot of sense to me that marketing, writing and visibility can play a good part in that. "},{"title":"8. On user flow.​","type":1,"pageTitle":"2022-05-11 Town Hall Summary","url":"blog/2022-05-11-town-hall#8-on-user-flow","content":"@filipv: Does anybody have any thoughts on user flow, and what that would look like as these extensions are built out? @jango: I am gonna say these are gonna come together over several weeks. This will continue to be a topic in subsequent town halls. We will keep revisiting. @nicholas: I think maybe it’s interesting to think the creation flow could be people coming from very different points of view. We may be having an easier time building a treasury set up for their use cases. Then maybe those are rolled into this modular interface content. "},{"title":"9. Quizz time:​","type":1,"pageTitle":"2022-05-11 Town Hall Summary","url":"blog/2022-05-11-town-hall#9-quizz-time","content":" The answer is……..@mieos "},{"title":"2022-05-17 Town Hall Summary","type":0,"sectionRef":"#","url":"blog/2022-05-17-town-hall","content":"","keywords":""},{"title":"1.Product prioritization discussion @jango:​","type":1,"pageTitle":"2022-05-17 Town Hall Summary","url":"blog/2022-05-17-town-hall#1product-prioritization-discussion-jango","content":"@jango: We are to some extent acknowledging the moment we find ourselves in from a product perspective, specifically juicebox.money essentially. We just got to the V2 milestone which is massive and there is natural inclination to add to what’s next. We have a bunch of projects in flight, as we discussed in last Town Hall. There’s a lot of work going on and a lot of them are closing the finish line. They are probably not going to be in production at the same time, so we’ve got to figure out what our priority is and the way we think about prioritization going forward. Maybe we could just say we’ll do it next week once we get it more put-together, although it is solid as it is. @aeolian: I think we can refine it a little bit. By next week, we probably will have a more solid plan before we actually gonna build. Yeah, we can leave it until next week. @jango: I think the main thing is that there’s a lot of fun, powerful, shiny things in a lot of people’s work, which is about to have the possibility to come into fruition. For the time being, it’s quite clear what the priority is, that’s risk mitigation and making sure these small bugs that naturally have found themselves in a little bit to the product via this long stretch. There’s a couple of blaringly obvious pieces that the V2 has. So in the short term, maybe a week or a few weeks, it’s really coming to terms with what those are and making those as clear as possible in the UI and then giving us an avenue to peel those back as we have known extensions, because almost all of the stuff is extension related. We can create the system to disclose one at a time appropriately. And it’s not a big shiny future but it’s pretty important. I think top priority with these things is to keep things from going to zero, kind of our job. The 2nd priority is currently straight in the dark to increase the number of projects and the volume of payments. The good news is there is plenty of work we can do right now to stitch up the risk stuff and the bug stuff as we deliberate strategy. But as that gets wrapped up, then we’ll want to all be on the same page about what we're trying to deliver next together. @aeolian: I think it’s worth calling attention to the fact that it’s quite amazing Juicebox gets where it is. We should all have confidence at least from the UI perspective. When projects come along that kinda have the fire power, it’s able to really facilitate the payments. So it’s like, do we take this to the next level? What’s the next level? That’s really the point of the strategy channel and that document(here)and these discussions. "},{"title":"2.Brief explanation about JBX delegation by @filipv:​","type":1,"pageTitle":"2022-05-17 Town Hall Summary","url":"blog/2022-05-17-town-hall#2brief-explanation-about-jbx-delegation-by-filipv","content":"We now have delegation on snapshot, so if you go to this link, you can delegate your JBX to other addresses for the snapshot voting. Tks for the amazing help from @drgorilla btw. Let’s say you have 1m JBX and you’re delegating to someone with 3m JBX, when they vote, they're gonna have 4m JBX. But then if you vote after they voted, their vote will go down to their original 3m JBX, which means you still can vote on any proposal you want and they will lose your delegation, specifically on that vote. Right now this is working with both claimed and unclaimed JBX and then we’ll be moving over to the veBanny when it happens. "},{"title":"3.Work report by @twodam on new dashboards and protocol research:​","type":1,"pageTitle":"2022-05-17 Town Hall Summary","url":"blog/2022-05-17-town-hall#3work-report-by-twodam-on-new-dashboards-and-protocol-research","content":"There is a new Dune dashboard made by twodam in this link, in which you can find gas fee specification about setting up and managing a project in the protocol, as well as some fun facts such as “projects created per address”, or “ how many has an ENS” and so on. And he is going to do some Protocol research and comparison, current list: Mirror Parcel Superfluid Coordinape Utopia Aragon @jango: Just shout out for these incredibly useful analytics and there’s a lot of them. Sometimes I try to find signals in these numbers. So I appreciate the readiness to take on new requests and make dashboards for things over time. It’s damn helpful. @twodam: I have made some dashboards and maybe I need to write some reports based on these data. @jango: I don’t know if VJ or Goldstein have worked using these dashboards but they created reports that might be based on your number, which I am actually almost certain they are. Like coming together and understanding how to distill these facts into narrative and we can use several people taking the steps like that. So yes please, I think VJ and Goldstein will keep doing that. "},{"title":"4.Community and market cohesion by @Zeugh:​","type":1,"pageTitle":"2022-05-17 Town Hall Summary","url":"blog/2022-05-17-town-hall#4community-and-market-cohesion-by-zeugh","content":"It’s more of informing and getting opinions here. Since last time we decided collectively how we would be improving our community through the way we manage the server and things like documentation and onboarding, we have grown a lot. It has been a good while and now we have more than 3,000 new members and lots of new contributors. For those that maybe don’t know, CanuDAO, the DAO that I am paid through, is a working community here in Juicebox. Lately I noticed and more people also have the feeling that in our whole marketing community, the way we communicated as a whole has not been as efficient as it could be because we don’t actually have coordination between ourselves. Last week, I talked to Felixander and Casstoshi to invite them into CanuDAO too. We have this model of having a separate DAO, like WAGMI and Canu, to make decisions and work things around to actually develop it as a service to Juicebox. But as it’s growing , it’s getting hard to get the cohesion, so I’m trying to get more people working on the community side here in Juicebox to get inside Canu too, so that we can have more specific time to talk about the Juicebox community together. So this is to inform all of you that Felixander and Casstoshi have come in, in a way that we can communicate better like in SEO(Search Engine Optimization), pulp writing, community management. It’s also an invitation for anyone that is dedicating their time in Juicebox to work community part to also join Canu, to come to our meetings where we can have more time to discuss perspectives, to discuss what we’ve been seeing and ideas we’ve been having in Juicebox so that we can go back and deliver better community management. I feel as the community grows and the roles for keeping the community healthy get bigger, but Canu didn’t get bigger at the same speed. The tasks and everything expanded and Canu kept at the same size. We’re about to renew our payout proposal in the next cycle, so this would be a good moment for people doing community stuff and wanting to get paid through Canu. It’s more of an invitation and explanation of the reason for this invitation. @filipv: For someone like Matthew and Briley who have recurring payout and work directly for Juicebox, what advantages are there to work for Canu? Or are you talking more about coordination？ @Zeugh: Not necessarily I am moving payouts to Canu, for some it makes sense, for others it doesn’t. It’s okay to join Canu no matter if you get paid through it or not. I think it’s gonna be important now that the V2 is out, and efforts in my perspective are to onboard new people and new projects, to help people coordinate and cohesion can be of great value here. "},{"title":"5.Macro environment and MorganStern’s Ice Cream shop event by @jango:​","type":1,"pageTitle":"2022-05-17 Town Hall Summary","url":"blog/2022-05-17-town-hall#5macro-environment-and-morgansterns-ice-cream-shop-event-by-jango","content":""},{"title":"Macro:​","type":1,"pageTitle":"2022-05-17 Town Hall Summary","url":"blog/2022-05-17-town-hall#macro","content":"As we’re all aware, the treasury has decreased in dollar value quite a bit with Ethereum events in the market. It doesn’t affect our day to day activity, just in a sense affects our horizon. I think what we can expect going forward, obviously we can’t control what happens on a big picture scale, but running a fundraising platform does encourage us to continue to bring insights to each other over time from the perspective of how capital is being managed in macro. Looking at the runway we have, it’s a good opportunity to reflect on our mission and really focus on it. I think we’re at a comfortable place and we can certainly keep on for a while longer even if the access to capital affects us, which will affect all the projects on the platform and subsequently our revenue stream. Even if things were to slow down in a couple of years, we will still be comfortable in the runway's perspective if we manage the treasury appropriately. These are the things to keep in mind when we’re thinking about prioritizing the initiative that we’re trying to further. There are a lot of things that are very fundamental and core to our commission statement that I think we’ll have no problem continuing to further for the next long while. During any downturn of the market, it’s yield and liquidity that tend to dry up while they were pretty accessible before, so we have an opportunity to recognize that we are a funding platform, there’re a lot of people now that are maybe venturing somewhat into the unknown, into new opportunities and having to retreat into their fundamental convictions of what they want to do in the projects they think are important in the moment. I think really understanding the powerful projects that we can fund are not only going to be sustainable through whatever macro environment we find ourselves in, but also maybe these kinds of projects are gonna define the future market cycles or future building cycles. I’ve put up a proposal to revisit the DAO Foundation document, reading through it and what we verified in the past still feels honest and great. It’ll be nice to go in the upcoming governance cycle. I want to make sure we’re committing ourselves and that we’re willing to spend sources on that. We feel very serious about these things and that mission statement feels very sincere. We are indeed willing to work through whatever resources we have available to accomplish these things but realizing that things could be worse and there’s sacrifice that have to be made. But we also have to be in tune with the fact that this isn’t a project that reads similarly to other web2 related startups. I think a lot of ways in which we use the treasury funds can be used to help projects start up and build during this time. I think these can be among the more powerful projects to emerge. Whether we do it collectively through DAO funds or we do that through individuals who are getting payout from the DAO in recognition of their work, is still up in the air. It’s way easier to support individuals as we have been doing it in the unit of ETH sent out per unit of dollar denominated payout, which is greater now for theoretically each of us are getting payout have more ETH overtime. It’s totally up to you what you’ll do with that, but it’s an opportunity to recognize here our job isn’t necessarily cut. It is just to recognize what our roles here are, looking for one building and we’re the ones helping (recording lost for a while) @mieos: Do you think it’s worth revisiting the redemption rate? If capital preservation is the thing the DAO is interested in, maybe retching that up just to touch might be useful and disincentivizing. We’ve probably gone through a bulk of the redemption, and I think it might be worth revisiting it but curious what other people think. @jango: That’s the obvious one. Thanks for bringing that up. That’s an easy one to do on the surface to help protect funds, though it kinda lowers the floor price which is held up great. That mechanism is one of the standouts of the current JBX implementations and we can definitely use it here. @mieos: I think it’s also worth mentioning just as a bit of anti-fud that the general theme during bear market cycles that if we’re going to see one like the rest of crypto history has laid out, which I am skeptical of, is a great time to build and thankfully we’re building a piece of software as a tool for people who are trying to build. @jango: I wouldn’t be surprised. I think it’s probable that the next while the market is continuing its current trend, we’ll see a lot less campaigns to purchase things at very high valuations, like a 50m constitution. But we’ll also see a lot of projects that are building long-term concepts, and I think that has been our thesis for a while now that the spotlight has been on the high raisers which make the project that’s earning 5ETH or 10ETH seem insignificant. But I think it’s those projects building things that last in business model that are going to shine through, and I don’t think there’s going to be thousands of ETH for these projects either. I wrote somewhere in the chat today, I think it makes a lot of sense that I bring it up here again. I encourage each of us to find 1, 2, 3, 4 projects around over time, led by people you particularly believe in or come to believe in, and add yourself in that project, and really figure out what they need to be successful. They probably come out from one perspective and maybe lack the resources, information or technology to do other parts of the project. We don’t need to do all in the same project, and I’m sure we’ll see each other around in all kinds of Discords helping things come into fruition. I think being hands-on and patient is going to pay off. @filipv: I think, if anything, this could galvanize us further into building out both tooling, storytelling and communication in such a way that really emphasizes Juicebox’s capability for long term treasury management for treasuries that evolve. @mieos: I think it’s probably the best time in history for the best part of crypto to grow and become valuable, and the worst part of crypto to kinda slowly back into the shadows a little bit. That was a really loud bull market with a lot of madness, which certainly is not the reason why I’m here. I’m excited to build out some of the promises that the Ethereum has to offer. "},{"title":"Morganstern’s Ice Cream shop event during NFT NYC:​","type":1,"pageTitle":"2022-05-17 Town Hall Summary","url":"blog/2022-05-17-town-hall#morgansterns-ice-cream-shop-event-during-nft-nyc","content":"@kenbot-studiodao: Morganstern’s Ice cream is in downtown on the low east side. It’s always featured in all kinds of TV series, like Billions, and a totally iconic destination in downtown NY. He makes all kinds of flavors of ice creams, and he wants to make some custom flavors for the promotion so there would be some Juicebox oriented banana flavor that we can have some conversation with. At the same time last year, it was something like a prototype that if you have a token, you can get access to secret sandwiches not on the menu. This year, he’s going to do a burger pop-up with an incredible burger chef who’s nationally famous. So this would be like tagging along and building something for Juicebox where we can onboard people in real time in a special session of the shop he would hold for us. @jango: NFT NYC is a Monday - Thursday event, so we’ll block off a chunk of time from around noon till 6pm, which is the prime time for people in NYC to stop by and have ice creams and burgers. We could basically deck out the place in Banny, like you got Banny plastered in different places, you got ice cream flavors that Juicebox and Banny related. We can invite and meet up with folks whoever is in town. Folks can stop by, and like Kenny said they have some criteria like onchain criteria of contributing to JuiceboxDAO or having JBX or being part of the project or whatever we decide, if we ship the veBanny in time, it should be veBanny locked position or whatever. You can get your ice cream on the house and we essentially have conversations like explaining what Juicebox is or talking to project owners. Eventually we can go through the onboarding thing. We can invite project creators to talk throughout the week who may have expressed interest in starting a Juicebox project, or transitioning an ongoing project onto Juicebox. It’s like piggybacking what Morganstern’s is already doing as well as the NFTNYC and trying to flex our capability for Banny and Juicebox material into a hyper specific location, and meanwhile make it all about project creators. The approximate budget would be around 10k for the week perhaps including free ice creams. The DAONYC event by DAOplanet is on June 24 -25, right after the NFTNYC, so we might try to make the two events work together in some way. "},{"title":"7.Quizz time:​","type":1,"pageTitle":"2022-05-17 Town Hall Summary","url":"blog/2022-05-17-town-hall#7quizz-time","content":"In the statements below, two are true, one is a lie. Guess who it is?  The answer is…… @filipv, and he is not banned from any Starbucks. "},{"title":"2022-05-24 Town Hall Summary","type":0,"sectionRef":"#","url":"blog/2022-05-24-town-hall","content":"","keywords":""},{"title":"1. A bug saga by @jango​","type":1,"pageTitle":"2022-05-24 Town Hall Summary","url":"blog/2022-05-24-town-hall#1-a-bug-saga-by-jango","content":"Jango: This morning STVG posted at the loose_thoughts channel: What if we could pause a project mid-Funding cycle? He was trying to play with the Marine County Swim Association project(this is a sweet event pulled off by STVG) to pause it since the event was finished. And through a series of botched configurations, the project ended up in a really weird state. The project’s current funding cycle is set to start on May 28th which makes no sense as the current funding cycle should always be active. So at this point, something is for sure up or at least not served correctly or the front end isn’t interpreting correctly. That’s quick to check. The etherscan.io confirmed that the current funding cycle starts at a later day. I went to check the unit tests and there were a bunch of cases that I felt this was trying to cover and still passing. So I tried to create the situation exactly and was still struggling to do so. What ended up being the exact step to follow to recreate the bug which I eventually found was: if you create a funding cycle or configure a funding cycle with a duration and then let it roll over to the next funding cycle without reconfiguring, now you’re in the 2nd funding cycle, now you’re in the 2nd funding cycle of the 1st configuration. Then you configure the subsequent one, and before the current cycle is over, you reconfigure the subsequent one again to override the previous configuration. If you’re in this exact state, the 2nd reconfiguration, instead of being based on the 1st FC which you kinda rolling over onto, will be based on the funding cycle you are going to override. That puts us in a weird state. The edge case was not covered in the tests. So I quickly wrote a test and confirmed it, before I found the one line to add to the contract to fix the problem to make the test pass, which I’ll post here: So once we identified the problem, sorry I'm kind of doing a realtime postmortem here and I’ll write this up later, then we can start to think about the solutions and consequences. Luckily V2 was deployed only recently and there are only 27 projects at the time. And most projects don’t have large volumes in their treasury either, the bug doesn’t affect the treasuries so funds are all safe, too. All we are gonna do is letting these projects know that this condition exists, and from our point of view, we should probably make the adjustment in the funding cycle store which is a dependency like all other contracts or the core contracts in the ecosystem which is gonna nudge us towards republishing and redeploying the V2 contacts. It’s not 100% sure that we need to redeploy the project contract, which will be nice with all the NFT stays. Even if we do, we can get in touch with all these projects, make sure they can redeploy on the new version, make sure funds get moved over and make sure token holders get airdropped the new supply of the token. This comes in the name of diverse conversion stuff we have been talking about. We know we are working with fragile and delicate infrastructure. I am happy to catch this very early on in the process, as this V2 stuff just gets trickier over time. And then obviously if you were to know about it and think about it maliciously, it’s an exploit if you want to use it in that way. A big shout out to folks involved to kinda come through and help once we wrapped our heads around the issue. Peri came in right away and adjusted some of the front end to make sure new projects can not be created on juicebox.money. And shout out to STVG for clicking a button which you described as chaotic and you weren’t really sure if you miss-clicked a few things, or you did a couple of things twice because you forgot to do it. That ended up showing us the way. It’s pretty mind-blowing that that was a test case we have yet to cover. And it’s hard to believe there are any more of these lingering. The scope of these contracts is pretty tight. I think V2 actually removed bits and pieces of funding cycles, so the V2 funding cycle store is way leaner than the V1 one. I haven’t checked if the contracts of V1 have the same vulnerability in it, but I actually don’t think they do because that piece of logic got reassessed. @filipv: Huge shout out to everybody esp. STVG. This is so good that this was found now instead of 3 months from now. @0xSTVG: I’ll ask my original question. Is there a way to pause? I’m in a 5-day funding cycle, I reached my goal so I wanted to just pause payment even though I am in the middle of the funding cycle. I can’t do that, I can pause it but it’s going to take effect only when the current funding cycle is over. @jango: yeah, you can set up a pay delegate to revert the transaction if you’ve met a goal, you could write an extension that just does that if you want. But by default you can’t. Once we put it on the shelf then you’ll be able to pull it off the shelf and use it, but we have to build it out first. It feels like it’s at a lighter moment now. Most of the morning was pretty tense on my end at least, and obviously we take these things very seriously, make sure we’re articulating this stuff correctly and documenting that correctly. I think we are still all gonna make it. All V2 projects on the site currently have a sweet alert on them. Hopefully all the communities running on it, not just project owners we reached out, see this warning and get a heads up for what’s going on. Thank you Peri, for coming through.  "},{"title":"2. Demo of veBanny by @0xBA5ED:​","type":1,"pageTitle":"2022-05-24 Town Hall Summary","url":"blog/2022-05-24-town-hall#2-demo-of-vebanny-by-0xba5ed","content":"I’ll give a quick refresher on what veBanny is for, as I don’t know if everyone here has heard about or seen it before. So, veBanny is a way to make sure everyone who’s voting in the governance is focused on the long term instead of the short term. It’s a way to lock your tokens, the longer duration you lock for, the more voting power you’ll get. When you do that, you’ll get veBanny NFT to represent your locked tokens. (Screen sharing of demo starts) In the future you don’t have to receive the ERC-20 to lock your position. And it allows the public to extend the lock. @filipv: Can you explain very quickly what a public extension is? @jango: By default, once you’ve created a lock, then it’ll linearly decrease when time ticks on. Let’s say you lock it for 100 days, tomorrow the lock will be 99 days. So to get the full voting power, which is a function of how many days between now and the end of the lock, you’ll want to extend the lock back to 100 days, which is a transaction that needs gas. But sometimes if you have someone to be able to go in and send that transaction to extend your lock, you can set that flag to True. If you intend to keep a locked position, maybe you have a voting habit, or someone who can easily afford that transaction can go in and extend it for you. Or if you don’t choose that, we’ll have control over it so you can inch toward liquidity of your position at the rate that you choose. That thing was added as a result of discussion when this was being designed, that a lot of people want to keep their voting power full, but they might not want to be sending transactions regularly and this is precautionary. I don’t know at what frequency people will want to send that extension transaction on their own, but it was a quick flag to add that didn’t open up a lot of weird complexity, so we put it there. @filipv: Is that something that can be reconfigured? Can I send a transaction to turn off the public extension on a position that I already have? @jango: The owner can change that whenever. @0xBA5ED: So here it is, I own it(finished locking position). So I’m going to take a pretty big risk right now because I haven’t tested this on the testnet yet. Because the minimum duration is a week to lock, so I made one veBanny a week ago. Just one, so I haven’t tested it yet. We’re going to redeem it, we’re going to unlock our tokens and redeem them for ETH from the overflow in one transaction. So let’s see. @jango: This is another cool feature of the ve mechanism that is different from the traditional Curve ve mechanism on which this is based. Since Juicebox has redeem functionality, you can redeem your treasury tokens for the underlying treasury asset. At any point you can still redeem your locked position for the underlying treasury assets, independent of whether it's locked or not. So you can have your tokens locked for a year, you’ll be able to get your JBX back until the year’s up. But you can burn your NFT to get your JBX to get the underlying treasury asset whenever. @0xBA5ED: Exactly. So before I burn it, I thought that we just show the voting power actually decreasing. So this is my current voting power and every block that passes it’ll decrease. So this decreases linearly until all my NFTs expire, then I won’t have any voting power left. @filipv: So is voting a function of block number, or a function of time and it’s just updating on block numbers? @0xBA5ED: It’s a function of time operating on block numbers. (redeeming…) So here it’s gone already. As you can see I burned the NFT which also burned the JBX that was locked and I got the ETH from the overflow. I’m very happy that it works, actually I haven’t tested it yet. I know it was going to work, but still it’s a bit scary to do a demo live for the 1st time. @Felixander: A quick question in what jango was talking about, but let’s say somebody buys an NFT and they lock 100 days, and on day 75 they want to get out and they burn everything. So you can burn the NFT and the JBX. If they went in let’s say for 100 dollars, then on day 75 if they burn everything they are not gonna get 100 dollars back right? Is that gonna depend on the value of JBX or how does that work? @jango: They’ll be able to, all the underlying JBX are gonna be redeemed with the exact same function that the treasury normally redeems at. That doesn’t decrease linearly. The idea is probably the value of the JBX or the NFT, it’s literally the floor, so you might find more value in NFY by selling it on the market. But the point of doing this is because they were functionalities actually fairly meaningful in the Juicebox ecosystem since we’re minting JBX open-endedly. So someone can come in right now and put in like 6m dollars worth of ETH and they basically get 50% of the JBX supply or whatever. If they weren’t trying to coordinate with the rest of us, they could take everyone’s assets then basically use that big pool of JBX to control whatever was there before. The point of redeeming is that if somebody does that in a way that’s not trying to integrate with the current system, then anyone who currently has JBX is basically getting a shit ton of money from this person who comes in, so anyone who doesn’t want to be a part of that ecosystem can redeem basically and leave with a big chunk of what was just poured in. So this is in a way to disincentivize this takeover thing. So we need to keep that mechanism in place regardless of if JBX is locked because if we lock it and don’t keep that mechanism in place, that vulnerability becomes larger. @Felixander: One more question for the NFT profile page. Are we making a difference between different Bannies, obviously they have different histories and stats, or are we putting that in the NFT profile page or is it gonna be the same page and the info exists somewhere else on a website or something? @tankbottoms: The thinking was just keep the metadata inside the veBanny strictly about Juicebox with the exception of the name of the character, the model and the description will be added as well as these characteristics, shadowness etc. Everything in the metadata for the token will be related to Juicebox and will speak about Juicebox. There’s a location where we could put a URL in the description in the external URL so that in the opensea UI when you go to a detail page you can jump to it. The thinking was to keep it specified to Juicebox. With that said, there’s something you can do when you load up a web page with CSS and Javascript. I am trying to do some animation with the token, so when you go to a detail page, we could put a hidden link in that people can click to jump to Bannyverse. @Felixander: So the metadata will be the same except for the name? Or will the description model also be different? @tankbottoms: All tokens will be unique to the lock duration. There’s 300 tokens of each range, e.g. 0-99, 100-199, up until 100m and there are five locked positions for each token. Those 300 will have metadata that says who the character is, what the duration lock is, their motto and their history. The name of the token will be the name of the character. "},{"title":"3. veBanny Front End by @Jmill:​","type":1,"pageTitle":"2022-05-24 Town Hall Summary","url":"blog/2022-05-24-town-hall#3-vebanny-front-end-by-jmill","content":"(demo undergoing……) We have a deployment of this to Rinkeby now. I’m working on a contract reader actually populating those with real user data and then working on the transactions after that. The goal right now is to spend the next few days working on the contract reader transactions populating with real data and just moving the component around to where they need to go in the application and getting the front end of this at the door. @mieos: I think this looks pretty great in this little side panel. I was skeptical about it, if we’re thinking how projects could launch a toggle over to set a locked voting token option and this sort of pops up in the UI of their project. Maybe it’s a lot of info and there’ll need to be a lot of education that goes with their community, but it’s great that it can all happen right here. For what it’s worth, I think it looks pretty good. Maybe it’s because I understand it, but it looks nice to see it in action. @Jmill: I do agree with that because the flow for almost everything project management related is that it never takes you to a new screen entirely. Any other configuration you’re doing is out of the drawer or model, so you know that we can keep that paradigm for this also. I think it’s good that the actual controls of it are quite simple. If the user has 10 positions, there’s a good way to show that here without making them scroll forever. @jango: We’re also getting rid of the delegates onchain in this contract, which might allow us to really get rid of it from the UI as well and we’re managing the delegates via other means like Snapshot and potentially to other stuff. @mieos: I guess I missed that bit. I think that’s great, certainly simplifies the experience of a person who doesn't need to learn what it means to delegate or take part in that same moment. @jango: At this point, I think there’s still some research work for filipv on the best means. The Snapshot delegation strategy seems compelling, and there’s other schemas we’re thinking about. I think the goal of all this stuff long term is to get rid of the multisig. To get rid of the multisig we have to do some kind of on chain voting, and on chain voting can be expensive, so we have this delegation. I think there’s some creative ways we’ve been bubbling up in several veBanny related threads that seem really promising. The delegate stuff was a blocker for this to the voting weight stuff. I’m pretty confident that we can get rid of it from the design scope for the front end for the time being, we’ll work it back in later. @Jmill: Just from a user’s standpoint, it’s a really touchy issue of how you open up this delegate picker and how do you decide what to show, which delegate option to show to the user. There wasn’t a really great answer there as far as implementing that in the rest of the UI. I’m just working from the mocks but it’s pretty easy to remove the delegate stuff. @filipv: ENS sorted alphabetically and free delegate. One thing I should add about Snapshot delegation. There’re hybrid solutions you can do using safe snap to have on chain execution, but you still need off chain queuing, so I’m not confident in Snapshot delegation as a strategy long term on chain governance. It’s good for hybridized stuff and getting close to there, but ultimately there does need to be some form of delegation if we want to be fully on chain. But I imagine there’s other layers we can think about. @jango: Yeah, the disposable token strategy (see here) is very compelling to me. For now this project has a lot of merit and we still can lean on the same points of vulnerabilities that currently we are at. We’re having a multisig, having an on chain voting which seem fine tradeoffs for the time being as we work towards to study our future. If we can eventually have these as soon as people start having these Banny characters representing their position in governance then we’re going to see these characters everywhere because it’s kind of like an identity in the community. So as you start voting on Snapshot, we can also roll out interfaces and take inspiration for the work that folks at NounsDAO are doing to kind of participate with your Banny and lean in to the stuff WAGMI is doing to extend that even further. @mieos: I just love the idea of getting the Bannyverse and these veBanny off the ground, but I can’t wait till the next DAO actually just uses the same implementation of voting and either uses WAGMI or somebody else to create these stake tokens. I’m excited about this rolling out to other Juicebox projects and creating value from. "},{"title":"4. Product Roadmap by @aeolian:​","type":1,"pageTitle":"2022-05-24 Town Hall Summary","url":"blog/2022-05-24-town-hall#4-product-roadmap-by-aeolian","content":"@jango: The veBanny stuff is great but we can’t ship it yet because we don’t have V2 tokens up yet. And all the stuff that’s up depends on the V2 JBX being out. So we’re in a transition period of V1-V2. We’ve got to transition the V1 JBX to V2 JBX, and we’re currently talking about a few designs to do it. Coming off product roadmap discussion we’ve been having in the strategy channel, we are gonna focus on making sure folks have an easy way to pay their V1 JBX to the treasury and get their V2 tokens in return, and making it easy for other projects like SharkDAO for instance, to do the same. That way we can get a lot of V1 projects who are still using their treasuries in earnest onto V2 and then build these new features on there their folks can use. So I think that’s the area of focus for the time being and there's a couple of ways to go about it. Aeolian do you want to hit up the current thought process? @Aeolian: Totally. Quickly from Peel’s perspective and the front end perspective, as jango has said, the immediate focus is getting this V1-V2 migration flow done, designed and implemented. There’s a few different ways to go about it and jango said some good ideas in the strategy channel which everyone can check out. That’s our immediate priority. So Peel is going to return to development life cycle which is going to basically in line with Juicebox funding cycle, we're currently on FC#22, and the work we get loosely scheduled, everyone can check out here on our Github project. There are 3 main things we’ve been working on: V1-V2 migration flow, coming up with solution for handles for V2 projects which includes cool crossover with ENS names, some iterations on payout splits UX that making that a little more intuitive which is pretty exciting as well. We will be focused on these for the next 2 weeks to one month, ironing out little bugs that have come up in V2 and refining experience alongside these big features. And beyond that, we had really good discussions in the strategy channel. Definitely encourage everyone to come hang out there and drop ideas. I think the overarching alignment is to figure out how to get more activities on the network and more long term oriented activities. I still think there’s a few obvious things that we can build initially that have surfaced, and one of those is the multi token payment terminal stuff. “Roadmap is coming together in a loose way”. @jango: Everything is great. It’s occurring to me that finding the transition between projects is fairly meaningful to right patterns or timeing or whatnot. It’s sometimes not just a matter of feature itself but where it fits compared to other things. So all these little motivations can all play into the roadmap in an interesting way that certainly takes the high level metrics we care about into account. So it’s absolutely a luxury to have 4 or 5 really delicious projects on the finish line right now. But figuring out a way to actually take them through the finish line in a way that makes cohesive sense is gonna be a lot of fun and can take a lot of patience from a lot of folks who have been working on each of these projects. But I think many of them don’t really have and might find themselve wanting something if we don’t do another piece beforehand. If we try to do them all at the same time, it’s probably gonna be like everything somewhat half baked. We’ll revisit this discussion probably for 15-20mins in every Town Hall to give updates on where we are at. I think this line of thinking at least makes cohesive sense from our current standpoint, but can always change over time. "},{"title":"5. NFT Framework by @tankbottoms.eth:​","type":1,"pageTitle":"2022-05-24 Town Hall Summary","url":"blog/2022-05-24-town-hall#5-nft-framework-by-tankbottomseth","content":"(demo undergoing……) I’m thinking maybe anybody can make the NFT and associate it with a project. But in the recent discussions, originally any NFT that came out of this system is tied to a project, but there’s a bunch of feedback with a basic point that lets people do just whatever they want to do. I’m really looking forward to Aeolian's splits. The idea is making an NFT as a project owner or as a project contributor for a project to sell on the market place of Juicebox. There are everyone’s ideas to roll into advanced mode or simple mode. There can be instructions on image NFT, music/video NFT, and p5.js. As you can see, it’s just a lot of stuff. If you want to learn what to do, you can go to the create mode, and basically go through a PFP, or p5js or music, then create your collection to redefine your asset, review and deploy it and then price it and attach it to a project. @mieos: Where would a Juicebox project contributor who wants to send some money to a project go? Where would they go to purchase this NFT? How would that look? @tankbottoms: For things that need to be minted, this area where you can contribute could be a tab where you can mint an NFT. There’s also the idea that makes a kind of landing page for a mint, then there’s also the idea to have a Juicebox marketplace like Jango did. There’s definitely more experimentation where it’s gonna leave. The core ideas are making this tool pretty fancy and giving projects the continuous reasons to get ETH going into the treasury. They don’t have to worry about the whole split thing at some point after they do their NFT thing, like how much you want to go to the treasury or go to your wallet. I think that would be super useful. @mieos: I think the NFT capacity inside juicebox is gonna add a lot of functionalities for projects and sort of just simplify this heady shit for staking projects. And it’s just a lot and I think it just helps democratize getting contributors in the door and checking the boxes that make sure their project is strong and has all the utility. @tankbottoms: I hope so. I mean I don’t wanna work on stuff after this ever again, just put in everything I know how that you can milk out of an NFT and the tool to simplify it. I think in advanced mode or simple mode, everything will have a lot of feedback in terms of how it actually gets implemented. @mieos: I’m curious, Nicholas, do you have thoughts about this? You’ve seen a lot of projects roll out with NFT. Does this strike any chords inside you? @jango: This is definitely a big thesis on how the community can derive more cash flow. But it’s kind of a self-contained project for the time being, for sure it will make its way to product, once a lot of these granular things get knocked out in the next several months. I think this project could certainly have life on its own, maybe on its own site for experimentation to start. I feel very confident about the product per se and it’ll be unfolded in due time. @nicholas: That was really what I wanted to say. It’s so powerful and has so many tools in what you build. You’ve created all-in-the-best class creation tools in one tool. I know you’ve got ideas about on chain also, so it’s even like tools that barely exist and are separated from multiple products. If you are a generative artist, there’s a couple of things out there that you can use. There’s a few artblock clones, then there’s a manifold that has something, there are private companies that can work with you, is it good enough to be in direct competition with those things like a choice on people’s mind? Or is it like I want to do a Juicebox project and I want to fund it with NFT? I think the truth is probably it can do all of those things. I think probably just have it on its own site, as it’s going to be difficult to integrate elegantly. I want to think more about what interfaces make sense for it. @filipv: I wonder, looking at this demo and the demo by Jmill earlier, if it makes sense to start implementing some form of project page customization for project creators where project creators say if they want to put NFT market interface on their project page can switch on something in the metadata and then can configure what they want to show on their pages? @jango: If you look at the screenshots shared(below), I am very interested in the same idea. And I wonder if it’s gonna be self-contained in the idea of a payment terminal, so maybe instead of imaging the whole site as what you can bring your payment terminal which is basically a functionality to move funds into the treasury according to some means. The customization is at least scoped to that box, this is a mock that we’re still playing with ideas here.  @filipv: I think this is so exciting for existing projects, I know so many projects, like SharkDAO, have spoken about doing NFT issuance on Juicebox. This is pretty crazy. I don’t think anything like this exists in general and something like this could really draw people into the Juicebox ecosystem. Like Nichola said, this is a combination of all of the best. And the fact that this is in Juicebox potentially is super super crazy. "},{"title":"6. Dune dashboard of Juicebox logbook share by @twodam:​","type":1,"pageTitle":"2022-05-24 Town Hall Summary","url":"blog/2022-05-24-town-hall#6-dune-dashboard-of-juicebox-logbook-share-by-twodam","content":"New dashboard: Juicebox Logbook Display actions across Juicebox protocol with details, support search, sort and filter. Check use-cases below: default view, actions sort by timepayments with notefilter by ENS/addressfilter by project handle "},{"title":"7. Quizz time:​","type":1,"pageTitle":"2022-05-24 Town Hall Summary","url":"blog/2022-05-24-town-hall#7-quizz-time","content":"And the answer is…… @Zom_Bae!!!! "},{"title":"2022-05-31 Town Hall Summary","type":0,"sectionRef":"#","url":"blog/2022-05-31-town-hall","content":"","keywords":""},{"title":"1. Bug updates by @jango​","type":1,"pageTitle":"2022-05-31 Town Hall Summary","url":"blog/2022-05-31-town-hall#1-bug-updates-by-jango","content":"@Jango: The same bug update that I presented about last week that we caught about a week ago. As of a few mins ago about 95% got resolved to just the final step of re-issuing the tokens for those who contributed to projects before we re-deployed things. Everything is being tracked in the postmortem that is the V2 contract repository. I’m very excited to tie that off and make progress on all other stuff coming up. Also project creation is back up. filipv: I am gonna ask about litDAO specifically. Are they holding back token narration for all projects right now? jango: We’re gonna run a script to help go through play by play of what we’re doing. We re-deployed basically all the contracts except for Juicebox projects(so they can keep their NFT i.e. the ownership to the projects) and a few auxiliary contracts that don’t have dependency. We re-deployed the token contract, funding cycle store, the terminals, etc. Once projects re-launch their funding cycles, everyone starts from Funding cycle #1 again. The front end made it very easy to use the same configurations as their previous funding cycle in the old contract had. Once they make that, they also have 0 token supply in the new token contract. But several projects have already received funds and started distributing tokens. The original plan was to have project owners initiate a few transactions to airdrop tokens to their token holders, which is super doable but requires 3-4 transactions and it’s a bit complicated. In general, the scope of the problem is very small, given where we are in the protocol deployed a few weeks ago. So instead, I’m gonna send a few transactions that we scripted after this Town Hall that’s gonna deposit and basically re-created the activities for each project. Let’s say moonmars have received 10 payments each with its memo and it beneficiary of token. We’ll just send those out again. And from the deployer wallet as we run the script, we will pay in some ETH and set the original beneficiary of tokens as a beneficiary. So once all the activities are up again, then the token balance of each project should reflect their old token balance. I’ll open a proposal to refund the deployer. @filipv: So are we repaying all the balance that all the V2 projects have received so far? @jango: I think the total will be 11ETH if all projects are to relaunch funding cycles, which is a prerequisite, and then we’ll drop the funds in both as a bonus for everybody for the hiccup, and also thanks for the patience throughout this process. I think it’s better to solve this problem with money, than to cause poor UX, and I think it’s worthy given its scale. But this also taught us a lot about how to solve this problem given a larger scope. That loss is in lieu of communication headaches that cause us to make sure that the projects are clicking the right button and not getting themselves into other nuts. @filipv: Are we doing reimbursement for gas fees associated with redeployment and project updates? @jango: Yes. The big one is projects that have deployed ERC-20, which is the most expensive transaction. We have a list of projects that have that before, and we’ll drop in 0.2ETH in their treasury, which is part of the number I quoted before. After this call, I’ll run it and we’ll be super in the clear and make moves towards the stuff we were working on before. @filipv: Last question, what’s going on with the ETH in the V2 projects right now on the old version of the contract? Can project creators just distribute it if they’d like to, or figure out what they’re gonna do with it? @jango: For the most part those have been distributed. I went through to empty those out as the UI no longer interacts with them. You can always go to etherscan.io to pull them out. I think litDAO has a 100% overflow, so any funds in there can be redeemed by token holders. So if you did contribute to the DAO before, it’s now a fine time to go and redeem, or they can submit a reconfiguration on the old funding cycle to raise and pull funds out. It’s the bonus we’re going to give them if they want to go to the trouble to get those, which is for them to choose. Once we found this bug, it was tempting for us to just keep our heads down, mitigate it and try to fix it. But communicating with projects and making sure everyone understands what’s going on is important, so it’s certainly cool to do stuff and prod. It’s still pretty incredible that we found this bizarrely niche bug this early on. I’m pretty confident here going forward. It’s kind of weird to start and then already have a bug. I definitely understand if there’s a sense of hesitancy. I’ll have to work through that, give it time and put weight on it incrementally and regain trust in ourselves. I feel pretty good about it. "},{"title":"2. Morgenstern’s Ice Cream event by @Zom_Bae and @Kenbot:​","type":1,"pageTitle":"2022-05-31 Town Hall Summary","url":"blog/2022-05-31-town-hall#2-morgensterns-ice-cream-event-by-zom_bae-and-kenbot","content":"@Zom_Bae: If you haven’t been keeping up, Morgenstern’s Finest Ice Cream is hosting a JuiceboxDAO event for three days over NFT NYC. We, as a DAO, got to vote on 6 custom unique ice cream flavors, which is pretty cool. Check out this link, and submit your crazy wacky creations by June 2. On that day we’ll get a list compiled and vote on Discord for the top 6, which are going to be tweaked and refined by Nicholas Morgenstern himself and then be served at our event over the 3 days. Kenbot and I over the last week have been really digging into this and finding a way to make it more than just an ice cream social. And I think we’ve got a really unique opportunity here to bring some really cool projects into Juicebox and get them building in the protocol, and also really get the word out for Juicebox. We’ve been talking for a long time that Juicebox hasn’t really done a whole lot of marketing other than our twitter, word of mouth, and the big one-off projects like ConstitutionDAO and AssangeDAO. We are still in early phases for that, but the ice cream social the way it’s building up is gonna be an event inside an event of NFT NYC. We’re going to have a schedule of things going on each day. We’d love to do some twitter space, AMA and podcast if we can. Lexicon Devils are making a replica of this event in cryptovoxels.com , which is pretty cool. So any of you is gonna be in NY for this event and is willing and able and down to be a part of that, I really want you to be. @kenbot: What we’re thinking about is we can have their windows as soon as we can get going. So we can have a week running up before the event to promote right in the space what we are gonna be doing there. The thought is who do we want to reach out to, who’s walking by that place, who’s in downtown NY at that time, and we want to capture and have them come back. So that’s going to be ideas that we can have a theme of bringing creatives together, to open their Juicebox projects and fund their dream projects. "},{"title":"3. Stories about BlockSpilt and NFT Berlin by @Zeugh:​","type":1,"pageTitle":"2022-05-31 Town Hall Summary","url":"blog/2022-05-31-town-hall#3-stories-about-blockspilt-and-nft-berlin-by-zeugh","content":"@Zeugh: Me and JohnnyD have been going around for the last week. We’ve started the idea of testing the gorilla marketing tactics, by going to some blockchain, Ethereum or NFT conferences. This time we went to BlockSplits in Croatia and NFT Berlin so far. "},{"title":"1) BlockSplits​","type":1,"pageTitle":"2022-05-31 Town Hall Summary","url":"blog/2022-05-31-town-hall#1-blocksplits","content":"We got to BlockSplit on Tuesday last week. First thing we swa was a panel of legal side of things about new regulations in the EU and it felt like this was the wrong place to be. We came to this event for 2 main goals. The first one was to do some user research, try to listen to people that are creating projects, and try to understand how they currently manage their treasury. And the other idea was to onboard some of them. The event ended up evolving into something we understand as Web2.5. BlockSplit Croatia was more of using blockchain technologies on traditional startups. Interesting insights from BlockSplit were, there were some L2 builders from Boba network and they were interested in how we can bring Juicebox to their L2. I found it unusual that there will actually be people building L2 looking for people to go into their chains. I talked to them and onboarded them to our server. They want to come on and discuss how they could help a process like this to happen. Also from BlockSplit, there was a very interesting group called Resolute that focuses on web3 marketing. They got very interested in how we’re doing things and how they can help with that. I am bringing them to our server this week for them to take a look at our strategy discussion and the marketing part. Everyone got interested in how we are doing things actually, no one has ever seen a DAO actually run and work with a profitable and functional business model. "},{"title":"2) NFT Berlin​","type":1,"pageTitle":"2022-05-31 Town Hall Summary","url":"blog/2022-05-31-town-hall#2-nft-berlin","content":"From BlockSplit we flew to Berlin, and NFT Berlin was the opposite of BlockSplit, where most people were not directly involved with a project, they were mostly collectors and fans of the whole NFT fever. In there we got in depth looks at what NFT creation could use Juicebox for. JohnnyD was amazing in focusing in how we can create better models using Juicebox, some templates or preset configurations that could be useful for NFT creators, to give their buyers or investors more confidence in investing, to make sure that if a rug pull happens everyone has time to pull back. Those features made everyone’s eyes shine. We got in touch with NFT Club Berlin. They are a big local group of NFT investors and collectors. We have follow-up calls this week to show them how to use the templates so that they can start referencing that in their community. The experience as a whole was great beyond the event itself. We stayed for the hackathon, helped people on the hackathon deploy or understand something about our products. We got invited for the ETH Barcelona to be part of the hackathon there to help them get DAO hackathon. They are interested in having us as the main DAO on that, because we were one of those that does have an actual toolkit and a workshop and content to provide for a hackathon. And we faced the problem of gas fee in NFT Berlin again and again, for the fact that we only run on Ethereum was definitely a barrier for some project creators that we talked to. "},{"title":"3) Discussion​","type":1,"pageTitle":"2022-05-31 Town Hall Summary","url":"blog/2022-05-31-town-hall#3-discussion","content":"@filip: Do you feel like what you learned from those events changed your strategy? Do you still feel the same way about the strategy? @Zeugh: I don’t know. I really don’t know, because the strategy has been going back and forth from different talks, so I’m not sure if I have a clear feeling before saying it has changed. I definitely feel more confident on going projects to projects in an event, just talking about Juicebox, asking what people are doing and how they are doing. I learned better the right questions to ask to understand if we can provide value to them or not, and to learn why we can why we can’t. I think the most beneficial part was the user research part beyond the few projects we onboarded. I think it was the biggest gain. "},{"title":"4. Quizz time:​","type":1,"pageTitle":"2022-05-31 Town Hall Summary","url":"blog/2022-05-31-town-hall#4-quizz-time","content":" The answer is…… Casstoshi! "},{"title":"5. Hello from ComicsDAO by @gogo:​","type":1,"pageTitle":"2022-05-31 Town Hall Summary","url":"blog/2022-05-31-town-hall#5-hello-from-comicsdao-by-gogo","content":"@gogo: I’m really excited about the V2 release, and ComicsDAO will be dropping really soon. I have just to create the Gnosis and the multisig, and we’ll be dropping soon. You guys should know what we are doing. We do some cool things already with covers of ComicsDAO. You are all welcome to join. "},{"title":"JuiceboxDAO Town Hall June 07, 2022","type":0,"sectionRef":"#","url":"blog/2022-06-07-town-hall","content":"","keywords":""},{"title":"Warning of Influx of new members.​","type":1,"pageTitle":"JuiceboxDAO Town Hall June 07, 2022","url":"blog/2022-06-07-town-hall#warning-of-influx-of-new-members","content":"filipv: On June 7^th^, the Discord server of JuiceboxDAO was faced with a big influx of new members from Indonesia. According to @Zeugh, they came from several big Telegram chat groups that are mainly focused on airdrops. There might be a misintrepretation that if they create a project on rinkeby.juicebox.money and give feedback in the Discord server, they will be entitiled to some kind of Juicebox airdrop. We don't have any airdrop currently. Zeugh： I think it won't do any substantial harm to JuiceboxDAO, and think it a great opportunity to showcase the functionalities of our protocol to these people, and to onboard some new members who are really interested in our products. "},{"title":"veBanny Front End updates by @Jmill​","type":1,"pageTitle":"JuiceboxDAO Town Hall June 07, 2022","url":"blog/2022-06-07-town-hall#vebanny-front-end-updates-by-jmill","content":"Jmill: I have been working pretty extensively on the veBanny front end, trying to get it out the door. Now that the contracts are deployed, we can work to transactions and use real data. (sharing screen and demonstrating the process of staking tokens for an Locked NFT) So we're now minting this thing through the website which is cool. The stuff is all working now, and show up pretty cool. jango: I've also been on the contract side of things that @Viraz has been doing a great job, asking for reviews over the tests. The tests he's writing and adding more fuzzing tests to the suite. So hopefully at this point, it's throwing a lot of use cases at the cocept. And i suppose it'll make way on to the actual final details to complete the workflow. Jmill: The big thing next is to read the onchain data and get the use of NFT, and then allow them to extend their locked positions on a particular NFT. All of those are related to fetching data, about multiple tokens. We're talking about this in Peel's Discord, and right now it's implemented as ERC-721 Enumerable, but it'll probably be easier if it were structured similiar with Juicebox projects where you have a directory structure and subgraph, to look that information up without recursive calls to open by index. So that's probably what we need to start thinking about how we index these information for the purpose of front end to grab it and work with the data. jango: Yeah, that makes sense. Also from a juiceboxDAO or Juicebox perspective in Juicebox.money, we'll possibly first have to deploy their staking contract and specify the lock duration they want etc. It isn't going to be there for everyone first, they have to specify those things, so that that initial transaction to deploy a staking contract will go through a contract that somewhat serve as a directory or at least it'll file an event that's indexable to service a directory. If Peel and Juicebox.money feel it a decent thing to offer all projects over time and they should be able to interact with that same depolyer contract to get their own version of this. filipv:What's the timeline looking like? Is that somehting we can expect deploying in the next month? jango: We need V1 &gt; V2 migration to do it for JuiceboxDAO. We can deploy this for an arbitrary project though. We can launch a new project and just has it work there, so you can start minting stuff, just as normal treasury and lock it there, at which point there's not much difference between test and rinkeby as we currently are. But to get the JuiceboxDAO version of this and the Bannyverse version at least from a ecosystem perspective, we need to get V1 &gt; V2 migration, and then there might be other technical things along the way. Jmill: From a front end perspective, there are a couple of things that would be helpful so that there's some kind of indexing data you can easily pull user's NFT statistics. That's a more simple and scalable way to do with subgraph query. It would be really usefull if the ve NFT contract deployer also deploy a single consolidated metadata file. Let's say veBanny has 60 characters and they all have a name and staking ranges, it'll be really nice that the contract generate that as one file that front end could grab and parse to display without going to 60 metadata files individually. That would be a quality-of-life thing from the contract side for the front end. tankbottoms: We could add another function for that metadata, basically something that will conform with an NFT but also has pointers to all assets you need, because you can pick them through the JSONs however you want. Jmill: The last item I have here is that we're implementing beneficiary for this, so that users can stake and put someone else as the beneficiary. jango: That'll be useful for even a DAO to lock its supply, and designate other contributor or some other beneficiary for. It's cool to have flexibility. The core thing being built allows everyone on the peripheral of the project to start to wrap their heads around what situation it's gonna be when this thing is out there. "},{"title":"Product prospective with @Zeugh​","type":1,"pageTitle":"JuiceboxDAO Town Hall June 07, 2022","url":"blog/2022-06-07-town-hall#product-prospective-with-zeugh","content":" Zeugh: The Juicebox.money is a complex thing to use. I think it will be something to see that front end are more focused on some type of projects. Let's say there's a NFT project wants to launch its treasury on Juicebox, they can have a direct way for easy launch to help set it up ahead of time. You want to launch a NFT project and make the funds through Juicebox so people can co-own the treasury like tileDAO did and issue tokens for people that are minting. Those are some of the configurations that we think we should do. That could be something like Juicebox.nft instead of Juicebox.money. And if you want to go to the hard mode and be able to configure every single thing, that's still running on the same protocol. That's what I call the product prospective. We have a very good protocol perspective here that is building something really robust and can do lots of things. In the end looking at product level, maybe not all the users will need all of these things and having an easy way to launch might be something interesting. jango: I think there's a lot of to keep improving the onboarding stuff and especially we just came out of V2 trying to start with parity where V1 was. The name of the game now is just constant improving based on our own interest with onboarding as well as pulling together other people's perspective. It's hard to be certain that it's one thing or another thing from my point of view, but without question we're going to hinge towards better alternatives to prototypes that are massively useful. Shout out to JohnnyD and Aeolian and all the people in Peel who are eager and quick to make prototypes and start discord threads so that we can discuss the improvements. And then match this with a occasional AHA moment that a few different ideas come together that make sense to a lot of folks and somehow we unlock a lot more fluidity to the onboarding process. I'm certainly with you that we have a lot of work to do with explaining what people are getting into, like starting with giving everyone all the information upfront and make all risks as clear as possible. Overtime we can start to reel back into some managable shortcuts. I think now we're definitely buckling for more long term investments both from a building perspective and the relationship perspective with other communities. I'm eager to see how that project chart changes over time. I think from my personal perspective and talking to projects, the recent lows haven't been very encouraging for projects to launch. But now that V2 is out, we're going to see a lot more of that. nicholas: When I did onboarding with Austin from BuildGuild and he had some feedback about simplifying. It's a little bit difficult for someone on the outside to know exactly which simplifying approach will be successfull on the market aside from just iterating on simplifying the existing one. But I do have some suspicion that there are a larger category of people who are not so inclined to use Juicebox in its current form but might be inclined to do so for this example we're talking couple of times about NFT collections, splitting off a portion of their primary and/or secondary to Juicebox and letting the holders manage it, which doodles, cryptopunks and a bunch of other projects already do. That's a category I'm super interested in getting on the creation flow for that. It could be just like presets on what we've already got, or maybe an entirely separate creation flow where you can imagine entirely different front ends that just make creation really tight for a specific use case and then you can go use Juicebox.money's full advanced front end and subsequently managing those things but make it easier for people to get onboard. It could be pretty integrated at Juicebox.money. There's a lot to explore. filipv: One thng that we've discussed that might be interesting would be if there's a way to easily import and export project configurations which Austin Griffith originally brought up, for exporting a project that was made on testnet to mainnet. That might be cool because you can use that feature to set up templates that have base project configurations. Another thing I want to talk about is what we're discussing a lot in the chat about amount of metrics. I'm not sure how useful focusing on any specific North Star metric would be. It's very hard to encapsulate everything in Juicebox, and I think everything is conflating with each other. So I think we can take anything and roll with it, but I don't know if it's worthy going super deep into which is the best North Star metric. Aeolian: I'm totally with @filipv. I think the goal I originally had with proposing this metric was not so much like &quot;ok! Let's review this number every week!&quot; or &quot;Oh! it's going down, what's happening?&quot; It's more like what we're all in some sense collectively optimizing for everything from a product, website, documentation and content strategy, the whole thing. Our goal right now is to increase the number of active projects. I agree with you that at this stage where traffic is still very low, really trying to hatch out a metric that's instructive right now. It's more to get us all on the same page. jango: I think the general consensus is that it feels good to have activity. I guess you could put on a chart and optimize for it, but personally I want to think about metrics that make me lean in more in moment's notice seeing activities, and seeing folks I know engaging with other projects making me want to learn more about them. "},{"title":"Govenance discussion​","type":1,"pageTitle":"JuiceboxDAO Town Hall June 07, 2022","url":"blog/2022-06-07-town-hall#govenance-discussion","content":"@filipv: I want to open up some discussion on the recent governance cycle, both in itself and some of the proposals. One thing I want to bring up first is the possibility of changing the governance cycle in order to allow for longer temperature checks because I definitely feel the temp check are too short. But there's also balance if you lengthen the temp check, it makes it harder to get things through the governance process and it takes longer to get things done. We did a poll and people are really into the weekday idea.  nicholas: Since people prefer temp check ends during the week, I'd particularly like the proposal edit freeze to happen during the week, because I had to spend a lot of Sundays modifying proposals because people obviously just give comments leading up to the freeze and I prefer it end in the week. I understand people have jobs and I am certain that might not be convenient, but people from the poll seem to be happy with that idea. jango: For me personally, it's nice to end on weekend because I can do a lot more meeting oriented and dev oriented stuff during the week, and in the weekend, I can read the proposals and think about those. There's not much weekend breaktime. nicholas: How specified should proposals be? I made a suggestion that is three points if you add them to the proposals,maybe they will enable more delegation, because a lot of the burden getting the proposal through can be like knowing exactly what steps should be taken, when it's not always necessary DAO knows every single steps if DAO is willing to accept the risks, the implementation risk of someone delegating it to the person who's the author or someone specified in the proposal. I think it's a decent choice if it's a better financial allocation and also adding a risk in risk section which is like &quot;Look, we're not specifying the address the money got set to, we don't think that's a super important detail for the DAO to be voting on&quot;, but that's a risk we can screw up sending it to a wrong address because it wasn't specified in the proposal. It allow the proposal to move forward before all those details are sorted out. Some proposal do deserve to have hyper detailed specifications and it's important for the DAO to vote on it, others delegation will be more appropriate. I think that might be a interesting format for making governance more manageable. filipv: I'm definitely onboard with that. I think that thing need to be weighted very carefully just because it's not like we are going through a hierachy and people are revising it in every step. It's kind of like every proposal goest to the multisig like the one source of truth. It's like something running close to the middel very powerful and very dangerous. I think we need to be careful about specifications and and we don't want to lead to some DAO crisis when people are disagreeing on an interpretation of the proposal after the fact. First of all it waste a bunch of time, also people are gonna get upset and may lead to conflicts. So I am generally more of a stickler that we should have very specific proposals just because how dangerous it is. I wonder if there is a way to incentivize people to submit a bunch of proposals earlier so they can be spread out ever a greater period of time. We really see most proposal submitted close to the end of temp check. It's not an easy question to solve. nicholas: Part of the challenge is the 14days cycle, if you would like to submit a proposal for something and temp check submission just opened, that means you can no longer submit a proposal and you could be waiting for 20+ days till the next opportunity to vote. It may be worthwhile, for instance the bug bounty, I can see both sides on it, maybe a longer process allow us to consider, but at the same time, the protocol needs the bounty pretty badly. I think it would be of some value not entirely in the direction of everything being specified because the reality is that just making through all of that governance and having opinions on it is stretching the limits of the bandwidth of even the most dedicated members of the DAO. It also becomes less decentralized the more because people are just voting along with other people who have already voted. There's also some needs to us to recognize that actually the DAO doesn't need to vote on every single details of everything, and some amount of delegation is probably gonna be necessary over the medium term. filipv: Two thoughts on that. One is that I don't see why we couldn't do it right now like approving a budget in advance to reduce future governance overhead and go through that process. I think that's very achievable and I'm interested in pursuing that. Second thought is that jango has be mentioning lately the idea of possibly pursuing funding for projects and budgets for projects rather that fuding budgets for individuals or groups, which I think compelling because the structure of what we are doing shifts a lot and it's the post V2 transitory period. So I wonder maybe a shift towards budgeting for things get done rather than having all these smaller individual small group proposals may accomplish what you are talking about being able to improve things in advance and delegates to someone who's leading the project. jango: Some of the treasury allocations have also been tricky in the past weeks because we've been tuning the treasury create stuff on and off while we address some protocol problem. Those should be made well in advance in proposals being specified to be directed towards them. I am definitely in the camp of more hyper specificity upfront and throughout the temp check process. filipv: Would you want to work with Juicebox if you didn't get funding through an individual basis, but rather as a part of multiple projects? jango: The end of payment routing is still individual payout, either from a project that you control like what JohnnyD has, or through a direct payment from a project. The idea is that it's just not managed by a conglomerate governance system. felixander: I want to talk with JohnnyD and Aeolian about this. What happens when you bring a human on for a projects and the project is solved? It doesn't make sense for the system now because we've committed a budget to something that only took 2-3 months, but now somebody is there, but they're taking on another work that might be totally separating them from what they're doing. I think it's something a little bit messy in terms of how the payment structure works presently. jango: I feel that kind of work is really important when a project is starting out, that's still the case now and will likely still be months into the future. There's a lot happening and everyone is contributing to whatever the next person needs. So people are just shouting &quot;hey I got this dope thing in progress, it'd be sweet if I could have this ounce of help&quot; and luckily there's a lot of people around who are eager and feeling supportive to do that work. So the individual payouts feel appropriate in that world. I think that would set the expectation that there's a lot of stuff that we've building isn't just onging forever, we're not hired by JuiceboxDAO to be here comfortably and feel valued imbued and viewed by our relationship to one another and to the concept of the projects. Once those projects play themselves out, I think it's healthy to reassess what our purpose is amongst current state of the projects and how we can prepare ourselves for future state of uncertainty which are always upon us. That's the thing we can almost guarantee. felixander: Would that be the same way like Peel, WAGMI and Canu, the idea that people would branch off like Peel now is under a budget to do front end? You could imagine people who are doing docs would branch out and have a budget, and people who are doing translation would also branch off and have a budget. jango: I think that's in a creative part and I'm sure everyone will bring their own taste of how to frame these things. It's effective to pay Peel to work on the Juicebox.money project, front end developers can assess each other's contributions and payouts better than any multidisciplinary group would. These things will inevitably shift and change over time, as people come and go, as well as the projects changing. It's tougher for the community to rationalize consistent budgeting for an abtract group of people with an abtract but pointed mission, the individuals are liquid between all these project organizaitons and we hve to respect that. People are going to find their leverage over time and they don't owe anything to any organizations. We're all just building ourselves out and learning from each other in this whole process. I think we're going to see a lot of different ways to organize it. Shout out to Zom_Bae creating the Juicebox events version for the upcoming ice cream event and it's in a potential to add more longevity to that concept. What if we're to actually trying to fund events consistently and have a pool of resources that we can make this up every single time. We can just re-reference something that we know to be true already. I think we're on the same page eventually. We've got to create the right incentive model to shift away from building up the Juicebox foundation to supporting one in any numbers of projects and then servie it to the world and make it the gateway. But as the protocol tends towards stability, it'll be great to have tighter articulation of what it means for a project to succeed over time. Aeolian: I do like what @casstoshi brought up about the idea of each group having a budget and individual contributors are paid from that budget. I think Peel has done this. At a time all the front end people were doing individual proposals to JuiceboxDAO and the sentiment was that it's hard to evaluate these proposals. So intead JuiceboxDAO votes on a single budget for front end and that team can handle that budget as they see fit. I'll post a link that Drgorilla posted earlier about how makerDAO manages this process where there's a clear budget for each abstract collecton of people. It definitely breaks down as we've seen with some proposals over the last couple of weeks. It's hard to pinpoint someone into one of those particular groups, people can work ver much across thses groups. I still think it's instrutive not only from accounting perspective but also from an organizational perspective, it just makes it easy to reason about someone's payout if they're clearly contributing to a specific area. "},{"title":"Project highlights​","type":1,"pageTitle":"JuiceboxDAO Town Hall June 07, 2022","url":"blog/2022-06-07-town-hall#project-highlights","content":"gogo: I'm very glad to be able to discover the future of ComicsDAO and strategy of what we're gonna do there. We had a super contribution from JuiceboxDAO from the beginning which is pretty amazing. I would like to share what we just thought. So we basically are doing a full story and the beginning starts with this post here.What I would like to propose is that this is our heroes Banny and they're travelling throught the DAO galaxy to DAOs. We would like to know where JuiceboxDAO would like the ship to go to the next DAO, so that we can keep on building covers to next DAO. Let's create a poll here and vote on the DAO that JuiceboxDAO decides what ComicsDAO is gonna do next. Another thing is that, we had a big player, this guy is amazing and helps us a lot. We are having fun creating next cover for other DAO, and we are going to make some jokes for JokeDAO and get partnership to work with them. jango: That's the coolest part of ComicsDAO. I love the treasury management, a part of which is to buy rare comics and hold thme, but the day to day potential of being the storytelling branch of differnt DAOs, which is immensely powerful. And so far you are all playing really well, well done. nicholas: There're a bunch of really cool projects this week. JokeDAO just launched a super sick governance experimentation project. Austin Griffith's BuildGuild got launched this week and there's a proposal to fund a hackathon for them to transform scaffold-eth into something compatible with Juicebox or to build the hackathon projects using scaffold-eth with juicebox involved in the picture. And as jango mentioned in his twitter that Juicebox front end is based on scaffold-eth. So it's very cool to see comfort circle, and hopefully we will be able to fund a modest hackathon to get the treasury kickstarted with funds, hopefully getting that brew of hackers into the ecosystem. @twodam's has posted a twitter about this week's projects here. jango: Super exciting. Thank you @nicholas for doing a lot. Most excited once we get the V1 V2 token stuff, situated to start talking to the SharkDAO, or a lot of folks operating on V1 still doing ongoing work and fundraising, to see if they want to move over and leverage some of the new tools to make their projects more successful, whatever that means to them these days. But I think we're still a little ways away, so getting new projects on is still the name of the game for sure. "},{"title":"Quizz time:​","type":1,"pageTitle":"JuiceboxDAO Town Hall June 07, 2022","url":"blog/2022-06-07-town-hall#quizz-time","content":" Oh man, this episode definitely needs a PG rating for sure. I won't compile it so if you are interested, check out recording and jump in to 1h25'00&quot;, you're welcome! And the answer is........ $$ Sage $$ "},{"title":"2022-06-14 Town Hall Summary","type":0,"sectionRef":"#","url":"blog/2022-06-14-town-hall","content":"","keywords":""},{"title":"Front end updates with @aeolian and @peri​","type":1,"pageTitle":"2022-06-14 Town Hall Summary","url":"blog/2022-06-14-town-hall#front-end-updates-with-aeolian-and-peri","content":"@aeolian: It has been a while since we gave an update, quick couple of housekeeping things on what Peel's up to. So for the last few funding Cycles, we've been operating in two experiments, which has been really great. These align with the Juicebox funding Cycles, I'll drop a link in the town hall chat for those who haven't seen it before. So we're basically scheduling issues every two weeks that is aligned with the JuiceboxDAO funding cycle. And I think what we're going to plan to do is to give a recap of the previous funding cycle every two weeks. So next week, we'll give a recap of all the stuff that was done in the last two weeks, which is going to be really really great this time around there's been so much done. So definitely don't want to miss that. I want to highlight one quick fun feature. That was merged yesterday. So this is the ability to add Banny stickers to Memos, which is a small thing, but potentially a fun feature which some of you have been enjoying. So thank you for everyone who worked on that particularly JohnnyD who led the implementation. Check JohnnD's twitter for a video demo of this. There's four big things in flight at the moment. And I'll list them out in order of the time that they'll be shipped more or less. The first is giving projects the ability to relaunch on V2 and giving token holders the ability to migrate their tokens to the V2 project.Second is V2 project handles, which is being led by Peri. Right now projects on V2 don't have handles like they did in V1 so that is adding support for those. The third is NFT rewards for projects. Essentially it's giving projects the ability to specify like if you contribute a certain amount of funds to this project, then we will reward you with an NFT. So that's going to be really exciting giving projects another avenue to get funding which is great. And then the fourth is obviously veBanny and staking. So I will quicking give an overview of what's in store with V1 V2 migration, basically we need to give V1 projects the ability to relaunch on V2. So the canonical example is juiceboxDAO. We're a V1 projects. We also now have a V2 project but none of our funds are in the V2 project. What's gonna happen is the projects will re-launch on V2, JuiceboxDAO has already done that so we have a project on V2. They're then gonna move their whole balance to the V2 project. They're going to add another payment terminal to the V2 project, and this is a special payment terminal where it'll accept a V1 token and then return the V2 token in a 1:1 exchange rate. So basically if I have Juicebox V1 token, there'll be a place in the interface to go to swap my V1 tokens for the new V2 tokens. And that's pretty much it. So the contracts are more or less done. Thank you to jango Dr.Gorilla and whoever else worked on that. That was really quick turnaround. And now it's pretty much up to the front end to get the UI done for all of what I just explained. And then we'll finally have upgrade path to some V1 projects to get on V2 and use all the cool new stuff. @peri: I think as everybody knows we still aren't supporting project handles for the new V2 projects. And this is basically just has to do with some of the changes that are made in the contracts. We used to store a handle for a project on chain and it requires a lot of extra finessing in the contracts because we had to make sure that people can use the same contract and that handles could be transferred and reserved for certain period of time and claimed, there's a lot of functionalities to bake in. So with the V2 project contracts, we just skipped over all that because it ended up not being very necessary for the functionality of the contracts themselves. But the downside of course is that it's really nice to have in the app to be able to look up projects and search for projects. So we've been working on another layer, another contract to add into the existing contracts that will support handles for V2 projects. It is not quite finished and it's not on mainnet yet. But we do have everything kind of functionally together so I can give a demo of how it'll work in the app and explain how it works pretty quickly.  (screen sharing ongoing) So I've got this empty project here on Rinkeby, ID 4117. And we are going to set a handle for this project. We've got a two-transaction-process for setting a project handle. And so the way that this works is we decided to use ENS names to handle the uniqueness of project handles what I mentioned earlier for making sure that handles be passed around and exchanged. There's a lot of complexity there that ENS has already solved really beautifully and so we built the system around ENS names. The idea here is that if you want to use a handle for a project you will need to own the matching ENS name. So for example, I just got this ENS name on rinkby testinginprod.eth and this would allow me to set the handle of this project to testinginprod. So I'm gonna do two steps here, I have to own this ENS name first of course, I'm going to set the ENS name testinginprod.eth and this would be one transaction. Once this completes, step one will be done.The next step here is to actually set a text record on the ENS name. So if anybody's used the ENS name app before you'll know that you can come down and set these text records for any number of different things. We are using a particular key &quot;Juicebox project ID&quot;. You can come and set this property in the ENS name app manually if you want, but that's a little bit of extra work. So we've made it nice, pretty and clean in the app and you can basically come down here and click this button and we're gonna set that value in the ENS name text record to the ID of this project. So this one is 4117. So I'm going to send this transaction, which is the same as if I just came over here and just manually put 4117 here. That'll show up here if you got the handle set up. Most importantly that'll allow your project to be searched on the projects page. Right now the search bar works by searching for project handles and V2 projects don't have handles you can't search for them. It's very lame that is now a thing of the past as soon as you set a handle for your project. Your project will be searchable. An important thing to note is that either of these things change, for example if you were to transfer the ENS name and someone else changes that text record, your handle will go back to empty. So you have to have both of these things set constantly or if you were to change this to some other ENS name, your handle would go back to empty. Another fun fact is you can also actually do subdomains here. We will hopefully have that on mainnet this week. I'm pretty sure we're doing. some just some last-minute things, but mostly everything is good to go. So expect it pretty soon. @0xSTVG: So does that mean that I could create multiple projects with subdomains of my ENS? @peri: You could. But you can't have multiple projects using the same ENS name. So if you had like STVG.eth, and you want to do like one project one.STVG.eth and the other project two.STVG.eth, those could be two separate handles for different projects. @mieos: Once we get that up and running, I think a screen recording of you going through that or WAGMI can put together a little infographic on what it is and how it works, especially when it gets up to the subdomain part, it's just technical enough. "},{"title":"veBanny by @Jmill​","type":1,"pageTitle":"2022-06-14 Town Hall Summary","url":"blog/2022-06-14-town-hall#vebanny-by-jmill","content":"I want to show a map with the veBanny stuff. I've been doing some work on the subgraph implementation to index the user tokens and interact with them. Right now we had a couple of big steps forward. One thing is there's now a metadata file to parse for all the the characters or the variants so you can go through and scroll through the characters and figure out which one you want and then you can see them all in here, too. So that's been a nice upgrade because you can pull that all from one place now. (screen sharing ongoing) So these are NFT positions that I've taken on this account. So you like lock positions that are actually coming from on chain. And then you can interact with them also, so I can do that to extend the lock or I can unlock the ones that have finished. So I can take this one and extend the lock like a thousand days. Then it takes a minute for the graph to re-index it, but it'll show up 30 seconds later with the new lockdate. And then other than that I showed this last week, we have a new contract where you can mint for one second just like test the unlock and redeem stuff. But yeah, I showed this on the last demo where you can also like take a staking position and actually mint these things through the front end works also. "},{"title":"quizz time:​","type":1,"pageTitle":"2022-06-14 Town Hall Summary","url":"blog/2022-06-14-town-hall#quizz-time","content":" The answer is.... Nicholas As a student I made jewelry and garment. I was a nationally ranked debater.I haven't been Malta before. "},{"title":"NFT update by @JohnnyD​","type":1,"pageTitle":"2022-06-14 Town Hall Summary","url":"blog/2022-06-14-town-hall#nft-update-by-johnnyd","content":"@JohnnyD: I'll just add a few sentences to what @aeolian has summarized before. We're gonna be automatically rewarding contributors NFTs when they contribute above a certain amount. and then the next step will be adding a restriction around, such as time restrictions so ensuring that those NFTs are distributed only before a certain funding cycle. But for now, we're just going with the amounts. "},{"title":"Announcement from @briley​","type":1,"pageTitle":"2022-06-14 Town Hall Summary","url":"blog/2022-06-14-town-hall#announcement-from-briley","content":"@briley: Yeah, thanks. I was just gonna make a small announcement that Matthew and I are recording podcast episode with lexicon Devils on Thursday if you have any questions that you would like to ask you can let us know. Otherwise, we'll be doing that in advance of the JB MorganStern's voxel slash IRL event. "},{"title":"Lexicon Devils, A Metaverse Architecture Guild Running on Juicebox","type":0,"sectionRef":"#","url":"blog/2022-07-14-lexicon-devils","content":"","keywords":""},{"title":"Metaverse architecture and video games​","type":1,"pageTitle":"Lexicon Devils, A Metaverse Architecture Guild Running on Juicebox","url":"blog/2022-07-14-lexicon-devils#metaverse-architecture-and-video-games","content":"I spent the majority of my childhood exploring the internet and playing classic computer games like Age of the Empires, The Secret of Monkey Island, and especially The Sims. For hours and hours I would build, design, and arrange anything I could think up. Unbound by the limits of gravity, money, or even common sense, The Sims was an excuse to imagine what was possible rather than what was realistic. At the time this maybe seemed like a silly diversion, but like many of our early internet activities this turned out to be great practice for the future that was hurdling towards us. Spending hours customizing a Myspace page was, in retrospect, a great introduction to frontend development. And perhaps The Sims was the perfect introduction to metaverse architecture.  Old Town in The Sims (2000) "},{"title":"Lexicon Devils origin story​","type":1,"pageTitle":"Lexicon Devils, A Metaverse Architecture Guild Running on Juicebox","url":"blog/2022-07-14-lexicon-devils#lexicon-devils-origin-story","content":"Lexicon Devils, named after an EP by LA punk rock band Germs, is a guild of metaverse builders architecting virtual experiences in Voxels, Substrata, and beyond. They acquire parcels, design and execute complex builds, and organize interactive events including DJ sets, treasure hunts, parades, art exhibitions, and performances. Around the time that Shark DAO was making waves, Peacenode got a call from Stav and started chatting with Nicholas and Dropnerd about this “beautiful infrastructure layer of the internet that we’re all building on Ethereum.” One thing led to another and Peacenode was soon talking with Mieos from WAGMI Studios about a cross-DAO collaboration to create a Juicebox metaverse experience and the rest is history. I’ll never forget meeting Wacko, he was rocking the most insane wearables every 30 seconds. We just had to ask if he could join us and put him on the payroll. — Peacenode Rather than sending funds p2p, Peacenode explained that the Lexicon Devils project on Juicebox would issue payouts to a team of contributors on a set schedule. In other words: “I know you don’t know us, but let’s hang out.” Building in the open with a trustless, transparent treasury means easily building friendships and communities regardless of identity or credentials. Find your community, bring the good vibes. And who knows, you might even end up making an ultra tropical banana-themed learning center complete with an animated gondolier.  The first iteration of the Juicebar and Juicebox Learning Center "},{"title":"A home for Banny: iterations of the Juicebox parcel in Voxels​","type":1,"pageTitle":"Lexicon Devils, A Metaverse Architecture Guild Running on Juicebox","url":"blog/2022-07-14-lexicon-devils#a-home-for-banny-iterations-of-the-juicebox-parcel-in-voxels","content":"v1 of the Juicebar was built as a home for Banny, the iconic blunt-smoking banana mascot of Juicebox. It was also home to the Juicebox Learning Center, a juicy and playful institution where visitors could watch videos about the protocol, learn terms in the glossary, and participate in ongoing JB events. This tropical parcel quickly became an oasis for long-time Banny devotees and newcomers alike to learn more about the crypto crowdfunding protocol that enables anyone to fund the “thing” of their dreams on Ethereum. As part of the growing bannyverse, WAGMI Studios and Lexicon Devils organized the first ever JB metaverse treasure hunt with clues that make up a seed phrase… but only with the help of a decoder. Prizes included 200,000 $JBX and a treasure chest filled with dope NFTs.  The Bannyverse Treasure Hunt Since October 2021, the Juicebox plot in Voxels has gone through many iterations as a center for learning, discovery, and entertainment. It stands out from surrounding parcels with its attention to detail and references to IRL architecture and design. Through pixelated curves and large windows blending the inside and outside, the current Juicebox v2 build combines characteristics of mid-century modern design with a tropical Banny aesthetic. Bringing this all together in one big juicy cocktail, the v2 build is a utopian dream in line with the ethos that anyone can grow and fund their dream project.  v2 of the Juicebox Learning Center, Transit Center, and Juicebar "},{"title":"Lexicon Devils' wild and imaginative custom builds​","type":1,"pageTitle":"Lexicon Devils, A Metaverse Architecture Guild Running on Juicebox","url":"blog/2022-07-14-lexicon-devils#lexicon-devils-wild-and-imaginative-custom-builds","content":"In addition to building for Juicebox, Lexicon Devils have designed and built a custom HQ for Dreams Never Die, a web3 music DAO, and a browser-based metaverse experience for NFT project Slothtopia. Wackozacco was also commissioned to design a number of custom builds on Architect Island which draw inspiration from Neo-Andean, Oriental, Tudor, and Structural Expressionism movements.  Dreams Never Die HQ at 31 Bran Ave  Custom builds by Wackozacco on Architect Island left to right: 3 Schism Street, 7 Marayaco Ave, 2 Schism Street, 29 Marble Road I never would have imagined [becoming a metaverse architect]. I was designing video game skins when I was younger, not really thinking about it. As I was growing up, I felt like I needed to do something more meaningful and then I found out that you could paid for doing stuff like this. It was a re-discovery of a passion and realizing that it can produce value. — Wackozacco Whether referencing the physical world or playing with what defies reality, Voxels and other metaverses allow for architects to focus on design and function rather than costs, materials, or bureaucratic mazes like zoning laws. Anyone is able to learn to build in the metaverse, regardless of their education or previous knowledge of architecture. Coming from a wide range of backgrounds, the team at Lexicon Devils has spent the last year creating metaverse experiences and custom builds for other orgs, all while managing their treasury on Juicebox. If you had asked me in January 2020, I couldn’t have anticipated where I am today with my friends. It’s pretty amazing. Actually, when I was a kid, there was a stint where I wanted to be an architect. I was a Lincoln Log kid, so maybe it makes sense. — Peacenode  Lincoln Logs, a popular children’s toy invented in 1916 by John Lloyd Wright, son of well-known architect Frank Lloyd Wright. "},{"title":"FORMING and coming full circle with Juicebox​","type":1,"pageTitle":"Lexicon Devils, A Metaverse Architecture Guild Running on Juicebox","url":"blog/2022-07-14-lexicon-devils#forming-and-coming-full-circle-with-juicebox","content":"As the pinnacle of their monthly Juicebox event series Lexicon Devils is hosting FORMING, an experimental hyperverse concert with a curated lineup of performances by web3 musicians. Lexicon Devils has created and funded a new Juicebox project through which all participating artists will be paid in ETH. By paying musicians through the project, artists also get a chance to learn first-hand about the Juicebox protocol and how it works. “That’s the synthesis of our experience of learning about Juicebox. It’s not just an event at JB, but an event that gets people to learn about JB through our events”. — Wackozacco "},{"title":"Relevant links​","type":1,"pageTitle":"Lexicon Devils, A Metaverse Architecture Guild Running on Juicebox","url":"blog/2022-07-14-lexicon-devils#relevant-links","content":"Listen to Peacenode and Wackozacco tell the story of Lexicon Devils on episode 8 of The Juicecast Visit the Juicebox parcel in Voxels Visit the Lexicon Devils HQ in Voxels Follow Juicebox on Twitter: @JuiceboxETH Follow Lexicon Devils on Twitter: @Devils_Lexicon Set up a Juicebox project on Juicebox.money "},{"title":"SharkDAO, A Sub-DAO Raising Funds to Participate in the Nouns Ecosystem","type":0,"sectionRef":"#","url":"blog/2022-07-18-sharkdao","content":"","keywords":""},{"title":"WTF are Nouns?​","type":1,"pageTitle":"SharkDAO, A Sub-DAO Raising Funds to Participate in the Nouns Ecosystem","url":"blog/2022-07-18-sharkdao#wtf-are-nouns","content":"Nouns is an on-chain generative NFT project and experiment in community building through avatars. Nouns are 32x32 pixel characters with heads that represent a noun like “igloo,” “skateboard,” or “peanut.” One Noun is auctioned every twenty-four hours, forever, with all proceeds going to the Nouns treasury. When one auction is settled, the next Noun is generated and a new auction begins. Each Noun is entitled to one vote in Nouns DAO governance which decides how the treasury should be used. Auction bids for Nouns can easily reach over 100 ETH. As a result, owning a Noun is often limited to those that can afford to win these competitive auctions… unless you’re a member of SharkDAO ⌐◨-◨ "},{"title":"SharkDAO, a shiver of Nouns enthusiasts 🦈​","type":1,"pageTitle":"SharkDAO, A Sub-DAO Raising Funds to Participate in the Nouns Ecosystem","url":"blog/2022-07-18-sharkdao#sharkdao-a-shiver-of-nouns-enthusiasts-","content":"Did you know that a group of sharks is called a shiver? SharkDAO brings together Nouns enthusiasts with the shared goal of acquiring Nouns and contributing to the Nouns ecosystem. Together they pool funds, participate in Nouns DAO governance, and partner with artists, developers, and DAOs to create Nounish experiences. This has taken the form of podcasts, NFT collaborations, and Nouns DAO proposals like e-sports initiatives and CC0 Story Bibles. They currently hold six Nouns: 2, 5, 15, 33, 47, and 139 which have been named by the Shark community as follows: 🍍 Noun 2: Piña, named after its pineapple head 🪚 Noun 5: Bruce, a reference to actor Bruce Campbell who wields a chainsaw in the movie The Evil Dead 💊 Noun 15: Morpheus, based on Laurence Fishburne’s character from The Matrix 🐸 Noun 33: Froger, named after its frog head 🦈 Noun 47: Swimshady, the cool alter ego of the Shark Noun 🔒 Noun 139: Paddy, named after its padlock-shaped head  Left to right: Nouns 15, 2, 33, 47, 5 and 139 "},{"title":"Building the plane while you fly it​","type":1,"pageTitle":"SharkDAO, A Sub-DAO Raising Funds to Participate in the Nouns Ecosystem","url":"blog/2022-07-18-sharkdao#building-the-plane-while-you-fly-it","content":"As an experiment in on-chain avatar communities, Nouns DAO’s mission is to spread the Nounish word with the help of Nouns holders who make up the voting body of the DAO. While projects such as CryptoPunks have attempted to bootstrap digital community and identity, Nouns attempt to bootstrap identity, community, governance, and a treasury that can be used by the community for the creation of long-term value. — Punk 4156 Holding only 6/300+ votes might not seem like much, but lurking beneath the waters SharkDAO is active in discussions, pushing ideas through the ecosystem, and able to get a lot more done than what their voting power implies. Since Nouns has no roadmap from the Nounders (founders), Nouns is community-owned which gives power to holders to propose initiatives and decide how to use treasury funds. In other words, the task of building community and shaping the future of Nouns belongs to community members who hold Nouns, rather than the founders. SharkDAO, as one of only a handful of sub-DAOs within Nouns DAO, is one of the groups building this roadmap on-the-fly. “In short, sub-DAOs participation in a DAO is shaping and contributing a voice to that community so that the best ideas get surfaced, voted on, and make an impact in the world.” — Dropnerd  SharkDAO and NounsDAO visualization from sharks.wtf "},{"title":"SharkDAO, the meme that jumped from Rinkeby to mainnet​","type":1,"pageTitle":"SharkDAO, A Sub-DAO Raising Funds to Participate in the Nouns Ecosystem","url":"blog/2022-07-18-sharkdao#sharkdao-the-meme-that-jumped-from-rinkeby-to-mainnet","content":"It all started with a small group of frens helping Nouns DAO test out their auction mechanism before it went live. Goldy, 4156, Dropnerd, Lithium, Kenbot, Del Piero and Defi Jesus were a few of these early swimmers. The Shark Noun was one of the first Nouns that was acquired on testnet by the group and they decided to build around that Shark identity. They launched a Discord, started bringing in contributors, and began planning how they were going to crowdfund to buy Nouns.  4156 announcing that the Rinkeby shark was acquired (tweet) SharkDAO is a meme that jumped from Rinkeby to mainnet.”  — Kenbot in a Twitter Space hosted by nnnnicholas When it came to figuring out how to fundraise in order to bid on the first Noun, Kenny dives into the Discord and suggests a cool project he heard of called Juicebox. Building a treasury on Juicebox would allow the group to trustlessly raise funds and manage their treasury, without the risks of YOLO’ing ETH into a multi-sig.  SharkDAO project page on Juicebox From there, SharkDAO set up a Juicebox project on Rinkeby. Dropnerd was doing the testing and was still new to signing transactions. “I was very excited to see everything come together so easily without needing to interact with a bunch of smart contracts directly,” he explained. “The UI showed me exactly what was going on which made it a lot easier for the DAO. Looking back I can’t think of another platform where we could have raised 200+ ETH in the first few days without the help of Juicebox. "},{"title":"SharkDAO catching the Shark Noun 🎣​","type":1,"pageTitle":"SharkDAO, A Sub-DAO Raising Funds to Participate in the Nouns Ecosystem","url":"blog/2022-07-18-sharkdao#sharkdao-catching-the-shark-noun-","content":" Noun 47, the Shark Noun Although new Nouns may seem random and impossible to predict, their traits are actually determined by the previous blockhash. And if you’re particularly clever, you can use the crystal ball to predict and even choose the next Noun that will be generated 🔮 Before the Shark Noun was generated, founding member Goldy was eyeing the Noun Crystal Ball every day for weeks. This magical tool shows you what the next Noun will look like if the auction is settled on the current block by calling the settleCurentAndCreateNewAuction() function in the NounsAuctionHouse contract. Usually the winning bidder will settle the auction, but anyone can call settleCurentAndCreateNewAuction() at a particular block and help decide what the next Noun will look like. In a glimpse of a moment, Goldy saw the Shark Noun in the Crystal Ball and submitted the transaction before the next block to secure it.  The Noun Crystal Ball 🔮 SharkDAO had to act fast if they wanted the Shark Noun. The DAO established an auction committee, re-opened their Juicebox project, and expanded their multi-sig to include 5 members. Within the first few days of re-opening for contributions, they received over Ξ150 from community members. "},{"title":"Where there’s a will, there’s a wave 🌊​","type":1,"pageTitle":"SharkDAO, A Sub-DAO Raising Funds to Participate in the Nouns Ecosystem","url":"blog/2022-07-18-sharkdao#where-theres-a-will-theres-a-wave-","content":"The team suspected that someone was watching within the DAO and took their calls offline to discuss the details of their strategy in real time, including their final bid number. It wasn’t an easy auction to win though: the Shark Noun was desired by many and led to a jawesome bidding war. Over the next 24 hours the bidding quickly went past Ξ100 and then Ξ200 soon after. It became clear that the price of Noun 47 was going to swim past most Nouns auctions, apart from the very first Noun that sold for Ξ600. After their penultimate bid of Ξ244.82, SharkDAO was getting pretty close to exhausting the amount that they set aside for the auction. Though winning Noun #47 was non-negotiable, they also needed to conserve enough treasury funds to ensure that the DAO could continue to build into the future.  Timeline of some of the final bids on the auction for Noun 47. If a bid is placed in the last five minutes of an auction, the timer is extended by another five minutes. Due to the cumbersome nature of bidding via a Gnosis Safe, the DAO came pretty close to losing the shark. There was even one bid where the last signer was executing the transaction with only 45 seconds left on the clock. After a last minute bid of Ξ258.88 by 0xa8...0e7d, the team had minutes to coordinate and agree on the next bid price before multisig signers could approve the transaction. And on September 21, 2021 at 2:19am, SharkDAO won the final bid for 269.69 ETH.  Noun 47, the Shark Noun "},{"title":"SharkDAO celebrates their shark-versary​","type":1,"pageTitle":"SharkDAO, A Sub-DAO Raising Funds to Participate in the Nouns Ecosystem","url":"blog/2022-07-18-sharkdao#sharkdao-celebrates-their-shark-versary","content":"Since their launch on August 8th, 2021, SharkDAO has raised over 1000 ETH on Juicebox, acquired six Nouns, and brought together over 400 sharks. As a sub-DAO, they’ve pushed several proposals over the fin-ish line in the Nouniverse including Nouns-based short films and FOMO Nouns. SharkDAO has also helped provide eye exams and glasses to thousands of kids in need, donated 5 ETH to the Coral Restoration Foundation, and started a new Juicebox project to raise 60+ ETH for founding member Del Piero’s son’s leukemia treatment. The Shark Noun has become an icon and remains one of the most recognizable Nouns. In a particularly surreal turn of events, Noun #47 aka Swim Shady was featured in Yuga Labs’ Otherside promo video alongside Cryptopunks, Cool Cats, CrypToadz, World of Women, and Meebits. Not only were Nouns included as one of a handful of projects to represent NFTs a whole, but the Shark Noun was chosen as its iconic ambassador. What’s next for SharkDAO? Stay tuned for future NounsDAO proposals like the Monthly Nouns Comics project currently being developed by DefaultedUser and ComicsDAO in collaboration with SharkDAO. The Shark Island pfp project is also currently in the works as well as the DAO’s growing collection of Shark-themed art.  Shark Noun featured in Yuga Labs’ Otherside promo video The value of SHARK is derived not only from its ETH stored in the Juicebox contracts, but also from the NFTs the DAO has deployed treasury funds to acquire, from the JBX that the DAO has begun accumulating by paying platform fees, and perhaps most importantly from the productive community forming within the project that gives it boundless potential moving forward. – Jango, from Juicebox V2: Protocol adjustments useful for adding treasury tokens to AMMs "},{"title":"Relevant links​","type":1,"pageTitle":"SharkDAO, A Sub-DAO Raising Funds to Participate in the Nouns Ecosystem","url":"blog/2022-07-18-sharkdao#relevant-links","content":"Listen to Dropnerd tell the story of SharkDAO on episode 5 of The Juicecast Follow Juicebox on Twitter: @JuiceboxETH Follow SharkDAO on Twitter: @sharkdao Join SharkDAO’s Discord: discord.gg/QNbuygdK3A Set up a Juicebox project on Juicebox.money "},{"title":"Recap: JB Town Hall 5-17-2022","type":0,"sectionRef":"#","url":"blog/2022/05/17/recap-jb-town-hall","content":"","keywords":""},{"title":"Product Perspective Discussion Kicks Off​","type":1,"pageTitle":"Recap: JB Town Hall 5-17-2022","url":"blog/2022/05/17/recap-jb-town-hall#product-perspective-discussion-kicks-off","content":"On the heels of debuting V2, the DAO has pivoted to look forward toward future trajectories. The question of “What’s next?” was an ongoing discussion to kick off the town hall, and the overarching question of how JB will orient itself was bounced back and forth between members. One current effort is around finding and fixing all the bugs one would expect when you roll out something as wide in scope and breadth as V2, which is an ongoing endeavor the devs are focusing on, particularly as they work to build out extensions that were previously not possible with V1. Safe to say where JB finds itself today is quite incredible, and has etched out a presence and community known for providing an excellent tool that works and is powerfully scalable. The use cases solved for already have proven successful and powerful, and the discussion of what other future use-cases exist is ongoing. Head over to the #strategy channel to learn more. "},{"title":"Delegating JBX Now Possible​","type":1,"pageTitle":"Recap: JB Town Hall 5-17-2022","url":"blog/2022/05/17/recap-jb-town-hall#delegating-jbx-now-possible","content":"We now have delegation on snapshot, so you can delegate your JBX to other addresses for snapshot voting. A major thank-you to DrGorilla for making this possible and putting so much effort into the cause! The way it works is, for example, if you have 1 million JBX, you can delegate it to someone with 3 million JBX, and that person will have 4 million JBX voting power. But if you do choose to vote later, their vote will decrease by that same 1 million, and your vote will be as strong as your own JBX (1 million). This is a flexible way that people can share voting power without sacrificing JBX or transferring it directly to one another. To learn more check out this link. "},{"title":"Twodam Joins and Rocks With Data Displays​","type":1,"pageTitle":"Recap: JB Town Hall 5-17-2022","url":"blog/2022/05/17/recap-jb-town-hall#twodam-joins-and-rocks-with-data-displays","content":"The absolutely awesome twodam was able to come join us today at our town hall, and gave an awesome presentation on his new dashboard for JB. It’s a powerful new dashboard with some absolutely awesome data displays, check it out here! "},{"title":"Taking Canu to New Heights​","type":1,"pageTitle":"Recap: JB Town Hall 5-17-2022","url":"blog/2022/05/17/recap-jb-town-hall#taking-canu-to-new-heights","content":"Zeugh spoke about the role of CanuDAO to help other DAOs with marketing and community needs, and underscored the need to grow CanuDAO on par with the growth JB has seen over the past several months. The goal is for CanuDAO to provide high quality marketing and community-building services to JB, and also to affiliated and new DAOs that enter the JB space over the coming weeks. "},{"title":"Snapshot of JB in a Bear Market​","type":1,"pageTitle":"Recap: JB Town Hall 5-17-2022","url":"blog/2022/05/17/recap-jb-town-hall#snapshot-of-jb-in-a-bear-market","content":"While the bear market has dropped the value of ETH, with continued careful treasury management the DAO has a healthy runway. There are core functions that JBers will continue to take part in and carry out, and proposals for these core areas will continue forge on. Furthermore, an excellent opportunity is within the recognition that during any downturn of the market, yield and liquidity tends to dry up in places where it was accessible before. The can serve as as silver lining for JBers. Also, a proposal to review the DAO foundation is on the books, so all members please take a look at that proposal and discuss it ahead of its snapshot vote next week. "},{"title":"Ice Cream And Banana Costumes in NYC!​","type":1,"pageTitle":"Recap: JB Town Hall 5-17-2022","url":"blog/2022/05/17/recap-jb-town-hall#ice-cream-and-banana-costumes-in-nyc","content":"JB is considering a partnership with Morgenstern’s Ice Cream parlor in NYC. The goal is that JB would deck out the ice cream shop for four days with Banny art and posters and custom ice-cream flavors and creations. JBers who network in NY ahead of the major cypto conference can point people toward the ice cream shop, meet them there to conference, and spread the good word about Juicebox. Contributor filipv will be greeting new and old members in a full-sized banana costume, and tank_bottoms is permanently banned from the event. Come enjoy the scene, more info the come! (For a full recording of the town hall, including the legally binding declaration filipv made to wear a banana costume for the entire 4 days, click here.) "},{"title":"A Day in the Life of Wagmi Studios","type":0,"sectionRef":"#","url":"blog/a-day-in-the-life-of-wagmi-studios","content":"","keywords":""},{"title":"8:00am​","type":1,"pageTitle":"A Day in the Life of Wagmi Studios","url":"blog/a-day-in-the-life-of-wagmi-studios#800am","content":"It’s a normal day at Wagmi studios. Burtula has posted a new animation of a Banny (Peach Banny to be precise) getting kidnapped in her sleep. Mieos likes it, but suggests smoothing it out, so the kidnapping can seem more natural. Tankbottoms is asking about asset folders to be filled out, and Sage is coming off being stranded in Idaho with a transmission-less car and working feverishly through her phone. It’s only 8:30am. The day is just beginning. Felix has spent the better part of two days sourcing custom-made condoms— tri-fold condoms, to be exact, so each Banny can have their own condom packaging, with a pop-out tri-fold to really bring the point home. A banny wrapped in the coital experience, Felixander would tell you, is the most salient testament to the human condition. "},{"title":"12:00pm​","type":1,"pageTitle":"A Day in the Life of Wagmi Studios","url":"blog/a-day-in-the-life-of-wagmi-studios#1200pm","content":"Burtula is taking Mieos’ words of advice to heart. After all, if a banny is going to get kidnapped, that should look natural. What will future customers think if such a traumatic experience seems rushed or premature? Premature— Felix is thinking of a joke, but he’s abstaining. She works tirelessly to craft the Peach banny with more finesse, and in the wait one wonders about banny backgrounds— are we even saving all of them? 5 creative people stuffed into a studio, and not a shred of organizational prowess between them. Do we have a Peach Banny background? Of course we do. But where is it? Oh yeah, it’s in one of the thirteen discord channels at Wagmi, and it was posted a month ago. It may as well be in the ether, but that doesn’t stop us all from scrolling up wildly to find it. Meanwhile tankbottoms is white knuckling it on at least hour 36 of a god-knows-how-long working sprint. His work pace has Cocaine saying bro, slow down, you’re harshing my vibe here. We try to get in touch with him, but on hour 36 the quality of response you can expect is a bit frayed to put it mildly. Tankbottoms operates on a bonding curve of consciousness— if you get your request in early, he will deliver a fucking spectacular answer. But if you’re in that last 5 hour span, you’re gonna get caught holding the bag. "},{"title":"5:00pm​","type":1,"pageTitle":"A Day in the Life of Wagmi Studios","url":"blog/a-day-in-the-life-of-wagmi-studios#500pm","content":"Meanwhile we’re trying to get a presentation on some UI from Sage. The Figma files are fire, and between randomly being jailed and what one can only assume is the wisdom derived from several ayahuasca trips, Sage delivers. She elegantly goes though all the work she’s put into the latest UI iteration, and everyone is blown away and gives her praises, but she has to cut it short because a coyote chewing on some old cigarettes by a roadside is giving her the stink eye, and it may get nasty. They ask Felix what he thinks about the UI, but all he can think about is how a single tri-fold condom costs $1.64, but if we get ten thousand that price goes down to $0.46 per unit. He wants to make a joke about units, but he abstains. He’s crafting an email asking how many banana-pictures they can print on a single tri-fold, and he’s doing the math and thinking that we can make condoms cool, one self-referential banana at a time. He’s wondering if we can turn this all into a romance novel, where the Bannies fuck each other in only the most pleasant of language. "},{"title":"8:00pm​","type":1,"pageTitle":"A Day in the Life of Wagmi Studios","url":"blog/a-day-in-the-life-of-wagmi-studios#800pm","content":"We look to Mieos for guidance, but he’s on a treasure hunt deep in cryptovoxels, and he’s trying to embed 12 seed phrases the best he can and he’s having a blast doing it. Meanwhile Burtula is waiting for an answer about her animation, and people may be ready to start considering it, but just at that moment tank is wondering why these blog posts are even generated by lowly meatsacks like Felix— can’t all this shit be generated on chain? "},{"title":"12:00am​","type":1,"pageTitle":"A Day in the Life of Wagmi Studios","url":"blog/a-day-in-the-life-of-wagmi-studios#1200am","content":"For this hour, nothing really happens at all, and nobody is working on anything. "},{"title":"1:00am​","type":1,"pageTitle":"A Day in the Life of Wagmi Studios","url":"blog/a-day-in-the-life-of-wagmi-studios#100am","content":"The day is winding down. Condoms have been designed for an order that’s never likely to happen. An animation is still waiting to be fine-tuned. Sage is coming off some hard psychedelics, or at least she should be for the amount of work she does. Tank is crashing for the next 47 hours. Mieos sits back in a recliner with a cat that he caresses knowingly, cackling into the moonlight as he reflects on another solid day. Nothing finalized, nothing completed. Incremental progress happened, but the struggle continues the next day. But a hell of a lot of fun was had. "},{"title":"Juicebox V2: Protocol adjustments useful for adding treasury tokens to AMMs","type":0,"sectionRef":"#","url":"blog/adding-juicebox-treasury-tokens-to-amms","content":"","keywords":""},{"title":"Current limitations​","type":1,"pageTitle":"Juicebox V2: Protocol adjustments useful for adding treasury tokens to AMMs","url":"blog/adding-juicebox-treasury-tokens-to-amms#current-limitations","content":"Currently, Juicebox treasuries have no configurable max-supply of tokens. The protocol always offers people an opportunity to pitch in ETH and receive treasury tokens in return according to the current funding cycle's weight, which is determined by the compounding effects of discount rates alongside the currently configured reserve rate. As a reminder, the discount rate decreases the amount of tokens minted per ETH contributed as funding cycle's roll over – a discount rate of 10% to the current funding cycle means that a contribution of X ETH to the next funding cycle will only yield 90% of the tokens that the same contribution of X ETH made during the current funding cycle would yield. The reserve rate determines how many of these tokens will be reserved to be distributed to preprogrammed addresses instead of to the payer. The protocol is thus always quoting a value for a project's treasury tokens, and inso doing always offering to inflate the supply of tokens to meet this demand in exchange for crowdfunding more ETH. It is thus unrealistic to expect the market price of treasury tokens on an AMM to ever exceed the price quoted by the protocol – the protocol will always provide a price ceiling. If the secondary market is over, there is an obvious arbitrage opportunity to pull the price back down. There may, however, be people who received treasury tokens at a discount in the past who are now willing to sell them for profit at a better price than what the protocol is offering. This supply-side pressure happens organically as funding cycles unfold and discount rates compound. On the buy-side, it's logical for someone to seek a better deal for treasury tokens from this secondary market than get them from the protocol. If the majority of activity is happening on secondaries beneath the protocol price, the token supply and fundraising efforts will tapper off at this equilibrium. The big question thus becomes how a project chooses to pursue this equilibrium. Does it tune its discount rate and reserve rate over time with its own fairness principles in mind, using secondary markets as a convenience for buyers and sellers but limiting the market's potential to naturally discover its price's upper bound? Or does it use the secondary market as a primary indicator of fairness, using the discount rate and reserved rate only to conveniently satisfy its fundraising needs over time? The answer depends on a community’s values. Does it wish to be liberally open, inclusive, and predictable while prioritizing cashflow? Or instead more-strictly protective of the value current members have accrued and took risks for, with strategic fundraising/expansion campaigns down the road that are scoped for value-adding initiatives? Maybe a balance between the two, with principles in place to guide decisions? The Juicebox toolset has proven to work well for projects who are willing to expand supply to accommodate new funds and new community members. For projects that want to protect the value they have built and conduct more strategic and scoped fundraising campaigns over time, the compounding discount rate and reserved rate mechanisms might not work well within the current protocol's constraints. "},{"title":"Solutions​","type":1,"pageTitle":"Juicebox V2: Protocol adjustments useful for adding treasury tokens to AMMs","url":"blog/adding-juicebox-treasury-tokens-to-amms#solutions","content":"The solution might be simple. For the Juicebox protocol to be able to accommodate market driven projects, it must allow them to: specify a supply cap for their treasury token, and allow them to customize the quantity of treasury tokens that are distributed per ETH received.  Under these conditions, if payments are received into the treasury after the token supply cap is exceeded, no tokens will be minted in return. Otherwise, if the project has set a customized treasury token price point, tokens will be minted according to this rate overriding the current funding cycle's weight derived by the compounding discount rates of previous cycles. These tools allow a project to essentially &quot;pause&quot; new treasury tokens from being issued, and at any point open up a fixed supply of new tokens to distribute at a specified price point. The reserved rate as it currently exists can work within this pattern to route newly issued tokens to time-bounded distribution mechanisms, incentivized staking pools, the project's own multi-sig wallet, etc. Adding these parameters does put more power into the hands of the project owner, which is a tradeoff worth noting. People who contributed funds earlier in a project's lifetime will no longer have guarantees that their tokens were issued at a discount compared to the future cycles, and protocol rates are subject to change as dramatically as the project owner desires. Communities must make extra sure that the ownership of their project (represented by an ERC-721 contract) is in the hands of a trustworthy wallet willing to execute decisions collectively agreed upon. I'm not too worried about this tradeoff because it is already true to large extent in the current implementation. Another tradeoff of a token supply cap is that it risks the consistency of DAO-to-DAO and Anon-to-DAO collaboration. For example, imagine someone stands up an NFT marketplace that automatically routes percentages of artwork sales to preconfigured destinations, like to SharkDAO's treasury. If SharkDAO has a token supply cap in place and has reached this limit, the sale of the artwork would still send the ETH to the treasury, but the artist would not receive any SHARK in return. I'm also not too worried about this tradeoff because the same effect is possible with the current mechanism if a project tunes its reserved rate to 100%. Each project/artist composing with Juicebox treasuries should always understand the variability of doing so – rates are subject to change, and so its important to prioritize building relationships with trustworthy projects who make decisions in the open with proper planning and community engagement. Another detail to note: the configuration of both new parameters will be scoped to funding cycle configurations – a project running on timed cycles must await a new cycle for changes to the max-supply and weight override parameters to take effect. Projects with longer funding cycle durations and more rigid reconfiguration ballots will thus continue to operate with more predictability, checks, and balances. Another effect of this is that the actual token supply might be greater than the configured max supply if the project ends up minting more tokens during a current, boundless cycle before a queued one with a max-supply becomes active. A proposal is taking shape to implement these two new properties into a TerminalV2 contract within the Juicebox ecosystem. Projects currently running on TerminalV1 will have the option to migrate over once the contract has been deployed and approved.  Join the JuiceboxDAO Discord to add to this discussion and provide alternate ideas and points of view before we move forward with rolling out these additions to the protocol. "},{"title":"Configuration #1: Ballot","type":0,"sectionRef":"#","url":"blog/configuration-1-ballot","content":"The first JuiceboxDAO funding cycle configuration includes a ballot that binds reconfiguration approvals to a contract. The contract specifies that the reconfiguration must be made at least 7 days before it can take effect. Under this contract, if the reconfiguration were to be proposed within 7 days of the current (1st) funding cycle ending, we'd have to wait until the 3rd funding cycle to have it take effect. Anyone can write new ballots by deploying a contract that implements this interface. Once deployed, a proposed reconfiguration can then include the new ballot to use for future reconfigurations. We deployed a simple 7 day buffer ballot for simplicity's sake, and to provide some guardrails to protect the community from rug pulls. The goal over time is to design better and safer ballots for all Juicebox projects to use.","keywords":""},{"title":"Configuration #1: Bonding Curve Rate","type":0,"sectionRef":"#","url":"blog/configuration-1-bonding-curve-rate-2","content":"The first JuiceboxDAO configuration includes a bonding curve rate of 60%. The Juicebox Protocol's bonding curve implementation can be seen in code here, and interactively here. In the interactive model, o is the current amount of overflow, s is the currently total supply of tokens, and r is the bonding curve. The x-axis is the amount of tokens being redeemed, and the y-axis is the amount of overflow that can be claimed by redeeming the x-axis amount. A 60% curve thus means that one JBX can be redeemed (burned) for a little over 0.6 times its proportional value of JuiceboxDAO's overflow. For example, If you owned 1% of all JBX and there was 100 ETH of overflow, redeeming all of your JBX would earn you about 0.6 ETH. In effect, a bonding curve creates an incentive to hodl tokens longer than others. The lower the bonding curve, the more this effect becomes exaggerated. The curve does nothing if there is no overflow. The rate of 60% that we deployed with is somewhat arbitrary – we had no expectations for overflow anyways. Expect a better hypothesis for future funding cycle reconfigurations after we've had a chance to study its effects in practice.","keywords":""},{"title":"Configuration #1: Discount rate","type":0,"sectionRef":"#","url":"blog/configuration-1-discount-rate","content":"The first JuiceboxDAO configuration includes a discount rate of 20%. This means that a contribution made to the JuiceboxDAO project during this funding cycle will mint you 20% more tokens than a contribution of the same value made during next funding cycle. The Juicebox protocol supports discount rates from 0%-20%. The rates are compounded over time, meaning a constant rate of 10% over two funding cycles would make the relative discount between contributions on either end 81% (10% of 100 is 90. 10% of 90 is 9. 100 - 10 - 9 = 81). The discount rate is mega powerful and has lasting effects. It should not be used arbitrarily. Our reasoning for going with the max of 20% is that there's inherently much more risk to funding the project at its onset – the protocol is raw and untested in the wild, there are no trends to latch on to for financial speculation, and there are lots of unanswered questions still floating around. Any contributions made during this funding cycle are risky. We wanted to reward them as much as possible. We plan on proposing a reduction of this rate to 10% for the next funding cycle, 5% for the following cycle, and settle on a constant rate of 0.5-3% from then on to keep a slight constant pressure to fund the project sooner rather than later. Expect this schedule to be reevaluated over time, but the philosophy behind its purpose as a risk offset to hold true. Notice: Each project built using the Juicebox protocol as its treasury pays a standard 5% fee from its payouts to the JuiceboxDAO. This fee is treated like every other payment made, so each project receives JBX tokens in return. The discount rate thus also gives projects an incentive to compose with Juicebox sooner rather than later.","keywords":""},{"title":"Configuration #1: Payouts","type":0,"sectionRef":"#","url":"blog/configuration-1-payouts","content":"","keywords":""},{"title":"Staff​","type":1,"pageTitle":"Configuration #1: Payouts","url":"blog/configuration-1-payouts#staff","content":"Jango gets $5k for managing contracts and leading dev and design efforts.Peripheralist gets $5k for leading front-end dev work and evolving Juicebox to suit needs being uncovered at TileDAO.AtomicMieos gets $1k for experimenting with content, and helping shape ideas.Sage gets $1k for design and illustration work. "},{"title":"Ops​","type":1,"pageTitle":"Configuration #1: Payouts","url":"blog/configuration-1-payouts#ops","content":"(These funds all get paid-out to the JuiceboxDAO governance to be allocated) $6.8K to pay back Jango for pre-purchasing juicebox.eth, jbx.eth, and jbox.eth. These ENS names will be transferred to JuiceboxDAOs governance. $1k will be allocated for content / art supplies, managed by Futurenate and Sage. Figma costs $75 monthly.Infura costs $50 monthly.Gitbook costs $32 monthly.Fleek costs $10 monthly. The total is $19,967. The staff payout sums are small compared to market rates for these skills. We decided to start off with a small budget during the first funding cycle to encourage a longer runway, and to be able to re-evaluate needs as the first funding cycle plays out. Stay tuned for a report on the first funding cycle's spending, and a proposal for the next funding cycle's payouts. "},{"title":"Configuration #1: Reserved JBX","type":0,"sectionRef":"#","url":"blog/configuration-1-reserved-jbx","content":"","keywords":""},{"title":"Investors​","type":1,"pageTitle":"Configuration #1: Reserved JBX","url":"blog/configuration-1-reserved-jbx#investors","content":"Jango gets 40% of reserved tokens for architecting the mechanism, writing the contracts, thoroughly testing the ecosystem, leading design and development efforts post-launch, and leading project relations.Peripheralist gets 40% for architecting the front-end repo, publishing juicebox.money, and leading front-end dev work post-launch.AtomicMieos gets 10% for experimenting with content, and helping shape ideas pre-launch and post-launch.Sage gets 10% for design and illustration work pre-launch and post-launch. These numbers are all a bit arbitrary. We decided to start off fairly small and fairly even – it was unclear how the risk profile of pre-launch dev work would compare to post-launch growth and refinement work, and how the Juicebox incentives mechanisms would play out in the wild. As the first funding cycle unfolds, expect a proposed reevaluation of these numbers to better account for risk dynamics and incentives. "},{"title":"处理 ConstitutionDAO 退款的几个潜在方案","type":0,"sectionRef":"#","url":"blog/constitutiondao-refund-brainstorm","content":"","keywords":""},{"title":"通过 Juicebox 进行退款​","type":1,"pageTitle":"处理 ConstitutionDAO 退款的几个潜在方案","url":"blog/constitutiondao-refund-brainstorm#通过-juicebox-进行退款","content":"步骤： 把这4千多万美元重新转入到 Juicebox 合约。多签钱包发起一个交易，把 ConstitutionDAO 的筹款周期目标重新配置为 0，以便允许所有代币按相应比例赎回项目金库里的全部资金。任何人都可以选择赎回他们持有的 PEOPLE 代币。所有希望留下参与建设 ConstitutionDAO 的人则可以保留他们的 PEOPLE 代币，并把资金交给社区来管理。DAO 最终会重新评估自己想要朝哪个方向发展，以及谁来管理多签钱包以代表社区继续金库的运营。DAO 也可以重新评估它是否希望接纳新成员以及接受捐款，等等。换言之，DAO 继续作为 DAO 运作下去。 提示： -- 把四千多万美元转回 Juicebox 合约之前，我觉得最好先多找几个人审核一下这些合约。我个人对这些合约是有信心的，但我们要得到社区的信任，还要让社区明白这件事情具有试验性质并存在风险。我希望社区在做这个决定时能够充满信心。为此，我很愿意接下来几天组织一些专题讨论。--每个选择赎回的人将要支付跟捐赠时差不多的 gas 费用：相当于30-60美元的ETH。这对于那些捐赠金额和 gas 费用数额差不多的人来说尤其令人不快。++ 这个方案需要做的协调是最少的，每个人都可以按自己的想法、适合自己的时间去采取行动。++ 由于这个 Juicebox 的流程正在进行审计，对于那些已经把 PEOPLE 代币发送到多签钱包的人，DAO 可以开始马上手动向其发放退款。 "},{"title":"多签钱包手动发放退款​","type":1,"pageTitle":"处理 ConstitutionDAO 退款的几个潜在方案","url":"blog/constitutiondao-refund-brainstorm#多签钱包手动发放退款","content":"我看到 @strangechances, @DennisonBertram, 以及@austingriffith等人提出了这个方案的不同版本。 步骤： DAO 保留大概200万美元来支付退款的 gas 费用。抓取一个交易快照。在某个区块高度持有 PEOPLE 代币的人，都可以按每100万代币兑换一个 ETH 的比例申请退款。多签发送交易来满足这些申请，并用保留的资金来支付 gas 费用。因为 PEOPLE 代币将不再拥有 ETH 作为价值支撑，留下来的 DAO 社区需要重新评估，如果保持 DAO 的运作，社区应该怎样去管理它的代币。 提示： -- 多签钱包成员可能要处理高达数千笔的付款。-- 大家提出退款申请可能会有一个较长的时间跨度。多签成员要提前做大量的复核和确认工作，而且还要守候一段时间。-- 因快照后发生的交易而新增的余额将不计算在可赎回余额内。++ gas 费用会在每个留下的持币人之间平摊。如果预计有足够多的社区成员希望继续持有PEOPLE 代币，DAO甚至可以在捐款金额基础上增加最多60美元来发放给要离开的成员，来补贴他们捐款时支付的交易费用。++ 大家可以选择申请在特定的 L2 网络退款。多签可以批量转账到每个相应的 L2 网络，然后再从该网络发放退款。 "},{"title":"多签钱包部署一个 Merkle Distributor 空投​","type":1,"pageTitle":"处理 ConstitutionDAO 退款的几个潜在方案","url":"blog/constitutiondao-refund-brainstorm#多签钱包部署一个-merkle-distributor-空投","content":"这是@nnnnicholas的意见。提示：Nicholas 并不是 ConstitutionDAO 捐款成员。@austingriffith也提出了相同的意见。@strangechances建议使用 Mirror Splits 来执行这个退款方案，并主动提出可以帮忙。 步骤： 抓取一个交易快照。在某个区块高度持有 PEOPLE 代币的人，都可以按每100万代币兑换一个 ETH 的比例申请退款。这个操作叫“抓取快照”。部署空投/分割合约，并把退款总额发送到合约。公布把资金重新转入 DAO 金库多签钱包的时间线，让快照抓取的地址来申请退款。因为 PEOPLE 代币将不再拥有 ETH 作为价值支撑，留下来的 DAO 社区需要重新评估，如果保持 DAO 的运作，社区应该怎样去管理它的代币。 提示： -- 这个做法仍然会耗费退款人与通过 Juicebox 赎回方案相近的 gas 费用。-- PEOPLE 代币不能再用作对金库的索取权，因为那样的话人们可能会再次领取。PEOPLE 代币将不再拥有正常 Juicebox 项目代币的功能。++ 空投退款的主要优势是可以通过全部或者大部分经过审计的代码来实现，相对Juicebox未经审计的赎回机制提高了安全性。++ 这个做法相对于多签支付 gas 费用来直接发放退款的方案来说，会降低 DAO（即不希望退款的人群）所需支付的的 gas 费用。++ 空投可以设置成允许在 L2 网络退款，但会增加操作的复杂程度。++ 捐款人既可以保留 PEOPLE 代币，又可以获得退款。 …（提交其他想法，把步骤和做法的取舍都列明出来）  一般性提示： 在 PEOPLE 代币停止发行之后向 ConstitutionDAO 捐款的人，将会收到 DAO 的直接退款。需要用到交易快照的情形，选择抓取快照时机非常重要。快照时间的选择可以包括 Juicebox 停止接受新捐款的时间、拍卖失败时间或者将来的某一个时间点（即预先宣布交易快照标准）。交易快照用哈希树来抓取并存储到链下数据库或者像Mirror 的 Split那样存到 IPFS 上面，这种做法基于 Uniswap 的 UNI 代币空投 Merkle-Distributor 模式，又或者作为一个以 stendhal-labs或collaboration splitter方式存储的链上事件进行公布。后者可能会比较昂贵，但比 DAO 手动分发退款的方式仍然要便宜得多。 "},{"title":"Cross-layer Juicebox protocol: follow up #1","type":0,"sectionRef":"#","url":"blog/cross-layer-juicebox-pt-2","content":"From the original post: The simplest option would be to just deploy the same Juicebox protocol in each EVM compatible L2 environment. This forces projects to choose which they would like to operate on, or manage their own complexity if they would like to operate across many. I'm guessing most projects would prefer to operate everywhere, if only it were easy to do so. What if the simplest option was the best option? Although deploying the same Juicebox protocol in each EVM compatible L2 environment forces projects to choose which they would like to operate on, it might be most reasonable to pass along this choice and complexity to each project while suggesting thorough operational strategies to weave these isolated environments together at the DAO/social/governance layer. Here are some potential operational guidelines, using JuiceboxDAO as an example: Juicebox protocol is deployed identically on several L2s and side chains. JuiceboxDAO creates a project on each one where fees will be collected and contributions accepted.JuiceboxDAO will have different tokens on each chain. JuiceboxDAO membership is composed of a strategy that take each of these tokens into account. Members are responsible for managing the entirety of the DAO's treasury across all chains.JuiceboxDAO submits treasury reconfigurations to each chain independently. Each chain can have funding cycles that operate on different schedules, have different token issuance rates, and different ETH distributions. This flexibility can be used to orchestrate arbitrary multi-chain treasury designs, although also introducing management overhead. Extend to new environments responsibly.JuiceboxDAO can move its ETH/tokens between environments adhering to the constraints of each chain, leaning on existing and upcoming generalized bridging infrastructure.It can deploy converter contracts if it wishes to support conversions between each of its membership tokens. Any other project could choose to operate on one or many environments where the Juicebox protocol has been deployed. If they choose to operate on many, they would have to manage the complexity of doing so. Once projects have begun experimenting and settling on effective patterns, I'd hope a playbook would emerge as a reference for future projects. Leaving multi-layer coordination for the social layer introduces some operational overhead and risk, but also keeps the protocol layer flexible and simple.","keywords":""},{"title":"Current state of JuiceboxDAO membership","type":0,"sectionRef":"#","url":"blog/current-state-of-juiceboxdao-membership","content":"","keywords":""},{"title":"Observations​","type":1,"pageTitle":"Current state of JuiceboxDAO membership","url":"blog/current-state-of-juiceboxdao-membership#observations","content":"Builders and contributors don't know what they're getting when they contribute ETH or are receivers of reserved tokens.Membership is getting expensive. JBDAOs strategy thus far has been to focus on building in the open, while making clear upfront the resources it needs to be able to build effectively.No one in JBDAO has produced much work proposing how we might make membership more accessible to people or distribute it more widely, or why that might be worth prioritizing. Most of what is discussed is about how to solve problems for juicebox projects and for builders who want to come in and improve/grow the ecosystem. The way JBDAO is using its 35% reserved rate ensures about 25% of any membership expansion the DAO makes goes to builders who are currently stewarding projects. If the DAO isn't growing its treasury, committed builders don't become substantial members. The remaining 10% go to JBDAO itself, which it hasn't done anything with yet.The DAO's casual builders and helpers currently don't have a way to become members other than to make a contribution to the DAO of any amount.It might be interesting for the DAO to tapper off its discount rate so that over time, members who consider joining are represented and feel welcome.It might be interesting for the DAO to allocate all of a 35% reserved rate to itself so it can hand out some non-insignificant starter membership amounts to more people who are helping out casually, and to people who are currently cranking out tasks and getting to know the system but don't yet plan on sticking around for too long. The DAO could also give membership to other builders around web3 who might be creative and thoughtful voices to have in the room when determining how the DAO could allocate its treasury. "},{"title":"Open questions​","type":1,"pageTitle":"Current state of JuiceboxDAO membership","url":"blog/current-state-of-juiceboxdao-membership#open-questions","content":"How might the DAO distribute its allocation of JBX effectively to add more great members now and into the future? "},{"title":"DAO 工具入门","type":0,"sectionRef":"#","url":"blog/dao-tooling-101","content":"","keywords":""},{"title":"DAO 是做什么的？​","type":1,"pageTitle":"DAO 工具入门","url":"blog/dao-tooling-101#dao-是做什么的","content":"现阶段，DAO 与其说是一个严格意义上组织的定义，倒不如说是一种宽泛的概念。让我们来按它们目前在 Crypto 或 NFT 领域的使用形式来展开讨论。在这个领域，DAO 有两大功能： 建立资产金库（各种NFT、以太币、或者其他代币）对这个金库进行治理 假设一个你喜欢的主播决定要给他们的播客成立一个 DAO。要维护播客的运营，以及把运营扩展到商品销售和线下聚会的话，他们得有资产（说白了就是钱），所以他们要找到一个建立资产金库的办法。他们可以发行一个 ERC20 标准的代币（我们把这个代币命名为 $PODC)，捐款给金库的人都将相应地获得 $PODC 代币。你作为一个听众，对这个主播充满信心并且也希望分享它的成功，所以你就购买了一些 $PODC 代币并捐献给它的金库。 作为 $PODC 代币的持有人，你还有些特权。你可以发起提案对播客的形式进行修改，也可以就播客的嘉宾人选提出议案，你还可以参与其他提案的投票。如此一来你和其他的持币人就算得上是与整个 DAO 同舟共济，或者说同播共济了，你们也将对播客的发展和成功产生意义深远的影响。DAO 在这方面也可以很创新。私密的 Discord 服务器、非公开的会议、又或者空投活动都可以只向代币持有人开放。获得成功的 DAO 还可以投票把多余的资金分发给持币人。 DAO做的不对你胃口？别怕！你手上的代币有金库资产 100% 兜底，也就是说你可以把代币卖给金库来拿回你原来的投资（扣掉 gas 费用和其他手续费）。 相比传统意义的私企，DAO 的其中一个吸引人的之处就是它的透明度。DAO 的方方面面在区块链上都是有据可查的。有心人可以监测资产的流动并对可疑的举动进行揭发。重要的是，我们不用请会计师或者律师来做这些工作！ "},{"title":"DAO 堆栈​","type":1,"pageTitle":"DAO 工具入门","url":"blog/dao-tooling-101#dao-堆栈","content":"要实现DAO的这两个功能，我们就需要用到一些工具。幸运的是，有些聪明人在做这些底层的工作，令 DAO 堆栈得以快速完善。接下来，我们会讨论 DAO 堆栈的4个重要工具 Juicebox、Gnosis、Snapshot 和 Argon, 以及它们怎样协同构建一个 DAO。 "},{"title":"Juicebox​","type":1,"pageTitle":"DAO 工具入门","url":"blog/dao-tooling-101#juicebox","content":"Juicebox 协议是一个可编程金库。实用层面上，你可以把 Juicebox 看作是 Kickstarter 注2的去中心化版本；一个在区块链上募资的途径。它实现了 DAO 的第一个功能：建立金库。技术层面上，Juicebox是一整套的智能合约，它部署在以太区块链上，用来处理发行代币和建立金库。 继续我们播客DAO的例子，播主接下来要创建一个 Juicebox 项目。他们可以设置各种不同的参数，这些参数包括筹款目标、代币发行比例、费用支出和创建人的保留代币数量等等，都会决定项目的运营情况。这个 Juicebox 项目相关的代币是 $PODC。要想给播客DAO的金库捐款的话，我得去项目在 https://juicebox.money 上的页面，然后连接 MetaMask 钱包再捐出以太币。相应地，按这个项目预先设定的兑换比例，我会得到一定数量的 $PODC 代币。 "},{"title":"Gnosis​","type":1,"pageTitle":"DAO 工具入门","url":"blog/dao-tooling-101#gnosis","content":"谁来“拥有”这个金库呢？一个人就能够支配这个金库，但他要是卷款跑路的话，除了怕丢掉名声，什么也拦不住他。 正解：多重签名钱包，俗称“多签”。多签基本上跟一个保管资产及执行交易的合约没什么太大区别，除了一样：它规定要有超过一个钱包地址的签名确认才能执行交易。就好像一个公司里办什么事情都要几个人签名那样，多签要求达到某个数量的签名（一般的说法是 n 个多签成员里的 m 个人，比如说，3个多签成员里的2个人签名）确认才能执行某一个交易。 所以，成立播客DAO的时候，我们会用播客的几个创建人来创建一个多签钱包（比方说两个播客主播和其他做出重大贡献的人）。这个多签钱包就成了项目的拥有者。这样我们可以有几个不同的人来把控筹款项目的参数设置，来防止个别人作恶。 Gnosis 是创建和管理多签钱包的首选工具。它提供了一个简洁的多签管理界面。多签成员在 Gnosis 上连接他们的 MetaMask 钱包，就能确认或者拒绝交易。 "},{"title":"Snapshot​","type":1,"pageTitle":"DAO 工具入门","url":"blog/dao-tooling-101#snapshot","content":"怎样用你的DAO代币来参与投票呢？ 用Snapshot.org！ Snapshot 是一款链下投票工具，用于提议和表决 DAO 的变更事项。它利用 IPFS 来储存投票信息。 提案不外是罗列出 DAO 将要作出调整内容的一个文本，这个文本通过投票的机制来让参与的人在多个选项中作出一个单一选择。任何持有 DAO 代币的人都可以按自己意愿对提案进行投票。举个例子，有人在 Snapshot 上创建了一个提案，提议播客对某人进行嘉宾采访。我持有 PODC 代币，就可以去 Snapshot.org 的提案页面上投赞成或反对票。我的投票权重跟我持有 PODC 代币的数量成正比。 提案的支持票数达到某个数值（比方说，总票数的三分之二，或者总票数的67%）的话，就会获得 DAO 表决通过。提案通过之后，多签成员就有责任去执行这个提案。 有一点很重要，为使这一流程更加有效，需要一定的信任因素。不管怎么说，多签成员对金库有完全的支配权，得他们乐意去执行 DAO 的意愿才行。多签的本质让这个风险有所降低：正因为多签钱包要求多人签署，多签成员串通作恶的可能性就在一定程度上减少了。名声也是悬在每个人头上的一把剑，所以多签成员更倾向于站在 DAO 利益最大化的角度去行事。 "},{"title":"Aragon​","type":1,"pageTitle":"DAO 工具入门","url":"blog/dao-tooling-101#aragon","content":"正如上面所说的，Snapshot 是在链下进行投票，但链上投票也是可行的。跟 Snapshot 不同，Aragon 是在链上进行投票的。在 Aragon 的机制下，DAO 的所有事情都不是发生在你的网络浏览器里的。正好相反，所有事情都作为区块链上的交易来执行。在某种意义上，这种机制使 DAO 更为去中心化，但却没那么灵活，交互的成本也会更高。 "},{"title":"结语​","type":1,"pageTitle":"DAO 工具入门","url":"blog/dao-tooling-101#结语","content":"DAO 现在越来越流行了，但创建 DAO 并不是自古华山一条路。我们有很多 DAO 工具可供选择。Juicebox、Gnosis、Snapshot 和 Aragon 这些属于可组合的工具，他们之间可以混搭适配来创造出一个 DAO 所需要的基础设施。每个 DAO 都会作出各自不同的工具选择，这取决于哪些工具和哪个去中心化程度更适合他们的项目和发展目标。  去推特关注作者 @Aeolian。   **注1**：《纳尼亚传奇》（英语：The Chronicles of Narnia），是一套七册的奇幻小说，由已故英国作家 C·S·刘易斯 在 1950 年代所著，为英美文学经典之一。  **注2**：Kickstarter 是一间于 2009 年在美国纽约成立、最初基于美国人后来拓展至各国的产品募资平台，它透过该网站进行公众募资以提供人们进行创意项目的筹集资金。 "},{"title":"DAOlicious tips for starting your first DAO","type":0,"sectionRef":"#","url":"blog/daolicious-tips-for-starting-your-first-dao","content":"","keywords":""},{"title":"Build a community​","type":1,"pageTitle":"DAOlicious tips for starting your first DAO","url":"blog/daolicious-tips-for-starting-your-first-dao#build-a-community","content":"Whether your DAO is doing NFT minting, creating tokens for governance, bringing together a global community around a shared goal or interest, or just there to further some unique idea of yours, you’re going to need a community. The problem? Not all communities are created equal, and many of them struggle to find their footing in the hustle and bustle of web3. Finding good community members isn’t easy, but keeping them in the long run can be even harder. If your DAO has no way to compensate good community members or suffers from lack of coordinate or mission-alignment issues, you will likely find qualified people sticking around briefly and moving on. Consider thinking carefully about your mission and about a way to make it enthralling for new members. Sell the idea, and show how that idea will benefit your contributors or the planet at large. Don’t be afraid to say no, and have your mission well thought-out before you open a discord and start trying to attract new members. "},{"title":"Decide on governance that works NOW​","type":1,"pageTitle":"DAOlicious tips for starting your first DAO","url":"blog/daolicious-tips-for-starting-your-first-dao#decide-on-governance-that-works-now","content":"Many different governance systems exist, including 1-member-1-vote, quadratic voting, voting-by-tokens-held, and many more. Think carefully about how you’d like your own DAO to operate. Do you want everyone to have equal participation and inclusion? Then perhaps one-member-one-vote is the way to go. Or do you want certain members to have voting power because they are part of a core group? Do you want votes to pass with a 51% majority, or higher? These are all important questions to consider. If you want a DAO that is more resistant to change, you may consider putting a voting threshold very high, for instance around 75% or above. This would ensure that only when the vast majority of your members agree on something that it will change. If you want your DAO to morph quickly with changing times, you may decide to drop your voting threshold lower than 50%. This can also open you open to having your DAO hijacked by an influx of new members, so beware! Regarding votes, how do you want people’s voting power to be represented? If you want to vote by tokens-held, then you are effectively allowing the wealthy to have greater voting power than the less wealthy. There is an argument here that the wealthy, who have invested the most in your project, deserve more voting power because they have more to lose. But new members entering your project may feel like voting is futile if they are eclipsed by others with outized voting power. "},{"title":"Don’t be afraid to adapt as you scale up​","type":1,"pageTitle":"DAOlicious tips for starting your first DAO","url":"blog/daolicious-tips-for-starting-your-first-dao#dont-be-afraid-to-adapt-as-you-scale-up","content":"Consider what system you need right now, and be open to changing it. Regarding governance: If you are a small community with a core team, you may say that one-member-one-vote is the way to go. Do what makes sense at the time. If your project grows and you see another voting mechanism being more fruitful, go through the motions and suggest a change. Voting mechanisms are not set in stone, and shouldn’t be. Your DAO needs to adapt with the changing circumstances it finds itself in. Regarding your discord server, Telegram or other service, consider changing it as your needs change. If your discord channels end up getting outdated, don’t be afraid to archive them. If your new members are getting lost in the onboarding process, consider adapting your process to be more open to new faces. Remember that by the time you start to grow, your DAO will be something you start to understand much more easily than a new member just coming in. It’s easy to lose sight of that perspective, so keep in mind to keep it simple and direct. "},{"title":"And most importantly…​","type":1,"pageTitle":"DAOlicious tips for starting your first DAO","url":"blog/daolicious-tips-for-starting-your-first-dao#and-most-importantly","content":"Have fun! You are engaging in something new, and in a great human experiment! Issues around governance have plagued humanity for thousands of years, and now with the advent of blockchain technology we have yet another style of governance to play with. See if you can crack the code that so far no one has arguably cracked. See if you can create the perfect governance system. Good luck! Considering starting a DAO? Check out our tooling suite that will give you all you need and so much more! Want more? Come check us out at juicebox.money, and swing by our discord and say hello. Starting a project? Check out our blog and web3 literacy center, Juicebox High. "},{"title":"FC#18 Updates: v2 and Beyond","type":0,"sectionRef":"#","url":"blog/fc18-updates","content":"","keywords":""},{"title":"Juicebox v2​","type":1,"pageTitle":"FC#18 Updates: v2 and Beyond","url":"blog/fc18-updates#juicebox-v2","content":"Jango's proposal to Deploy v2 passed by overwhelming majority. You can learn more about v2 on the docs. Currently, v2 is scheduled to deploy on April 16th. Frontend efforts are already well underway: as of 2022-04-07, the V2 feature parity milestone is 64% complete. Feature parity is Phase 1 of PeelDAO's roadmap for v2. "},{"title":"veBanny Frontend​","type":1,"pageTitle":"FC#18 Updates: v2 and Beyond","url":"blog/fc18-updates#vebanny-frontend","content":"VeBanny has pushed into a new stage. We have completed all the Layers, Backgrounds and token spreads. The Ui for the VeBanny voting token minting site has been fully drafted. All contracts are written and nearly finalized. Next steps are to tighten up some front end pieces and start the build out. ―Mieos For realtime progress updates, take a look at the Figma. "},{"title":"Juicebox High​","type":1,"pageTitle":"FC#18 Updates: v2 and Beyond","url":"blog/fc18-updates#juicebox-high","content":"Juicebox High is live (and you are on it right now)! Join the Discord and send a message in #documentation if you're interested in contributing or have ideas for improvements. You can use the new blog with your RSS reader by adding https://info.juicebox.money/blog/rss.xml or https://info.juicebox.money/blog/atom.xml. "},{"title":"Metaverse Festivities​","type":1,"pageTitle":"FC#18 Updates: v2 and Beyond","url":"blog/fc18-updates#metaverse-festivities","content":"Lexicon Devils has some amazing plans for April! Here's the schedule:  Head to the Juicebox Lounge to join! "},{"title":"Juicebox in the words of​","type":1,"pageTitle":"FC#18 Updates: v2 and Beyond","url":"blog/fc18-updates#juicebox-in-the-words-of","content":"Felixander has launched a new interview series called &quot;Juicebox in the words of&quot;. In his words: “Juicebox in the words of” is a series that highlights JB community members in interview form. Learn about members’ roles at JB and what makes them tick. Interviews with zom, filipv, jango, and peri have already been published. You can find the latest interviews (and more) on the blog. "},{"title":"Vote!​","type":1,"pageTitle":"FC#18 Updates: v2 and Beyond","url":"blog/fc18-updates#vote","content":"FC#20 temperature checks are live now. Head to the Discord and vote! Snapshot voting opens at 00:00 UTC on 2022-04-12. "},{"title":"Juicebox: Funding Cycle #3 proposal","type":0,"sectionRef":"#","url":"blog/funding-cycle-3-proposal","content":"","keywords":""},{"title":"Focus​","type":1,"pageTitle":"Juicebox: Funding Cycle #3 proposal","url":"blog/funding-cycle-3-proposal#focus","content":"As a DAO, we should consider focusing on the following areas: Risk mitigation | make sure things don't go to zero. current lead: jango, exekias UX improvements | improve and make templates for project onboarding and the project dashboard. current lead: peripheralist Project support, education, &amp; docs | make sure JB projects have the resources they need to get started and thrive. current lead: jango, natimuril, WAGMI Studios, CanuDAO Analytics | give projects rich insights into their community treasury. current lead: peripheralist (, Buradorii?) Liquidity pools | add support for JB treasury tokens in secondary markets. current lead: exekias Marketplace | give JB projects a place to sell digital goods (and physical?) which pipe percentages of revenue to any number of addresses and juicebox treasuries. current lead: jango, nicholas, peripheralist Governance | plan out how we will make decisions together. current lead: zheug (, unicornio?) "},{"title":"My proposal for FC#3:​","type":1,"pageTitle":"Juicebox: Funding Cycle #3 proposal","url":"blog/funding-cycle-3-proposal#my-proposal-for-fc3","content":"Duration: 14 days (no change) I think we can find a nice pace with 14 day funding cycles. Let's stick with this. Ballot: 7 day buffer (no change) A reconfiguration proposal must be submitted 7 days before the end of the current funding cycle. I think we can get the hang of having the opportunity to vote on proposals every other week, with decisions made one week prior to them taking effect. This time frame is only possible thanks to CanuDAO, who's staff is managing our communications and operations. They've done a marvelous job getting things organized and keeping everyone on the same page. Discount rate: 10% (-6%) The discount rate should be further reduced by 6%. This is arbitrary, but it continues to give those who commit funds during FC#3 a good discounted rate to adjust for the risk of being early while continuing the process of tapering the rate off. The goal is to reduce the rate over time as risk subsides (code risk, infrastructure risk, usability risk, organization risk, governance risk). It pays to be early and to take the risk sooner rather than later. Bonding curve: 60% (+-0%) No need to change this. Still arbitrary, but there's no demand to redeem right now, so might as well keep it this tight as we adjust the discount rate. Payouts: $71k total (including $40k bug bounty that could be returned if unused) I propose we raise the target to properly hire the people and projects who are already showing up and making things flow and grow, and experiment with payouts to a few up-and-coming contributors. This also allows core contributors to embed themselves in the communities of emerging projects built with Juicebox and have cash-on-hand to support those they believe in. Actively supporting these communities is everything. Core contributors jango | dev: $10kLead.peripheralist | dev : $10kPeripheralist has not only built the Juicebox website and been improving it since launch, he also successfully launched TileDAO around a gorgeous art project he wrote. He's got first hand experience leading a community and business around a Juicebox treasury. There's no better dev to have on board.CanuDAO |comms:$2.5kSince CanuDAO's staff, zeugh and mvh3030, joined our community and gotten to work, everything seems to be running smoother. They keep our Discord organized, help with community onboarding, make sure everyone is heard and treated with respect, and makes sure the rest of the contributors can continue working towards what's ahead.  This payout is an investment in CanuDAO, we'll get their juicebox project's treasury tokens in return. WAGMI Studios | art, animations, and educational content: $2.5kWAGMI Studios is working towards putting out art, animations, and visual assets that strengthen and add color and character to the concepts that we're working on. This will increasingly important going forward as we reach beyond a crypto-native audience. This payout is an investment in WAGMI Studios, we'll get their juicebox project's treasury tokens in return. Experimental contributors exekias | dev : $3kSince Juicebox's launch, exekias has helped write infrastructure contracts for piping marketplace royalties back to Juicebox treasuries, helped with dev ops, and helped tease out complex ideas out with the rest of the team. More importantly, he launched WikiTokenDAO – he has first hand experience with dev onboarding onto Juicebox, getting a Juicebox treasury funded, and building a community around it. We want him on our team.nicholas | dev: $1.5kWe need someone who can help us create a generalized NFT marketplace template that pipes a project's sales into Juicebox treasuries. This has emerged as a need for several projects in the ecosystem. Nicholas has been working on a product called NFTstory for the past several months and is intimately familiar with the ERC-721 standard and how it can be improved and extended. He's expressed interest in working with me to take this project on, he just might be the perfect dev for it. Let's see how things go.natimuril | project support: $500 Projects that are building on Juicebox tend to need someone to be available for questions, ideation, and support. Natimuril will start helping us out with need, and eventually take on the responsibility fully herself. If all goes well, her idea is to operationalize her process and grow a collective around this community service effort.Buradorii | analytics: $500We need someone who can help form and execute queries on the treasury data that Juicebox projects are putting out, turn these into visual dashboards, and help to tell stories from the data. Buradorii has begun experimenting with running Dune analytics queries over the past week, and seems to be getting the hang of it.  Allocations Bug Bounty | $40k A total of $20k to pay out to whitehat hackers who report vulnerabilities. Payouts will be according to bug severity. Moe info coming soon. This payout will be returned to the treasury if unused.Figma, Infura, Gitbook, Mee6 &amp; Fleek subscriptions | $500 Reserved rate: 35% (+ 10%) The reserve rate should increase by 10%. We should continue to allocate 25% to core contributors, and we should add an additional 10% for ETH/JBX liquidity provider incentives. Reserved token distribution: jango: 35%peripheralist: 35%CanuDAO: 10%WAGMI Studios: 10%exekias: 7.5%misc: 2.5% - for on-demand incentives paid out by the multisig wallet.  There are still no guarantees for future payouts to anyone mentioned here, including myself. We'll have to come together over time to reassess allocations based on how things go, including pay increases and reserved JBX to experimental contributors who prove to be invaluable to the community over time. "},{"title":"Great web3 governance at a glance","type":0,"sectionRef":"#","url":"blog/great-web3-governance-at-a-glance","content":"","keywords":""},{"title":"Governance, that age-old question​","type":1,"pageTitle":"Great web3 governance at a glance","url":"blog/great-web3-governance-at-a-glance#governance-that-age-old-question","content":"How humans govern themselves is a problem that nobody has solved. For thousands of years civilizations have attempted to crack this pesky conundrum, and arguably we’ve gotten a bit better at it. But has anyone truly solved governance? When we look at the instability in our history, it’s hard to say we have. With blockchain and decentralization, a new movement has emerged to try to demonstrate what proper governance can look like. The DAO, or Decentralized Autonomous Organization, is one of many new attempts to organize human beings in a way that is conducive to efficiently and happiness. Tokenomics— a unique staple in web3 organizations— potentially hold the power to reinvent governance as we know it. So what’s the best system? "},{"title":"Community as the core of great governance​","type":1,"pageTitle":"Great web3 governance at a glance","url":"blog/great-web3-governance-at-a-glance#community-as-the-core-of-great-governance","content":"The short answer is: we don’t know. There are still total intangibles to governance that seem to elude our planning. Let’s take a look at the United States’ governance as an example. Many people will point to the United States, a representative democracy, as an example of an effective governance system. Consider, however, that early on in the forming of that government, the first president, George Washington, was given free reign to control the government as he saw fit. He could have declared himself a king, and in fact it was his completely voluntary precedents that determined much of how the government matured in subsequent years. Most people would agree that this kind of noble behavior is what shaped the United States toward democracy, and that Washington single-handedly could have given himself supreme power but chose not to. So this begs the question: how do we find the George Washington’s in web3? Where are the builders who will willingly take a back seat to allow an organization to grow? And this is where community comes into play. A strong community with shared values and interests is one way to ensure that your members will look out for one another. George Washington has just gone through a war, and was thinking of what great sacrifices took place so that this new government could form. He was surrounded by soldiers and generals and statesmen who had gone through something similar. His incentive was to improve community, not hijack it. What does the web3 analogue look like? That’s hard to say. A quick look at some of Juicebox’s governance systems will show why we believe that are some tangibles, however, that can point you in the right direction. "},{"title":"Transparency is key​","type":1,"pageTitle":"Great web3 governance at a glance","url":"blog/great-web3-governance-at-a-glance#transparency-is-key","content":"web3 is paradoxical in more ways than one. Perhaps at its core, however, is the idea that transparency is key. No backdoor deals, and everything can can be audited if one wishes. This system dovetails with the themes of trustlessness we see all over blockchain discussions. If I’m regularly doing backroom deals, in the traditional world I would need your trust to let me keep doing that. How do you know I’m not abusing that trust? You don’t. In the web3 world, I have to have my dealings out in the open. Now, I don’t care if you trust me or not, because you can freely look at what I’m doing and, if it’s inappropriate, you can simple call attention to that. Does this always work? No, of course not. But does it go a far way to establishing a shared value system? Yes. If everything is open, including payout distributions, proposals for how to change something, or partnership deals, then likely everyone will be on the same page about it. It also gives opportunity for structured disagreements, where hard questions can be asked. "},{"title":"Bringing it all together​","type":1,"pageTitle":"Great web3 governance at a glance","url":"blog/great-web3-governance-at-a-glance#bringing-it-all-together","content":"If anybody promises you that they have a system for finding the “George Washingtons” in your governance, run the other way. There is no sure-fire way to find the intangibles. What you can do, however, is structure your governance in a way that scares away the bad actors. Remember that your fifth columns only work when there are shadows, concealment, and graft at play. When you shine a bright light on everything, suddenly the environment is less conducive to trickery and value-misalignment (whether pernicious or well-intentioned). Keep that light shining bright, and don’t be afraid to speak your mind. You owe it to yourself and to your governance-compatriots. Want more? Come check us out at juicebox.money, and swing by our discord and say hello. Starting a project? Check out our blog and web3 literacy center, Juicebox High. "},{"title":"How a treasury can make or break your DAO","type":0,"sectionRef":"#","url":"blog/how-a-treasury-can-make-or-break-your-dao","content":"","keywords":""},{"title":"The unsexy world of accounting just got a makeover​","type":1,"pageTitle":"How a treasury can make or break your DAO","url":"blog/how-a-treasury-can-make-or-break-your-dao#the-unsexy-world-of-accounting-just-got-a-makeover","content":"Okay, no one has ever woken up with a great business or non-profit idea and screamed, “Eureka! I can’t wait to get started on my accounting!” We get it. You have a passion, and it’s probably not in making an accounts payable/receivable department. But here’s the thing: how your DAO, business or non-profit treats its capital is absolutely an essential factor to its long-term success. Ironically, decisions around precisely these kinds of mechanisms, that lead to long-term success, tend to be back-burner relegated in the creation process of a new project. With Juicebox: not anymore. "},{"title":"What’s the big deal about a programmable treasury, anyways?​","type":1,"pageTitle":"How a treasury can make or break your DAO","url":"blog/how-a-treasury-can-make-or-break-your-dao#whats-the-big-deal-about-a-programmable-treasury-anyways","content":"This is an excellent question, and one that everyone should be asking themselves. Let’s pitch it this way: you know how a business usually has at least one person who does the accounting? That person tracks who gets paid, where maintenance fees go, they print checks and keep records, determine and execute changes in pay structure, on top of a bunch of other things? Well imagine if you could save yourself that salary, and get complete control over the decision making of that department, without having to give yourself a crash course in accounting? That’s what the Juicebox programmable treasury delivers. It allows you to easily set payouts, determine where new funds go, how they are connected to tokens which, by the way, are also minted at your discretion. It puts all that power in your hands, without asking you to take on another full-time job, or pay out another full-time salary, saving you capital when you need it most. "},{"title":"Keeping your passion where it belongs​","type":1,"pageTitle":"How a treasury can make or break your DAO","url":"blog/how-a-treasury-can-make-or-break-your-dao#keeping-your-passion-where-it-belongs","content":"The Juicebox programmable treasury comes with a full suite of tooling that is easy to use and implement. It allows you to set your project up in a way that suits your needs. Importantly, it also allows you to keep your passion and inspiration on the thing that matters most: your project. No other web3 creation platform has the kind of functionality and fidelity of tooling that Juicebox offers, nor does any other platform have such a rich online community willing to help project creators every step of the way. The onboarding process at Juicebox is thorough and meant to help you make concrete your project idea to ensure the greatest chance of future success. Come say hi or just hang, we’d love to meet you. "},{"title":"Read to get your hands dirty? We got you.​","type":1,"pageTitle":"How a treasury can make or break your DAO","url":"blog/how-a-treasury-can-make-or-break-your-dao#read-to-get-your-hands-dirty-we-got-you","content":"For a full crash course on Juicebox tokenomics and how to create a killer project tokenomics system from start to finish, check out our article The Power of Tokenomics Explained. Want more? Come check us out at juicebox.money, and swing by our discord and say hello. Starting a project? Check out our blog and web3 literacy center, Juicebox High. "},{"title":"How I became a contributor to Juicebox.","type":0,"sectionRef":"#","url":"blog/how-i-became-a-contributor-to-juicebox","content":"Becoming a contributor at JB wasn't exactly intentional. It wasn't until a conversation with a community member that I was able to articulate and realize that getting paid was more than just a possibility. I had first learned about DAOs a few years ago but never really understood what they did or how they got things done. How do DAOs coordinate? How do they align their philosophy? How did they keep each other accountable? All of these questions were very difficult for me to wrap my head around. I then stumbled upon JB after finding out about the NOUNS project and then finding SharkDao which was using Juicebox for its treasury. What I talked about with this JB community member was the fact that I didn't say a word in Juicebox for 2 - 3 weeks. I attended a couple of town hall meetings and listened in on some voice chats that were happening, not knowing what the agenda was or what they were going to be talking about. I remember reading a bunch of threads in Discord, trying to follow one or two specific issues, to see how the community tried to solve them. What became clear was that it was important for me to not try to understand what a few people were doing, but to try and understand what the community was doing. That was an epiphany for me. It made me ask, &quot;where do this community's values and my personal beliefs and ethics intersect?&quot; This was the moment I started to look for tasks that helped me align myself with the community philosophy. I started to shift my mindset from a quiet observer to thinking about how I could provide value that could help advance the protocol and in turn, the Juicebox Community. As I was exploring, I realized that I was also learning how to navigate the community. How to navigate the notion, the web site, the Discord and everything else that might go along with JB. To those wanting to become Juicebox contributors: follow a couple of tasks or issues and see how those issues are being solved by the community. Then see if those solutions line up with how you might handle those issues. That doesn't mean you have to agree. It just means that how we talk to each other and how we interact with each other lines up with how you want to talk to people and how you want to be talked to. If you start this way, not only will you find a way to contribute but you will see that the Juicebox community will help you contribute. You'll see that Juicebox will view you not just as someone that has a valuable skill but someone that has a philosophy that aligns with the goals of the Juicebox community.","keywords":""},{"title":"HOW Juicebox for NFT Projects?","type":0,"sectionRef":"#","url":"blog/how-juicebox-for-nfts","content":"","keywords":""},{"title":"1. Create your project​","type":1,"pageTitle":"HOW Juicebox for NFT Projects?","url":"blog/how-juicebox-for-nfts#1-create-your-project","content":" https://juicebox.money/#/create or https://rinkeby.juicebox.money/#/create (testnet) I’ll go from the Funding cycle section of our create flow and recommend some possible starting points for your NFT project. "},{"title":"1. Funding​","type":1,"pageTitle":"HOW Juicebox for NFT Projects?","url":"blog/how-juicebox-for-nfts#1-funding","content":"Funding cycles​ We highly recommend using a funding cycle. This is the time period over which distributions will be made and other Juicebox settings such as the discount rate will be applied. Common funding cycle lengths are 1 week, 2 weeks or 1 month. Distributions​ You can specify the amount you’d like to distribute to each member of your team per funding cycle from the treasury. If you don’t raise the total amount of funds you’ve planned for your whole team, then each team member will be paid the percentage you’ve specified for them from any funds you have raised. For instance, if you planned for Mike and Bob to get 1 ETH each per week, but you only raised 1 ETH total in a certain week, then they will just get 0.5 ETH each. If you’re opting not to go for the shared treasury approach, you can route all funds from the treasury straight to the owner, or a percentage cut to any other wallet address. "},{"title":"Token​","type":1,"pageTitle":"HOW Juicebox for NFT Projects?","url":"blog/how-juicebox-for-nfts#token","content":"Reserved rate​ As mentioned earlier, whenever new tokens are minted as a result of someone buying an NFT or contributing for tokens straight up, this percentage of those new tokens will be reserved and the rest will go to the buyer. By default, these tokens are reserved for the project owner, but you can also allocate portions to other wallet addresses. A reserved rate of 50% will ensure the project owners maintain a majority share of the treasury and may be a good option for your project. Discount rate​ The discount rate incentivises people to get in early on your project. It controls how the issue rate of your community ERC20 token changes over time. A higher discount rate means people who buy your NFT in the early days will receive more tokens / ETH than those who come in later. An exact figure is hard to give, but with a funding cycle length of 2 weeks, a discount rate of 10% may be a good place to start. Redemption rate​ This redemption rate encourages token holders to hodl and stick with your project token for the long term. On a lower redemption rate, redeeming a token increases the value of each remaining token, creating an incentive to hold tokens longer than other holders. Similar to the discount rate, you’ll have to gauge how aggressively you want to pull this level, but a redemption rate between 50 and 75% is probably a good place to start. "},{"title":"3. Rules​","type":1,"pageTitle":"HOW Juicebox for NFT Projects?","url":"blog/how-juicebox-for-nfts#3-rules","content":"Pause payments​ You probably don’t want to check this. Check it only if you want to hold off payments for a certain period after you create your project. Allow token minting​ You probably don’t want to check this either, it allows project owners to mint any amount of tokens to anyone on demand. Whenever you have this enabled, your project will have a warning flag on its Juicebox page warning contributors of the possibility of their tokens being diluted. Reconfiguration​ This is important. It restricts how long before the next funding cycle reconfigurations must be submitted before they are able to take effect. For example, with a 3-day delay (a good starting point), a reconfiguration to an upcoming funding cycle must be submitted at least 3 days before it starts. It’s a great way to ensure your community against any malicious owner behavior. "},{"title":"2. Create a payable address​","type":1,"pageTitle":"HOW Juicebox for NFT Projects?","url":"blog/how-juicebox-for-nfts#2-create-a-payable-address","content":"This will create an Ethereum address that can be used to pay your project, rather than having to go through the Juicebox interface. It will be necessary in the model of the Juicebox NFT project we’re going for, since you will use this address as the destination for your royalty fees. You will be prompted to do this when you create your project, but can do it later at any time in the ‘Tools’ section of your project page pictured below.  "},{"title":"3. Do your thang on Opensea, or wherever. Send royalty fees to the payable address. Let the magic happen​","type":1,"pageTitle":"HOW Juicebox for NFT Projects?","url":"blog/how-juicebox-for-nfts#3-do-your-thang-on-opensea-or-wherever-send-royalty-fees-to-the-payable-address-let-the-magic-happen","content":"And that’s it! Congratulations. You’ve set up a system where buyers of your NFT will have a quantifiable stake in your project with community tokens (ERC20), and have allowed people to invest in your project without having to own an NFT. "},{"title":"Conclusion​","type":1,"pageTitle":"HOW Juicebox for NFT Projects?","url":"blog/how-juicebox-for-nfts#conclusion","content":"We hope you’ve enjoyed digging into the details of Juicebox and how you can leverage the protocol for your NFT project. If you’re interested in having a crack at the setup described here, have a play on Rinkeby. If you’ve still got some questions, come shoot us a message in our Discord or arrange an onboarding call. As always, happy Juicing! Disclaimer: This is not financial or legal advice. As always, speak with an expert and do your own research. "},{"title":"Humor, all too humor","type":0,"sectionRef":"#","url":"blog/humor-all-too-humor","content":"","keywords":""},{"title":"Predictions of Past and Present​","type":1,"pageTitle":"Humor, all too humor","url":"blog/humor-all-too-humor#predictions-of-past-and-present","content":"Once in a while it may be nice to let loose with a little silliness. So enjoy this short article on 18th century critical theory and the folly of technological prophesies. Historicism, that nebulous academic term that finds itself increasingly harder to define the more you delve into it, is at play more than you may think in the ever-changing landscape of web3. A term originally coined by Friedrich Schlegel a couple centuries ago, we will define it– for the purposes of this article– simply as the idea that societies at different times in history can oftentimes lose sight of the fact that time keeps marching forward. The future, it turns out, isn’t the easiest thing to predict. And the present doesn’t offer up all the answers. As much as we may be tempted to feel like we’ve got it all figured out, history has a bad habit of revealing the folly that belies this hubris. After all, two Romans speaking a couple thousand years ago didn’t ask each other what year it was, only for one to tell the other, “We’re in the year -22 BCE, dummy!” All this a long-winded way to say: people tend to lose sight of the future, or, to be more precise, never truly have it. Our ability to predict is pathetically unreliable as systems grow more complex. Case in point: computing power has grown exponentially, and yet we are still terrible at predicting weather. You’d think with all our developments we’d be able to see a massive hurricane before it forms, and yet this feat is presently considered functionally impossible. For all the naysayers out there: criticism of new ideas, technologies and ways of building isn’t too new after all. People have a hard time predicting what will work, but hindsight is 20/20. Enjoy as we pit historical figures, living and otherwise, in a match of predictions in the Premonition Rumble! "},{"title":"JB’s Inaugural Premonition Rumble!​","type":1,"pageTitle":"Humor, all too humor","url":"blog/humor-all-too-humor#jbs-inaugural-premonition-rumble","content":""},{"title":"Warren Buffet versus Robert Metcalfe​","type":1,"pageTitle":"Humor, all too humor","url":"blog/humor-all-too-humor#warren-buffet-versus-robert-metcalfe","content":"&quot;In terms of cryptocurrencies generally, I can say almost with certainty that they will come to a bad ending.” - Warren Buffet, 2019 vs “I predict the Internet will soon go spectacularly supernova and in 1996 catastrophically collapse.” — Robert Metcalfe, founder of 3Com, inventor of Ethernet, 1995 "},{"title":"Paul Krugman versus Thomas Edison​","type":1,"pageTitle":"Humor, all too humor","url":"blog/humor-all-too-humor#paul-krugman-versus-thomas-edison","content":"“Twelve years on, cryptocurrencies play almost no role in normal economic activity. Almost the only time we hear about them being used as a means of payment -- as opposed to speculative trading -- is in association with illegal activity.” - Paul Krugman, Nobel prize-winning economist, 2021 vs “Fooling around with alternating current (AC) is just a waste of time. Nobody will use it, ever.” — Thomas Edison, accomplished inventor, 1889 "},{"title":"Warren Buffet versus David Sarnoff​","type":1,"pageTitle":"Humor, all too humor","url":"blog/humor-all-too-humor#warren-buffet-versus-david-sarnoff","content":"&quot;Cryptocurrencies basically have no value and they don't produce anything. They don't reproduce, they can't mail you a check, they can't do anything, and what you hope is that somebody else comes along and pays you more money for them later on, but then that person's got the problem. In terms of value: zero.&quot; — Warren Buffet, 2020 vs “The wireless music box [ie the radio] has no imaginable commercial value. Who would pay for a message sent to no one in particular?” — David Sarnoff, founder of RCA, 1921 "},{"title":"Charlie Munger versus Steve Jobs​","type":1,"pageTitle":"Humor, all too humor","url":"blog/humor-all-too-humor#charlie-munger-versus-steve-jobs","content":"“I think I should say modestly that the whole damn development [of cryptocurrency] is disgusting and contrary to the interests of civilization.” - Charlie Munger, legendary investor, 2021 vs “The subscription model of buying music is bankrupt. I think you could make available the Second Coming in a subscription model, and it might not be successful.” — Steve Jobs, 2003 "},{"title":"Bill Gates versus himself​","type":1,"pageTitle":"Humor, all too humor","url":"blog/humor-all-too-humor#bill-gates-versus-himself","content":"“As an asset class, [crypto] is not producing anything and so you shouldn’t expect it to go up. It’s kind of a pure ‘greater fool theory’ type of investment.” - Bill Gates, crypto expert!, 2019 vs “No one will need more than 637KB of memory for a personal computer. 640KB ought to be enough for anybody.” - Bill Gates, computer expert!, 1981 vs “Two years from now, spam will be solved.” - Bill Gates, spam expert!, 2004 vs “I see little commercial potential for the internet for the next 10 years.” - Bill Gates, Nostradamus Incarnate!, 1994 "},{"title":"Main takeaways​","type":1,"pageTitle":"Humor, all too humor","url":"blog/humor-all-too-humor#main-takeaways","content":"All the radios in the world are kind of just window dressing, I guessWtf it’s 2022 and Spotify still doesn’t have The Second Coming!?Alternating current is a flex, not the basis for the world’s electrical gridI don’t even know where the fuck you’re reading this, because the internet imploded in 1996 Welp... Our competitors fought ferociously— have you been keeping score at home? "},{"title":"Juicebox 协议的目标人群是资本鲸🐋？投资猿🦧？建设朋克👾？创作家🎨？开发侠⌨️？还是每一个以太星人🇪🇹？","type":0,"sectionRef":"#","url":"blog/is-juicebox-for-whales","content":"","keywords":""},{"title":"初步介绍​","type":1,"pageTitle":"Juicebox 协议的目标人群是资本鲸🐋？投资猿🦧？建设朋克👾？创作家🎨？开发侠⌨️？还是每一个以太星人🇪🇹？","url":"blog/is-juicebox-for-whales#初步介绍","content":"Juicebox 协议不但支持有大梦想的小项目，同时也满足大项目希望用户或社区参与日常发展和分享成果的需求。同时，也让资助项目的人以及不同风险偏好的投资者都能对项目的支出和财务状况做到心里有数。 项目可以逐步调整筹款周期的参数设置，来校正各种激励措施和投资回报，让项目可以不断地进化。具体来说，一个项目可以使用的参数包括了筹款目标、筹款周期时长、代币保留率、联合曲线比率，还有折扣率。这些参数会随时间推移通过一个选票合约的批准来作出调整，这个选票合约可以按项目及其社区选择的管治或代治架构来实现。 筹款目标限定了每个筹款周期内项目可以提取的资金量，筹款周期的长短则由筹款周期时长决定。 支付给项目的每一笔付款都会铸造及分发项目代币给付款人，同时按保留的百分比（代币保留比率）把其余代币分配给项目方预设的一组钱包地址。每笔付款铸造出来的代币数量随时间推移受项目设置的折扣率复合影响，这是对早期捐款人的一种激励机制，因为他们承担了更大的风险。项目募集到的资金，超过筹款目标的部分就是溢出。这个溢出既是项目的长期跑道，也是社区的资产金库。每个代币持有人对溢出都有主张的权利，他们可以通过赎回（销毁）代币来行使这个权利。 项目可以设置联合曲线比率，它会影响每个代币能够得到多少份额的溢出。联合曲线率在 100% 的时候，x% 的代币就可以赎回 x% 的溢出；但 50% 的联合曲线率的情况下，x% 代币就只能赎回约（0.5 * x)% 的溢出，剩下的资产溢出由其余持币人分享。 最后，项目设置第一个筹款周期或者收到第一笔付款之前，可以提前铸造一定数量的代币的。 请浏览juicebox.money, 图文技术文档和其他博客内容，来深入认识这些控制参数 🎛。 "},{"title":"场景​","type":1,"pageTitle":"Juicebox 协议的目标人群是资本鲸🐋？投资猿🦧？建设朋克👾？创作家🎨？开发侠⌨️？还是每一个以太星人🇪🇹？","url":"blog/is-juicebox-for-whales#场景","content":"回到最初的那个问题：大资金应怎样参与 Juicebox 的项目？ 答案是他们只管把资金投入到协议的特定项目里。我们的系统对所有人都是一视同仁的。 让我们来推演一个案例，看看如果有人一下子把大量资金注入 JuiceboxDAO, 会发生什么情况。 上图是撰写本文时从 Jango 的视角看到 JuiceboxDAO。 假设现在有人投了100万美金进来，那么我屏幕上的显示会大致会变成下图这样。有人投了100万美金（约434个ETH）进来之后，从 Jango 的视角看到的JuiceboxDAO。 变动如下： 溢出更多了。铸造了更多的代币，增发代币的 10% 待分配给保留代币受益人。增发的代币加大了总供应量，我的持币比例因此从 42%下 降到 5.9%。图上未揭露的情况：这个付款人现在持有的 JBX 代币占总供应量的71%。这笔付款会显示在活动记录里。 关于我们所处新状态的几点事实： 项目金库现在有更多资金可供支配，这意味着我们的跑道【注1】（可持续时间）变长了，也意味着更大更多元化的支出或者投资的机会（更大影响力）。目前的联合曲线比率是60%，这个付款人如果马上赎回他手上这 71% 的代币的话，会拿回大概 644,000 美金（280ETH）。如果有其他付款陆续按不同的折扣率流入项目，又或者有其他持币人决定先行赎回代币，那么他能赎回的金额会更多一些。但是，如果项目后面筹款周期的烧钱速度比溢出增长要快的话，他的赎回金额则会变少。这有个工具可以用来模拟 Juicebox 的联合曲线。o代表当前的溢出金额，s代表当前代币总供应量，还有r代表联合曲线比率。x轴表示赎回的代币数量，y轴表示的是赎回x轴数量的代币可以得到的溢出金额。这个付款人手上持有占压倒性优势的代币（71%）。如果 JuiceboxDAO 沿用的投票机制是简单多数且仅以 JBX 代币作为投票方式的话，那么该付款人的意见将左右 DAO 的所有决定。倒是可以设计投票机制来避免出现这样的情况，但涉及到分配这 100 万美金的任何设置参数的修改都应得到捐这笔款的人同意，也算是说得过去。 "},{"title":"战略​","type":1,"pageTitle":"Juicebox 协议的目标人群是资本鲸🐋？投资猿🦧？建设朋克👾？创作家🎨？开发侠⌨️？还是每一个以太星人🇪🇹？","url":"blog/is-juicebox-for-whales#战略","content":"如果你是巨鲸，我想你希望押注整个 Juicebox 生态多于单个项目。多几个有前景的想法落地成为 Juicebox 配置设计体系下的集资项目来发展他们的社区，整个生态的价值就会得到提高。 一个项目在 Juicebox 协议中能做的配置是多种多样的。折扣率 0%、联合曲线率 10%、代币保留率10% 以及筹资目标50ETH的一个项目，跟折扣率20%、联合曲线率100%、代币保留率 50% 及 10ETH 筹款目标的项目，他们的玩法会截然不同。这种多元函数的梯度带来了许多有趣设置组合的可能性，项目事前没有办法知道哪一个多元组合会输出一个最佳值。目前还很少先例或者数据可供参考，所以每个项目／社区都将必须去试验最适合其需要的配置组合。 作为一名投资者，这就是高风险试错的依据。你要是觉得某个项目很有前景，想给它投100万美金，你可能应该： 留意项目设置的代币保留率。搞清楚这个项目的折扣率是多少以及项目启动以来这个数值是怎么演变的。这样你会对你的持仓在总供应量中的占比变怎样变化心里更有数。弄明白项目的联合曲线比率，就会知道你的持仓流动性高低。还要了解项目是如何配置它的筹款周期选票合约的，因为这个合约决定了谁有权实施对筹期周期配置的变更（项目方跑路不是不可能的）。 以上这些对投机猿们🦧也是适用的，但他们可能会先冲进去再来读这篇东西。 在这样一个人们和项目相互扶持的透明网络上，建设朋克们👾可以发展文化和建立社区，并得到他们应得的回报。 创作家🎨和开发侠⌨️可以为他们喜欢的项目工作，又或者直接发起自己的项目。他们从社区获得自己应得的报酬。 每个以太星人🇪🇹在通过 web3 协议进行交易时基本上都会得到回报，并（无意地）在那个特定时间节点对该协议下项目社区的金库发展做出了贡献。 "},{"title":"结语​","type":1,"pageTitle":"Juicebox 协议的目标人群是资本鲸🐋？投资猿🦧？建设朋克👾？创作家🎨？开发侠⌨️？还是每一个以太星人🇪🇹？","url":"blog/is-juicebox-for-whales#结语","content":"如果有人现在给 JuiceboxDAO 的金库捐了一大笔钱，然后我们可以提高月度预算来支撑更多支出的话，我能想出很多很多事情值得我们去投入资金。首先一个，我们可以请个人来帮忙撰写技术文档，这些文档得支持搜索、通俗易懂还得引人入胜。我们还是要请人来帮助我们写文档。我觉得我们甚至应该考虑重金请人来负责文档的编写。   **【注1】**：“跑道”指的是你的项目在耗尽资金之前可以运行几个月，企业家或 VC 通常会尝试估计项目的“跑道”来作为初始投资参考。跑道的长度对于飞机是否能够安全起飞和降落是至关重要的。如果跑道太短，飞机起飞或降落都不安全。如果跑道太长，你则浪费了资金或者资源。在创业的世界里，你会经常听到企业家或 VC 们谈论创业或融资跑道。 "},{"title":"JB Members Conference with Chinese Community Members","type":0,"sectionRef":"#","url":"blog/jb-members-conference-with-chinese-community-members","content":"","keywords":""},{"title":"Translation needs​","type":1,"pageTitle":"JB Members Conference with Chinese Community Members","url":"blog/jb-members-conference-with-chinese-community-members#translation-needs","content":"The translation efforts are coming back underway as JB has overhauled its documents over the past few weeks. One area of concern was in how to best achieve accurate translations that can be written engagingly. The need for accurate translators, particularly who are comfortable working from English to Chinese, was underscored by Zhape. If you are comfortable translating into Chinese fluently and would like to contribute to translation efforts, reach out to Zotico in the #translation channel. "},{"title":"Guerilla Marketing Campaign and Community Building​","type":1,"pageTitle":"JB Members Conference with Chinese Community Members","url":"blog/jb-members-conference-with-chinese-community-members#guerilla-marketing-campaign-and-community-building","content":"Zeugh gave a brief highlight of some intended efforts at marketing and community building. Currently, there have been discussions to send some Juicebox contributors to Crypto or NFT conferences where they can network and spread the word about Juicebox. Possible eventual speaking opportunities at conferences, or sponsorships of conferences, are also being discussed, but at the moment the goal is to start small and see if we can spread the word about Juicebox and make meaningful connections between communities, or create opportunities for people to open projects on the Juicebox platform. "},{"title":"Translating outreach/community content​","type":1,"pageTitle":"JB Members Conference with Chinese Community Members","url":"blog/jb-members-conference-with-chinese-community-members#translating-outreachcommunity-content","content":"One area discussed was the importance of trying to make it a priority to translate into Chinese blog posts, interviews, or other materials that will help bridge the gap between our Chinese-speaking and English-speaking communities. For instance, an article such as this one that simply updates the community at large on a recent discord call, or an article that announces major changes coming with V2, would be excellent opportunities to inform our Chinese-speaking readers and to open the opportunity to gain feedback from them. "},{"title":"The state of V2​","type":1,"pageTitle":"JB Members Conference with Chinese Community Members","url":"blog/jb-members-conference-with-chinese-community-members#the-state-of-v2","content":"jango gave some insights on how the V2 protocol is coming along. Front-end of the protocol is still under development and coming along nicely, and in the mean time fine-tuning measures in the back-end continue to ensure a smooth rollout. The V2 protocol will allow many creative opportunities to build extensions, and offer more tools to project creation. So far early reception has been very good. "},{"title":"Tokenomics strategies​","type":1,"pageTitle":"JB Members Conference with Chinese Community Members","url":"blog/jb-members-conference-with-chinese-community-members#tokenomics-strategies","content":"The question of how tokens should be disbursed, traded and valued also came up. The goal of ensuring that a project received the best rate of JBX per ETH is being discussed and worked on. Practically, this would mean that if a better JBX rate existed from an AMM, a project creator would receive that rate JBX at the AMM exchange rate. While JBX currently has low liquidity, one line of thinking is that such a system, which would necessarily drive traffic to such AMM’s, would serve as a mechanism to build those liquidity pools. Importantly, the impetus for such a process starting will likely come as Juicebox incentivizes these opportunities. "},{"title":"Voting equity​","type":1,"pageTitle":"JB Members Conference with Chinese Community Members","url":"blog/jb-members-conference-with-chinese-community-members#voting-equity","content":"Another core topic of discussion was around voting equity in the current DAO governance. The question centered around how to strike a balance between early contributing members, such as jango, who have very large sums of JBX and thus have tremendous voting power, and members who may be contributing heavily but are newer, and thus have far lower voting power. This is a catch-22, but it is important to note that this imbalance is certainly aware to early contributors such as peri, jango and others. In the case of per and jango, they do not engage in voting for this reason (both were quick to point out). One solution is to continue issuing JBX, which will give more voting power to more individuals, but this also flies squarely against certain opinions to completely stop JBX issuance. It is a complex situation that has a lot of moving parts, and is inextricably linked to the JBX issuance/AMM situation mentioned above. Ultimately the thinking is that with these new changes, solutions may present themselves and we will see growth and directions in these domains. "},{"title":"Main Takeaways​","type":1,"pageTitle":"JB Members Conference with Chinese Community Members","url":"blog/jb-members-conference-with-chinese-community-members#main-takeaways","content":"This call provided important information and helped streamline communication between the English-speaking and Chinese-speaking Juicebox member communities. The nature of questions remained substantive throughout and finding a cadence to have such calls seems like a good strategy moving forward. A huge thank-you to our members, both English- and Chinese-speakers, for taking the time to hop on this call and for having such open and transparent discussions. And again a huge thank-you to Zhape, who translated and managed the discussion and kept a good flow going! "},{"title":"Juicebox Benefits Program Explained","type":0,"sectionRef":"#","url":"blog/juicebox-benefits-program-explained","content":"","keywords":""},{"title":"You can claim your JBX here! For more information, read on.​","type":1,"pageTitle":"Juicebox Benefits Program Explained","url":"blog/juicebox-benefits-program-explained#you-can-claim-your-jbx-here-for-more-information-read-on","content":" "},{"title":"Background​","type":1,"pageTitle":"Juicebox Benefits Program Explained","url":"blog/juicebox-benefits-program-explained#background","content":"Juicebox's legitimacy as a DAO is built upon sufficient decentralization of power, access, and ownership. To accomplish this ideal, Juicebox must attract and retain an active community that has Juicebox's long-term interests in mind. One of the most direct methods for improving decentralization is the airdrop. Several airdrop proposals were made to this effect in FC#15, all of which were rejected. JBP-103 - Distribute JBX to JBX Holders JBP-102 - Distribute JBX to Juicebox Projects JBP-101 - Distribute JBX to v1.1 Party Attendees JBP-100 - Distribute JBX to Nicholas’ List JBP-99 - Distribute JBX to Extended Community As part of a new airdrop proposal, ARCx has crafted a Juicebox Benefits Score which identifies Juicebox community members based on their token holding behaviour and governance participation. See JBP-114: Juicebox Benefits Airdrop  "},{"title":"Score Methodology​","type":1,"pageTitle":"Juicebox Benefits Program Explained","url":"blog/juicebox-benefits-program-explained#score-methodology","content":"The Juicebox Benefits Program identifies and rewards active community members who hold Juicebox DAO’s long-term interests at heart. The score rewards active contributors by measuring governance participation, and rewards long-term support by measuring how long a wallet has held JBX. "},{"title":"Governance Factor (60%)​","type":1,"pageTitle":"Juicebox Benefits Program Explained","url":"blog/juicebox-benefits-program-explained#governance-factor-60","content":"The Governance Factor measures the number of Juicebox Snapshot proposals that a wallet has voted in. The wallet with the highest Governance score is given 600 points, and the wallet with the lowest score is given zero. All other wallets are linearly scored within those bounds—for example, a wallet that voted in half as many snapshot proposals would be given 300 points. "},{"title":"HODL Factor (40%)​","type":1,"pageTitle":"Juicebox Benefits Program Explained","url":"blog/juicebox-benefits-program-explained#hodl-factor-40","content":"The HODL Factor measures the number of UTC dates that a wallet has held at least 1 JBX (either claimed or unclaimed). The wallet with the highest HODL score is given 400 points, and the wallet with the lowest score is given zero. All other wallets are linearly scored within those bounds—for example, a wallet that held JBX for half as many dates would be given 200 points.  "},{"title":"How to Claim​","type":1,"pageTitle":"Juicebox Benefits Program Explained","url":"blog/juicebox-benefits-program-explained#how-to-claim","content":"Visit airdrop.juicebox.money and connect your wallet to see if you are eligible. You can also claim a free passport to view this score (and other scores) on arcx.money. On 2022-06-07 at 22:00 UTC, any unclaimed JBX which remains in the smart contract will be returned to the multisig for future use. Your score on arcx.money might not be the same as your score on airdrop.juicebox.money. To prevent sybil attacks, the airdrop scores were measured at Ethereum block 14,263,369.  "},{"title":"What's Next?​","type":1,"pageTitle":"Juicebox Benefits Program Explained","url":"blog/juicebox-benefits-program-explained#whats-next","content":"Going forward, the community could use the Juicebox Benefits score to make new airdrops, to set up a gated Merch Squad collection, to make gated Discord roles, or even to create exclusive Juicebox-themed ARCx passport skins. These scores are verifiable onchain, meaning they can be permissionlessly used in smart contracts or used through an API. Some other examples mentioned by ARCx include: Distributing airdrops equitablyBoosting smart contract staking yieldsVerifying social status via Discord rolesOffering free smart contract insurance to the best usersFee &amp; product discountsMany more This score evolves with your behaviour over time! Although the methodology could evolve, Juicebox Benefits projects aim to reward active contributors which support Juicebox's long-term goals. Your participation and support of Juicebox will be reflected in these scores over time. If you have ideas or suggestions, share them in the ARCx Discord or in #jbx-benefits on the Juicebox Discord.  "},{"title":"Verify​","type":1,"pageTitle":"Juicebox Benefits Program Explained","url":"blog/juicebox-benefits-program-explained#verify","content":"Airdrop contract: 0x518e3CdBcda4f0735399c9F1e03A7aBC7562632f Merkle root: 0xba0ccda021dd3008d51728ccd530dfe42d6bba07f8118d8a796e26d80e305009 Sweeper: 0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e  Main Repository Airdrop CSV Merkle Root(use yarn &amp;&amp; yarn generate-list to verify). Airdrop contract on Etherscan  arcx.money｜ARCx Twitter｜ARCx Discord｜juicebox.money｜Juicebox Twitter｜Juicebox Discord "},{"title":"Juicebox Benefits Program Update","type":0,"sectionRef":"#","url":"blog/juicebox-benefits-program-update","content":"","keywords":""},{"title":"Definitions​","type":1,"pageTitle":"Juicebox Benefits Program Update","url":"blog/juicebox-benefits-program-update#definitions","content":"To fully comprehend the findings, it helps to quickly define the terminology used in our analysis. Most of these findings centralise around a concept called the &quot;Retention Rate&quot;. The retention rate is defined as the lowest JBX balance for an address after the airdrop. To better understand this, let's use an example: 0x123 claims 100 JBX tokens from the airdrop. They then go on to sell 30 of their tokens immediately after claiming. This address then waits a week, and buys back the originally sold 30 tokens. In this scenario 0x123 would have a retention rate of 70%, even after buying back the tokens, as it is the greatest amount of tokens sold after the claim. This logic ensures that per address the retention rate can only go down over time. The second concept to understand is the &quot;Average Retention Rate&quot;. Many of these graphs aggregate the retention rates across all claimers in the airdrop. The average retention rate is defined as the average of all the retention rates for all addresses whom have claimed already. So, again using an example, if 10 addresses claimed the airdrop each day, then the average retention rate on day 1 would only consider the first 10 address and not any of the addresses who claimed on day 2, day 3, etc. "},{"title":"Findings​","type":1,"pageTitle":"Juicebox Benefits Program Update","url":"blog/juicebox-benefits-program-update#findings","content":"The first graph shows retention rates 28 days after several major airdrops. The Juicebox Benefits Airdrop had unprecedented levels of hodling!  The next graph also shows retention rates, but instead shows them over time. After a brief selloff, retention was remarkably stable.  Next, we consider this same retention rate over time broken down across the 3 different score chorts (see JBP-114). Interestingly, the cohort with scores between 53-200 had the second highest retention rate, beating out the 201-300 cohort by ~15% at times.  Finally, we looked at how quickly each cohort claimed their JBX. Interestingly, the 53-200 tier fared better than the 201-300 tier in this metric as well.  Thank you to everybody who helped make this airdrop happen. More information and analysis will be coming soon! "},{"title":"Juicebox DAO 7/17/2021","type":0,"sectionRef":"#","url":"blog/juicebox-dao-7-17-2021","content":"The Juicebox contracts were deployed to Ethereum two days ago. Yesterday, @peripheralist, who built the juicebox.money website, launched a generative art project called Tiles using the Juicebox protocol as its treasury, http://tiles.art. He started a DAO around it, https://discord.gg/bgGwmjWJ85. With Juicebox, we had built a business-model protocol. With Tiles, he built a beautiful, expressive, and flexible collection of generative art to rally a community around. Neither of us had much of an idea what would or should happen next, but I was excited to take a step back and find out. My conclusion: From a growth perspective, we can either go out and look for more entrepreneurs and artists that could benefit from using Juicebox, or we can lean into TileDAO since it's the one project that currently uses Juicebox. Since building stuff &gt; shilling stuff is an invariant for me, I think the best thing I can do right now as a $JBX token holder is to participate in TileDAO and help grow it. As other projects start considering building on Juicebox, our job will be to become supporting cast member of their community also.","keywords":""},{"title":"Juicebox has been deployed","type":0,"sectionRef":"#","url":"blog/juicebox-deployed","content":"","keywords":""},{"title":"Motivation​","type":1,"pageTitle":"Juicebox has been deployed","url":"blog/juicebox-deployed#motivation","content":"Long story short: indie artists and devs, DAOs, and public goods more generally, need a groovy way to capture the value they create, make reliable cashflow money out of it, and then share it back into the world. The Juicebox protocol does this by allowing projects to make commitments about how its cashflow will be distributed before ever receiving payments, signaling to users how their money will be spent ahead of time. It works really well as a payment terminal and programmable treasury for projects that have mostly predictable costs (like staff payouts, service subscriptions, donations, budgeted initiatives, etc.), and who want to automatically reward their community as they become successful.  "},{"title":"How it works​","type":1,"pageTitle":"Juicebox has been deployed","url":"blog/juicebox-deployed#how-it-works","content":"With just one gas-efficient transaction, you can start funding and growing a Juicebox project, and configuring its treasury's payouts. Once deployed, anyone can fund your project either as a patron by making a payment directly through juicebox.money, or by using other contracts that take fees composably into the Juicebox protocol. Either way, they'll receive your project's community tokens in return.People can pay you directly via an interface like juicebox.money.Or, inherit from JuiceboxProject.sol and use _takeFee to get paid contractually. As the project owner, you can set a funding target that specifies how much it'll cost to create and operate your project for a set amount of time. You do this before anyone sends you money. If your project earns more than its funding target in a set period of time, the overflow can be redeemed by your supporters alongside you in exchange for burning tokens. This effectively pushes everyone's price to pay for your project towards zero as usage grows. If left unclaimed, overflow serves as a runway for projects. A project's team and its community are thus incentivized to work together to make sure overflow growth outpaces spending.Funding cycles roll over automatically, allowing people and contracts to affordably fund projects that are important to them on an ongoing basis. You can configure a discount rate to incentivize earlier adopters, a bonding curve rate to incentive commitment from community members, and a reserved rate to receive some of your own tokens each time someone pays you and receives tokens themselves.Project owners can re-asses their funding needs and cycle configuration over time, and can choose to take their token holders' perspectives into account while publishing these sorts of changes to Juicebox.  There are several ways to configure your Juicebox projects. Here are few cool things you can do: You can route your income stream through the Juicebox contracts. For example, you can make a version of Uniswap that explicitly only needs $X per month to be sustainably run (labor, ops), where each swap transaction incurs a fee ($Y) that goes towards sustaining the service. If there are enough swaps that month (N) such that N * $Y &gt; $X, then for each subsequent swap, all accounts that have swapped (and therefor paid fees) receive a dividend from the overflowed revenue that is proportional to the amount they've contributed to the project's sustainability thus far. So if N * $Y grows unjustifiably faster than $X — which is the underlying market rent-seeking inefficiency that Juicebox projects try to out-compete — then instead of compounded shareholder wealth aggregation, everyone's price tends towards zero. Meaning people get a nearly-free, community-driven product with no ads, guaranteed data integrity, full business operation accountability, and an open source code base that runs reliably. All built by motivated punks that are getting paid what they ask for and are rewarded alongside the community as overflow grows. 2. It's easy to program financial dependencies, so your Juicebox project's funding target can be contractually hooked up to those of people and projects it depends on. 3. You can run a recurring/one-time fundraising campaign and return extra funds to your community, or to other causes. 4. As the project owner, you can earn some of your own tokens with every payment you receives. You'll &quot;unlock&quot; these tokens at the rate with which your overflow grows, not according to some arbitrary multi-year vesting schedule. These reserved tokens can then be contractually distributed to staff, or to other causes.  There's nothing more exciting than working on/with/for the Ethereum ecosystem these days – new artful minds are being welcomed into cryptowallet-life everyday, and brilliant experiments are being crafted on the regular. It's a creator's dream – there's no need to manage infrastructure, growth is driven by your community, and financial expectations can be anchored down by code. The Juicebox protocol was created as a means to further this end. If you have questions or want to contribute, don't hesitate to hop into the Discord. "},{"title":"Juicebox: Funding Cycle #2 proposal","type":0,"sectionRef":"#","url":"blog/juicebox-funding-cycle-2-proposal","content":"JuiceboxDAO's second funding cycle will have the following goals: Continue working with projects that have expressed interest in launching using the Juicebox protocol as its treasury. There's at least one project slated to deploy over the next few weeks.Get the community organized: Discord, voting, roles, etc. We will organize and execute a community vote to determine the configuration of FC#3.Build UIs for projects to access back office stuff like creating direct payment addresses, transfer project ownership, and allow operators to access UI components currently only accessible to owners.Get the hang of writing Dune analytics queries to start visualizing Juicebox protocol data. The goal is to provide this data to projects using Juicebox.Continue outreach efforts to broader Ethereum communities on Twitter and Discord. I propose the following reconfiguration: Duration: 14 days Let's experiment with a shorter cycle to see what happens. It gives us scope for one solid sprint with the goal of involving more of the community in the next reconfiguration decision. As the project matures, I expect more planned out, longer cycles instead of these shorter ones. Ballot: 3 day buffer A reconfiguration proposal must be submitted 3 days before the end of the funding cycle. Discount rate: 16% (-4%) The discount rate should be reduced by 4%. This continues to give those who commit funds during FC#2 a good discounted rate to adjust for the risk of being early, but begins the process of tapering the rate off. The goal is to reduce the rate over time to make a contribution during FC#1 valued around 2X the same contribution made 6 months later. It pays to be early and to take the risk sooner rather than later. Bonding curve: 60% (no change) There's relatively little overflow, and the JBX distribution is still narrow. No need to change this. Payouts: $10,750 total jango: $4k Project lead.peripheralist: $2.5k Front end lead.zeugh: $1K Organize and lead community.WAGMI Studios: $1.25k Educational content and art.Figma, Infura, Gitbook, &amp; Fleek subscriptions cost around $500 monthly.exekias: $750 Dev contributor.galbi: $500 Dev contributor.nervetrip: $250 Dev contributor. Reserved rate: 25% (+15%) The reserve rate should be increased 15%. This gives me and my fellow founding contributors room to add a slight incentive bump for ourselves (we've been busier than we imagined right out of the gate), and to allocate new distributions. It also puts slightly more tokens in the hands of core contributors to help guide the project in the early stages, while still giving the bulk of tokens to external supporters to diversify our token holders. Reserved token distribution: jango: 35%peripheralist: 35%WAGMI Studios: 10%zeugh: 10%exekias: 7.5%misc: 2.5% - used for on-demand incentives by the multisig.","keywords":""},{"title":"Juicebox: Project update and FC4 proposal","type":0,"sectionRef":"#","url":"blog/juicebox-funding-cycle-4-proposal","content":"","keywords":""},{"title":"Focus​","type":1,"pageTitle":"Juicebox: Project update and FC4 proposal","url":"blog/juicebox-funding-cycle-4-proposal#focus","content":"As a DAO, we should continue focusing on the following areas: "},{"title":"Risk mitigation​","type":1,"pageTitle":"Juicebox: Project update and FC4 proposal","url":"blog/juicebox-funding-cycle-4-proposal#risk-mitigation","content":"Goal: Make sure things don't go to zero.  Current team: jango (lead), exekias Updates: One low severity bug was discovered, an explanation of what happened can be found here, and a postmortem is available here.We're underway with a baseline audit being performed by DeFiYield.We still need to outline a bug bounty program with associated rewards for discovered vulnerabilities of varying severities. "},{"title":"UX improvements​","type":1,"pageTitle":"Juicebox: Project update and FC4 proposal","url":"blog/juicebox-funding-cycle-4-proposal#ux-improvements","content":"Goal: Improve and make templates for project onboarding and the project dashboard. Current team: peri (lead), jango, exekias Updates: Added Web3 connect support for various other wallets using blocknative. See this PR.Updated the &quot;Projects&quot; page of the site to be sortable by &quot;Total earned&quot;.Added a data feed to each project feed to view total amount of ETH contributed by each address.Several bug fixes. "},{"title":"Project support, education, & docs​","type":1,"pageTitle":"Juicebox: Project update and FC4 proposal","url":"blog/juicebox-funding-cycle-4-proposal#project-support-education--docs","content":"Goal: Make sure JB projects have the resources they need to get started and thrive.  Current team: jango (lead), natimuril, WAGMI Studios, CanuDAO Updates: Helped SharkDAO launch an AMM pool for their treasury token.Several conversations with projects that are interested in building their treasury using Juicebox. Actively workshopping solutions for ScribeDAO and Phlote, with FingerprintsDAO, $Loot, and a project by NiftyTable also on the radar.No significant updates on tech or process documentation. We need to make progress here as we continue to understand the materials that projects and contributors need to be successful. "},{"title":"Analytics​","type":1,"pageTitle":"Juicebox: Project update and FC4 proposal","url":"blog/juicebox-funding-cycle-4-proposal#analytics","content":"Goal: Give projects rich insights into their community treasury. Current team: peri (lead), buradorii Updates: A new data feed that shows how much each address has contributed to each project has been added to each project page on juicebox.money.Progress has been made on charts that show a project's P&amp;L using Flipside analytics tool.We have yet to deliver a data dashboard to projects. We're still working towards this end. "},{"title":"Liquidity pools​","type":1,"pageTitle":"Juicebox: Project update and FC4 proposal","url":"blog/juicebox-funding-cycle-4-proposal#liquidity-pools","content":"Goal: Add support for JB treasury tokens in secondary markets. Current team: exekias (lead), jango Updates: SharkDAO's SHARK token has been pooled with ETH on Sushiswap, you can see the analytics here. SharkDAO's Juicebox page was closed during this transition, with plans to reopen in the coming days. Research is underway to provide a staking contract to projects where LP rewards can be distributed. "},{"title":"Marketplace​","type":1,"pageTitle":"Juicebox: Project update and FC4 proposal","url":"blog/juicebox-funding-cycle-4-proposal#marketplace","content":"Goal: Give JB projects a place to sell digital goods (and physical?) which pipe percentages of revenue to any number of addresses and Juicebox treasuries. Current team: nicholas (lead), jango, peri* Updates: Researched how other protocols are doing split payments.Finalized the user journeys that we're trying to solve.Begun workshopping how the contracts should be architected.Begun ideating on what the UX should be. "},{"title":"Governance​","type":1,"pageTitle":"Juicebox: Project update and FC4 proposal","url":"blog/juicebox-funding-cycle-4-proposal#governance","content":"Goal: Plan out how we will make decisions together. Current team: zheug (lead), unicornio Updates: Created a process schema to follow when making proposals, voting on them, and conveying the decision on-chain.Created a Coordinape page where we can experiment with reputation assignment.Governance meetings are beginning to happen regularly on Tuesdays. "},{"title":"Protocol upgrades  ​","type":1,"pageTitle":"Juicebox: Project update and FC4 proposal","url":"blog/juicebox-funding-cycle-4-proposal#protocol-upgrades-","content":"Goal: Evolve the protocol to be more useful and remove friction from the treasury management process.  Current team: jango (lead), exekias, peri, nicholas Updates: A TerminalV2 contract is well underway. This update will allow projects to customize their treasury strategy entirely. Details tbd, implementation and ongoing tests can be found here.TerminalV2 will patches an edge case bug found, mentioned earlier under &quot;Risk mitigation&quot; "},{"title":"My proposal for FC4:​","type":1,"pageTitle":"Juicebox: Project update and FC4 proposal","url":"blog/juicebox-funding-cycle-4-proposal#my-proposal-for-fc4","content":"Duration: 14 days (no change) Ballot: 3 day delay (changed from 7 day) A reconfiguration proposal must be submitted 3 days before the end of the current funding cycle. Reconfiguration decisions are feelings a little rushed. Changing the ballot delay from 7-days to 3-days gives us a bit more time than what we currently have for evaluating proposals and conveying changes on-chain. Discount rate: 10% The discount rate should continue to compound at 10% to reward contributors who continue to fund the JuiceboxDAO treasury at this risky stage. Bonding curve: 60% (+-0%) No need to change this. Still arbitrary, but there's no demand to redeem right now, so might as well keep it this tight as we adjust the discount rate. Payouts: $33.5k total I propose we pay exekias, nicholas, nati, and buradorii slightly more. Core contributors jango | dev: $10k (no change)peripheralist | dev : $10k (no change)CanuDAO |comms:$2.5k (no change)WAGMI Studios | art, animations, and educational content: $2.5k (no change)exekias | dev: $4k (+ $1k)Exekias has bee hands on with all aspects of the code. Increasingly becoming an integral part of the core dev staff. Experimental contributors nicholas | dev: $2k (+ $500)Nicholas has begun writing code, he's been an active voice in our community, and he's helping to progress pivotal discussions forward.nati | community relations: $1k (+$500) Nati has begun onboarding DAOs onto Juicebox and is also helping progress pivotal discussions forward.Buradorii | analytics: $1k (+$500) Buradorii has begun publishing Flipside data dashboards. We've yet to aggregate charts and deliver them to projects. Allocations Figma, Infura, Gitbook, Mee6 &amp; Fleek subscriptions | $500 Reserved rate: 35% (No change) We should continue to allocate 25% to core contributors, and reserve 10% for ETH/JBX liquidity provider incentives (soon). Reserved token distribution: jango: 35%peripheralist: 35%CanuDAO: 10%WAGMI Studios: 10%exekias: 7.5%misc: 2.5% - for on-demand incentives paid out by the multisig wallet. "},{"title":"Juicebox Governance","type":0,"sectionRef":"#","url":"blog/juicebox-governance","content":"The Juicebox protocol was launched with a governance contract controlled by a multisig wallet. There are 4 EOAs on the multisig, and 2 of the 4 must approve a transaction for it to be submitted to the Ethereum blockchain. I am a signer, along with @peripheralist, @nervetrip, and @NMieos. This multisig wallet has the power to propose reconfigurations to the JuiceboxDAO's Juicebox project. The multisig vows to make decisions honoring the community's intent, but it is still ambiguous how the community's intent will be captured going forward. For the next few weeks, expect reconfigurations discussions to be lead by the founding contributors and take community discussion into account. Decisions made by this multisig wallet can only affect the JuiceboxDAO's treasury, not of projects built using the Juicebox protocol. To be clear, I absolutely do not want to be a multisig signer long into the future – I feel I have already been entrusted with too much influence over the project's direction as a protocol developer and active community member. I also recognize and am OK with the fact that I am among the best people right now to approve of decisions that impact the treasury, and so I will carry on multisig duties as long as the community needs me to. After all, the project is still new to the party and finding its groove. My main job right now is to help the project find its groove. This means helping out core contributors of other projects who have expressed interest using the Juicebox protocol, being a supporting community member of projects who have already integrated the Juicebox protocol, and identifying yet-to-be-built services that each community who uses the Juicebox protocol could benefit from while proposing ways for JuiceboxDAO to use our resources to address these needs.","keywords":""},{"title":"Juicebox in the Words of DrGorilla","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-drgorilla","content":"","keywords":""},{"title":"How'd you get started with JB, and how has it changed since you've been here?​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#howd-you-get-started-with-jb-and-how-has-it-changed-since-youve-been-here","content":"It all started in November, when nicholas reached out to tell me that JB was looking for devs. I joined immediately. I had left previous projects because they were either running in circle or became cash-grabs, so I was looking for something more interesting (for a solidity dev) to do. I joined the Discord the same day nicholas reached out and wrote my first batch of unit tests the same night! This period was in-between ConstitutionDAO and AssangeDAO, so we were in some kind of a wave of newcomers to JuiceboxDAO. Since then, Juicebox and JuiceboxDAO have been maturing a lot, in terms of governance, tech, identity (and there are so many cool things yet to come) :) "},{"title":"That's such an awesome origin story. One thing that has struck me is how open and inclusive people are at JB; I haven't encountered a single asshole yet. Where are they?​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#thats-such-an-awesome-origin-story-one-thing-that-has-struck-me-is-how-open-and-inclusive-people-are-at-jb-i-havent-encountered-a-single-asshole-yet-where-are-they","content":"… Not in JuiceboxDAO. All in all, this is a great contributors team, and a super diverse community around, really a nice place! "},{"title":"What is something people here in JB would be surprised to learn about you? Ie interesting hobbies/life experiences etc?​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#what-is-something-people-here-in-jb-would-be-surprised-to-learn-about-you-ie-interesting-hobbieslife-experiences-etc","content":"Ok, tricky to not doxx myself too much… Maybe a list of professions and jobs I might—or might not :)—have done: Waiter Morgue janitor Photo-assistant MD &amp; surgical resident Finance master &amp; gintonic producer Art degree &amp; real author of the Vitruvian man "},{"title":"lol! Omg that’s some eclectic shit! Tell me about what it was like cleaning up the morgue!​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#lol-omg-thats-some-eclectic-shit-tell-me-about-what-it-was-like-cleaning-up-the-morgue","content":"... Cold haha. But clean (not the cleanest part of my professional cleaning career, but certainly the most atypical one:) I was a teenager, so a bit afraid the first time, but humans are super resilient, I got along with it:) "},{"title":"How many ghosts did you bump into? Did a door ever slam shut across the hall in an otherwise empty building?​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#how-many-ghosts-did-you-bump-into-did-a-door-ever-slam-shut-across-the-hall-in-an-otherwise-empty-building","content":"Those guys were really nice as to mark the empty/occupied &quot;rooms&quot; (that was a small morgue, not like the ones with shelfs as in movies, rather one small refrigerated room per body), but still, it happened to bumped into someone (who obviously didn't care being bothered anymore). I remember one of the full-time (adult) janitor having this sentence I'll never forget: &quot;You should rather be scared of the people alive&quot;, adding paranoia to my already existing ptsd. "},{"title":"lol​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#lol","content":"... "},{"title":"Ok, we will do a follow-up article just about this topic, but let's forge on back to nicer topics.​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#ok-we-will-do-a-follow-up-article-just-about-this-topic-but-lets-forge-on-back-to-nicer-topics","content":"“DrGorilla’s Morgue Experience!” - yeah, rather morbid. "},{"title":"Between you and me and the internet, who is your favorite JB contributor, and why is it Zom_Bae?​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#between-you-and-me-and-the-internet-who-is-your-favorite-jb-contributor-and-why-is-it-zom_bae","content":"Because she rocks! Nobody’s expecting a Zom_Bae, yet, she appears to solve stuff, and that’s pretty cool imo. "},{"title":"You know she singled you out when she was asked who her favorite contributor was.​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#you-know-she-singled-you-out-when-she-was-asked-who-her-favorite-contributor-was","content":"“My favorite contributor is Felixander because he makes me look good on paper.” "},{"title":"Perfect, best answer so far! OK, tell me what the future of DrGorilla looks like. What are you really excited about?​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#perfect-best-answer-so-far-ok-tell-me-what-the-future-of-drgorilla-looks-like-what-are-you-really-excited-about","content":"Lately, I've been like deep into V2 final push, so this is my &quot;scope&quot; when answering that I'm really excited about starting coding treasury extensions (imagine strats à la Yearn, but as a DAO on Juicebox!) - nerdy-side aside, this is gonna rock! "},{"title":"Haha, that's the perfect answer for a JB contributor! Your heart is in the right place!​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#haha-thats-the-perfect-answer-for-a-jb-contributor-your-heart-is-in-the-right-place","content":"My heart and my keyboard : ) "},{"title":"We will do a follow-up about your morgue days and so much more, but for now I will ask one last question: whats the silliest thing you've ever done (beside this interview)?​","type":1,"pageTitle":"Juicebox in the Words of DrGorilla","url":"blog/juicebox-in-the-words-of-drgorilla#we-will-do-a-follow-up-about-your-morgue-days-and-so-much-more-but-for-now-i-will-ask-one-last-question-whats-the-silliest-thing-youve-ever-done-beside-this-interview","content":"This is a tough one! Nothing beats this interview. "},{"title":"Juicebox in the Words of filipv","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-filipv","content":"","keywords":""},{"title":"How'd you get started with JB, and how has it changed since you've been here?​","type":1,"pageTitle":"Juicebox in the Words of filipv","url":"blog/juicebox-in-the-words-of-filipv#howd-you-get-started-with-jb-and-how-has-it-changed-since-youve-been-here","content":"I got started through a tweet that I saw; I was on twitter, managing another account, and I saw a tweet from Nicholas asking for help with social media. So I joined the discord server and it was pretty sweet… people were really nice… I said in the server that I wanted to do social media, and 9birdy9 asked me to help with governance issues, and one thing led to another and now I’m doing quite a bit of stuff. Since I got here, back in November 2021, JB has grown a lot. That’s led to a few things– one is that the culture has evolved, it’s gotten a bit more serious and formal, but we’ve also had a really large demographic shift as the Chinese community has taken greater interest in JB. The team has grown, and I feel like we’ve moved into a higher gear work-wise, and become more efficient as a team. "},{"title":"How would you describe your role at JB?​","type":1,"pageTitle":"Juicebox in the Words of filipv","url":"blog/juicebox-in-the-words-of-filipv#how-would-you-describe-your-role-at-jb","content":"If I had to put a title, I guess “operations”, or “operations generalist”. I have varying amounts of skill in a number of places, and I try my best to chip in where I can, but that also means I’m pretty diverse in what I do; I tend to be shifting more toward governance stuff/writing proposals, but generally I just look at what JB is doing, and I try to help steer the ship in a direction that is fitting. "},{"title":"In my experience at JB so far, everyone’s been very nice and helpful, so I’m wondering: where are all the assholes?​","type":1,"pageTitle":"Juicebox in the Words of filipv","url":"blog/juicebox-in-the-words-of-filipv#in-my-experience-at-jb-so-far-everyones-been-very-nice-and-helpful-so-im-wondering-where-are-all-the-assholes","content":"I would say a lot of times people become assholes in a corporate setting due to resentment that stems from a lack of honesty or allowing expression, but JB is quite good at facilitating expression. Also I think JB attracts a different type of person– there’s no job interview, manager telling you what to do, etc.-- you really have to be a self-starter, and since everything is handled by voting by your peers, there’s real incentives for you to get along; if you’re an asshole, people will vote you out. "},{"title":"What’s something that people would be surprised to find out about you?​","type":1,"pageTitle":"Juicebox in the Words of filipv","url":"blog/juicebox-in-the-words-of-filipv#whats-something-that-people-would-be-surprised-to-find-out-about-you","content":"Hmm. I play trumpet, and I worked as a jazz musician in New York. I’m getting to be a bit of a coffee snob as of late. Oh, and at one time I was nationally ranked in yu-gi-oh. "},{"title":"What’s been some of your most exciting experiences at JB so far?​","type":1,"pageTitle":"Juicebox in the Words of filipv","url":"blog/juicebox-in-the-words-of-filipv#whats-been-some-of-your-most-exciting-experiences-at-jb-so-far","content":"All the events around AssangeDAO, despite the chaos, were really fun to be a part of. That being said, every time I do a new project I get very excited. "},{"title":"And finally: who’s your favorite JB community member, and why is it peri?​","type":1,"pageTitle":"Juicebox in the Words of filipv","url":"blog/juicebox-in-the-words-of-filipv#and-finally-whos-your-favorite-jb-community-member-and-why-is-it-peri","content":"Gotta be the sex appeal. "},{"title":"Juicebox in the Words of jango","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-jango","content":"","keywords":""},{"title":"How'd you get started with JB, and how has it changed since you've been here?​","type":1,"pageTitle":"Juicebox in the Words of jango","url":"blog/juicebox-in-the-words-of-jango#howd-you-get-started-with-jb-and-how-has-it-changed-since-youve-been-here","content":"It started as a seed of thought. Around 2014/2015ish, I was building this app in iOS dev world. That was back in my younger days when I loved building shit, working with friends, piecing together who’s good at what, etc. We didn’t have a tonne of users on the app, but we had an open slack server where several users would come hang out with the builders We didn’t want to think about price, business models, advertising etc. We just wanted to build, and we didn’t like thinking of this structure with users on one side to pay fees, and builders on the other to create and get paid, since we felt like the folks using the app were a part of the building process as well. One day I was sitting with my notebook, trying to figure out how this whole thing was going to play out, and I captured an idea floating by. If we figured out exactly how much it would cost to run this thing, including server hosting, salaries, and so on, we could come up with one number we needed to get to by the end of the month. When we realized we could enumerate exactly what those expenses were to the users, fully transparently, and tell them listen, this is what we need to get to each month for the service to run, and if we exceed this number, we’re going to use that overflow to push down the price of the product– once we realized that, we just ran with the idea and that became the product. It seems like a win-win– the team gets paid, the users get a service, and if it becomes more successful, the service becomes more and more affordable, or even free. "},{"title":"That sounds like a light-bulb moment. How did it translate into your project at that time?​","type":1,"pageTitle":"Juicebox in the Words of jango","url":"blog/juicebox-in-the-words-of-jango#that-sounds-like-a-light-bulb-moment-how-did-it-translate-into-your-project-at-that-time","content":"So I stopped the project to focus full time on the building out this new concept, but tried to do it all in the Web 2 world, and it was really really hard– trying to forge relationships with banking systems about a system where there’s fees, maybe fee refunds if we have overflow, etc., and someone would have coordinate all these fees, refunds, and so on, it just wasn’t possible to manage all that with Web 2 structures. Around that same time I was delving into crypto, learning about the blockchain, smart contracts, and then in hit me: this idea was executable, but we were totally swimming against the current trying to do it in the Web 2 space. So I hunkered down and jumped into learning everything I could about smart contracts, did some prototypes, and by that time a lot of the team was like man, I can’t get dragged on another project, so I decided to kind of jump in head-first and take the lead on seeing how this would play out. I figured the moment we had something tangible, all these brilliant people who I’d met and who I had the luxury to spend time with would just hop on and help give it life. At this point I was working hard along with peri to get this concept built out, and we actually went a few different iterations of the name. There was “the sustainers market”, back in the Web 2 world, and then eventually we called it “fountain”, because of how overflow from payments kind of would trickle down, and then at a certain point, I think it was peri who said, let’s just call it “milk”, and we got real funky with it and said fine, and so it was “milk” for about five minutes, and then we decided on “juice,” and that actually stuck for a while. It wasn’t until like a week before launch that we felt like man, something’s missing, and then somehow we came up with “Juicebox,” and we all felt immediately like yes, that’s the one, and so we launched with that. In terms of where JB is today: everyday it changes a little bit, and early on we had no idea how it would be used. I had a decent understanding of how I may use it, but seeing how it’s been used has been really awesome. But who the hell knows where it’s going. We learned so much along the way, and a lot of incredible badass motherfuckers started to come through and add on to it, and it’s only gotten better and better because of that. "},{"title":"peri told me about the “DAO immune system” - a term you coined - can you explain it in a bit more detail?​","type":1,"pageTitle":"Juicebox in the Words of jango","url":"blog/juicebox-in-the-words-of-jango#peri-told-me-about-the-dao-immune-system---a-term-you-coined---can-you-explain-it-in-a-bit-more-detail","content":"I remember that! That’s a fascinating concept. People are diverse, and JB has always had an amazing team, but over the span since launch there have been some ideas that have come up and vouched for adoption or funding, or were communicated in non-productive ways, and other folks started running away from these or critiquing them heavily, the same way a body would reject a pathogen. I found that so fascinating, and wondered how that worked, since it seemed to happen all on its own. The DAO is interesting, in that I see it more as a place where ideas exist and sometimes compete. I don’t think people are bad for DAOs, but ideas can certainly take root and harm the operation of a DAO. The interesting thing is early on in a DAO, ideas that come up for vote are not only important short-term, but also precedent-setting. This is a double-edged sword though, because while setting precedent can kind of immunize a DAO against future bad ideas, it can also lead a DAO to try to solve new problems with old methods. All of this is still in a nascent stage, and very fragile, so it’s interesting to see how it plays out, but I do think a DAO has some built-in mechanisms, certainly JB does, that kind of helps it move in positive, productive directions. "},{"title":"Speaking of how fragile all this is, how do you approach managing risk?​","type":1,"pageTitle":"Juicebox in the Words of jango","url":"blog/juicebox-in-the-words-of-jango#speaking-of-how-fragile-all-this-is-how-do-you-approach-managing-risk","content":"A lot of the things I learned come from taking risk, and I’m not a risk averse person. In this context specifically, maybe as a programmer of the contracts you tend to feel a bit more of that weight, and you can sense a community in anticipation, and a zealousness, and so just peeling toward balance in general I think is healthy. More generally, and this is something I constantly point out, is that we need to keep the focus– it’s tempting to go to the next thing prematurely– but we need to keep the focus and stay the course on the tasks in the here and now. "},{"title":"JB seems so inclusive and friendly, so I’m wondering: where are all the assholes?​","type":1,"pageTitle":"Juicebox in the Words of jango","url":"blog/juicebox-in-the-words-of-jango#jb-seems-so-inclusive-and-friendly-so-im-wondering-where-are-all-the-assholes","content":"I’m kind of a proponent of assholery, if it’s needed. "},{"title":"So wait, JB doesn’t need it now? Did it ever?​","type":1,"pageTitle":"Juicebox in the Words of jango","url":"blog/juicebox-in-the-words-of-jango#so-wait-jb-doesnt-need-it-now-did-it-ever","content":"At JB, we’re doing a thing and everyone has a mode of operation– when you talk about inclusivity, it’s not saying that anything goes. After all a lot of people are taking a lot of risk here, and we can’t be inclusive of things like cutting corners or taking simple approaches that don’t match the complexity of a problem. I don’t think being an asshole is good, obviously, but sometimes you do need to focus in the conversation, and there will always be some people who don’t want to do that, but I think that’s where the limit is to the inclusivity. So I don’t think there’s assholes around, but if we needed them to keep us honest, or if a situation requires people to act that way to make real progress, then maybe we’d see more of them. Fortunately at JB we’re a good team and we communicate well, the transparency is there, but if that wasn’t the case then I don’t know that assholes would be a bad thing. "},{"title":"Who is your favorite JB contributor, and why is it Zeugh?​","type":1,"pageTitle":"Juicebox in the Words of jango","url":"blog/juicebox-in-the-words-of-jango#who-is-your-favorite-jb-contributor-and-why-is-it-zeugh","content":"Zeugh is a complex, charming character. I’m a sucker for really complex, charming characters. I don’t care for yea-sayers or nay-sayers, and people like Zeugh are their own person. Love him for it. Without question peri is my favorite for many reasons, Zeugh for many reasons, Mieos for many reasons. Twodam is a fucking legend, he’s subtle and sometimes goes unnoticed but holy moly, anytime I talk to anyone about some of our contributors twodam comes up and oh my goodness, what an incredible incredible person. Not a fair question. Folks who have a strong belief or mindset or some part about them that isn’t looking to step aside (or who just want to be there by association), but rather people who want to be there because of who they are, that tends to be the ones that stick out to me. People who, given a good enough idea, argument or situation, will 100% get behind something and contribute to its success, even if they at first have a hard time with it, are the kinds of people that stick out to me. It’s not stubbornness per se; it’s productive arguments and debates and vibes and fun. Oh man… It’s impossible to pick a favorite, but that characteristic of people is definitely important to me. "},{"title":"Excellent answer. Okay, final question! What’s something people would be surprised to learn about you?​","type":1,"pageTitle":"Juicebox in the Words of jango","url":"blog/juicebox-in-the-words-of-jango#excellent-answer-okay-final-question-whats-something-people-would-be-surprised-to-learn-about-you","content":"I’m not a very fun or interesting person, really. Nothing to see here, move along. "},{"title":"Juicebox in the Words of Mieos","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-mieos","content":"","keywords":""},{"title":"Hey Mieos! What’re you up to right now and what’s on your mind?​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#hey-mieos-whatre-you-up-to-right-now-and-whats-on-your-mind","content":"Hmm… the thing that has been occupying my attention and creativity a lot lately has been this desire to convert the greater portion of juicebox projects from these crowd-funded single-purchase projects to something more like a product or service or longer-term projects that build out and make full use of JB tooling. It’s really also about trying to find a way for creators to run creative endeavors on web3 because they believe web3 is where we’re going, but may not be super comfortable with web3 yet. I feel like I’m really hunting down people who I know may be able to bridge this gap and show some excellent JB use cases. "},{"title":"I think DAOs are still new enough where the people themselves have to be the tools, almost like fleshy UIs that can help navigate doers who may not be fluent or even conversational in the web3 world. Definitely not an easy person to find.​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#i-think-daos-are-still-new-enough-where-the-people-themselves-have-to-be-the-tools-almost-like-fleshy-uis-that-can-help-navigate-doers-who-may-not-be-fluent-or-even-conversational-in-the-web3-world-definitely-not-an-easy-person-to-find","content":"No, haha, definitely not! We’re stuck in a beautiful moment where V2 is starting to open up an opportunity for non full-web3 nerds, whereas with V1 there really wasn’t much chance for non web3-nerds. V2 is starting to change that and I think that will lead to more great things. "},{"title":"How does Wagmi fit into all this?​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#how-does-wagmi-fit-into-all-this","content":"I think Wagmi has to take a position of palatable education. I think good branding does that. It points people in the right direction for the kind of info they want. I’ve always wanted Wagmi to be more educational, but when we started to do this with V1, V2 was on the horizon so we held off. After all with all the changes coming with V2 it didn’t make sense to produce a lot of content that would all just have to be redone a few months later. Now that V2 is here and coming into its own, we can really go full force into this endeavor. "},{"title":"For what it’s worth, when I started, as a total JB n00b, the Wagmi videos were really the easiest entryway to me.​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#for-what-its-worth-when-i-started-as-a-total-jb-n00b-the-wagmi-videos-were-really-the-easiest-entryway-to-me","content":"Yeah and that’s what it’s about. We want creatives, people who may be a bit unclear on web3, but who see where its going and recognize its value. And those people will bring their supporters over. Making great content to help ease that transition into web3 is a biggie to attract those people. In terms of Wagmi’s future, I’d ultimately love to see Wagmi move away from full-time JB stuff and move more toward helping projects on the platform succeed. We could give these projects a little shove in the creative department, whether by helping them with animations, designing mascots, and who knows what else. "},{"title":"I’ve felt like JB High could be a central point of info for newbies. Obviously a lot of that exists already elsewhere on the web, but do you see any value in really doing like a “web3 crash course” on JB High to truly onboard a total n00b from starting to finishing their first project creation?​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#ive-felt-like-jb-high-could-be-a-central-point-of-info-for-newbies-obviously-a-lot-of-that-exists-already-elsewhere-on-the-web-but-do-you-see-any-value-in-really-doing-like-a-web3-crash-course-on-jb-high-to-truly-onboard-a-total-n00b-from-starting-to-finishing-their-first-project-creation","content":"I don’t think it’s overkill to do that at all, we just have to be clear on our time cost, and we shouldn’t invest too much time if there are more efficient ways to do it. I think a web3 crash course could be done in 2-3 animated shorts plus maybe a page or two on JB High; it’s not a heavy lift. "},{"title":"How’d you get started with JB, and how has it changed since you’ve been there?​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#howd-you-get-started-with-jb-and-how-has-it-changed-since-youve-been-there","content":"From the very beginning, I was trying to figure out from what JB could be. Jango’s take was that JB was a payment terminal, so I was like okay, are we building Stripe for web3? But then he was talking about treasuries, and discount rates and bonding curves, and pre-minting tokens and reserve rates, and I was like man, nobody’s gonna have any idea what this is. When I finally grokked it I was like “Ohhhh, this is what this could be!” I saw some possible use cases, and was talking to some of the early guys about what it could do, but I think none of us really grasped it. It was so new and there just wasn’t really a concept you could build off, you really had to understand it for what it was, as something unique, and that took time. But before even all that happened, I was working with Sage to figure out the brand and how we can we make this whole JB thing feel cool, and actually one of the first things we messed with was claymation. "},{"title":"I saw a claymation video floating around! Is that one of those early things?​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#i-saw-a-claymation-video-floating-around-is-that-one-of-those-early-things","content":"Yeah, that’s one of the first things Wagmi ever did! It was a lot of fun. Another biggie early on, actually probably the first thing that came up as important, was starting to think was how could we help people understand what JB could do. So I figured “Oh, I could launch a project on JB and that could serve as an example for people of what to do.” So I told Sage, hey, let’s run something like an animated studio/illustration studio out of JB, really as an example of JB’s power, and that was the birth of Wagmi. And it has been an absolutely great example. I’m really glad we did that rather than stay as paid contributors in JB itself. It serves as a great example for how projects can coexist in the space and serve one another. "},{"title":"Was JB your first jump into web3?​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#was-jb-your-first-jump-into-web3","content":"Yeah, it was! I’ve just always been interested in tech projects and when I got to know jango and peri and they were talking about tech projects I just wanted to hang out and learn, and to try to help in any way I could. "},{"title":"Man, that’s such a high bar for a n00b to get into.​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#man-thats-such-a-high-bar-for-a-n00b-to-get-into","content":"Haha, yeah it was a high bar, I still remember it took me 4 months! I spent 4 months saying the words and having no idea what I was talking about— “Yeah yeah yeah, the payment terminal, and getting ETH out and bonding curve, and the redemption rate,” I had no idea what I was talking about, and then, finally one day it clicked! It was so rewarding, and it validated to me so much of what I had been trying to grasp. "},{"title":"I ran into that in a very dense philosophy text once that was like that. So hard to grasp, you wanna walk away, since you definitely don’t wanna stick around and feel stupid. That’s a tough spot to be in.​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#i-ran-into-that-in-a-very-dense-philosophy-text-once-that-was-like-that-so-hard-to-grasp-you-wanna-walk-away-since-you-definitely-dont-wanna-stick-around-and-feel-stupid-thats-a-tough-spot-to-be-in","content":"Yeah! Sticking around and feeling stupid sucks. You want to help, you want to chip in, and halfway through a sentence you realize damn, I don’t know what I’m saying, but now I’ve started talking and I gotta finish this sentence, haha. It’s like the brain needs contextual points of knowledge to learn the next thing, and some things are so far away from these basic knowledge nodes that you can’t bridge the concept. Then you’re like “Oh, it’s like Uber for Mcdonalds?” and it clicks all of a sudden. But what if you don’t have that basic script where you have to really put two or three of those nodes together to bridge over to a new concept. Sometimes you have the right teacher and they know that’s the case, and they’ll build that out for you, but otherwise you’re kind of reinventing the wheel in your mind, and for sure that can be so frustrating. "},{"title":"I’m glad it clicked for you (and for me!). Who’s your fav contributor, and why is it Stevie G?​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#im-glad-it-clicked-for-you-and-for-me-whos-your-fav-contributor-and-why-is-it-stevie-g","content":"Haha, I love this question. I would say the thing that attracts me to Stevie G is his uncanny ability to come off as hyper-authentic. There’s never a moment where I listen to him that I’m not like, “This dude is so real, he’s like, such a good human.” Regardless of whether or not you are a good human, or you think you are, many times I come off as an asshole— "},{"title":"Oh yeah, you don’t need to tell me, coming off like an asshole unintentionally is a lowkey superpower of mine…​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#oh-yeah-you-dont-need-to-tell-me-coming-off-like-an-asshole-unintentionally-is-a-lowkey-superpower-of-mine","content":"Hahaha! But Stevie G, man, I never once get that impression from him. Stevie G is an authentic G. "},{"title":"Definitely. What would people be surprised to learn about you?​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#definitely-what-would-people-be-surprised-to-learn-about-you","content":"Hmm… Let’s see… I’m an avid mountain biker. I actually used to be an avid kite boarder, but I picked an occupation that’s in direct conflict with kite boarding season. There was a point where I thought I may go pro. Hmm… other than that, as a child I was forced to do Hooked on Phonics, it’s probably not funny for anybody under the age of 35 since it didn’t exist for anybody that young, but like, when I had to do it, it was a joke, it was literally a joke that people would say to diss each other. "},{"title":"I remember that… it was a schoolyard way to call people dumb.​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#i-remember-that-it-was-a-schoolyard-way-to-call-people-dumb","content":"Right! And when they said to to me I was like, “Yeah, actually, I am dumb!” "},{"title":"Haha, to be honest that’s a pretty awesome comeback! Thank you for taking the time, Mieos!​","type":1,"pageTitle":"Juicebox in the Words of Mieos","url":"blog/juicebox-in-the-words-of-mieos#haha-to-be-honest-thats-a-pretty-awesome-comeback-thank-you-for-taking-the-time-mieos","content":"Thanks! "},{"title":"Juicebox in the Words of peri","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-peri","content":"","keywords":""},{"title":"How'd you get started with JB, and how has it changed since you've been here?​","type":1,"pageTitle":"Juicebox in the Words of peri","url":"blog/juicebox-in-the-words-of-peri#howd-you-get-started-with-jb-and-how-has-it-changed-since-youve-been-here","content":"I was kind of around building JB from day one; jango and I were working on it by ourselves for a pretty long time before we started getting some more regular teammates… I probably spent a good six months or so building the app and most of that time I was full-time dedicated to JB. I’d left my other day job early on. The first iteration of the JB app was fairly limited; it definitely had some shortcomings, so we figured let’s just get this to a good place and see if people enjoy it. After JB launched it took about a month or so before the project got much traction. After that– I think Sharkdao was the first project that gave it a lot of traction– we got some other front-end contributors to help out with the work that I was doing. "},{"title":"What kept you going early on, when you had to move mountains and put so much effort in. Did you and jango have a clear vision for what all that work was going to amount to?​","type":1,"pageTitle":"Juicebox in the Words of peri","url":"blog/juicebox-in-the-words-of-peri#what-kept-you-going-early-on-when-you-had-to-move-mountains-and-put-so-much-effort-in-did-you-and-jango-have-a-clear-vision-for-what-all-that-work-was-going-to-amount-to","content":"I think jango and I each had our own unique visions for JB– they weren’t opposed in any ways, but there were definitely certain things that were driving me and important to me, and certain things important to him. Early on– really really early on– I didn’t have a complete vision for how JB would exist in the world; it was more just an interesting experiment to build a web-3 app, and I wanted to get some experience working in web-3. JB is fairly complicated, so over the months we were constantly reshaping it, so the vision was changing as well. About 2-3 months before we launched I started to think about it and realized how valuable it would be to DAOs. While we were building it, DAO’s were only just starting to become big. I felt like, somebody could use this not just as a business or to create a fundraiser, but can create a community of people, and that’s when I felt like JB really came into its own and found itself. The beauty of jb is that it’s super extensive, and can be used for all kind of things, not just DAOs. "},{"title":"What’s the average day for you look like now that JB has kind of found its stride and that major early work has been done?​","type":1,"pageTitle":"Juicebox in the Words of peri","url":"blog/juicebox-in-the-words-of-peri#whats-the-average-day-for-you-look-like-now-that-jb-has-kind-of-found-its-stride-and-that-major-early-work-has-been-done","content":"It’s definitely changed a bit– in the early days after the launch, once JB went public, it didn’t change a lot, but we were also getting a lot of feedback from people on what was needed and how to better streamline things. Putting a lot of these complex items into a digestible way was very hard, especially when you’re so intimately familiar with these complex processes, so getting feedback from people who were seeing this for the first time was a huge help for us. Once there were more full-time contributors coming in (who we formed peel with), it changed a lot. I can’t say enough good things about those early contributors– I feel so blessed that they came so eager and willing to put themselves into the work. From day 1 I was pushing code to fix small bugs and also thinking of these big-picture things, so I had wanted for a while a team to be able to help out with some of that workload. It was really beautiful because it was a time of wondering how to get those people in here, and I wondered: is this what a recruiting process looks like, do I need to be advertising positions, interviewing people and so on? That whole process is not something I was very excited or eager about, so I was just like, “Hopefully there will be people who find the project interesting and show up to help out”– and that ended up being exactly what happened! JohnnyD, Aeolian, Torvusbug, Ooyoo were some of the major early contributors and with them we kicked into high gear. The code base got cleaned up a lot and having that diversity of opinion and diversity of experience was just a huge asset. After a month or so of that we realized we had a real team here, and started feeling like a machine. "},{"title":"With growth happening so fast, is there any way to even predict what JB might look like in a couple years?​","type":1,"pageTitle":"Juicebox in the Words of peri","url":"blog/juicebox-in-the-words-of-peri#with-growth-happening-so-fast-is-there-any-way-to-even-predict-what-jb-might-look-like-in-a-couple-years","content":"The speed of things is remarkable, and that’s an amazing attribute of web 3. JB feels like it’s going as fast as it can go, and that’s a consequence of a number of things. A big factor is that there’s always public conversations and transparency, so there’s very little time wasted on catching people up, so everyone is getting the info more or less in real-time at the same time. Most people spending time on this aren’t clocking out at 5pm, they’re working when they want to and when they feel like it, and their passion has them executing ideas very quickly, which is wild. Talking about 2 years from now, that feels like a lifetime; it’s hard to make any predictions, but I think the main thing we’ll see going forward that I can hardly even really predict– I don’t know what it’ll look like– but I think there’ll be a lot more decentralization of the project itself. With introduction of V2 there’s gonna be a lot of added flexibility, with more diverse use cases people can use JB for, and a lot of these use cases will probably end up being built around custom extensions of JB. "},{"title":"Switching gears a bit: when you meet that awkward uncle at thanksgiving we all have, and they ask you what you do, how do you explain JB and your role in it?​","type":1,"pageTitle":"Juicebox in the Words of peri","url":"blog/juicebox-in-the-words-of-peri#switching-gears-a-bit-when-you-meet-that-awkward-uncle-at-thanksgiving-we-all-have-and-they-ask-you-what-you-do-how-do-you-explain-jb-and-your-role-in-it","content":"Haha. To be honest I don’t find myself in that situation all that often, so I don’t practice very frequently, and every time I do find myself in that situation my take on it may have changed since the last time. Oftentimes, if it’s someone who isn’t familiar with web 3, I won’t even mention JB at all because there’s so many layers of abstraction to go through. But if someone’s really curious, I generally start by comparing it kickstarter, and I don’t really think that’s the best place to start, it’s just the easiest since it’s a fairly similar type of mechanism people are already familiar with. So you can kinda start there as an organization that raises money, but obviously the big differences you have to jump to is issuance of tokens, what that means, the programmability of it all, the restriction on money withdrawal and to whom. That’s when it starts getting really tricky to explain. "},{"title":"I’m always surprised by the conspicuous lack of assholes at JB– where are they all hiding?​","type":1,"pageTitle":"Juicebox in the Words of peri","url":"blog/juicebox-in-the-words-of-peri#im-always-surprised-by-the-conspicuous-lack-of-assholes-at-jb-where-are-they-all-hiding","content":"Haha. I really have never thought about that. There’s a lot of assholes in the world, and maybe there were 2-3 who have come through JB in the past, but I think of it by remembering this term jango said to me once, he used this expression– “DAO immune system”-- and it immediately clicked to me what he meant: every DAO that has a strong culture, they have an immune system, and it’s an immune system to people and decisions. And the consequence of that is if there’s ideas thrown out and talked about that aren’t fitting with the momentum of the DAO, then it tends to be squashed. But the beautiful thing about that is that the way the JB immune system seems to work is very polite and genuine. "},{"title":"Would you call that killing with kindness?​","type":1,"pageTitle":"Juicebox in the Words of peri","url":"blog/juicebox-in-the-words-of-peri#would-you-call-that-killing-with-kindness","content":"Yeah, I definitely see a lot of that, and it’s a beautiful thing. On the topic of the DAO immune system, when factions do emerge, the beautiful thing about it is that it still remains a very democratic process, and evaluations of decisions aren't based on what’s “right” and “wrong”, it’s rather the democratic process of voting with JBX. Also fascinating: they’ve always been fairly close votes when these issues have arisen. Ideally the way the system is set up and the governance processes we have, the DAO will ultimately decide what’s best one way or another, and that’s entirely subjective, since there’s no such thing as an objectively good or bad outcome. "},{"title":"It’s interesting connecting DAO’s to democracy– in democracy, we have structures to influence voting, like campaigning, super PACS, etc. Arguably the world of DAOs is too young for this– but do you see this is an eventuality of communities and factions within DAOs trying to gain control to guide DAO decision-making?​","type":1,"pageTitle":"Juicebox in the Words of peri","url":"blog/juicebox-in-the-words-of-peri#its-interesting-connecting-daos-to-democracy-in-democracy-we-have-structures-to-influence-voting-like-campaigning-super-pacs-etc-arguably-the-world-of-daos-is-too-young-for-this-but-do-you-see-this-is-an-eventuality-of-communities-and-factions-within-daos-trying-to-gain-control-to-guide-dao-decision-making","content":"I think we see that already. That’s a necessary part of any voting process, a “campaign”-- it doesn’t necessarily need to look like what we think of campaigns in ordinary politics (posters, pamphlets, etc) but it already does happen, for instance when somebody creates a proposal, there’s an implicit requisite for them to defend that proposal and explain why. The temperature check is designed for discourse, and those types of conversations are themselves a form of campaigning. It’s the responsibility of people much more involved in JB who have a more nuanced understanding of the mechanisms to distill their opinions on responsible voting, or to fairly summarize the pros and cons of the proposal because less-active JB members aren’t as familiar with the proposal. "},{"title":"Excellent point. Switching gears: who is your favorite JB contributor, and why is it filipv?​","type":1,"pageTitle":"Juicebox in the Words of peri","url":"blog/juicebox-in-the-words-of-peri#excellent-point-switching-gears-who-is-your-favorite-jb-contributor-and-why-is-it-filipv","content":"Haha. Filip’s great, I have a lot of love for filip. When I think of filip, the things that come to mind are that he’s just an excellent talker, and being a good talker is not something that feels like a resume item, but it really is, it’s a really truly valuable skill that’s underrated. Having somebody like filip facilitate conversations like he does is super valuable. Not only is he so good at explaining things, he’s also very open-minded, knowledgeable of what he knows and quick not to pretend he’s knowledgeable about what he doesn’t know. He’s very active, and good about proposing things we may not be thinking about. The dude just seems very level-headed; I love talking to him. If I had to pick a favorite that wasn’t filipv– I mean you can’t pick just one obviously– but the other person I really respect is aeolian, who has come in and really taken over a lot from me to be the lead front-end person on peel. And I just have so much mad respect for aeolian– not only is he a great developer, but he knows his stuff and is great at writing good code, and he’s great at having conversations about these things and being open to learn, open minded, open to teach. All the times I spent working with him– I really credit a lot of the joy I get contributing to peel, to him and the rest of the peel team, because he’s made work so enjoyable. "},{"title":"That’s awesome. Okay, final question: do you have any huge project in the future you’re particularly excited about?​","type":1,"pageTitle":"Juicebox in the Words of peri","url":"blog/juicebox-in-the-words-of-peri#thats-awesome-okay-final-question-do-you-have-any-huge-project-in-the-future-youre-particularly-excited-about","content":"That’s hard to say. At the moment, as of about a week ago, I’m spending much less time at JB. I’ve contributed to JB for so long, and having a solid group of contributors like the peel team to help take on my workload has eased me up to pursue new projects. I’ve wanted to do some different type of work that is’t necessarily front-end code, like some solidity work, and art-projects, and so on. So I do have a lot more time to spend on other projects now, and there’s another project that I’m working on now– that hasn’t really been announced yet– but I’m looking forward to announcing it soon. (Note: this interview was transcribed from a discord call.) "},{"title":"Juicebox in the Words of Sage","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-sage","content":"","keywords":""},{"title":"Hi Sage! What’re you up to right now?​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#hi-sage-whatre-you-up-to-right-now","content":"I just ate a frozen burrito. My boyfriend’s sister owned a little sundry shop which just went outta business so they had groceries for free! Yesterday we went and got like 700 bucks worth of bougie groceries. I have a big thing for frozen burritos. "},{"title":"Haha. I’m reminded of the story of the plumber in France. People are standing at the cathedral admiring the art and architecture, and the plumber just wants to go into the catacombs to see how they laid and routed their pipes. You can have anything, and yet the frozen burrito seems to be the winner!​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#haha-im-reminded-of-the-story-of-the-plumber-in-france-people-are-standing-at-the-cathedral-admiring-the-art-and-architecture-and-the-plumber-just-wants-to-go-into-the-catacombs-to-see-how-they-laid-and-routed-their-pipes-you-can-have-anything-and-yet-the-frozen-burrito-seems-to-be-the-winner","content":"In addition to everything else! I also like frozen chicken nuggets, which I’m actually eating right now. Usually I eat pretty healthy but… when you have the option to eat gourmet chicken nuggets— "},{"title":"Walk me through “gourmet” chicken nuggets!​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#walk-me-through-gourmet-chicken-nuggets","content":"Well they’re “organic” so yeah, whatever that means. I would never buy frozen chicken nuggets, but they were there so I figured I may as well grab them. The bougiest thing I got was, hmm… I got a free thing of 15 dollar fig pomegranate jam. "},{"title":"You know, I was once gifted a 40 dollar peanut butter jar.​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#you-know-i-was-once-gifted-a-40-dollar-peanut-butter-jar","content":"Holy shit. "},{"title":"Actually by a JB contributor— do you want to guess who?​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#actually-by-a-jb-contributor-do-you-want-to-guess-who","content":"Hmm, filipv? "},{"title":"Filipv, yes!​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#filipv-yes","content":"He buys 40 dollar jars of peanut butter? "},{"title":"He claims he got it as a gift… I feel kinda guilty opening it truth be told…​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#he-claims-he-got-it-as-a-gift-i-feel-kinda-guilty-opening-it-truth-be-told","content":"In what world could a bottle of PB be worth 40 dollars? "},{"title":"Haha. I looked up the brand, it was a nice hipstery kind of homepage, lots of flowery language, but when I delved in I saw the process was exactly the same. I mean it’s just mashing peanuts.​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#haha-i-looked-up-the-brand-it-was-a-nice-hipstery-kind-of-homepage-lots-of-flowery-language-but-when-i-delved-in-i-saw-the-process-was-exactly-the-same-i-mean-its-just-mashing-peanuts","content":"Maybe they mash them with their feet… "},{"title":"Haha, that would be hilarious. How’s it going work-wise? I know you’re working on a lot of designs at the moment.​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#haha-that-would-be-hilarious-hows-it-going-work-wise-i-know-youre-working-on-a-lot-of-designs-at-the-moment","content":"It’s been really fun, right now working on the Peri’s Pringlecream ice cream Banny, and doing more fun little drawings for the Morgenstern collaboration. "},{"title":"That’s awesome. How’d you get started with JB, anyway?​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#thats-awesome-howd-you-get-started-with-jb-anyway","content":"I started back when jango and peri were planning on calling it fountain. It was a similar analogy to JB— a fountain creates overflow. So I was doing a lot of drawings of fountains at first, not full time but juat when I had a chance. Then they decided to change the name to “JuiceBox” and then it started to get really fun. We were spit balling about how web3 is kind of outlawish and definitely not mainstream, so we started thinking about juice, fruit, and little punk fruit, and that turned into Banny being a weird little coding BDSM banana. "},{"title":"I always wondered about the chokers…​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#i-always-wondered-about-the-chokers","content":"Yeah! I guess he’s also more punk in the 90s punk sense with studded everything. "},{"title":"Fascinating. If you met Banny IRL, would you guys get along?​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#fascinating-if-you-met-banny-irl-would-you-guys-get-along","content":"I think most people would get along with him, except for the squares in the world. He seems pretty chill. "},{"title":"So the punk thing is not confrontational?​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#so-the-punk-thing-is-not-confrontational","content":"No he’s just living his authentic life. "},{"title":"What’s a day in the life of Banny, in an authentic life?​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#whats-a-day-in-the-life-of-banny-in-an-authentic-life","content":"He probably parties, gets a lot of work done, does some crazy shit— just literally anything he wants to do. He dresses weird. He may not even be a he, he could be a she, an anything, it’s really just a banana. "},{"title":"He sounds like a fun banana to hang with. What’s something people may be surprised to learn about you?​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#he-sounds-like-a-fun-banana-to-hang-with-whats-something-people-may-be-surprised-to-learn-about-you","content":"Hmm. I was a ballet dancer for 18 years, I did a lot of ballet and pointe work— that was fun. I’m really bad at like listening/remembering dance moves and routines/sequences, so I wasn’t ever super competitive but I enjoyed it a lot. I also do like to listen to music really loud and dance in my house. "},{"title":"What kind of music are you into?​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#what-kind-of-music-are-you-into","content":"I basically solely listen to country music. "},{"title":"Favorite artist?​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#favorite-artist","content":"So many! If I had to pick a top three, hmm… Waylon Jennings, Garth Brook, Sturgill Simpson. "},{"title":"Awesome. What’s something you’re looking forward to?​","type":1,"pageTitle":"Juicebox in the Words of Sage","url":"blog/juicebox-in-the-words-of-sage#awesome-whats-something-youre-looking-forward-to","content":"Oh man, well one huge thing is that we’re working on the Bannyverse and that everyone at Wagmi is killing it! Burtula is making super sick backgrounds and animations. You’re writing amazing backstories for all the bannies! Tank and Natasha are building and making the site awesome! And Mieos is doing a killer job directing everything! I can’t wait to launch the site and for everyone to meet and make all the hilarious bannies we’ve got in store! Another thing on a IRL level, maybe when gas prices go down, is that my boyfriend and I are planning to take our van out to do a tour and go see some friends in Utah and Idaho and Oregon, and do a dirtbiking trip. It’ll probably go for like a month, but we have some work to do on the van first. The best thing about working for JB is that I can do these things because I work remotely. "},{"title":"Juicebox in the Words of tankbottoms","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-tankbottoms","content":"","keywords":""},{"title":"First, the name– tankbottoms– would you mind walking me through that?​","type":1,"pageTitle":"Juicebox in the Words of tankbottoms","url":"blog/juicebox-in-the-words-of-tankbottoms#first-the-name-tankbottoms-would-you-mind-walking-me-through-that","content":"I wanted to draw attention that there are other articles of clothing that may not get the attention that they deserve, such as tankbottoms, and so that’s my contribution, fashion education. "},{"title":"How'd you get started with JB, and what attracted you to the platform?​","type":1,"pageTitle":"Juicebox in the Words of tankbottoms","url":"blog/juicebox-in-the-words-of-tankbottoms#howd-you-get-started-with-jb-and-what-attracted-you-to-the-platform","content":"I’ve been around six weeks or so. I’ve been in software development for a minute, and I met some anons who wanted to do this public good DAO, which is now called MovementDAO. It’s part seeding start-ups, part non-profit, part social movements. In researching platforms to work with I found two which I liked the most, OpenLaw’s TributeDAO Framework and Juicebox. TributeDAO we updated all the tooling and added DeFi, and at the end felt it was not as accessible as we would have liked. We also took Juicebox forked it and launched it on Polygon (where Matic is used), which was more what we were looking for. However, we are not the kind of cats to fork and do stuff, its open source and its fair game, but we contribute, add value and divide up the work, so it seemed right to contribute to helping through v2. One place it was mentioned where we could help was figure out the BannyVerse situation. I pinged Wagmi’s Mieos and started collaborating with constructing Banny to be mintable, worked on the TokenUriResolver how the veBannys were going to be selected, and planning on the BannyVerse would unfold NFT-wise. "},{"title":"That’s fascinating, you seem to be well-versed on the technical side of this stuff. In your opinion, how do DAO’s protect themselves from bad actors/sabotage?​","type":1,"pageTitle":"Juicebox in the Words of tankbottoms","url":"blog/juicebox-in-the-words-of-tankbottoms#thats-fascinating-you-seem-to-be-well-versed-on-the-technical-side-of-this-stuff-in-your-opinion-how-do-daos-protect-themselves-from-bad-actorssabotage","content":"A few DAOs have added a veto contract or function in existing contracts that can veto any pending proposals. This can be provided to a law firm, also called service provider, or retained by the founders until they revoke the right on chain at a later date. In other words, it’s designed to ensure nothing crazy happens. "},{"title":"Interesting. It seems like that mechanism kind of runs against the philosophy of what a DAO is, doesn’t it? How do you strike a balance between control and decentralization?​","type":1,"pageTitle":"Juicebox in the Words of tankbottoms","url":"blog/juicebox-in-the-words-of-tankbottoms#interesting-it-seems-like-that-mechanism-kind-of-runs-against-the-philosophy-of-what-a-dao-is-doesnt-it-how-do-you-strike-a-balance-between-control-and-decentralization","content":"That’s the dichotomy– you can make a decentralized protocol that’s idealistic, and it functions, but then there’s the reality that people are involved, and if it has ETH, there needs to be emergency protocols in place – to guard against whether someone’s gaming, a flaw in the smart contract is discovered, or some bad actors reveal themselves. This whole space is a one large expensive experiment and so you really don’t know what may happen, so its safe to be prudent. "},{"title":"I always think of DAO/Crypto time similar to dog-years and aging: like one month of time in a DAO has gotta be at least 6 months or a year at a regular IRL company. You and I of course both help as contributors to Wagmi productions. How would you describe your role at JB and Wagmi after this first 6 weeks or so?​","type":1,"pageTitle":"Juicebox in the Words of tankbottoms","url":"blog/juicebox-in-the-words-of-tankbottoms#i-always-think-of-daocrypto-time-similar-to-dog-years-and-aging-like-one-month-of-time-in-a-dao-has-gotta-be-at-least-6-months-or-a-year-at-a-regular-irl-company-you-and-i-of-course-both-help-as-contributors-to-wagmi-productions-how-would-you-describe-your-role-at-jb-and-wagmi-after-this-first-6-weeks-or-so","content":"I like to think if there is code which expands the reach of the Banny, I am enabling this. I wrote the Juicebox TokenURI Resolver for the veBanny and make sure the composite Banny and appropriate metadata are deployed on IPFS. Additionally and more importantly, when Juicebox token holders go to stake their Banny and enter the Bannyverse, I aim to enable the experience to mint a unique Banny with anything from Hattori Hanzo to AK-47. A banana has got to defend himself. "},{"title":"I always ask about where all the assholes are, it seems like so many talented people working together should bring a clash of egos. Where are the assholes?​","type":1,"pageTitle":"Juicebox in the Words of tankbottoms","url":"blog/juicebox-in-the-words-of-tankbottoms#i-always-ask-about-where-all-the-assholes-are-it-seems-like-so-many-talented-people-working-together-should-bring-a-clash-of-egos-where-are-the-assholes","content":"I think it starts from the OG contributors, and fortunately the OG contributors have set a tone to be inviting and respectful as well as reward contributors. I also think people who stick around are very talented, the Notion docs do a pretty good job about making it clear that you have to contribute before seeking a one-time or reoccurring payout. All the contributors are pretty cool about their talent. And that kind of sets the atmosphere. "},{"title":"Between you and me and the rest of the internet, who’s your favorite contributor, and why is it Mieos?​","type":1,"pageTitle":"Juicebox in the Words of tankbottoms","url":"blog/juicebox-in-the-words-of-tankbottoms#between-you-and-me-and-the-rest-of-the-internet-whos-your-favorite-contributor-and-why-is-it-mieos","content":"I think WAGMI makes it clear you can add a lot of value even if it’s not code. WAGMI’s pixel ninjas, 60 Minutes style interviews, and the enabling of the BannyVerse reinforces that throughout whatever the problem, we are all here to have fun; and reminds us all to no take yourself too seriously, and that says a lot. Mieos is very humble, even though he’s been around in the space for a long time and basically the OG JB whale. He’s pretty rad. "},{"title":"What’s a project (within or outside of JB) that you’re really looking forward to in the future?​","type":1,"pageTitle":"Juicebox in the Words of tankbottoms","url":"blog/juicebox-in-the-words-of-tankbottoms#whats-a-project-within-or-outside-of-jb-that-youre-really-looking-forward-to-in-the-future","content":"MovementDAO, and the future of Juicebox v2 are both things that I am working on and that I am looking forward to enabling. We are all learning every day how things work and willing to change it up, but I want to understand some fundamental parts of what makes Juicebox successful not for just raising funds but to getting people to operate treasuries transparently. We (both JB v2 and MovementDAO) want to enable this with endowments, NFT businesses, start-ups, liquidity pools into a well orchestrated decentralized protocol. "},{"title":"What’s something people would be surprised to learn about you?​","type":1,"pageTitle":"Juicebox in the Words of tankbottoms","url":"blog/juicebox-in-the-words-of-tankbottoms#whats-something-people-would-be-surprised-to-learn-about-you","content":"I don’t know, hmm… I lived in a monastery! "},{"title":"Juicebox in the Words of twodam","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-twodam","content":"","keywords":""},{"title":"How did you get started with JB, and how has it changed since you’ve been here?​","type":1,"pageTitle":"Juicebox in the Words of twodam","url":"blog/juicebox-in-the-words-of-twodam#how-did-you-get-started-with-jb-and-how-has-it-changed-since-youve-been-here","content":"When researching ConstitutionDAO, I discovered the platform Juicebox, and joined Discord. During that time I read through the documentation and code base, because I saw a lot of people asking questions, so I spontaneously went to help answer them. It so happened that because of the popularity of ConstitutionDAO, many people joined Discord, and that number of people reached several thousand. Zeugh recognized and recommended me to be the Discord mod. After that I also made several data panels according to the needs, to better show the trends in different aspects of JB. Since I’ve joined, JB started to have multi-language support, the governance process got better, the number of contributors increased to a dozen, a lot of things were moving forward, and everyone was smart about it. "},{"title":"That's awesome, it sounds like you're a big part of that progress. What would people be surprised to learn about you? Any interesting hobbies?​","type":1,"pageTitle":"Juicebox in the Words of twodam","url":"blog/juicebox-in-the-words-of-twodam#thats-awesome-it-sounds-like-youre-a-big-part-of-that-progress-what-would-people-be-surprised-to-learn-about-you-any-interesting-hobbies","content":"Yeah, just in time and it's great to work with everyone. I actually did contract development for a while before and was a full time programmer. I used to study projects from the whole and in detail— for example, studying a protocol from the front-end all the way to the contract implementation, from the documentation to the surrounding tools and from the community to the team atmosphere. "},{"title":"That's super cool. When you're not at a computer, what do you like to do to pass the time?​","type":1,"pageTitle":"Juicebox in the Words of twodam","url":"blog/juicebox-in-the-words-of-twodam#thats-super-cool-when-youre-not-at-a-computer-what-do-you-like-to-do-to-pass-the-time","content":"Read books, hang out with friends, play billiards. I also like to read science fiction and literary fiction. "},{"title":"That's awesome. A lot of the Web 3 space can feel like a sci fi, to be honest.​","type":1,"pageTitle":"Juicebox in the Words of twodam","url":"blog/juicebox-in-the-words-of-twodam#thats-awesome-a-lot-of-the-web-3-space-can-feel-like-a-sci-fi-to-be-honest","content":"In terms of exploring a lot of new directions? "},{"title":"Yeah, new directions and also I think people don't really know what this new space and technology will bring. How do you think Web 3 will change the world?​","type":1,"pageTitle":"Juicebox in the Words of twodam","url":"blog/juicebox-in-the-words-of-twodam#yeah-new-directions-and-also-i-think-people-dont-really-know-what-this-new-space-and-technology-will-bring-how-do-you-think-web-3-will-change-the-world","content":"It will make UGC owned by the creator, bring innovative formats to human collaboration and keep many things decentralized on chain, which brings transparency, retains history and much more... And maybe also somehow important, there are not really regulations yet, so innovative ideas without too many limitations can thrive. "},{"title":"“Innovative ideas without too many limitations\" really strikes me as a biggie. It seems like people are willing to go out and take risks, and make themselves vulnerable. It says a lot for an environment to bring that out of people. How would you describe your role at JB?​","type":1,"pageTitle":"Juicebox in the Words of twodam","url":"blog/juicebox-in-the-words-of-twodam#innovative-ideas-without-too-many-limitations-really-strikes-me-as-a-biggie-it-seems-like-people-are-willing-to-go-out-and-take-risks-and-make-themselves-vulnerable-it-says-a-lot-for-an-environment-to-bring-that-out-of-people-how-would-you-describe-your-role-at-jb","content":"I work as the Discord moderator, multisig owner and specialize in Data Viz. I also do community support and alignment, and post educational materials for mainly the Chinese community. I’m also actively looking for different things that I could help; recently I’m writing a Juicebox weekly summary with 0xSTVG. Also our website and blog supporting multiple languages is something filip and zotico work on very hard, and I work on the Chinese translations of that. "},{"title":"That's awesome, and things like the weekly summaries are really important. I always wonder about the Chinese community and how the information travels between it and the rest of the community. You kind of bridge that gap from what I understand, is that accurate?​","type":1,"pageTitle":"Juicebox in the Words of twodam","url":"blog/juicebox-in-the-words-of-twodam#thats-awesome-and-things-like-the-weekly-summaries-are-really-important-i-always-wonder-about-the-chinese-community-and-how-the-information-travels-between-it-and-the-rest-of-the-community-you-kind-of-bridge-that-gap-from-what-i-understand-is-that-accurate","content":"indeed, with the help of zhape who helped a lot in communication and vibe summaries in town-hall. "},{"title":"That's amazing. Is it a difficult role to have? I know sometimes there are differences of opinion between the communities. How do you manage to keep the peace?​","type":1,"pageTitle":"Juicebox in the Words of twodam","url":"blog/juicebox-in-the-words-of-twodam#thats-amazing-is-it-a-difficult-role-to-have-i-know-sometimes-there-are-differences-of-opinion-between-the-communities-how-do-you-manage-to-keep-the-peace","content":"First thing I would try is to understand different opinions, and then I would help to bridge them to discuss together. Sometimes it’s because people have misunderstandings, I will show them where to check and explain to them the reasoning behind. Sometimes it’s because the language gap, then I will help to translate and/or communicate, for example: find the real problem, let them have discussion and correct the misinterpretations if there were any. Yeah, this role is not easy I would say, you can’t make everyone happy... have to balance between a lot of things. "},{"title":"It sounds tough, but it also sounds like you are taking a really level-headed and fair approach. Okay final question-- what is the favorite part of your day?​","type":1,"pageTitle":"Juicebox in the Words of twodam","url":"blog/juicebox-in-the-words-of-twodam#it-sounds-tough-but-it-also-sounds-like-you-are-taking-a-really-level-headed-and-fair-approach-okay-final-question---what-is-the-favorite-part-of-your-day","content":"getting inspiration when solving problems and getting recognition from others. make me feels good and powerful. "},{"title":"Juicebox in the Words of Zeugh","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-zeugh","content":"","keywords":""},{"title":"How'd you get started with JB, and how has it changed since you've been here?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#howd-you-get-started-with-jb-and-how-has-it-changed-since-youve-been-here","content":"I started at JB around Aug/June 2021. DAOs amazed me and i had my eyes on crypto for a while… but when I found out DAOs existed I was very excited to work with them. I joined a discord server and got involved with Tiles DAO, and eventually just explored more. I wasn’t in JB way at the beginning, but I did join in the first week after release. When the question came up that a community manager was needed, I put my name out there. I had never been a comm manager per se, but had been doing comm management for other products I was helping release and so I figured I’d take it on, got voted in, and hit the ground running. I started "},{"title":"So you’re an OG.​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#so-youre-an-og","content":"I joined in week 1 of JB, back at FC1. Although regarding crypto as a whole, I’m pretty much a newbie. JB was the first project I really got involved in and put my hands on. "},{"title":"Wow, that’s nuts— you’ve seen the evolution of JB from start to right now. Would you say it’s unrecognizable?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#wow-thats-nuts-youve-seen-the-evolution-of-jb-from-start-to-right-now-would-you-say-its-unrecognizable","content":"From the beginning? I wouldn’t say unrecognizable because I think some of the core values of transparency, building out in the open, and great vibes have been around since day one. The core values have not changed, and that’s beautiful. I think of it like a sapling and tree, just as they are different, they are also the same. "},{"title":"How would you describe your role at JB?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#how-would-you-describe-your-role-at-jb","content":"A confusing one, firstly, but also a very interesting one. Rarely are two days the same. There is a lot of time spent online in chats and severs, whether the Chinese chats to try to understand community issues, or in other servers to learn new tools they’re using, practices they have, and how they engage/reward/manage a sustainable growth. Lately we’ve pushed hard on trying to automate governance with guys like filipv, Phytann, jigglyjamz, lazervike and others, and Canu has been heavily involved in this as well. "},{"title":"What has it been like working with the Chinese community, and their role at JB?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#what-has-it-been-like-working-with-the-chinese-community-and-their-role-at-jb","content":"It’s one of the better things that happened to JB ever, but at the same time definitely one of the biggest challenges. Bringing our Chinese members together in a governance process where we all get the power to decide what we do is a complex thing, but it’s exactly what makes us so critical and diverse in what we build. We have to do good stuff– not sensibly good to my taste or American or European tastes, or to Chinese tastes, but it has to be good stuff across the board. That’s very challenging to pull off, but at the same time we’re all a part of the community. When the community first came, I remember I would jump in there with google translate to try to make sense of the chats going on in discord. Man, it was so suddenly so many new members, and we had to try to reach out and make those connections. It was an exiting and also exhausting time, especially since google translate can only do so much. I do have to say one of the members who has been a killer and God in moderating the Chinese community, getting them informed and engaged, is twodam. That guy is a beast and I appreciate him so much. "},{"title":"The idea of you sitting in Discord with google translate and trying to understand Chinese is absolutely hilarious to me.​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#the-idea-of-you-sitting-in-discord-with-google-translate-and-trying-to-understand-chinese-is-absolutely-hilarious-to-me","content":"Let me tell you— now we have the translate bot. It automatically translates. But that day when we got that huge influx of members, it was 3am and my phone starting beeping, beeping, beeping, and I was like ok, silent mode, I’m not working tonight, this is my one night off. But it didn’t stop! So I got back to my comp and there were more than 1k new members, all of them Mandarin speakers, and all were over every channel– and up to that day we didn’t have a single Mandarin channel, so I spent the whole night with google translate writing FAQs, basic guides on how to solve the most common questions, translated hundreds of Q’s and ranked them with what were the most relevant answers, and I think it was nicholas and someone else who was in the twitter spaces that joined and were able to pitch in and help. Shout out to those guys and everyone who helped early on with that, it was such a huge task and everyone stepped up. Eventually we even found some university students from the US that we knew who were Chinese and we asked them to translate asap, and that helped a lot too. Now we have really amazing translator teams, the of course the amazing twodam who kills it every day, and so we’ve found a good stride. Twodam is amazing, I can’t say enough good things. He ended up in this position of managing the greatest share of governance (by population) and is doing it incredibly well. I’m about convinced that twdam is a team– not a guy, a whole team– because the guy does contracts, community, translates, I mean he’s absolutely incredible. "},{"title":"Where are all the assholes at JB?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#where-are-all-the-assholes-at-jb","content":"That’s a very good question, actually. The main thing on that that fascinates me is that I’ve spent countless hours crunching analytics data on our conversations, running our bots, and so far I haven’t found them either. Idk why, but they are just not around I guess. The funny thing is we’re in the crypto space— people being obnoxious is like breakfast, but somehow at JB we don’t attract these kinds of people. "},{"title":"What’s something somebody would be surprised to learn about you?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#whats-something-somebody-would-be-surprised-to-learn-about-you","content":"I was a comp sci undergrad for 3 years, that’s when I first heard about crypto, and even so it took me 5 years to ever engage in my first transaction (which was in bitcoin!) to actually get into crypto because I was completely against burning the amazon. I was a very critical person of crypto for a good while. I was misinformed. I get addicted to hobbies; 2 years ago I was living in a small house in the middle of the woods. I spent about one year living there, talking to my cats or the monkeys who would come to try to steal my food. I was developing digital products and tending to the gardens since I love gardening. I loved the nature, the no-plastic environment, just me and plants, no eating meat. That passed now, I’m back to the animal eating part of life and living around big buildings and concrete and using plastic bags, but that was definitely a life-changing part of my last few years. "},{"title":"So what changed? The amazon can just burn to the ground?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#so-what-changed-the-amazon-can-just-burn-to-the-ground","content":"I stopped listening to the news and started reading some articles. After you read the numbers/data you understand that that’s not what’s happening. I was living in the middle of nature trying to find out how possible it was for someone living in society to have the smallest impact in nature– that was the goal of going there– to see how simple/non-violent towards nature I could live without leaving behind civilization and a modern world. I started reading everything I could in every area, so I learned a huge amount and cleared up a lot of misconceptions. "},{"title":"Fascinating. Who’s your fav contributor, and why is it Zom_Bae?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#fascinating-whos-your-fav-contributor-and-why-is-it-zom_bae","content":"Haha. I think this gets me into a tight spot here. Although Zom_Bae is terrific, I don’t think I can give her the prize without sharing it with filipv and twodam. I will not even include jango in this one just because that is obvious. I can’t choose man, I have the blessing of a very amazing team to work with. If I had to pick, I would share my favorite contributor in four people– Filip, Jango, Twodam, and Zom_Bae. If I had to pick one, I’d go with Zom_Bae. She’s amazing. And the red rocket banny pfp! Zom_Bae does wonders in lots of micro areas around JB community - I would not trust anyone more than her nowadays to be the one who receives and onboards both partners and community members, contributor-wannabes, and everyone in between who needs guidance to navigate our complex environment. jango has always been a steward for good culture, has always been bringing some perspectives of open criticism/honest debate since the beginning. Filip is a monster– a complete gigabrain going from governance to some automation here and there and finding good minds to help every single area he touches– there’s not an issue I don’t se him going around. Twodam I’ve talked about more than anyone in this inteveriew– it’s well deserved. Bridging two different communities while also building data queries to better observe community trends, and making it look effortless, it’s just amazing… But then there’s Mieos and Sage with WAGMI studios and all the vibes– Sage is definitely underrated! A huge shout-out to her and the vibes that we get from Banny and that we get from all the juicy fruits that she brings to life with her art. Banny’s something else. Nicholas, filipv, unicorn and 0xSTVG are fucking rocking it, doing amazing at governance issues, really taking the helm on things. "},{"title":"And how about that awesome guy who writes the Banny histories, huh?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#and-how-about-that-awesome-guy-who-writes-the-banny-histories-huh","content":"But he’s just in the house, I mean he’s around here and there... I’ll mention him maybe in the next one. Haha. "},{"title":"Okay, no hard feelings. Besides feeding wild monkeys do you have any other interesting hobbies?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#okay-no-hard-feelings-besides-feeding-wild-monkeys-do-you-have-any-other-interesting-hobbies","content":"I roller blade; I’m not especially good in most tricks, but I can do some tricks, some downhill stuff, but by no means an expert in any of those. "},{"title":"This is starting to go like a job interview, so I’m just gonna go in hard. What’s your greatest weakness?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#this-is-starting-to-go-like-a-job-interview-so-im-just-gonna-go-in-hard-whats-your-greatest-weakness","content":"My total lack of concentration. I am the apex of ADHD in a human being. That’s why I tend to work in the night because everyone else is sleeping and that’s less things to get distracted with. I’m kind of a workaholic; I engage a good part of my hobbies like they’re work. I played (semi-professionaly) League of Legends for a while. Very low-tier stuff though. I love gardening. I used to have an ant farm; I would catch ant queens in mating season and I started my own ant farm. I raised some ants. My hobby is changing hobbies– I have 3-month sprints where I have hyper-focus in something, study a lot and research a lot, get super nerdy, and then I move on to the next thing. I’ve been through organic chemistry– making my own hygiene products. Star wars– reading all I could in the expanded universe. Wicca magic. Cocktails. Making events (very close to community management)! And more to come = ) "},{"title":"That’s awesome. What’s the favorite thing you’re looking forward to?​","type":1,"pageTitle":"Juicebox in the Words of Zeugh","url":"blog/juicebox-in-the-words-of-zeugh#thats-awesome-whats-the-favorite-thing-youre-looking-forward-to","content":"I’ll have to split the answer in two. The first - watching how crypto changes the world. I’m gonna play a part and I want to play the best part I can. I used to say in my twitter, “I am here to make sure the next big social network is not owned by a corporation, but is co-owned”. I want to see the power of open data, public ledgers, collective ownership over the digital assets that currently rule over people’s days most of the time, and so much more. I want to watch as that unfolds and try to play a part, and I think it will happen in a massive way. As for myself, I’m really really keen to creating those bridges between people building stuff and people that need stuff built. I’ll be going nomad for a while and traveling to try to find a way to get a local communities to organize and find solutions through the tech they’re creating. Local communities are powerful and we’re finally at a point where digital communities are also hitting that kind of strength. If we can merge local and digital communities we can really change things. When the people making products, the politicians making promises, etc., are also the people who are living in a community, they can’t just say they’ll do things and not do them. Suddenly there is accountability, and things get better. I want to build a solar-punk future. It sounds crazy, but I used to say, “I’m not crazy, I’m just hopeful.” "},{"title":"Juicebox in the Words of Zom_Bae","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-zom-bae","content":"","keywords":""},{"title":"How'd you get started with JB, and how has it changed since you've been here?​","type":1,"pageTitle":"Juicebox in the Words of Zom_Bae","url":"blog/juicebox-in-the-words-of-zom-bae#howd-you-get-started-with-jb-and-how-has-it-changed-since-youve-been-here","content":"Oh wow...great question! I initially started quietly lurking in JB honestly because I know and admire the team who created it. I have zero technical background so as you can probably imagine...I had no clue what any of them were talking about. I can't remember exactly when I joined, but probably around October '21. The discord was still pretty small, I think we there were max 5-6 people on town hall calls so it was very close knit but very welcoming to normies like myself (which to be honest, it's still a pretty tight group of contributors who are also still very welcoming imo even though the membership has grown quite a lot)! I started slowly but surely participating, asking questions (even &quot;dumb&quot; ones), then ultimately took on a pm role to help keep people moving in a forward direction and tasks from slipping through cracks. Since I joined, JB has definitely matured. Processes have been dialed in, incredible work teams have come together, grown and transitioned into their own DOAs (amazing!), and the synergy in how, so many people, from all over the world is nothing less than awe inspiring! "},{"title":"That is some awesome background, really interesting stuff. It sounds like you have a pretty wide perspective, having been here so long compared to many. So for your role here, how would you call yourself? It sounds like you're kind of a fixer, somebody who comes and makes things run smoothly, patches up cracks that arise, etc.​","type":1,"pageTitle":"Juicebox in the Words of Zom_Bae","url":"blog/juicebox-in-the-words-of-zom-bae#that-is-some-awesome-background-really-interesting-stuff-it-sounds-like-you-have-a-pretty-wide-perspective-having-been-here-so-long-compared-to-many-so-for-your-role-here-how-would-you-call-yourself-it-sounds-like-youre-kind-of-a-fixer-somebody-who-comes-and-makes-things-run-smoothly-patches-up-cracks-that-arise-etc","content":"So, I like that observation- but certainly not a fixer technically speaking-I guess more along the lines if something isn't getting done, I give soft nudges for reminders. I also like to think I'm a connector. If new folks come in, looking for something in particular, whether an answer to a protocol question or how to get started with picking up tasks, I do a decent job pointing them in the right direction, then following up when necessary. I'm like one of those old phone operators...just connecting dots! "},{"title":"Between you and me and the rest of the internet, who is your favorite contributor, and why is it jango?​","type":1,"pageTitle":"Juicebox in the Words of Zom_Bae","url":"blog/juicebox-in-the-words-of-zom-bae#between-you-and-me-and-the-rest-of-the-internet-who-is-your-favorite-contributor-and-why-is-it-jango","content":"favorite contributor...hard question. I'm going with the pc answer here: they're all freaking rad humans! There's no way I can pick just one. Nice try though (although pay close attention to Dr. Gorilla- he's got some jokes)! "},{"title":"That's a fair and diplomatic response, I expected nothing less. I'll notate that Dr. Gorilla is your favorite.​","type":1,"pageTitle":"Juicebox in the Words of Zom_Bae","url":"blog/juicebox-in-the-words-of-zom-bae#thats-a-fair-and-diplomatic-response-i-expected-nothing-less-ill-notate-that-dr-gorilla-is-your-favorite","content":"lol he's one of my favs. "},{"title":"Are there any projects on JB that you've been really stoked about, or what would you say is a moment of great excitement you've experienced at JB?​","type":1,"pageTitle":"Juicebox in the Words of Zom_Bae","url":"blog/juicebox-in-the-words-of-zom-bae#are-there-any-projects-on-jb-that-youve-been-really-stoked-about-or-what-would-you-say-is-a-moment-of-great-excitement-youve-experienced-at-jb","content":"I think Movement Dao is something to keep an eye on. It feels special in a way that none of the other projects to date have. They're really trying to find ways to create &quot;movements&quot; to make the world a better place without it feeling hokey or like a canned answer in a beauty pageant (are they even called that anymore- don't get me cancelled!). One thing I heard in a recent town hall was &quot;community can solve our biggest problems&quot; and that stuck with me! IMO, they're doin' it right! go check 'em out! As far as a moment of great excitement at JB would have to include when constitution DAO popped off...that. was. wild. I believe it was around Thanksgiving- I went to bed knowing one, peaceful, calm version up JB and woke up to a whirlwind of new members, wen moon, and tons of questions! Zeugh and Nicolas took the brunt of that, definitely get their versions-great stories- but man, it was intense! "},{"title":"Sounds intense! I’ve been taken aback at how approachable and nice and inclusive people have been here at JB, so I’m wondering, where are all the assholes?​","type":1,"pageTitle":"Juicebox in the Words of Zom_Bae","url":"blog/juicebox-in-the-words-of-zom-bae#sounds-intense-ive-been-taken-aback-at-how-approachable-and-nice-and-inclusive-people-have-been-here-at-jb-so-im-wondering-where-are-all-the-assholes","content":"lololol...JB is a &quot;No Asshole Zone&quot; "},{"title":"Haha, that’s what everyone’s been telling me. What is something about you that would surprise other JB members to learn?​","type":1,"pageTitle":"Juicebox in the Words of Zom_Bae","url":"blog/juicebox-in-the-words-of-zom-bae#haha-thats-what-everyones-been-telling-me-what-is-something-about-you-that-would-surprise-other-jb-members-to-learn","content":"hmmm.... I'm in my college's hall of fame for volleyball "},{"title":"That’s awesome! Do you still play at all?​","type":1,"pageTitle":"Juicebox in the Words of Zom_Bae","url":"blog/juicebox-in-the-words-of-zom-bae#thats-awesome-do-you-still-play-at-all","content":"eh, not really- occasionally if I feel like makin' bitches cry. jk jk jk jk "},{"title":"I almost shed a tear... Nowadays what are your hobbies outside of the cryptosphere?​","type":1,"pageTitle":"Juicebox in the Words of Zom_Bae","url":"blog/juicebox-in-the-words-of-zom-bae#i-almost-shed-a-tear-nowadays-what-are-your-hobbies-outside-of-the-cryptosphere","content":"Mountain biking, keeping plants alive, and am taking a course to become a certified life &amp; wellness coach "},{"title":"Oh that’s awesome, that sounds like a lot of fun.​","type":1,"pageTitle":"Juicebox in the Words of Zom_Bae","url":"blog/juicebox-in-the-words-of-zom-bae#oh-thats-awesome-that-sounds-like-a-lot-of-fun","content":"as long as I'm not running into trees! or do you mean the coaching...? "},{"title":"Yes to coaching!— although running into trees could be a problem for both wellness and mountain biking… and plant care. Last question!— it’s the future, and you can make your ideal web space, whether that’s a DAO or any online space at all— what do you think you’ll make?​","type":1,"pageTitle":"Juicebox in the Words of Zom_Bae","url":"blog/juicebox-in-the-words-of-zom-bae#yes-to-coaching-although-running-into-trees-could-be-a-problem-for-both-wellness-and-mountain-biking-and-plant-care-last-question-its-the-future-and-you-can-make-your-ideal-web-space-whether-thats-a-dao-or-any-online-space-at-all-what-do-you-think-youll-make","content":"oooo, good question. I'm actually trying to answer that for myself. I want to figure out a way to gamify wellness that's enjoyable and doesn't feel like a task. Wellbeing is so so crucial but is so easily ignored because most people just don't know what they don't know (ie: don't realized they can feel better physically and mentally). What that looks like exactly...stay tuned. "},{"title":"Juicebox in the Words of aeolian","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-world-of-aeolian","content":"","keywords":""},{"title":"How’d you get started with JB and how has it changed since you’ve been here?​","type":1,"pageTitle":"Juicebox in the Words of aeolian","url":"blog/juicebox-in-the-world-of-aeolian#howd-you-get-started-with-jb-and-how-has-it-changed-since-youve-been-here","content":"Before JB, and technically even now, I’ve been a software engineer in the traditional web2 space working for startups, etc. I’ve been loosely dabbling in crypto over the years, but I always wanted to dive into it in a bigger way. Generally when I want to dive into something, I really wanna get into the nuts/bolts and learn it from the ground up. I finally found myself with the time to do that, and me and a couple friends found this NFT project we liked, and even though we couldn’t really afford to buy the NFT separately, if we pull our funds together… and it was like a lightbulb moment. We thought hey, what about this whole DAO thing happening— what if we make a DAO that buys some NFTs. So I found JB and started poking around, and it was coincidentally the same time that ConstitutionDAO was happening. I was drawn in by the amazing branding of Banny (a banana smoking a joint was just amazing) and the next day I wake up, log into discord, and I see the treasury has grown to like 20 million overnight. Once I saw that and started really thinking about the potential of this thing I immediately dropped everything I was doing and started trying to contribute where I could, especially on the dev side and front-end side. Peri welcomed us with open arms and the rest is history as they say. "},{"title":"Awesome. So much talk lately about V2! How would you put V2 in perspective for someone not technically aware of all the changes?​","type":1,"pageTitle":"Juicebox in the Words of aeolian","url":"blog/juicebox-in-the-world-of-aeolian#awesome-so-much-talk-lately-about-v2-how-would-you-put-v2-in-perspective-for-someone-not-technically-aware-of-all-the-changes","content":"V2, hmm. When we talk about V2 we’re talking about the protocol itself. Jango, Drgorilla and a bunch of others have identified some tings about V1 which were restrictive, like that projects can only raise money in ETH and not in other currencies, that there’s less flexibility around how they can configure projects to meet their needs, and so on. The protocol guys said let’s start developing V2 and improve it from the ground up, and so the front-end’s job in that is basically to support those new additions. There’s exciting potential use cases, like funding your project through your own NFT launch, or like a project that comes along that says we want to award contributors with an NFT that they can sell on secondary market, and the proceeds of those NFTs will go straight into a JB treasury. Another biggie is supporting multi-currencies— projects accepting stablecoins instead of just ETH. Truthfully we don’t even know all the possibilities that it is hopefully going to open up, which is what makes it all the more exciting. "},{"title":"I’m reminded of the story of that city planner in England way back when, who had the roads built twice as wide as necessary. People thought he was crazy, but he saw a future with population explosion. Do you view V2 as built for the realities of tomorrow?​","type":1,"pageTitle":"Juicebox in the Words of aeolian","url":"blog/juicebox-in-the-world-of-aeolian#im-reminded-of-the-story-of-that-city-planner-in-england-way-back-when-who-had-the-roads-built-twice-as-wide-as-necessary-people-thought-he-was-crazy-but-he-saw-a-future-with-population-explosion-do-you-view-v2-as-built-for-the-realities-of-tomorrow","content":"Haha, I super admire anyone that can have that kind of forethought and conviction in their idea of the future. When you’re building a protocol as the ecosystem saw with V1, it enables a set of use cases which, in the case of V1, proved to be successful with big fundraisers that make big volume in a short amount of time. Look at the internet– such a non-restrictive, base-level protocol, and look at it now. The creators of the internet would have had no idea that it would become what it is now. Not unlike JB with this website of this smoking banana that enables millions of dollars of fundraising. "},{"title":"There’s been this wonderful discussion about compensation lately. Where does a DAO strike a balance between compensating members and staying lean for a down-the-line bigger payout?​","type":1,"pageTitle":"Juicebox in the Words of aeolian","url":"blog/juicebox-in-the-world-of-aeolian#theres-been-this-wonderful-discussion-about-compensation-lately-where-does-a-dao-strike-a-balance-between-compensating-members-and-staying-lean-for-a-down-the-line-bigger-payout","content":"It’s really hard. Like someone said in that thread on compensation— I don’t remember who— but comparing people based on a number is just not healthy, right? That’s what people don’t like about traditional corporate life, and that’s why people find themselves in web3 and crypto. They want to escape that world and operate in a space that lets them do what interests them the most. In terms of how to think about it from a first-principles perspective, which I’m trying to do, let’s start with startups. I don’t think the startup model is perfect by any means– it probably disproportionately rewards the founders more than early builders. So that’s not exactly a blueprint for us either. "},{"title":"It’s just so complicated right? So many smart people and no one has been able to find that holy grail answer...​","type":1,"pageTitle":"Juicebox in the Words of aeolian","url":"blog/juicebox-in-the-world-of-aeolian#its-just-so-complicated-right-so-many-smart-people-and-no-one-has-been-able-to-find-that-holy-grail-answer","content":"Right. And drawing from the corporate world and those structures probably is not the right way to go about it either. I’m not a crypto/web3 maximalist in that sense though, I do think people can learn things from those who have come before us, but we’re here to make our own rules and to do what makes sense for us and what leads to the most amazing ecosystem that we can possibly build. That’s what we’re all here to do. The fact that that thread exists and other threads like it exist is a real testament to this community because we’re driven and passionate about figuring this stuff out. That, in my opinion, is the sign of a really healthy community. "},{"title":"No egos can be around in this right– how come egos don’t seem to clash more in these situations?​","type":1,"pageTitle":"Juicebox in the Words of aeolian","url":"blog/juicebox-in-the-world-of-aeolian#no-egos-can-be-around-in-this-right-how-come-egos-dont-seem-to-clash-more-in-these-situations","content":"There’s something about JB, or the way that the community presents itself, whether on socials or within the discord, that it leads to a certain type of person sticking around. People are sufficiently motivated at JB. When teams break apart and things don’t happen it’s because people gave up on figuring out how to make it work. Everyone here recognizes the opportunity we have in front of us, to build this amazing thing and a solid foundation for us to all go forward. It’s a recognition that if we can really sit down and work all this stuff out we’re really gonna be able to build amazing things. "},{"title":"Do you think the JB runway threatened by the compensation models we have now? JB never had any VC coming in, so how do you reconcile that?​","type":1,"pageTitle":"Juicebox in the Words of aeolian","url":"blog/juicebox-in-the-world-of-aeolian#do-you-think-the-jb-runway-threatened-by-the-compensation-models-we-have-now-jb-never-had-any-vc-coming-in-so-how-do-you-reconcile-that","content":"That’s the key point– and I’ve been guilty of this in the past myself— JB is very unique and the dynamics of the ecosystem are crazy. We really do have to think about this stuff. We have to sit down and think about it from a first-principles perspective, rather than approaching it in the traditional way of doing these things. "},{"title":"What about the workflow over time problem– ie, what happens when your job drops off in work to do because you executed the task, but you’re still getting this big recurring payout?​","type":1,"pageTitle":"Juicebox in the Words of aeolian","url":"blog/juicebox-in-the-world-of-aeolian#what-about-the-workflow-over-time-problem-ie-what-happens-when-your-job-drops-off-in-work-to-do-because-you-executed-the-task-but-youre-still-getting-this-big-recurring-payout","content":"That’s the biggie, you’ve hit the nail on the head. One model we’ve stewarded is that the front-end team has broken out into its own treasury in Peel, and that allows us to be more intentional with how we fund projects. It really allows two things: we can onboard quickly those who we think are really good, and we can also understand their skill set right away. We know what we’re looking for and the broader DAO doesn’t have to go in and make a decision on every single recurring payout proposal that comes through that affects the front-end. That’s one model that’s been working for us, but these things are all emerging, and that what makes me super excited to be here in JB and in web3. "},{"title":"Got it. Okay, let’s get down to brass tacks. Who’s your favorite JB member, and why is it jango?​","type":1,"pageTitle":"Juicebox in the Words of aeolian","url":"blog/juicebox-in-the-world-of-aeolian#got-it-okay-lets-get-down-to-brass-tacks-whos-your-favorite-jb-member-and-why-is-it-jango","content":"Jango said something a while ago that really nails home why he’s so amazing, and the culture he’s ushered in at JB. I’m just gonna quote it here: “i like hangin with folks that can be fluid between bullshitting and manifesting, fluid between appreciating beauty and ugly, fluid between conversation and silence, fluid between humor and practicality, fluid between been in awe of everything and focusing on the next idea in front of us. I'm attracted as fuck to people with big imaginations who make moves towards them.” That was like such an amazing statement because it’s really hard to find people who are your people. I feel like my people are this: people who strike that balance between brilliance and focus, but also are able to laugh at the ridiculousness of life, and so I guess when I read that I was like damn, I will definitely be vibing here for many years. But my homies at Peel definitely need a huge shoutout. This is the dream team and I'm super lucky to be a part of it. "},{"title":"What’s something that people would be surprised to learn about you?​","type":1,"pageTitle":"Juicebox in the Words of aeolian","url":"blog/juicebox-in-the-world-of-aeolian#whats-something-that-people-would-be-surprised-to-learn-about-you","content":"Hmm… I don’t really know. I guess one thing is that I started programming very late, and I actually always wanted to be a film composer— writing music for movies. That’s what I was doing before becoming a software engineer. Through high school I was pretty much all about music; I played piano and a bunch of other instruments and I got really into writing music for film, and I thought I would take that road. Eventually I kind of just realized it wasn’t coming from a place of pure passion and excitement. I realized as a musician you have to write music you don’t care to write oftentimes, and take jobs that don’t interest you at all. So I looked for another avenue and it was kind of just random how it happened: I went to university for some unrelated degree and fell in love with programming and comp sci along the way. "},{"title":"Juicebox in the Words of nicholas","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-world-of-nicholas","content":"","keywords":""},{"title":"How’d you get started with JB and how has it changed since you’ve been here?​","type":1,"pageTitle":"Juicebox in the Words of nicholas","url":"blog/juicebox-in-the-world-of-nicholas#howd-you-get-started-with-jb-and-how-has-it-changed-since-youve-been-here","content":"I found Juicebox originally in June/July of 2021, and I was one of the people who came in through the SharkDAO door. I was involved in SharkDAO and I got to meet some of the people there, and got to meet jango who was the lead protocol dev there. Eventually my interest turned primarily to JB. I’ve always been interested in these tools that allow for social integration and JB was right up that alley in terms of tooling that lets people coordinate to create whatever project they want. On top of that they have this X factor which is the spirit of a true DAO— it’s not about VC or cash grabs— and I think that’s really interesting given the last 20 years or so of centralized social development in web2. I contributed at JB where I could, did a lot of governance, operations streamlining, starting tye notion library and working on organization. In early 2022 I decided to take a step back, focus a bit more on programming stuff, solidity, NFTs, etc. Over the course of a few months I realized I’m just too fascinated by JB, and especially with V2 coming out and seeing this amazing potential. JB feels like an open source project with a revenue model, which is attracting incredible people from all over the world. So I decided to jump back into JB. I put proposal in for trial payout and I’m hoping I can jump back into the team. "},{"title":"There’s a lot of excitement around V2. What specifically has you interested in coming back?​","type":1,"pageTitle":"Juicebox in the Words of nicholas","url":"blog/juicebox-in-the-world-of-nicholas#theres-a-lot-of-excitement-around-v2-what-specifically-has-you-interested-in-coming-back","content":"Two things are drawing me back— tankbottoms, who has been building/adapting stuff related to NFT creation and minting and turning those into tools that can be used more broadly. If it can be pulled off correctly, I think it’ll go way beyond just JB. It’s really revolutionary and applicable in so many different contexts. I feel like I can be useful there in design/code/helping out. That’s obviously enabled partly by V2. The treasury management stuff being discussed right now— like creating projects that allow you to diversify the treasury into other tokens, and using JB as mechanism for doing that— is extremely cool. V2 is so open-ended, and part of the lift involved is getting that tooling across to people. "},{"title":"I think that’s a biggie. JB has so many tools, but I agree that it may be overwhelming for a newbie coming onto the scene. There’s also a kind of idea like, if you spotted a restaurant that served Italian, Japanese, Greek and Turkish food, you may think okay, they can’t possibly be doing all that correct. What do you make of that?​","type":1,"pageTitle":"Juicebox in the Words of nicholas","url":"blog/juicebox-in-the-world-of-nicholas#i-think-thats-a-biggie-jb-has-so-many-tools-but-i-agree-that-it-may-be-overwhelming-for-a-newbie-coming-onto-the-scene-theres-also-a-kind-of-idea-like-if-you-spotted-a-restaurant-that-served-italian-japanese-greek-and-turkish-food-you-may-think-okay-they-cant-possibly-be-doing-all-that-correct-what-do-you-make-of-that","content":"Yeah, for sure. What’s great is that JB has really shown that it is aligned with memetic fundraisers in the past. I don’t know if you’d call it product market fit (PMF) yet, but it has the orientation toward PMF with these memetic raises, some of them more enduring than others. Hopefully it can be useful for enduring long term treasury management functions. One thing I think about— there’s lot of NFT projects that set aside a portion of sales/royalties to a treasury (which is sitting in a multisig somewhere). Maybe the collection lost momentum, who knows, but that funding is still hanging around somewhere. I have an assumption that there are dozens or more multisigs that belong to a DAO that have 50-250 ETH sitting in it without a lot of activity. If those things had been run on something like JB, maybe there could have been tools JB would have offered to make sure funds like that were put to use. I definitely do agree regarding the interface/tooling offerings— it’ll be interesting to see what happens since JB is one interface right now, and that has value. But ultimately I think we’ll see more interface experimentation. In the past when the Mandarin speakers came in, I was supportive of the idea to create some kind of interface that’s more conducive to that new community group. As JB grows I think we may see things like that. "},{"title":"What do you think PMF looks like for JB?​","type":1,"pageTitle":"Juicebox in the Words of nicholas","url":"blog/juicebox-in-the-world-of-nicholas#what-do-you-think-pmf-looks-like-for-jb","content":"I’m most interested in enduring projects that use the protocl as their treasury. I think—and maybe my thinking has evolved on it— but last year as I got to understand JB in greater detail, I felt like there’s two functions for DAOs. One is a place to hold your assets— that’s JB— whether assets are ETH or NFTs or whatever— and the other a place where governance happens. I don’t know that we’ve figured out the most effective way to run governance, but JB governance works extremely well in my opinion. The way JB uses the treasury to handle contributor salary, other expenses, or the network effect when projects pay each other— for instance how JB relates to Wagmi, Canu, Peel, Lexicon Devils— collaborative DAOs end up holding a piece of each other and having a stake in each other’s future. That has potential to have a serious network effect. Look at SharkDAO, they have a huge amount of JBX, in their case they don’t really vote on stuff and their JBX isn’t super valuable, but it would be nice to start to see that happen with partner DAOs. I think the thing we’re missing is the NFT thing— that’s the key in my opinion to returning revenue over time. Canu, Wagmi, etc., are paid through JB, so they can show how great the network is because they have locked in revenue from the revenue fees JB takes from all projects on the protocol. I think if we could create non-JB originating revenues, that would be fascinating. "},{"title":"Not to mention the landscape may be changing a bit here. Let’s talk about “Soulbound” tokens (SBTs), which may be on the horizon. The idea here is tokens that are non-transferable. Some say good idea, others say it’s just a way to make resumes in web3. What do you make of that?​","type":1,"pageTitle":"Juicebox in the Words of nicholas","url":"blog/juicebox-in-the-world-of-nicholas#not-to-mention-the-landscape-may-be-changing-a-bit-here-lets-talk-about-soulbound-tokens-sbts-which-may-be-on-the-horizon-the-idea-here-is-tokens-that-are-non-transferable-some-say-good-idea-others-say-its-just-a-way-to-make-resumes-in-web3-what-do-you-make-of-that","content":"The idea of non-transferable tokens… it’s interesting. I think no matter what in web3, if you’re an amazing code you will probably always get work. But that being said treating SBT’s like a resume can definitely happen too. I have to say I haven’t read the paper yet, so I’m just going off of what I heard floating around the web3 space. Long term, there’s a decent argument against it, which is that in ten years I don’t think any of us will be using the same wallet. But overall, I think it’s trying to answer the problem of these membership DAOs. If you base your membership on holding a market-tradable token, the appreciation of the token will ultimately result in the dilution of the quality of the members of your community as people sell. Also JokeDAO comes to mind, where if you participate in their competition by submitting a joke, you get voting tokens for the subsequent competition. "},{"title":"One-time use tokens in other words.​","type":1,"pageTitle":"Juicebox in the Words of nicholas","url":"blog/juicebox-in-the-world-of-nicholas#one-time-use-tokens-in-other-words","content":"Yes exactly. I think that’s even more interesting to be honest. The ecosystem rewards people for trying new things and experimenting. "},{"title":"What about SBT’s as a scarlet letter, in other words as a means to damage someone?​","type":1,"pageTitle":"Juicebox in the Words of nicholas","url":"blog/juicebox-in-the-world-of-nicholas#what-about-sbts-as-a-scarlet-letter-in-other-words-as-a-means-to-damage-someone","content":"For sure that could happen, I think it will depend on the person minting and their reputation. One of the things about NFTs I wondered was people doing antisocial NFTs, like people tokenizing their virginity, or tokenizing school shooters. "},{"title":"Excellent points. Who’s your favorite contributor, and why is it tankbottoms?​","type":1,"pageTitle":"Juicebox in the Words of nicholas","url":"blog/juicebox-in-the-world-of-nicholas#excellent-points-whos-your-favorite-contributor-and-why-is-it-tankbottoms","content":"Haha. Tankbottoms is great. There are so many great contributors honestly. If I had to point to anyone in particular, the person I admire most or seek to learn the most from is jango. There are many talented contributors, but jango has the talent I most wish I had— which is real clarity. It doesn’t mean jango knows everything and everyone follows him. It means he has real clarity around orientation to questions. You could call it vision, but that maybe that’s reductive. It’s more like in discussions he’s able to refocus very fluently. And of course being able to travel up and down the stack is incredible. Tankbottoms also is an unbelievable contributor in terms of accumulated experience and raw skill, which is so great. I mean, he’s just turning out stuff that other teams talk about for a year, and tank turns it out like that. "},{"title":"What is something people would be surprised to learn about you?​","type":1,"pageTitle":"Juicebox in the Words of nicholas","url":"blog/juicebox-in-the-world-of-nicholas#what-is-something-people-would-be-surprised-to-learn-about-you","content":"Lately I’ve been doing kickboxing every week with my girlfriend and roommate. I’m also a total youtube fanatic and I rarely watch under 2x speed. My biggest interest for the past little while is in Magic the Gathering! A friend gave me the idea that we’re like the CPUs when we play MtG, and the game is the rules of machine, and… it’s like if javascript was run by a company and the only thing you could exercise and execute were functions that are sold 10 times a year. I’m really fascinated by it. I also love going on really long walks, like for hours and hours. "},{"title":"What does the future have in store for nicholas?​","type":1,"pageTitle":"Juicebox in the Words of nicholas","url":"blog/juicebox-in-the-world-of-nicholas#what-does-the-future-have-in-store-for-nicholas","content":"I’m working on an NFT collection, actually, that I’m really pumped about. I can’t share anything just yet, it’s not finalized, but once it’s ready I’ll let everyone know about it! (This interview was stylized from a discord call, and shortened for brevity. For those who want to hear the full interview, click this link for a mp3 file. "},{"title":"Juicebox Observations 8/3/2021","type":0,"sectionRef":"#","url":"blog/juicebox-observations-8-3-2021","content":"Juicebox was deployed 19 days ago. Here are the things that have become clearer to me by being a part of JuiceboxDAO, TileDAO, and helping a number of founding contributors of other projects design Juicebox configurations for deployments of their own: Juicebox is flexible. The protocol has the capacity to power several project operation styles. This is great, but can also be overwhelming to project owners exploring their options. It's very helpful for founders and communities to have a Juicebox &quot;expert&quot; that can help them translate their needs into a Juicebox config, along with a catalogue showcasing several examples of how their project might behave given certain choices.Juicebox projects can be very much &quot;alive&quot;.Instead of baking in a token distribution schedule ahead of time, communities using Juicebox are given the freedom to experiment and refine their strategy together over time (they could also lock it in forever from the start if they want). With this power comes great responsibility, however. Communities need great data and community analytics to make decisions with confidence.A funding cycle's duration matters. Quicker cycles give a community more opportunities to make experimental decisions together, more frequent group calls-to-action, and more chances to debate and reassess their commitments. This creates a greater sense of communal experience over the same amount of time – a project matures more in a month using 7 day funding cycles than 30 day cycles. The tradeoff is the more immediate need for structure, organization, and formalities. There is hardly time to observe and think on a thesis before taking it to a vote. The constant attention on governance and decision making can also get exhausting and distract from medium/longer term initiatives. A project might want to tune its pacing over time to play with these dynamics. Discount rate is the most consequential configurable parameter. Once a discount rate is set and tokens begin being distributed, its effects, however subtle, are felt long into the future. This is by design, but it can be easy for a project to let several funding cycles pass forgetting that they had previously set a discount rate. Tuning the reserved rate comes with a time-dependent tradeoff.A community is composed of core contributors, users, and casual contributors – all play an important role in a community's growth. Core contributors are paying the most attention, doing the most work, and contributing the most upfront money. They tend to know of the tokens issued by the Juicebox protocol and their value before contributing, and thus have a conscious incentive to grow the network now according to the reserved rate. Users tend to get involved mostly for the product or ideas being advertised. They only realize later that inso doing they've been given tokens by the Juicebox protocol that allow them to benefit from their community's growth over time. Casual contributors of a community emerge from users who realize they can participate in giving the tokens they've been receiving more value by paying incrementally more attention and doing incrementally more work. The reserved rate can thus be tuned to either boost the incentives of core contributors now at the expense of the incentives of emerging contributors later on, or vice versa. This dynamic can of course be tuned over time. Juicebox works really well for communities who build products. There is no better way to fund a treasury than by piping in revenue from direct sales made off-site. Tiles are a great example: sales made on tiles.art go directly to TileDAO's treasury without the purchaser concerning themselves with the money pool ahead of time. Sure, the value of owning a Tile may in large part come from the community aspect of the DAO and the shared governance of its money, but having a brilliant, intriguing product that people want to buy is what makes the treasury worth governing in the first place.","keywords":""},{"title":"Reserved tokens as a mechanism for effective token distribution","type":0,"sectionRef":"#","url":"blog/juicebox-observations-9-28-2021","content":"","keywords":""},{"title":"Aside​","type":1,"pageTitle":"Reserved tokens as a mechanism for effective token distribution","url":"blog/juicebox-observations-9-28-2021#aside","content":"The reserved rate also makes a 51% takeover very expensive. JuiceboxDAO currently has a total supply of 577,516,558 JBX tokens. Each ETH contributed mints another 544,320 JBX (353,808 to the payer, 190,512 to the reserved pool). In order for someone to mint 51% of tokens for themselves today, they would have to dump 3,865 ETH into the treasury. This will just get more expensive as time goes on since the total supply will increase over time as the number of tokens minted per ETH contributed decreases. "},{"title":"Juicebox postmortem: Low severity bug discovered 8/18/2021","type":0,"sectionRef":"#","url":"blog/juicebox-postmortem-of-low-severity-bug-discovered-8-18-2021","content":"","keywords":""},{"title":"Context​","type":1,"pageTitle":"Juicebox postmortem: Low severity bug discovered 8/18/2021","url":"blog/juicebox-postmortem-of-low-severity-bug-discovered-8-18-2021#context","content":"To give them time to plan for for what's next, SharkDAO needed a way to pause payments and new members coming in through Juicebox. Juicebox doesn't support a pause function in its TerminalV1 contract, so Peripheralist and I had to improvise alongside the SharkDAO community.First step was to remove the payment form from the UI. This keeps most people from sending in contributions, but someone dedicated to sending a payment would eventually find that the Juicebox contract could still be interacted with directly through other interfaces like Etherscan. To even the playing field, I had the idea to raise SharkDAO's reserved rate to 100%, meaning all payments coming in through the contract would allocate 100% of minted SHARK tokens to preprogrammed addresses instead of to the paying address. With no SHARK incentive for contributing payments, the community would be disincentivized to pay through back-door means, effectively creating the desired pause functionality. If anyone did send payments, we could easily refund them the money. After running this plan by SharkDAO at a Sharktank town hall meeting, we decided to move forward with it. We would allocate any SHARK minted during this paused period to the multi-sig, which could later be burned if needed. A few details to note: SharkDAO's reserved rate has been set to 0% since its start. SharkDAO does not use funding cycles with preset durations, meaning changes can be executed on-demand. SharkDAO's Juicebox project is owned by a Gnosis multi-sig requiring 3/5 signatures. I'm one of the signatories. Right after the call, I got together with multi-sig holders to execute the plan. After one transaction to TerminalV1's configure function, the reserved rate was successfully updated. I immediately checked the UI to see if things were in order – thats when I noticed that after having set the reserved rate to 100%, it was now possible to mint and distribute 100% of the current token supply to the preconfigured destination (the multi-sig). Since this distribute transaction is public, anyone who triggered this would effectively double the SHARK supply, and would leave us with unnecessary work after the fact to burn this unintended supply from the multi-sig and communicate the issue to the community. I immediately instructed the multi-sig panel to send another configure transaction to TerminalV1 to change the reserved rate back to 0%, and explained that I had to double check something before we could move forward with the plan. This reverted us to the previous state, where payments made to the contract directly would bypass the intended pause that was being communicated in the UI. "},{"title":"Technical details​","type":1,"pageTitle":"Juicebox postmortem: Low severity bug discovered 8/18/2021","url":"blog/juicebox-postmortem-of-low-severity-bug-discovered-8-18-2021#technical-details","content":"The root of the problem was fairly obvious to me once I noticed the distributable supply in the UI. Once we were back at a safer state, I began work to confirm my assumptions and test a workaround. Many parts of the Juicebox mechanism's design are gas optimized, meaning the transactions that are most frequently called are responsible for fewer state changes than those that are infrequently called. The pay transaction is by far the most frequently called, so very few state changes take place within this function: the payment is received, and the resulting amount of treasury tokens are minted to the payer in a staked format. Importantly, the reserved token amount is not minted during a payment. Instead, this amount is calculated later when the printReservedTickets transaction is called. It does so by taking the current token total supply and minting an appropriate amount of new tokens to the preconfigured reserved addresses such that the reserved rate is respected. Most importantly, the mechanism then keeps track of the fact that it has minted reserved tokens for the current token supply so that it doesn't create extra reserved tokens later. Given perfect information, it is in the economic best interest of the project to wait to call printReservedTickets if the reserved rate is going to increase, and in the community's interest to call it before an increase. The opposite is also true. This dynamic allows the protocol to offload a high-gas storage operation from a frequently called pay function onto less frequently called operations. Unfortunately, when the reserved rate is 0%, the printReservedTickets call assumes there's no work to do, and returns before it has had a chance to update the tracker. This prevents anyone from locking in the rate before it is increased. In the TerminalV1 file, the solution is literally just putting line 968 below line 977: Current TerminalV1 implementation of printReservedTickets "},{"title":"Execution​","type":1,"pageTitle":"Juicebox postmortem: Low severity bug discovered 8/18/2021","url":"blog/juicebox-postmortem-of-low-severity-bug-discovered-8-18-2021#execution","content":"I immediately proposed two workarounds to the SharkDAO admins: Keep the contract open.Set the reserved rate to the minimum possible value (0.5%), distribute the allocated reserved tokens to the multi-sig, then move the reserved rate to 100% as intended. We decided to go with the second option since we needed to set a fair playing field to community members looking to pay, and we could later burn the relatively small amount of SHARK minted to the multi-sig. I then spent a few hours recreating the the original bug in our integration test suite, and wrote an integration test for the proposed solution to confirm it would work as expected (I was making extra sure of everything at this point in the evening.) Once everything was confirmed on my end, I got together with the multi-sig holders to execute the three transactions: Change the reserved rate to 0.5%.Distribute reserved treasury tokens to the multi-sig. (Anyone can trigger this, so Xaix did it from his personal wallet.)Change the reserved rate to 100%. The side effect is that 1,889,066.675747 SHARK were minted to the multi-sig. Here's a screenshot of what the UI looked like after step 1: And here's what it looks like now:We got all of this done in about 2.5 hours. "},{"title":"Takeaway​","type":1,"pageTitle":"Juicebox postmortem: Low severity bug discovered 8/18/2021","url":"blog/juicebox-postmortem-of-low-severity-bug-discovered-8-18-2021#takeaway","content":"Despite having written extensive unit, integration, and load tests, this condition fell through the cracks. I will keep stressing to the community that Juicebox is still experimental software with high risks. I'm confident in the way it's built and am committed to its improvement, but I'm not going to pretend that it is perfect. The good news is that TerminalV1 has a built in mechanism to allow projects to choose to migrate to new terminal contracts that have been approved by JuiceboxDAO's governance, so bugs like this can be fixed. We are now working around the clock to get a TerminalV1_1 safely set up for migration, and extensively tested. In the meantime, projects are not advised to set their reserved rate to 0% if they intend to raise their reserved rate in the near future. Next steps: Deploy TerminalV1_1 that patches this bug.Consider building a version of the Juicebox Terminal contract that supports pausing payments.Seek more code reviews and audits, while offering bug bounties to hackers who want to help. "},{"title":"Juicebox protocol tokenomics","type":0,"sectionRef":"#","url":"blog/juicebox-protocol-tokenomics","content":"","keywords":""},{"title":"Level 0​","type":1,"pageTitle":"Juicebox protocol tokenomics","url":"blog/juicebox-protocol-tokenomics#level-0","content":"In its simplest form, a Juicebox project can be configured to fundraise and provide refunds. Example: I pay 5 ETH into a treasury and receive 5,000,000 tokens, and you pay 5 ETH and receive 5,000,000 tokens. There are now 10 ETH in the treasury and 10,000,000 tokens total. Since I own half of the tokens, I can redeem them to get half of the treasury's total – in other words I can get a refund. You can do the same. "},{"title":"Level 1​","type":1,"pageTitle":"Juicebox protocol tokenomics","url":"blog/juicebox-protocol-tokenomics#level-1","content":"A reserved rate can be added which will allocate a percentage of the minted token supply to a preprogrammed list of addresses. Example: The project sets a 10% reserved rate that goes to the DAO's multisig address. I pay 5 ETH into a treasury and receive 4,500,000 tokens, and you pay 5 ETH and receive 4,500,000 tokens. The DAO's multisig now has access to 1,000,000 tokens. Because of the reserved rate, I can no longer redeem my tokens to get a refund – I will only get 90% of what I paid. At a reserved rate of 100%, no tokens go to new contributors. "},{"title":"Level 2​","type":1,"pageTitle":"Juicebox protocol tokenomics","url":"blog/juicebox-protocol-tokenomics#level-2","content":"A funding cycle target can be set which blocks off some funds from the treasury that can be distributed by anyone to a set of preprogrammed addresses. Example: The project sets a target of 1 ETH. I pay 5 ETH into a treasury and receive 5,000,000 tokens, and you pay 5 ETH and receive 5,000,000 tokens. The treasury now has 10 ETH – 1 ETH is within the target, and the other 9 are considered overflow. I can redeem/burn by tokens to receive my proportion of the overflow, which is 4.5 ETH. The 1 ETH target is still distributable to the project and not accessible to token holders. "},{"title":"Level 3​","type":1,"pageTitle":"Juicebox protocol tokenomics","url":"blog/juicebox-protocol-tokenomics#level-3","content":"A redemption bonding curve can be added which reduces the amount of the treasury that can be reclaimed by redeeming tokens. Example: The project sets a 50% bonding curve. I pay 5 ETH to the treasury and receive 5,000,000 tokens, and you pay 5 ETH and receive 5,000,000 tokens. Because of the redemption bonding curve, I will only receive ~2.5 ETH if I redeem my tokens. The rest is left to share by those who are holding, so you could now redeem your tokens and get the remaining ~7.5 ETH. "},{"title":"Level 4​","type":1,"pageTitle":"Juicebox protocol tokenomics","url":"blog/juicebox-protocol-tokenomics#level-4","content":"A discount rate can be added to decrease the rate of tokens that are minted and distributed when contributions are received over time. Example: The project sets a 10% discount rate and a 14 day funding cycle duration. I pay 5 ETH to the treasury and receive 5,000,000 tokens on day one during the first funding cycle. Fourteen days later during the second funding cycle, you pay 5 ETH and receive 4,500,000 tokens. "},{"title":"Level 5​","type":1,"pageTitle":"Juicebox protocol tokenomics","url":"blog/juicebox-protocol-tokenomics#level-5","content":"It is important to note that a project can change its reserved rate, target, redemption bonding curve, and discount rate on a per-funding cycle basis. Some projects might choose to have no funding cycle duration for the most flexibility, meaning they can reconfigure the project on demand. It is really important to trust the owner of the project because they have a lot of control to shape the tokenomics. A project can also set a ballot contract in its funding cycle to create conditions according to which all proposed reconfigurations must abide. Example: The project sets a 3-day delay ballot contract. If the project owner wants to reconfigure any funding cycle property, the transaction to do so must be sent at least 3 days before the end of the current funding cycle. If the reconfiguration was made within the 3 days, the next funding cycle will instead be a copy of the current one, and the reconfiguration would be eligible to take effect after that one. People can build arbitrary ballot contracts as long as it conforms to IFundingCycleBallot. "},{"title":"JuiceboxDAO Roadmap 8/3/2021","type":0,"sectionRef":"#","url":"blog/juicebox-roadmap-8-3-2021","content":"From my point of view, JuiceboxDAO has only a handful of big-picture initiatives to focus our efforts on over the next while: Be available to help founders and communities get started with the Juicebox protocol with confidence. This includes creating more education materials and improving technical documentation. Build community analytics dashboards so communities can see how funding cycle reconfigurations have impacted their treasury over time, and so they can make better decisions into the future. This will also be useful so communities can cross reference decisions previously made by other Juicebox projects before making a similar decision themselves. Build L2 payment terminals so projects can receive funds on various Ethereum L2s (Optimism, Arbitrum, ZKSync, etc). I've designed the general structure of this mechanism, but it needs to be implemented.As more projects choose to manage their treasury using the Juicebox protocol, the protocol's TerminalV1 contract will become responsible for securing an increasing amount of ETH. It will be possible for JuiceboxDAO to write and publish a TerminalV2 contract for projects to migrate onto that sends idle overflowed ETH to a yield earning vault. This will introduce a new risk vector, so this effort can wait until the protocol has matured and the expected return is favorable.Organize the JuiceboxDAO's Discord and the DAO's voting mechanics on Snapshot, and continue providing structure and financial support to incoming contributors.Decentralize power over the JuiceboxDAO's governance over time by installing funding cycle ballots that rely on a more trustless execution of the outcome. Aragon Govern could help here. Each of these deserves a more detailed post of its own. If you want to help, join the JuiceboxDAO on Discord and speak up. We are looking to fund people to both lead these efforts and/or contribute to them.","keywords":""},{"title":"Juicebox, the token minting powerhouse","type":0,"sectionRef":"#","url":"blog/juicebox-the-token-minting-powerhouse","content":"","keywords":""},{"title":"A minting platform unlike any other​","type":1,"pageTitle":"Juicebox, the token minting powerhouse","url":"blog/juicebox-the-token-minting-powerhouse#a-minting-platform-unlike-any-other","content":"Juicebox is a web3 service that lets you launch your project, mint tokens, control your payouts and treasury, and track growth over time, all while giving your contributors the the chance to partake in governance have a voice in the organization? Starting a web3 business and you need to track your accounts payable/receivable? Juicebox can do that. Starting a nonprofit where you want to reward members with tokens for governance and participation? Juicebox can do that, too. Don’t quite know what you want to create, but you know you want a project that executes on-chain and has more tooling than anybody else in the game? Juicebox has you covered. There are few web3 platforms out there that can help you create your own project and DAO, but none of them can do it with the ease and tooling that Juicebox can. Juicebox provides users with a platform to raise money, either as a one-time or on a recurring basis, all while also offering a suit of tokenomics tooling and token minting. If you don’t want tokens, no problem, you can use Juicebox like a simple programmable treasury to track donations, payments, profits (or “overflow” as you’ll come to learn), in a transparent and honest way. The days of opaque bookkeeping where contributors have to wonder exactly how their donations are spent are over. Juicebox can be the backbone of a local school PTA tracking funds in and out, or it can (and has!) run multi-million dollar operations. It scales effortlessly and gives you tooling to create rich token-based voting economies, as well. Perhaps most unique is Juicebox’s approach to what it calls “overflow”, which is money raised above your target amount. This money, which otherwise may be called “profit” and traditionally may go to executive payrolls or reinvestment, sits in a treasury and can be claimed by any holders of your token. The proportional claim of the treasury a token holder receives is completely set by you using a variety of tooling, and it incentivizes anyone participating in your project to want to see its success. It’s a great way to build a mission-aligned team and, should your project find success, it’s a way to effortlessly, transparently, and efficiently reward your team members and contributors. Want more? Come check us out at juicebox.money, and swing by our discord and say hello. Starting a project? Check out our blog and web3 literacy center, Juicebox High. Starting a DAO? Check out our DAOlicious tips for starting your first DAO! "},{"title":"Juicebox in the Words of 0xSTVG","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-0xstvg","content":"","keywords":""},{"title":"How’d you get started with JB and how has JB changed since you’ve been here?​","type":1,"pageTitle":"Juicebox in the Words of 0xSTVG","url":"blog/juicebox-in-the-words-of-0xstvg#howd-you-get-started-with-jb-and-how-has-jb-changed-since-youve-been-here","content":"I was in there early! I learned about DAOs through Rare Pizzas and this guy named snax— who I gotta give a shoutout to ‘cause he’s the one who introduced me to DAOs— was buying free pizzas on pizza day. It was me and him and 2 other peeps on Clubhouse, and I was like this is stupid, no way this is gonna happen. As I got more comfortable in the DAO space, I eventually found my way to SharkDAO. I had started seeing these SharkDAO logos and I figured hey, I have a printing shop, I should make some hoodies with logos on them to give away, and I did (and they were expensive!). Jango and nicholas were people who helped guide me through sending out those hoodies, and so I got to know them and got to know JB. I decided to start making some JB clothing with graphics as well, and eventually I got put together with Zeugh and the talk was about community. I started helping wherever help was needed, like with governance, moving proposals along as they were coming in, etc. Eventually filipv jumped in and we started tag-teaming it and doing the podcast, which ran for a while. "},{"title":"Filipv is great. Is it fair to call you two the gruesome twosome?​","type":1,"pageTitle":"Juicebox in the Words of 0xSTVG","url":"blog/juicebox-in-the-words-of-0xstvg#filipv-is-great-is-it-fair-to-call-you-two-the-gruesome-twosome","content":"We worked very closely together and he ended up taking on some huge responsibilities, but we still lean on each other a lot when it comes to opinions and direction. I would definitely say I’ve learned a ton from him and I think he would say the same. Every once in a while we’ll pick up the phone and call each other and just say “Hey, how you doin’?”. "},{"title":"I see you as this onboarding wizard, where did that start?​","type":1,"pageTitle":"Juicebox in the Words of 0xSTVG","url":"blog/juicebox-in-the-words-of-0xstvg#i-see-you-as-this-onboarding-wizard-where-did-that-start","content":"It’s definitely a roll I’ve grown comfortable doing. I remember doing onboarding with MoonDAO and Slice, and eventually then for JB. It’s also interesting that that sort of merged into this weird testing and feedback roll too. I found myself in the front-end chat more and more (I don’t know if I’m providing value there– I hope I am!) to try to test various things, launch projects on test net, find obscure bugs that are here and there and provide suggestions/feedback based on what the onboarding calls are giving me, so it’s kind of become a merged roll. Being in that close proximity to the user gives a lot of great insight and perspective. I also think there needs to be a shield between the regular user and developers. I’m very adamant that there needs to be some distance there. I’ve always appreciated jango saying we’re all builders at JB, but let’s be honest, they’re (the devs) are the builders– the developers on the JB protocol side and the Peel Team, they’re really building and everyone else is providing support. Since I joined JB I’ve always felt the need to kind of protect the jangos of JB because they’re so hyper focused that distractions can lead to mistakes, and that can be a big problem. I think a lot of organizations should take on that approach, to be honest, to make sure those core builders are shielded from the basic questions that other contributors can answer. I feel like that’s where I slid right in, I can answer those questions. "},{"title":"I’m reminded of high level athletes and how they’re trained. The trainer almost has to take a caretaker role, ensuring that distractions/obstacles are cleared so that the athlete can do what they do: perform.​","type":1,"pageTitle":"Juicebox in the Words of 0xSTVG","url":"blog/juicebox-in-the-words-of-0xstvg#im-reminded-of-high-level-athletes-and-how-theyre-trained-the-trainer-almost-has-to-take-a-caretaker-role-ensuring-that-distractionsobstacles-are-cleared-so-that-the-athlete-can-do-what-they-do-perform","content":"Exactly. It’s all about minimizing distraction. It’s interesting that you bring up athletics; I was a former athlete and after that have been involved in high level training— olympics, NCAA athletes— and the one thing I’ve carried on in my life moving into JB and other things is to eliminate distractions and be in the moment. If you are distracted about the outcome of something, you’re taking away energy from the task that you’re actually doing, and in athletics that could be the difference between a win and a loss, a championship and coming in second. It sounds super corny but launching new extensions has become that for me– that’s the championship, we gotta get there, how do we get there, how do we stay focused are the questions I have bouncing around in my head. I’ve always been an idea person— someone who can really thrive in environments where we’re talking about ideas— and I’ve always been good at that I felt, and JB is this crazy environment where people take ideas and build off of it into something else. It’s like a dream come true. "},{"title":"There almost seems to be a hippy spirit at JB– people are just so open. I’m thinking of the compensation discussion from a few weeks ago. Just an open discussion, no one at each other’s throats.​","type":1,"pageTitle":"Juicebox in the Words of 0xSTVG","url":"blog/juicebox-in-the-words-of-0xstvg#there-almost-seems-to-be-a-hippy-spirit-at-jb-people-are-just-so-open-im-thinking-of-the-compensation-discussion-from-a-few-weeks-ago-just-an-open-discussion-no-one-at-each-others-throats","content":"Yeah, especially with a topic that’s been so sensitive our whole lives– we don’t talk about salary IRL, and to have this open dialogue is special. More so to have the validation that what you’re providing is worth the payout that you’re receiving– there’s no better feeling than that. Having the support of the community has been an amazing feeling for me. People don’t realize how important that is to me– to my personal being. It’s quite an experience and one that I don’t take for granted. Regarding compensation, if you don’t pay the people who are irreplaceable, they’re gonna go somewhere else. I think that’s an important point. There’s also people within the DAO that are just completely connected to the DAO itself, like if jango leaves, or Drgorilla leaves, what is JB, or Peel, or what even happens to JB? "},{"title":"Fair question.​","type":1,"pageTitle":"Juicebox in the Words of 0xSTVG","url":"blog/juicebox-in-the-words-of-0xstvg#fair-question","content":"I’ll tell ya right now– if jango decides to do another project, I would ask him if I can go with him. You just can’t replace certain people. So if you don’t pay them, they’re gonna be gone. All that said, I do think we need to be aware that we don’t have unlimited resourced. At the same time I think there’s enough people in the DAO that aren’t necessarily leaning on JB for all their bills/everything they do. So if there’s an emergency situation where people have to back off/reduce payout, I think we’ll see that happen. "},{"title":"Why the lack of assholes and mentally checked-out people at Juicebox?​","type":1,"pageTitle":"Juicebox in the Words of 0xSTVG","url":"blog/juicebox-in-the-words-of-0xstvg#why-the-lack-of-assholes-and-mentally-checked-out-people-at-juicebox","content":"I think because everyone at JB right now has proven their value, and people who haven’t don’t stay around for very long; they weed themselves out. I think there’s also a level of respect from each person that everybody kind of has each other’s back. If you come in and try to take advantage of the DAO, I think the community can read that like a book because we all had to pay our dues. Everyone who’s being paid recurring payouts has been told no at least once– that’s a common denominator we all have. I think when everyone’s gone through that there’s a level of respect and community, which you see in how we treat each other in our day-to-day. "},{"title":"For sure! Okay switching gears: who is your favorite contributor, and why is it Zeugh?​","type":1,"pageTitle":"Juicebox in the Words of 0xSTVG","url":"blog/juicebox-in-the-words-of-0xstvg#for-sure-okay-switching-gears-who-is-your-favorite-contributor-and-why-is-it-zeugh","content":"Haha, I think Zeugh is great– he’s awesome! You know, I don’t know who my favorite contributor is. I’ve worked closest with jango and filipv probably, but I’ve gotten to know the peel team a bit more and I’ve really enjoyed them asking me for feedback/allowing me to provide feedback. Right now I couldn’t answer who, I just love working with jango and filip– they definitely help me out and give me a strong feeling of purpose. "},{"title":"What’s something somebody would be surprised to learn about you?​","type":1,"pageTitle":"Juicebox in the Words of 0xSTVG","url":"blog/juicebox-in-the-words-of-0xstvg#whats-something-somebody-would-be-surprised-to-learn-about-you","content":"I think the biggest surprise would be… I have four kids! That is something that actually helps me with what I’m doing at JB– I’m good with time management/organization, and can make time for everything. My oldest son is really active with sports, so I’m juggling a lot, but even on the sidelines I’m always on the discord. "},{"title":"Juicebox V1.1 Change log","type":0,"sectionRef":"#","url":"blog/juicebox-v1-1-change-log","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"Juicebox V1.1 Change log","url":"blog/juicebox-v1-1-change-log#features","content":"Pause - Projects will be able to pause contributions to their treasury as well as subsequent token issuance on a per-funding cycle basis. Any new transactions – or pending low-gas transactions in flight – that settle after a paused funding cycle has started will fail. Mint - Projects will be able to allow itself to mint more of its own tokens on a per-funding cycle basis. During a funding cycle where minting new tokens is allowed, the project owner can submit a transaction to increase the token supply and send this new supply to a beneficiary of its choice.  Currently projects can only mint new tokens before receiving a first contribution. Burn - Anyone will be able to burn their tokens by redeeming them, even when there is no overflow.  Currently tokens are only burnable when there is some amount of overflow that is being reclaimed through the redemption. Off-protocol redemption value - Projects will be able to supply a contract to their funding cycles that tell the protocol how much value it is holding off-protocol, like in a multisig wallet or yielding vault. Projects can use oracles in this contract to convert the value of any other asset it owns into ETH for the protocol to use when calculating redemption values. Currently redemption values are calculated only with the ETH the project has locked in the Juicebox Terminal contract. Fee cap - The protocol fee is capped at 5%. JuiceboxDAO can adjust the JBX fee from 0% - 5%. Currently there is no fee cap. "},{"title":"Bug fixes​","type":1,"pageTitle":"Juicebox V1.1 Change log","url":"blog/juicebox-v1-1-change-log#bug-fixes","content":"Fixed bug that prevents a project from updating its reserved token tracker when the reserved rate is set to 0%. This bug prevented the project from reconfiguring from a 0% reserved rate to any other value without inadvertently creating an extra reserved token supply inso-doing. See this postmortem. Fixed bug that prevented overflow from being viewed correctly when a funding cycle rolls over before it has had its newly available funds distributed. "},{"title":"Other adjustments​","type":1,"pageTitle":"Juicebox V1.1 Change log","url":"blog/juicebox-v1-1-change-log#other-adjustments","content":"The contract is now directly Ownable instead of using an ownable Governance contract proxy. The JuiceboxDAO will own the contract, which allows it to set the fee, and allow other forked Terminal contracts for projects to migrate onto. "},{"title":"JuiceboxV2 Protocol","type":0,"sectionRef":"#","url":"blog/juicebox-v2","content":"","keywords":""},{"title":"Current state of things​","type":1,"pageTitle":"JuiceboxV2 Protocol","url":"blog/juicebox-v2#current-state-of-things","content":"First thing's first: a huge thank you to everyone who has played with the first version of the Juicebox protocol over the past month. You've taken a leap of faith on a very experimental and untested set of contracts and user experiences with the hopes that it would help you smoothly realize your vision. The protocol has helped a number of projects bootstrap their treasury and community, and these communities have in turn helped Juicebox root into the fertile soil that is the Ethereum social layer. I've been observing how each project has been interacting with the protocol. I've been a part of exciting discussions where JB was a total enabler of ideas and creativity, and also ones where I've unfortunately had to be the bearer of bad news that the protocol doesn't support the wild thought being proposed. I've seen people spin up projects and raise hundreds of ETH in hours, and seen people give up on the first screen because the &quot;button&quot; they were trying to click wasn't actually a button. After only a few weeks of action I have a sense of what's working, and I've got a laundry list of what could be better. The goal is to steadily improve things over time. At the base contract layer however, progress must made in big leaps initially with the goal of eventually reaching a steady state as innovation moves to subsequent application layers. JuiceboxV2 is the first big leap. Its goal is simple: to enable more creativity, and remove all points of friction. JuiceboxV1 was designed with the assumption that communities and project owners have adverse incentives. By using Juicebox, a project owner was committing to particular constraints so that their community could confidently embrace the finances of the game being proposed. Project owners could not mint or burn tokens at will, project owners could not dictate how many tokens were minted per ETH contributed, project owners could not limit who participated in a crowdfund, and project owners did not have a pause button. Turns out this was a bad assumption to roll with at the base protocol layer. If a community and its owners are one and the same, flexibility is a requirement for total creative expression. It turns out that communities almost always crave a custom treasury strategy that fits their ethos and proposes a game that differentiates them from others. Projects don't usually have the engineering resources to build, test, and verify such solutions though. This has been a core value Juicebox has provided for people, along with a simple and powerful UI for community members to join in through and follow along with. So far, the frictions that Juicebox removes has justified the treasury strategy constraints that it introduces. Let's see if we can now do even better. "},{"title":"Proposed changes​","type":1,"pageTitle":"JuiceboxV2 Protocol","url":"blog/juicebox-v2#proposed-changes","content":""},{"title":"Bring your own mint/burn strategy​","type":1,"pageTitle":"JuiceboxV2 Protocol","url":"blog/juicebox-v2#bring-your-own-mintburn-strategy","content":"You'll now be able to bring your own contracts that outline the game you want to propose to your community. You'll be able to plug and play with already-written strategies, or write your own custom one that fulfills your wildest ideas. Writing a strategy can be simple, or as complex as you want. All that is required is providing a contract that adheres to the IFundingCycleDataSource interface. You'll be able to provide a strategy that decides what happens when someone makes a payment to your project, as well as one for when someone redeems their treasury tokens. Here's how writing a strategy around a payment works: You can add a data source contract as a parameter to a funding cycle. Your data source must provide a function that implements the following function specification. function payData( address _payer, uint256 _amount, uint256 _baseWeight, uint256 _reservedRate, address _beneficiary, string calldata _memo ) external returns ( uint256 weight, string calldata memo, IPayDelegate delegate );  The function receives a handful of parameters from the Juicebox protocol, and is expected to return a handful of parameters back. Inputs: _payer is the address that issued the ETH payment._amount is the amount of the ETH payment received._baseWeight is the weight of the funding cycle during which the payment is being made. This weight is determined by multiplying the previous cycle's weight by the previous cycle's discount rate. Each project's first funding cycle's weight is 10^24. _reservedRate is the reserved rate of the funding cycle during which the payment is being made. This percent is out of 200. _beneficiary is the address that the payer has specified to receive the resulting treasury tokens. _memo is the note that the payer has included in the payment. Outputs: weight is the weight that the Juicebox protocol should use when minting treasury tokens. The total tokens minted will be amount * weight, where both variables are assumed to have 18 decimal places. Out of these minted tokens, some will be allocated to the _beneficiary, and the rest will be reserved to be distributed to the reserved token recipients according to the _reservedRate. memo is the memo to include with the protocol event that will be emitted as a result of the payment. delegate is the address of a contract that adheres to the IPaymentDelegate interface. If a delegate is provided, it will receive a callback from the Juicebox protocol once it has fully processed the payment. You can return the zero address if you don't need this functionality. The callback your delegate contract should implement is as follows: function didPay( address _payer, uint256 _amount, uint256 _weight, uint256 _count, address _beneficiary, string calldata memo ) external; _payer is the same as the one passed in to your data source. _amount is the same as the one passed in to your data source. _weight is the same as the one returned from your data source. _count is the number of tokens that were minted for the _beneficiary. _beneficiary is the same as the one passed in to your data source. _memo is the same as the one returned from your data source. The recordPayment function where all of these pieces come together can be found here. A data source and delegate can similarly be provided to your funding cycle that'll shape the recordRedemption function: function redeemData( address _holder, uint256 _count, uint256 _redemptionRate, uint256 _ballotRedemptionRate, address _beneficiary, string calldata _memo ) external returns ( uint256 amount, string calldata memo, IRedeemDelegate delegate );  Inputs: _holder is the token holder that is redeeming._count is the number of tokens being redeemed._redemptionRate is the redemption rate of the funding cycle during which the redemption is being made._ballotRedemptionRate is the redemption rate that should be used if the project currently has an active funding cycle reconfiguration ballot._beneficiary is the address that the redeemer has specified to claim the treasury ETH as a result of redeeming tokens._memo is the note that the redeemer has included in the redemption. Outputs: amount is the amount of ETH that should be sent from your treasury to the _beneficiary as a result of redeeming/burning _count tokens. memo is the memo to include with the protocol event that will be emitted as a result of the redemption. delegate is the address of a contract that adheres to the IRedemptionDelegate interface. If a delegate is provided, it will receive a callback from the Juicebox protocol once it has fully processed the redemption, but before the amount is dispersed to the _beneficiary. You can return the zero address if you don't want this functionality. The callback your delegate contract should implement is as follows: function didRedeem( address _holder, uint256 _count, uint256 _amount, address _beneficiary, string calldata memo ) external _holder is the same as the one passed in to your data source. _count is the same as the one passed in to your data source. _amount is the same as the one returned from your data source. _beneficiary is the same as the one passed in to your data source. _memo is the same as the one returned from your data source. The recordRedemption function where all of these pieces come together can be found here. With these new tools projects can roll out all kinds of treasury strategies, such as: restricting payments to only certain addresses.restricting payments to only addresses that hold certain other assets.offering different levels of community membership depending on the state of the blockchain.restricting payments to be within min/max payment amounts.creating time weighted rewards.restricting the max supply of community tokens.customizing the amount of treasury tokens distributed per ETH received.minting NFTs for new members. ...or any combination of any of these, alongside any other rule you can express contractually. "},{"title":"Overflow allowance​","type":1,"pageTitle":"JuiceboxV2 Protocol","url":"blog/juicebox-v2#overflow-allowance","content":"Previously, a project could only access funds within its specified funding cycle target. All overflowed treasury funds over this target was only accessibly by treasury token holders. Now, alongside specifying your funding cycle's target, you can specify an amount that you can use from your project's overflow on demand. This is useful for allocating treasury funds for on-off use cases like bug-bounties, one-time contributions, audits, NFT bids, etc. "},{"title":"Open mint/burn​","type":1,"pageTitle":"JuiceboxV2 Protocol","url":"blog/juicebox-v2#open-mintburn","content":"Previously, you could only mint tokens before receiving your first payment, and burning was only done through the redemption mechanism. All other tickets were distributed purely through the payment process according to funding cycle weights that decreased according to your configured discount rates over time. You can now mint and allocate new treasury tokens at will. All token holders also now have the option to burn their tokens, for whatever reason. This gives projects more flexibility to design their tokenomics the way they want, while also having an auto-distribution mechanism through Juicebox's flexible built-in payment mechanism alongside. "},{"title":"Reserved token distribution endpoints​","type":1,"pageTitle":"JuiceboxV2 Protocol","url":"blog/juicebox-v2#reserved-token-distribution-endpoints","content":"Previously, payout splits could be directed at Ethereum addresses, other Juicebox projects, and arbitrary contracts that inherit from a common interface. Reserved tokens could only go to Ethereum addresses. Now, reserved token distributions can also be pointed at Ethereum addresses, the owner of other Juicebox projects, and arbitrary contracts that inherit from this common interface. This is useful to allow for more composable token distributions. "},{"title":"Pay, withdraw, and redeem can all be paused.​","type":1,"pageTitle":"JuiceboxV2 Protocol","url":"blog/juicebox-v2#pay-withdraw-and-redeem-can-all-be-paused","content":"Previously, projects had not quick way to pause community interactions with its treasury. Now, projects are able to individually pause function calls to pay, withdraw funds, and redeem tokens. These controls are configured into each funding cycle. This gives projects quick levers to use to achieve certain treasury effects. "},{"title":"Adjustable fee​","type":1,"pageTitle":"JuiceboxV2 Protocol","url":"blog/juicebox-v2#adjustable-fee","content":"Previously, all projects paid a 5% fee from payouts. Now, projects will pay at maximum a 5% fee that is adjustable by the JuiceboxDAO. There is also a ceiling fee price that is adjustable by the JuiceboxDAO. This helps the JuiceboxDAO accommodate more projects and experiments into its ecosystem. "},{"title":"Conclusion​","type":1,"pageTitle":"JuiceboxV2 Protocol","url":"blog/juicebox-v2#conclusion","content":"JuiceboxV2 introduces a suite of tools that allow for wild new treasury strategies. What remains constant from V1 is the fact that configurations are locked into funding cycles – if a project runs on 30 day funding cycles, they can specify creative dynamics into the funding cycle, but once the cycle begins changes can't be made until the following one. Also like V1, projects that opt for no duration are choosing the flexibility to make any change on demand. The implementation of the new contracts is done, we've just now got to document, test, and audit everything. All code is public, as will be all documentation and conversation around this upgrade. We need eyes and scrutiny. Please don't hesitate to take a look and help pick things apart. If you plan on spending time on this, please reach out to the DAO in our discord and introduce yourself so we can make sure you're rightly compensated for your work. All projects currently running on Juicebox will be able to seamlessly migrate their treasury to V2. LFG. "},{"title":"Cross-layer Juicebox Protocol","type":0,"sectionRef":"#","url":"blog/multi-layer-juicebox","content":"Projects building on Juicebox need payment terminals that cost its contributors less gas to pay and redeem. To do so, projects need to be able to accept funds across many different L2s alongside mainnet. The simplest option would be to just deploy the same Juicebox protocol in each EVM compatible L2 environment. This forces projects to choose which they would like to operate on, or manage their own complexity if they would like to operate across many. I'm guessing most projects would prefer to operate everywhere, if only it were easy to do so. JuiceboxDAO runs on the juicebox protocol itself, if we do nothing at the protocol layer and go with this simple option we will come across the same dilemma. If instead we preemptively consider how we can adjust the Juicebox V2 protocol to make cross layer operation simple for us, we'll likely also be making it simple for all projects who choose to build around juicebox treasuries. An effective solution will take into consideration that: projects do not want to fragment its community and governance across chains. All members should be cheering for funds to come in from wherever people care to contribute from, and the project's distributed tokens in turn should provide the opportunity to govern its cumulative funds regardless of what chain they're on. the issuance rate of the project's tokens should be synchronizable across all available environments over time. As funding cycles roll over, it's often the case that the weight of token distribution changes. Unless it is by design, there shouldn't be arbitrage opportunities across chains. funding cycle reconfigurations should either be approved or fail across all environments. If a project proposes to reconfigure its funding parameters in one environment but the ballot to do so ends up failing, the change should also fail to take effect in all other environments. On the flip side, successful funding cycle reconfigurations should be reflected across chains. Stay tuned for specific proposals from me of how this might be achieve across rollup L2s, and please contribute to the conversation with your own ideas so we can arrive at the best possible set of solutions together.","keywords":""},{"title":"Juicebox in the Words of johnnyd","type":0,"sectionRef":"#","url":"blog/juicebox-in-the-words-of-johnnyd","content":"","keywords":""},{"title":"Greetings! I know you’re in the midst of traveling, thank you for taking the time. How’s it been going?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#greetings-i-know-youre-in-the-midst-of-traveling-thank-you-for-taking-the-time-hows-it-been-going","content":"Hey! It’s been really good. Some good wins, we think, and some good projects to follow up on. We learned a lot about how to communicate our value proposition and got a lot of good stuff. "},{"title":"So important. Here’s the million dollar question: what have you found is the ideal way to communicate JB’s value proposition?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#so-important-heres-the-million-dollar-question-what-have-you-found-is-the-ideal-way-to-communicate-jbs-value-proposition","content":"It really depends a lot on the projects. I think it’s really important to fish out what a project wants and what needs we’re there to give them. From there we’ll know what JB features that’ll help them the most— whether that be transparency in earning/spending, or the ease of launching an ERC-20 token and having that distributed to people upon contributing. Or whether automating payments out of the treasury and restricting/reconfigurations of that spending are the way they want to go. Those are the key points "},{"title":"It strikes me a scalability problem. We seem to have a boutique approach at the moment, almost like a concierge service. As we expand, how do we streamline some of that onboarding without losing that conversation with the user?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#it-strikes-me-a-scalability-problem-we-seem-to-have-a-boutique-approach-at-the-moment-almost-like-a-concierge-service-as-we-expand-how-do-we-streamline-some-of-that-onboarding-without-losing-that-conversation-with-the-user","content":"You’ve hit the nail on the head, that’s absolutely what we have to focus on. I definitely have ideas around that; mainly I really like the idea of categorizing particular common projects/project types, like NFC Coops, straight up Web3 businesses, or the classic one-time fundraiser. I think having clear resources for these like links to pre-filled templates could be super helpful and useful. Essentially, we want people to come to the site and feel comfortable setting up a project themselves without having someone walking them through it. "},{"title":"For sure. Out of curiosity, what was it like gallivanting around with Zeugh?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#for-sure-out-of-curiosity-what-was-it-like-gallivanting-around-with-zeugh","content":"He’s a great guy! Super fun, super smart, super easy going, super hard worker. Oh man… constant networking! He can just keep getting the word out, rubbing elbows. He’s got unlimited energy— a total machine! "},{"title":"It’s funny, arguably the most powerful JB tool, the treasury, seems like a little on the backburner for most people. It seems like they don’t quite see the scope of its use. What do you make of that?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#its-funny-arguably-the-most-powerful-jb-tool-the-treasury-seems-like-a-little-on-the-backburner-for-most-people-it-seems-like-they-dont-quite-see-the-scope-of-its-use-what-do-you-make-of-that","content":"Yeah exactly, there are so few projects using these treasury tools. I think it should be a big priority of ours to present it in a more understandable way; I’m keen to make it more visible on the front-end too. As great and flexible as the protocol is, it can be a tall order for people to understand. "},{"title":"Okay, now on to your origin story. How’d you get started with JB and how has it changed since you’ve been here?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#okay-now-on-to-your-origin-story-howd-you-get-started-with-jb-and-how-has-it-changed-since-youve-been-here","content":"I was working as a front-end dev for a few years in web2, actually, doing React and some other stuff. Before JB a group of friends and I started getting into NFTs and we wanted to create a DAO to be an NFT Coop, with the goal being to acquire some of the more expensive NFTs. Aeolian was one of my buddies in that NFT and he found JB and looked at the github, started working a bit on it, and told me about it. After a week or so I started doing the same. It was so exciting, I pretty much quit my job 2 weeks later and said okay, I’m doing this. "},{"title":"Front-end seems like so cross-disciplinary. You’re juggling user-interface/design along with coding. What’s that like?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#front-end-seems-like-so-cross-disciplinary-youre-juggling-user-interfacedesign-along-with-coding-whats-that-like","content":"I really love designing! Before JB it wasn’t a big part of my job at all. I would just get the designs and make it exactly as I was told. At JB I’ve enjoyed the challenge of just putting yourself in the user’s shoes and making it as smooth and seamless as possible. "},{"title":"That’s the beauty of web3, isn’t it? If you want to take something on, and you are capable, nobody seems to care whether you have formal training, degrees, etc.​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#thats-the-beauty-of-web3-isnt-it-if-you-want-to-take-something-on-and-you-are-capable-nobody-seems-to-care-whether-you-have-formal-training-degrees-etc","content":"For sure, it’s an absolutely beautiful part of web3. I would say it’s even more like that in the software industry than in most other industries. Web3 has taken that to a whole other level. It’s totally about what you can produce right now, not what you did a while back, or what you’re promising you’ll do in the future. "},{"title":"Speaking of the future— what’s the future look like for johnnyD?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#speaking-of-the-future-whats-the-future-look-like-for-johnnyd","content":"Front-end! I really like the front-end work process, and I’m becoming more inclined towards the design if anything, which is interesting. As much as I love development, really feel a passion for design building more and more. So yeah, we’ll see where that takes me. "},{"title":"Awesome. Okay, let’s get down to brass tacks. Who’s your favorite JB member, and why is it Sage?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#awesome-okay-lets-get-down-to-brass-tacks-whos-your-favorite-jb-member-and-why-is-it-sage","content":"Haha, oh man. Sage does some incredible art— that stuff is really inspiring. I remember coming to JB and just loving the vibes so much, there was just something so original about it. Sage created those vibes in Banny, like a character who sets the tone for us. That’s why Sage is my favorite. "},{"title":"Can you see a future with Banny in the Louvre? Tourists lining up just to get a few minutes with an original, NFT Banny displayed on an LCD screen?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#can-you-see-a-future-with-banny-in-the-louvre-tourists-lining-up-just-to-get-a-few-minutes-with-an-original-nft-banny-displayed-on-an-lcd-screen","content":"Haha. I think we could see Banny anywhere and everywhere. "},{"title":"Cheers to that! Okay, I heard you’re into music, and that you even play. What are you into?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#cheers-to-that-okay-i-heard-youre-into-music-and-that-you-even-play-what-are-you-into","content":"I actually played trumpet quite a lot in high school. Like I was really into it. I also played the piano a little bit. "},{"title":"Another trumpeter! You know filipv plays a mean trumpet, right?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#another-trumpeter-you-know-filipv-plays-a-mean-trumpet-right","content":"Oh man, no I didn’t know that. I gotta connect with him, that’s so awesome! "},{"title":"I’ve been thinking, we have so many musicians at JB. What if we create like a little folder where we record samples, little licks and riffs. If anybody’s in sound production they could come and take those and fashion them into something.​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#ive-been-thinking-we-have-so-many-musicians-at-jb-what-if-we-create-like-a-little-folder-where-we-record-samples-little-licks-and-riffs-if-anybodys-in-sound-production-they-could-come-and-take-those-and-fashion-them-into-something","content":"Haha, yeah I love it. If someone sends me sheet music and a tempo I’m down! "},{"title":"I’ll look into it, it would be awesome. Okay, last question: what’s something that people would be surprised to learn about you?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#ill-look-into-it-it-would-be-awesome-okay-last-question-whats-something-that-people-would-be-surprised-to-learn-about-you","content":"Hmm. I’m quite into triathlons, so much so that before JB I was actually trying to make a career out of it. I’m still pretty into it, actually. "},{"title":"Bear with me here— that’s running, bicycling and swimming right?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#bear-with-me-here-thats-running-bicycling-and-swimming-right","content":"That’s correct, but in exactly the reverse order though! "},{"title":"Got it. Can you give me a sense of the appeal, versus just cycling/running/swimming on its own?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#got-it-can-you-give-me-a-sense-of-the-appeal-versus-just-cyclingrunningswimming-on-its-own","content":"I’ve always loved doing multiple sports, and there’s just nothing more challenging in my opinion than training for three disciplines. Then the events themselves are also extremely challenging. I love the lifestyle of being well-rounded as opposed to just hammering away at one thing, and I think triathlons with a bit of gym work is probably the healthiest activity there is. Can’t get enough of it. "},{"title":"Fair enough, it definitely sounds challenging! So where are you off to next on your travels?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#fair-enough-it-definitely-sounds-challenging-so-where-are-you-off-to-next-on-your-travels","content":"I’m actually heading into Lviv right now, I’m on a bus to get there. I plan to stay about three weeks. I’ve met so many Ukrainians so far on my trip, and they all tell me Lviv is just the best city in Europe. I’m keen to see it for myself. "},{"title":"Do you anticipate any issues with the crisis happening?​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#do-you-anticipate-any-issues-with-the-crisis-happening","content":"Lviv is more or less untouched from war, from what I’m told. What I keep hearing is, “The city hasn’t changed, but the people have.” So I’m curious to see how it is. "},{"title":"I’m sure that will be quite an experience. Keep us posted when you return, and until then safe travels!​","type":1,"pageTitle":"Juicebox in the Words of johnnyd","url":"blog/juicebox-in-the-words-of-johnnyd#im-sure-that-will-be-quite-an-experience-keep-us-posted-when-you-return-and-until-then-safe-travels","content":"Thank you! "},{"title":"NOTICE: Juicebox V1 inefficiencies","type":0,"sectionRef":"#","url":"blog/notice-juicebox-fundraise","content":"Before you start a project on Juicebox V1 or contribute funds to one, understand the following inefficiencies. These are shortcoming of V1 that have imperfect work arounds for now. There is no pause button. The best you can do is configure the reserves rate to 100% if you do not want to give new contributors any tokens. You can set an address responsible for burning tokens as the reserved token recipient.When a project's reserved rate starts at 0% and is then reconfigured to be higher than 0%, a new token supply will become available to distribute to the preconfigured reserved token recipients according to the rate chosen. For example, if moved to 100%, the total supply will double. Again, you can set an address responsible for burning tokens as the reserved token recipient. This inefficiency was discovered on August 18th. Here's more. 3. There is no direct burn transaction, but tokens will be burnt when redeemed. Therefor in order to burn, reconfigure your target such that there is overflow, then redeem tokens and then inject the overflow back into the treasury.","keywords":""},{"title":"溢出：用于退款、怒退、返现及提供可实现利润的一个机制。","type":0,"sectionRef":"#","url":"blog/overflow","content":"","keywords":""},{"title":"退款​","type":1,"pageTitle":"溢出：用于退款、怒退、返现及提供可实现利润的一个机制。","url":"blog/overflow#退款","content":"如果活动不成功，溢出可用于让全体捐款人获得退款。 以 ConstitutionDAO 为例子，这个项目第一个筹款周期的目标设置为 uni256.max ^(注1）^，允许把其在 Juicebox 上累积的所有资金自由转移到预设的地址（Gnosis 多签地址）。筹款周期时长同时被设置为 0， 赋予项目方（还是这个Gnosis 多签地址）随时触发新的重新配置周期的权限。所有捐赠的 ETH 都会给捐款人铸造相应比例数量的项目代币。 因此多签钱包可以把项目的筹款目标重新配置为 0，再把所有的募集款项注回其 Juicebox 金库内，这样会使项目内的所有资金被视为溢出，也就可由代币持有人领取。联合曲线设置为100%的情况下，每个代币持有人可以销毁他们的代币来获得与他们最初捐赠金额相等的 ETH。 "},{"title":"怒退​","type":1,"pageTitle":"溢出：用于退款、怒退、返现及提供可实现利润的一个机制。","url":"blog/overflow#怒退","content":"项目可以利用它的溢出来允许一些失去信心的代币持有人退出并带走部分金库的资金。 只有项目的溢出资金是可供销毁代币来获取的。如果项目的大部分资金保管在多签钱包（或者其他合约/资产）内，这些资金不能计入代币的赎回价值（在 Juicebox V2 会发生变化）。因此项目可以通过把流动资金注回 Juicebox、调整项目筹款目标值以及放松/收紧联合曲线比率，来调整怒退的预期所得。 如果项目使用筹款资金的速度比募集资金的速度要快，又或者项目的代币分发比例随着时间发生了变化，通过 Juicebox 内建机制进行的怒退很可能不能获得与最初捐款时相同的金额。 感谢 MolochDAO 创造了“怒退”这个说法。 "},{"title":"现金返还​","type":1,"pageTitle":"溢出：用于退款、怒退、返现及提供可实现利润的一个机制。","url":"blog/overflow#现金返还","content":"出售产品的项目可以利用其溢出为客户提供现金返还的机会。 例如，TileDAO 目前以 0.16 ETH 的价格出售艺术品。当作品铸造出来的时候，销售收入流入 TileDAO 的金库，同时相应地向买家铸造项目代币。TileDAO 可能希望通过赋予代币用途，或许是治理的决策权重，来激励代币持有人来持有这些代币，否则这些持有人可能会赎回代币来换取部分的项目金库资金。这个赎回基本上就是给予艺术品买家的部分现金返还，返还价值取决于项目筹款周期配置的几个方面随时间推移的变化。 "},{"title":"可实现利润​","type":1,"pageTitle":"溢出：用于退款、怒退、返现及提供可实现利润的一个机制。","url":"blog/overflow#可实现利润","content":"项目可以从任意来源向其金库注入资金，让所有代币持有人可以通过销毁代币来获取这些资金。 最简单的例子是，某个项目通过 Juicebox 项目来购买一样东西，然后转头把这个东西高于买入价再卖出。销售所得的资金可以注回到 Juicebox 项目中去，代币持有人希望的话，就可以去获取这些资金。  全部这些例子一致表明，项目可以做出相应的选择，以便随着时间的推移为其社区提供特定的金库设计。控制代表 Juicebox 项目所有权的 NFT 的地址有权来做出这些选择。代表社区来管理这个责任的不管是普通钱包地址还是合约，都应在社区认为合适的范围内受到审查和追责。 希望这些例子会澄清一件事情：项目使用 Juicebox 协议发行的代币是没有内在价值的。但是，这些代币可以被项目用于决策的用途，决策的结果可以赋予代币价值。这一切都取决于我们随时间推移一起做出的选择，以及我们用来约束这些选择的社会契约和算法合约。  **注1**：unit256 是无符号整数256位类型数字，unit256.max即这种数字的最大值为2^256^ - 1。 "},{"title":"Premine","type":0,"sectionRef":"#","url":"blog/premine","content":"The founding contributors pre mined JBX tokens to backpay the contributions made. The valuation of each token was the same as it is now during the first funding cycle. Jango got $125k for developing and testing the smart contracts.Peripheralist got $125k for writing juicebox.money.AtomicMieos got $10k for always being around to help shape ideas.Sage got $7k for design and illustration commissions.Nervetrip got $3k for helping to write an early prototype and do code reviews.Austin Griffith got $3k as a thank you for his work on Scaffold ETH, which Juicebox is built using.Paul Razvan Berg got $3k as a thank you for writing and testing solidity helper libraries that I used extensively. Especially for math operations on e18 numbers.Teddy Wilson got $1k for submitting a very useful PR that automates test routines.Apoorv Lathey got $200 for a small PR he made to the repo when the code was just getting started. The numbers are a bit arbitrary, but hopefully enough of you think its a fair start. If not, theres no shame is speaking up. We can always make changes to our reserved token allocation in upcoming funding cycles to rebalance pre mine compensation.","keywords":""},{"title":"Questions Concerning Compensation","type":0,"sectionRef":"#","url":"blog/questions-concerning-compensation","content":"As many of you may have noticed, the question of compensation has come up recently in the discord (linked here). It was an exceptionally valuable discussion that really highlighted how tricky the question concerning compensation is, both at JB specifically and in the web3 DAO space as a whole. Central to this question and perhaps a source of equivocation is this: what precisely is Juicebox? People looking at Juicebox like a startup, assuming it will exist like startups in the web2 world, may be quick to advocate for low salaries. After all, you don’t want high salaries if you are looking to pump up value in a company that you want to sell. This is the case with classic startups that are seeded with VC and created with the intent of profit as their final goal. But you can also look at Juicebox like a grass-roots company– still profit driven, but not looking to sell. This would be in-line with your classic examples of companies that went big– think Bill Gates dropping out of college to create Microsoft, or Mark Zuckerberg doing the same with Facebook. In these cases, the goal was not to pump value and then sell; rather, the goal was to build first, and only after that to reap the rewards down the line. When Mark Zuckerberg made facebook, Myspace was the biggest name in town. In a few short years, it became an afterthought, and Mark Zuckerberg became the reptilian overlord we know him as today. He was in it for the long-haul, and it paid off for him. And finally, you can look at Juicebox as a community. In this schema, it’s a collection of people all pulling in the same direction. The people who see Juicebox this way are quick to tell you that profit doesn’t really enter their minds too much, nor does a potential long-term promise of riches and private yachts. Rather, these people just like the people, the vibe, and the sense of being a part of something greater than themselves. All this a long-winded way to point out that, if we ask the three people above about compensation, we’re likely to get three very different answers. Furthermore, we’re even more likely to equivocate the word at hand. For instance: at Juicebox, are we compensating for services rendered, or are we acknowledging people’s efforts through compensation? Are we disbursing funds based on how profit-driven companies pay their employees, or are we giving pieces of the pie, ie JBX, to stake future promise and voice into our contributors? And in either case, how are we valuing contributors based on their roles differently? And then there is a question of effort spent working– that is, is it even fair to tie compensation to how hard one works. Take for instance classic capitalist models. You may know someone who works hard and makes 50k per year. You may know someone who works hard and makes 200k a year. You may wonder if one person is truly working “harder” than the other. Maybe so, maybe not. But then take Elon Musk, who is worth 300 billion dollars, give or take. Is it fair to say that, in comparison to our 200k-per-year example, Elon is working 1.5 million times harder? Or compared to our 50K example, that he’s working six million times harder? We see from this reductio ad absurdem that equating value with how hard one works tends toward fallacy. And so we arrive back and square one. What is compensation, truly? What is fair compensation? Is comparison the thief of joy, or should we look to others to determine our own worth? Marx said: from each according to his ability, to each according to his need. An honor system in other words– I am a contributor doing X in a city where I need Y to live comfortably, and I’m asking for Y. Is this the solution– a commune where wealth is shared according to what people self-report they need? It doesn’t take a much to point out the room for abuse there. Perhaps this is the central point: complicated, worthwhile endeavors are messy. There aren’t simple answers to these questions, and there shouldn’t be. The fact that we’re doing something worthwhile is underpinned by the fact that we’re even having these conversations, and so authentically and transparently at that. Like great art, you can’t expect people to come away agreeing that this discussion means the same thing, or that it’s solved. But what can be said is that our attitude toward the discussion should reflect ourselves authentically, and should show our steadfast determination to working together, to community and to teamwork. Oscar Wilde said, “A cynic is a man who knows the price of everything and the value of nothing.” We should take these words to heart and resolve to never get lost in just the numbers.","keywords":""},{"title":"Reserved rate as a growth tuning mechanism","type":0,"sectionRef":"#","url":"blog/reserved-rate-as-a-growth-tuning-mechanism","content":"Communities using Juicebox can leverage their reserved rate decisively when they want to make it more difficult for new members to join. Funds can still be received, but more of the newly minted tokens will be owned by the project itself. The current project members can use this to decide how they will manage their subsequent growth on a per-funding cycle basis. When the project wishes to make membership more accessible again, members can do so by lowering the reserved rate. There's currently a discussion happening in JuiceboxDAO deliberating if it might be wise to move its reserved rate from 35% to 50%. The reserved rate can also be useful for other purposes, this is just one possible metaphor that can be used to guide decision making.","keywords":""},{"title":"观察: JBX 代币现状","type":0,"sectionRef":"#","url":"blog/state-of-jbx","content":"","keywords":""},{"title":"观察​","type":1,"pageTitle":"观察: JBX 代币现状","url":"blog/state-of-jbx#观察","content":"JBX 目前在类似 Uniswap AMM 这样的协议外市场上交易，价格在发行价格和销毁价格之间浮动。目前没有形成任何扩张或收缩 JBX 供应量的激励机制。 协议并没有提及协议外可能发生的情况。以下仅为我个人的假设，不构成财务建议。 如果市场上的 JBX 价格高于 Juicebox 协议内的发行价, 任何增发 JBX 的需求都可以通过向 Juicebox 金库捐赠 ETH 来得到满足, 因为金库收到 ETH 会相应地铸造及分发 JBX。 承担风险的套利者可能会有动力在当前筹款周期铸造新的 JBX 代币，来获取周期更新及折扣率生效后会出现的 10% 的价差。他们也可以通过铸造 JBX 代币转售给协议外市场上的买单，从而利用信息不对称进行获利 —— JuiceboxDAO 社区应该努力把信息不对称的机会降到最低。 无论是以上的哪种情况，都会让所有在早期筹款周期里以较低成本持有 JBX 的人受益 —— 他们持有的 JBX 占总流通量的份额将会降低，但支撑 JBX 价值的 ETH 金库的增长速度更大，这样就会有提高销毁价格的效果。 如果市场上 JBX 的价格低于协议内的销毁价格时，进一步抛售 JBX 的需求将能通过销毁 JBX 代币来获得金库溢出里锁定的 ETH 得到满足。 同样地，套利者可以通过销毁 JBX 然后买入协议外市场上的卖单来获取信息不对称的收益 —— 同样地，JuiceboxDAO 社区应该努力把信息不对称的机会降到最低。 无论以上哪种情况，都会令在抛压中选择继续持有 JBX 的持币人获益 - 每个按赎回联合曲线比率赎回的 JBX 都相应地留下部分 ETH （60% 的曲线留下来给其他持币人的比 95% 曲线时要多得多，放大了这个效应）。除了100%赎回比率，在其他所有比率的情形下，JBX 流通量的下降速度都会大于金库的 ETH 减少速度。这个机制会随着后面的每一次销毁轻微抬高 JBX 的赎回价格，从而增加代币价格的上涨压力、缩减供应量、只留下那些拒绝日渐增厚的退出诱惑而坚持建设的持币人。 随着时间的推移，市场价格在发行成本和销毁价格之间不断来回摆动，JBX 持币人的销毁价格将会上升并最终超过其 JBX 当时的铸造价格。 两端价格压力越大，代币持有人的赎回价格升高越多。另一方面，如果市场需求在协议外就得到满足，赎回价格则将维持不变。 市场尾部事件对 JBX 代币持有人最为有利，虽然这种有利是以一种节制的方式出现。唯一不能给 JBX 代币持有人带来好处的情况是对 JBX 的需求长时间缺乏变化。在这种机制下，我们似乎是在牺牲价格波动换取韧性。 各种提案经 JBX 代币持有人通过后，DAO 会每个筹款周期把 ETH 用于支付贡献者薪酬、服务费用以及各种拨款。这种支出带来的影响会波及所有 JBX 代币持有人，轻微降低每个人的销毁价格。 DAO也可以把 ETH 分拨到平台以外的多签钱包或者 web3 的其他各种合约里去。受当前 Juicebox 协议版本所限，这种价值目前不能计算到销毁价格里面。 只有在代币供应量增长的情况下，保留代币名单才能捕获价值。一旦代币供应量扩张且市场需求在协议外得到满足，保留代币受益人就会有巨大的动力把代币价格推向其上限。 即使没有代币保留率，铸造现有代币总量的 51% 也很昂贵。如果真的发生这种情况，用于铸造过半数代币的 ETH 会立即提升之前周期每个代币持有人的销毁价格。这个新的过半数 JBX 代币持有人将不得不安抚一个有重大退出动机的社区。 如果 51% 的代币突然被互联网上成千上万互不相关的人买走，也会是同样的效果。 目前30%的保留 JBX 代币分配给 DAO （dao.jbx.eth)。DAO 正考虑将积累的一部分代币通过 DAO 的 Discord 服务器投入到贡献者之间进行流通。 DAO 有很多方法来实现这个想法，其中一个方法就是先把这些代币分配给保留代币名单上的各个受益人，然后鼓励他们把所有的这些代币分配给那些与他们合作最为密切的人，以及那些他们认为做出令人认可贡献的人。我们鼓励那些人接着再把这些代币传递下去。 这样做的目的是保证所有建议及维护协议和生态的人都能成为举足轻重的 JBX 代币持有人，这样一来他们就能够正式帮助 DAO 做出各种决策。 如果这个内部的 JBX 分配机制能够提高新建设者和核心团队的治理参与度，那么通过增加 DAO 金库的保留代币分配份额并减少其他人的保留代币分配来扩大这个内部分配计划，可能会令 DAO 最终得益。 "},{"title":"Project updates 9/7/2021","type":0,"sectionRef":"#","url":"blog/project-update","content":"","keywords":""},{"title":"Focus areas​","type":1,"pageTitle":"Project updates 9/7/2021","url":"blog/project-update#focus-areas","content":""},{"title":"Risk mitigation​","type":1,"pageTitle":"Project updates 9/7/2021","url":"blog/project-update#risk-mitigation","content":"Goal: Make sure things don't go to zero. Current team: jango (lead), exekias, peri. Updates: No new bugs/problems discovered in the contracts. New repo where security issues are documented here.Wallet connection issues in the front end solved. One remaining bug where connecting wallet from the projects page sometimes causes the beneficiary field of payments.DefiYield auditors seems to have dropped off. Need to follow up again.Focus on security now moved to V2. Documentation, tests, audits, etc. Help needed: It'd be great if more folks could help write tests and review the code and documentation as it gets done. We should collaboratively mold this into its final, secure form. "},{"title":"Web experience​","type":1,"pageTitle":"Project updates 9/7/2021","url":"blog/project-update#web-experience","content":"Goal: Improve the Juicebox experience both for people starting communities and for communities that are growing. Current team: peri (lead), jango, exekias Updates: New analytics data in project dashboards. Still room to grow, more data sourced into The Graph and ready to use.  New wallet connection integration. Can now connect with many other wallets with BlockNative integration.Progress on Github issues backlog.Wording in the interface being reconsidered: &quot;staking&quot; vs &quot;claiming&quot;. Researching different UIs for different treasury types. Help wanted: Backlog at https://github.com/jbx-protocol/juice-juicehouse/issues "},{"title":"DAO relations​","type":1,"pageTitle":"Project updates 9/7/2021","url":"blog/project-update#dao-relations","content":"Goal: Work towards making sure JB projects and the JB community have the resources and attention they need to get started and thrive. Current team: nati (lead), jango, nicholas, mieos, zeugh Updates: Gitbook updates underway. Walkthrough, explanation of processes. Working with Whiteboard crypto, UltraDao, BeatsDao.Focusing on established DAOs. Might refocus to newer DAOs later.People should forward questions from #support and from other JB projects to Nati to aggregate into docs. "},{"title":"Analytics​","type":1,"pageTitle":"Project updates 9/7/2021","url":"blog/project-update#analytics","content":"Goal: Give projects rich insights into their community treasury. Current team: peri (lead), buradorii Updates: Most updated in the UI under the &quot;Web experience&quot; focus.Experimenting with what data can be accessible in the UI.No updates on Flipside or Dune analytics.People want to see current token holders for each projects.People want to see current FC vs upcoming FC.People want to see the price the treasury token is being sold at over time.People want to see the percent of the tokens that they will own at the time of making payments.People want to be able to play out funding cycle scenarios before making reconfigurations. Open to help: Index more Subgraph events.Display discount rates (tokens/ETH) of past funding cycles. "},{"title":"Liquidity pools​","type":1,"pageTitle":"Project updates 9/7/2021","url":"blog/project-update#liquidity-pools","content":"Goal: Add support for JB treasury tokens in secondary markets for communities to be able to value their assets better. Current team: exekias (lead), jango Updates: Experimenting with Synthetix staking rewards contracts: https://github.com/jbx-protocol/staking-rewards.Fleshing out UI prototypes: Help wanted: Comms with JBX project owners (e.g., SHARK) to understand their needs from a staking reward/LP perspective.Devs with staking rewards expertise. "},{"title":"NFT Marketplace​","type":1,"pageTitle":"Project updates 9/7/2021","url":"blog/project-update#nft-marketplace","content":"Goal: Give JB projects a place to sell digital (and eventually physical) goods which pipe percentages of revenue to any number of addresses or Juicebox treasuries. Current team: nicholas (lead), jango, peri Updates: Big demand from SharkDAO (and others?).Draft of contract looking good.Plan for V1 is no UI on juicebox.money, make bare bones JS SDK/library with/for Shark to build a NFT MKT into their forthcoming website. Need to finalize what will be included in v1, and what won't.Specification draftGithub repo (private for now) Goals: Finalize spec for v1Get a working v0 implementation on Rinkeby by Monday 2021-09-13 EODGet a basic 721 contract together to mint NFTs that we can submit to the marketplace Help needed: Jango will help with contract implementation and testing (thank you –nicholas)Next week open to help starting building a JS SDK "},{"title":"Governance​","type":1,"pageTitle":"Project updates 9/7/2021","url":"blog/project-update#governance","content":"Goal: Plan out how we will make decisions together. Current team: zheug (lead), unicornio, 9birdy9 Updates: Trying coordinape to test a reputation system. The epoch system feels good, didn't give us the easy integration to voting that we needed after the epoch. We're still wroking on our basic model for how to make decisions. Need to balance governance power between token holders and reputation/contributions but we haven't got a way to test it yet.We can, at the moment, take the csv of reputation distributed after the Epoch, but are still looking on how to import those in a strategy to snapshot. Need help from more dev oriented folks to communicate coordinape results onto snapshot. Help needed: We need some dev/snapshot help to integrate our new governance system into a snapshot strategy. "},{"title":"Protocol upgrades​","type":1,"pageTitle":"Project updates 9/7/2021","url":"blog/project-update#protocol-upgrades","content":"Goal: Evolve the protocol to be more useful. Current team: jango (lead), peri, exekias, nicholas Updates: V2 has been announced here.Reviewed V2 with Peri, Exekias, and Nicholas, got very valuable feedback that is being iterated on.Docs for V2 are in progress here. Help needed: Same as in the &quot;Risk mitigation&quot; section. "},{"title":"Materials​","type":1,"pageTitle":"Project updates 9/7/2021","url":"blog/project-update#materials","content":"Goal: Videos/visuals/memes/stuff that radiates Juicebox vibes. Current team: WAGMI studios This is a new section that will have updates next time "},{"title":"Project updates 9/21/2021","type":0,"sectionRef":"#","url":"blog/project-updates-9-21-2021","content":"","keywords":""},{"title":"Focus areas​","type":1,"pageTitle":"Project updates 9/21/2021","url":"blog/project-updates-9-21-2021#focus-areas","content":""},{"title":"Risk mitigation​","type":1,"pageTitle":"Project updates 9/21/2021","url":"blog/project-updates-9-21-2021#risk-mitigation","content":"Goal: Make sure things don't go to zero. Current team: jango (lead), exekias, peri. Updates: nothing to report. Help needed: Reviewing V2 docs and tests.Bug bounties now included in the V2 documentation that's underway. "},{"title":"Protocol Updates​","type":1,"pageTitle":"Project updates 9/21/2021","url":"blog/project-updates-9-21-2021#protocol-updates","content":"Goal: Evolve the protocol to be more useful. Current team: jango (lead), peri, exekias, nicholas Updates: Progress on documentation. JBSplitStore, JBOperatorStore, JBPrices, and JBProjects are fully documented. See Protocol section of docs.juicebox.money.Bug bounties now included in the V2 documentation Help needed: More eyes on the docsPursue leads for solidity audits in next 4-6 weeks "},{"title":"Web experience​","type":1,"pageTitle":"Project updates 9/21/2021","url":"blog/project-updates-9-21-2021#web-experience","content":"Goal: Improve the Juicebox experience both for people starting communities and for communities that are growing. Current team: peri (lead), jango, exekias Updates: Added feature for JB Project owners to update assets listed in the Project UIwill eventually support 721 assets, too'Pay' button Call to Action can now be customizedRinkeby supportJB Interface now has its own dedicated repo and issue tracking https://github.com/jbx-protocol/juice-interface Help needed: Backlog of todos https://github.com/jbx-protocol/juice-interface/issuesWould love to bring on a dedicated person to get familiar with the UI codebase "},{"title":"Analytics​","type":1,"pageTitle":"Project updates 9/21/2021","url":"blog/project-updates-9-21-2021#analytics","content":"Goal: Give projects rich insights into their community treasury. Current team: peri (lead) Updates: Contribution pipeline being refined. Subgraph now has a dedicated repo with a streamlined deployment flow. Analytics roadmap being refined as steps for V2 migration become clearer. Subgraph Deep Dive Help needed: Work/todos being tracked here https://github.com/jbx-protocol/juice-subgraph/issues "},{"title":"DAO relations​","type":1,"pageTitle":"Project updates 9/21/2021","url":"blog/project-updates-9-21-2021#dao-relations","content":"Goal: Work towards making sure JB projects and the JB community have the resources and attention they need to get started and thrive. Current team: nati (lead), zeugh, mieos, nicholas, jango  Updates: Jango and others converting people from DMs into discord members.Lots of people coming into the DAO relations channel.Pencil DAO created without any interaction with team. BrainDAO and others coming online.Idea: Daoification Hackathon to help JuiceboxDAO members feel more comfortable onboarding others.Meeting with largest single contributor: Conversation with Tom Schmidt of Dragonfly CapitalLots of progress in Notion: Tools section, How to section.Meeting notes becoming standardized and recordings much more frequentGitbook docs welcome page and contract addresses added.Zeugh bought Sesh pro. Help needed: Project lead on Daoification hackathon where anyone can join in and create a bunch of projects on rinkeby to be more comfortable configuring and reconfiguring a JB.Project lead needed to design and implement faster easier way to create &quot;a DAO for your group chat&quot;. Can this be done with a Discord bot?Help NeededFeedback to Zeugh for discord restructuring.Adding info to Tools.More people willing to record calls and upload. "},{"title":"Liquidity pools​","type":1,"pageTitle":"Project updates 9/21/2021","url":"blog/project-updates-9-21-2021#liquidity-pools","content":"Goal: Add support for JB treasury tokens in secondary markets for communities to be able to value their assets better. Current team: exekias (lead), jango Updates: No updates. Core dev team is focusing on V2 for the time being.Might be a good move to fork the BarnBridge rewards contracts instead of the synthetix ones.  Help needed: Someone to help test, verify, and deploy the staking contracts. "},{"title":"NFT Marketplace​","type":1,"pageTitle":"Project updates 9/21/2021","url":"blog/project-updates-9-21-2021#nft-marketplace","content":"Goal: Give JB projects a place to sell digital (and eventually physical) goods which pipe percentages of revenue to any number of addresses or Juicebox treasuries. Current team: nicholas (lead), jango, peri Updates: Looped in Peri and Mieios for NFTMKT specification feedback meeting. Reprioritized NFTMKT, JB devs will do a sprint this coming week, Sept 27, 2021 Nailed down V1 spec with Peri's help. Updated architecture, replacing submit with list function, which will save on gas.Reaffirmed permisionless design of NFTMKT and v2+ roadmap. We will also stand up a couple 721 Creator contracts so artists collaborating with JB projects (e.g., Numo with Sharkdao) can create superior NFTs than on the OpenSea creator contract, which is closed source, centrally hosted metadata by default, and a shared contract. We anticipate one 721 contract for closed collections (where token supply is known in advance) and one open minting collection (where artist can add over time). Nico already has a closed collection contract that we can refine. Can also build a simple front-end to make this easy for artist collaborators (and the broader NFT ecosystem). We continue to experiment with ideas about spinning NFTMKT off into its own JB project because the opportunity is large, and we believe that small teams working on focused projects are more effective than one overwhelmingly large vertically integrated JB protocol team. Perhaps initially staffed by same dev team as JB. Can focus on NFTMKT and the creator contracts. Could collect a fee for NFTs sold through the marketplace (2.5% like opensea?) or could be free. If it had revenue it would have more opportunity to expand dev team. Also thinking about token-swaps between NFTMKT and JB 📈🤝. Increasing belief that NFTMKT will solve the DEX vs JB dilemma facing DEX-traded DAO tokens, where the DEX is always a better price than the JB, by game-theoretic definition. This limits DAOs' ability to fundraise because DEX trades do not affect DAO treasuries. NFTMKT will allow DAOs like Shark to largely replace direct-to-JB appeals. DEX purchases may still offer cheaper DAO tokens than the NFTMKT, but buyers will not get access to limited edition NFTs via the DEXes. NFTMKT will also be more fun and easy to use for NFT acclimated, compared to JB or DEXes which are unfamiliar to many in that space.The team is very excited about the promising design specification and roadmap for the NFTMKT.Nicholas also discussed with Mieos affordances in the 721 contracts that will enable WAGMI to create NFTs on behalf of client DAOs. Achievable design requirements even within the V1 spec. Help needed: Review read methods &amp; TheGraph events with Exekias or Peri this coming weekNico x Jango will collab to finalize v1 NFTMKT solidity Nico to talk to Pencil DAO "},{"title":"Governance​","type":1,"pageTitle":"Project updates 9/21/2021","url":"blog/project-updates-9-21-2021#governance","content":"Goal: Plan how we make decisions within the community.  Current team: 9birdy9 (lead), zheug, jango, unicornio Updates: New voting processFinalized proposal processNew governance process: Governance Includes Proposal Templates for each common type of proposal. All JBX holders participate in votes that affect big picture JBX variables. Changes to recurring payouts are voted on by addresses currently receiving payouts as they have greatest insight and are most affected by such changes. Changes to reserved token allocation voted on by addresses currently receiving reserved tokens as they are most affected. Addresses receiving payouts are expected to vote. Discussion about whether large token holders and people on reserved list should have max voting capacity or some quadratic strategy that limits outsized impact.First trial of these new templates in current governance process.@9birdy9's trial payout proposal is the first proposal sent to snapshot according to these forms.FC5 reserved JBX tokens will be passed without a formal snapshot for lack of sufficient time to complete our governance snapshot process. We will use snapshots for future reserved token proposals.Creation of BANNY gov participation incentivisation token — An airdrop is in the works.  Help needed: Refining governance process:Creating informational foundations to keep people up to date on governance proposals/timelines.  "},{"title":"Materials​","type":1,"pageTitle":"Project updates 9/21/2021","url":"blog/project-updates-9-21-2021#materials","content":"Goal: Videos/visuals/memes/stuff that radiates Juicebox vibes. Current team: WAGMI studios Updates: WAGMI producing cultural contentPublished overflow video Help needed: Feedback on contentHow can WAGMI help juicebox projects launchHelping onboardDeveloping visual identity (cultural material) "},{"title":"Tips on Starting a Successful Juicebox Project by Synth","type":0,"sectionRef":"#","url":"blog/tips-on-starting-a-successful-juicebox-project","content":"","keywords":""},{"title":"Tips for Starting a Successful Juicebox Project​","type":1,"pageTitle":"Tips on Starting a Successful Juicebox Project by Synth","url":"blog/tips-on-starting-a-successful-juicebox-project#tips-for-starting-a-successful-juicebox-project","content":"Before starting a project on Juicebox, take some time to consider how you’re going to incentivize contributions. Juicebox has become a platform to support a thriving ecosystem of DAOs, who are all at different points in their development. It can be tough to stand out through the noise and develop a key marketing strategy for your project or DAO. Starting a successful web3 project is hard work with most projects on JuiceBox failing to attract more than 1 ETH in contributions. Here are 3 tips for giving investors confidence and encouraging ETH contributions for you DAO, that I’ve learned from my time assisting at SharkDao. "},{"title":"Have reputable signers for the multisig and a plan for how those funds are released.​","type":1,"pageTitle":"Tips on Starting a Successful Juicebox Project by Synth","url":"blog/tips-on-starting-a-successful-juicebox-project#have-reputable-signers-for-the-multisig-and-a-plan-for-how-those-funds-are-released","content":"One of the first questions I ask when analyzing DAOs is “how are the funds secured?” If you’ve been paying attention to DeFi news recently you’ll have heard of the Wonderland fiasco, where one member with a shady history was allowed to manage the treasury of the DAO. This has not bode well for $TIME price action and the Wonderland community. Having reputable signers to properly store and distribute finds is crucial to the success of a DAO, no matter how big the treasury is. The most common way to secure funds is to have multiple signers on Gnosis safe (more info here) to ensure that not any single person can rug the project. Many DAOs I’ve seen get past the first step of having a gnosis safe in the first place instead of just one wallet, but then fail the second part of security which is having reputable signers. Having singers that check off at least some of these boxes can be a big confidence boost for potential members looking to invest into your project. A signer with an established presence on twitterA signer involved in multiple projects throughout the crypto spaceA signer who is doxxed and is reputable outside of the metaverseA member of the Juicebox teamA member of a different prominent DAO or multisig signer.A paid reputable neutral party to assist with signing (crypto funds, institutions, etc.) Ask around on discord and twitter, and you may be pleasantly surprised by the generosity of the web3 community to assist in your DAO, and maybe even make a friend or two. "},{"title":"Have a tokenomics and governance strategy​","type":1,"pageTitle":"Tips on Starting a Successful Juicebox Project by Synth","url":"blog/tips-on-starting-a-successful-juicebox-project#have-a-tokenomics-and-governance-strategy","content":"If people are going to be contributing to your project, it helps to let potential new members know what exactly they are buying into. Slush funds, for vague and unspecified purposes are a red flag for potential rug pulls or honeypots on Juicebox. Before starting a project on Juicebox, it’s best to clarify to potential new members: what is the purpose of your projects coin? When someone contributes to your project, what does the token they get in return represent? Natively, Juicebox allows projects to enable token holders make a claim on a projects treasury, but beyond that token utility is only bound by social or legal agreements. Some ideas to add utility: Governance rights. Each token represents a single vote in off chain voting tools like Snapshot.Token gating. Requiring either one or multiple tokens to enter select or all discord sever channels.Claim on treasury. Juicebox allows projects to let token holders make a claim on a projects treasury, and burn coins for eth.Mint pass. Holding tokens allows you an ability to mint free or paid NFTs. Experiment, stand out, think of new and novel ideas for both your governance and tokenomics, and you’ll be far more likely to and attract attention to your project. "},{"title":"Have a friendly and inviting discord, fun and exciting twitter, and a thorough FAQ that is updated regularly.​","type":1,"pageTitle":"Tips on Starting a Successful Juicebox Project by Synth","url":"blog/tips-on-starting-a-successful-juicebox-project#have-a-friendly-and-inviting-discord-fun-and-exciting-twitter-and-a-thorough-faq-that-is-updated-regularly","content":"The first two touch points people are likely to have with your project are going to be your Twitter and Discord. Twitter and Discord have become the two go-to platforms for web3 communities, and are a tried and true recipe for success. Most web3 projects don’t ever launch to platforms like Instagram and Tiktok and still remain highly competitive. While other social media platforms may be helpful for your project, it’s best to stick to only twitter and discord, especially if you’re stretched for time and talent. If you market your twitter+discord well, it is far more effective than half a dozen social media platforms marketed mediocrely. Successful web3 projects are able to leverage their twitter to attract high quality community members, who often become key contributors. Potential members will find your discord and evaluate the strength of your project, often based on aesthetic values at a first glance. Here’s a checklist to help you make sure your socials are well maintained Twitter: Push twitter updates regularly. Daily is best, but at a bare minimum twice a week, or your project will start to appear absent and unmanaged.Reply and engage with other twitter accounts, don’t only push status updates.Have an engaging pinned tweet, and aesthetically pleasing profile picture+banner. First impressions are important.Offer giveaways and contests to encourage engagement (don’t overdo it!). When starting a discord, it’s important that there’s someone to greet new members, be friendly, and answer questions. This person of contact is often called a community manager (CM). In larger projects, there’s often a dedicated CM to do this job, but in smaller projects this job usually falls to someone on the founding team. Regardless of who is assigned to these tasks, it’s important that there always be someone answering questions and directing people to proper resources in a reasonable amount of time. Here are some tips to make a community managing less stressful, and more engaging for members. Discord: Keep channels to a minimum when possible.Clear and concise channel names and descriptions.Create an FAQ + resource guide and update it regularly. If a question is asked twice, it’s a frequently asked question. Chances are it will be asked a third time.Offer a fun and engaging role system for your discord. Some ideas: react roles where people can self assign, being helpful gets its own role, donators/investors get their own role.Same as twitter, offer giveaways and contests to encourage engagement (again, don’t overdo it!) Put time, love, and energy into your socials and you’ll attract both capital and talent to your project. -Synth "},{"title":"The power of token minting explained","type":0,"sectionRef":"#","url":"blog/the-power-of-token-minting-explained","content":"","keywords":""},{"title":"Tokens, a utility you shouldn’t go without​","type":1,"pageTitle":"The power of token minting explained","url":"blog/the-power-of-token-minting-explained#tokens-a-utility-you-shouldnt-go-without","content":"Arguably one of the most core aspects of web3 projects is the ability to mint, disburse and track tokens for your project. Token management is an area that every builder in the web3 space should take full advantage of; unfortunately, it’s also amongst the most neglected tools by new project creators. At Juicebox, we’ve created a robust and granular token management system that makes token management accessible for our project creators. We’ll delve into this tooling, along with the power of tokens in general. Read on the learn more! "},{"title":"Governance and so much more​","type":1,"pageTitle":"The power of token minting explained","url":"blog/the-power-of-token-minting-explained#governance-and-so-much-more","content":"One crucial aspect of token minting is how they relate to governance systems within DAOss. While you may or may not be creating a DAO, you should keep in mind that these very same governance systems can also be used informally to gauge your stakeholder interests in an effective and efficient way. You can choose to give tokens at your own discretion, or set certain metrics and tokenomic tooling to automatically generate and disburse tokens based on contributions made to your project. The Juicebox difference is in the rich tooling our platform provides project creators. "},{"title":"The lifecycle of a token built on the Juicebox protocol​","type":1,"pageTitle":"The power of token minting explained","url":"blog/the-power-of-token-minting-explained#the-lifecycle-of-a-token-built-on-the-juicebox-protocol","content":"How a token is used within the Juicebox protocol varies on a number of different factors and project creator settings. Let’s take a look at one particular path to help give you some insight into the lifecycle of an average token. You’ve created a project, and you’ve set a distribution limit (how much funding your project needs in a given time frame to keep the lights on). Let’s say that every two weeks your project needs to be bringing in $5,000. That amount will cover the costs of the team and any other expenses to keep your project running smoothly. Now let’s say somebody comes along and puts $2000 into your project. In exchange for contributing those funds, they get some amount of tokens (how many is completely determined by you). Furthermore, you may want to keep some tokens every time someone contributes funds, so you set something called a reserved rate, which is what percentage of tokens you keep. Let’s say you do 10%. So now 10% of all tokens created goes back to your project and sits in a treasury. Now fast forward. Many more people have contributed to your project, and at this point your distribution limit is still $5000 every two weeks, but on average you’re taking in a lot more than that. All those extra funds sit in your treasury. Those “extra” funds are called your overflow. Now let’s say one of your early investors, who has a lot of tokens for your project, wants to move on and get rid of his tokens. Rather than simply ignoring them, he can claim a percent of the overflow in your treasury proportional to how many tokens he has. If he has a lot of tokens, even though he may have initially just given you $2000 in funding, his tokens could be traded in for far more than that if your overflow is sufficiently large. What’s unique about this system is that it incentivizes contributors to your project to 1) stick around, and 2) to be actively invested in your success. Some people will never be interested in trading in tokens; they may see more utility in using the tokens for governance, or simply hanging on to them as a trophy and receipt of their contributions to you. However, for those who are hoping to eventually cash out with more than they invested, the token redeeming exchange allows for this scenario if your project has become sufficiently successful. Let’s say that first investor burns all his tokens, and gets back $3000. He’s made a profit of one thousand dollars. By redeeming the tokens, he has taken them out of circulation and they have been destroyed. He’s made $1000 in the exchange, and you managed to attract an investor early on when you needed funding more. "},{"title":"An overview of Juicebox tooling​","type":1,"pageTitle":"The power of token minting explained","url":"blog/the-power-of-token-minting-explained#an-overview-of-juicebox-tooling","content":"Where Juicebox really shines is in its ability to give project creators full control over the tooling they wish to employ in their projects. There is a rich help section along with a glossary on info.juicebox.money, but for a brief overview read on to learn some of the basics. "},{"title":"Distribution Limit​","type":1,"pageTitle":"The power of token minting explained","url":"blog/the-power-of-token-minting-explained#distribution-limit","content":"The easiest way to think of this is by answering this question: how many funds do you need to keep the lights on for your project, and how frequently do you need them? Do you have a dev team that needs to be paid, or server hosting fees, a content writer, etc.? Whatever those costs amount to will tell you the amount of funds you need to keep your project stable and going forward. Do you need $2000 every two weeks? $1000 every ten days? $5000 a month? Whatever time and amount you need is what you will declare as your “distribution limit” when you create a JB project. "},{"title":"Overflow​","type":1,"pageTitle":"The power of token minting explained","url":"blog/the-power-of-token-minting-explained#overflow","content":"If your project receives more funds than you declared in your distribution limit, those extra funds will sit in a treasury. These extra funds are called overflow. Token holders can at any time redeem their tokens (trade in their tokens) for a portion of the value of overflow in your project. If your project has huge overflow because it has become very successful, then token holders can get a piece of that success by redeeming their tokens. "},{"title":"Reserve Rate​","type":1,"pageTitle":"The power of token minting explained","url":"blog/the-power-of-token-minting-explained#reserve-rate","content":"The reserve rate is what percentage of tokens you keep every time you mint tokens. You can set this anywhere from zero to one hundred percent or in between. Setting a reserve rate allows your project to accrue tokens. Not having a reserve rate means that all tokens you mint will go to contributors. "},{"title":"Redemption Rate​","type":1,"pageTitle":"The power of token minting explained","url":"blog/the-power-of-token-minting-explained#redemption-rate","content":"The redemption rate is something you set that determines how much value redeemed tokens will have based on when they are redeemed. If somebody redeems their tokens right away, they will get less proportional overflow value than someone who waits until later to redeem their tokens. A redemption rate incentivizes people to stick around as your project grows, and it disincentivizes investors who are just looking to make a quick buck. You can set an aggressive or weak redemption rate, or none at all, when you create a Juicebox project. "},{"title":"Weight​","type":1,"pageTitle":"The power of token minting explained","url":"blog/the-power-of-token-minting-explained#weight","content":"The term weight simply means how many tokens or other assets, such as NFTs, a contributor will receive for a set amount of contribution. For instance, a contributor who puts $1000 into your project may receive a million tokens (if you so choose). "},{"title":"Burning versus Redeeming tokens​","type":1,"pageTitle":"The power of token minting explained","url":"blog/the-power-of-token-minting-explained#burning-versus-redeeming-tokens","content":"Whenever someone gives back their tokens, those tokens are destroyed permanently. If a token holder gives back tokens for a share of the overflow, we call this “redeeming” the tokens. Let’s say, however, that there is no overflow. In that case, the tokens are still traded in and destroyed, but they don’t yield any value back. When this happens, we call it “burning” tokens. "},{"title":"Putting it all together​","type":1,"pageTitle":"The power of token minting explained","url":"blog/the-power-of-token-minting-explained#putting-it-all-together","content":"The importance of JB really sits with the excellent tooling suite you receive by using it. Regarding pricing, JB takes 2.5% of all funds raised on a project. In exchange for that you receive the JB tooling and use of the protocol which gives you a no-code solution to your web3 needs. Want more? Come check us out at juicebox.money, and swing by our discord and say hello. Starting a project? Check out our blog and web3 literacy center, Juicebox High. "},{"title":"Unbridled Creativity: The DAO experience through the lens of Cryptovoxels","type":0,"sectionRef":"#","url":"blog/unbridled-creativity","content":"","keywords":""},{"title":"A new way to wind down​","type":1,"pageTitle":"Unbridled Creativity: The DAO experience through the lens of Cryptovoxels","url":"blog/unbridled-creativity#a-new-way-to-wind-down","content":"The DAO space online isn’t like your average experience working at a company or corporation. Unlike the physical environment of offices, cubicles, and maybe the occasional beanbag chair if you happen to work at one of those fun places, the online space where DAOs operate is free from constraints and incentives. It’s a space where people create for the sake of it, and pool effort together as a means of expression. Don’t get me wrong, there are plenty of endeavors out there that seek to make money, but the crucial difference is about what we call the bottom line, and what it looks like in a DAO space versus traditional settings. Enter Cryptovoxels: an online space where participants can congregate, listen to music together, and even enjoy a “live” show in a virtual environment (pictured above). The Cryptovoxels space isn’t unique for what it is— plenty of paid spaces exist that try to achieve the same goal. The reason Cryptovoxels is unique is precisely for what it isn’t. It’s not about raising money, or pandering to users for shares and likes and what have you. It’s a space to wind down and enjoy together in a uniquely anti-consumerist experience. A space where creatives, programmers, technical writers, holders and any and all between can congregate for the sake of it.A lounge in the Cryptovoxels space "},{"title":"Creating for the sake of it​","type":1,"pageTitle":"Unbridled Creativity: The DAO experience through the lens of Cryptovoxels","url":"blog/unbridled-creativity#creating-for-the-sake-of-it","content":"Spaces like Cryptovoxels are unique because of how they come about. In a traditional work environment or major corporation, somebody at the top may have an idea to create a space such as Cryptovoxels. From there, the idea would distill as it trickled down the workforce, ultimately culminating in strict directives and program managers. In other words, the project would itself become work— anathema to its very purpose! In the DAOsphere, the whole process is put on its head. Eager community members, excited to contribute to a greater organization, and at times simply wanting to spin their wheels, generate projects such as Cryptovoxels not in order to make money, not in order to boast, not in order to monetize an experience, but, rather, simply to enjoy a moment— a happening, a vibe— with one another in a shared space. Where else can we say that this is the case?A Cryptovoxel room, replete with revolving door and anonymous puppet avatar) "},{"title":"Web 3.0 is a state of mind​","type":1,"pageTitle":"Unbridled Creativity: The DAO experience through the lens of Cryptovoxels","url":"blog/unbridled-creativity#web-30-is-a-state-of-mind","content":"The spaces engendered by an overall feeling toward collaboration, decentralization and egalitarian work-force options are encapsulated by Cryptovoxels. They’re spaces that uniquely represent a way of thinking about the world and its members differently than before. They represent an open view of the world that seeks to collaborate into greater and greater projects without, importantly, treating everything in accordance with it’s bottom-line monetary value. The era of web 3.0 is ushering in a way of thinking inclusively and openly about collaboration unlike anything we’ve seen before. The irony that the same Web 3.0 that brought us NFTs of just about everything can also bring us closer together in a completely non-exploitative way is rich, to be sure. But seeing this irony as a beauty, rather than a contradiction, is probably a better representation of the spirit of our times. "},{"title":"Where Are They Now? With filipv","type":0,"sectionRef":"#","url":"blog/where-are-they-now-filipv","content":"","keywords":""},{"title":"Filipv: where is he now?​","type":1,"pageTitle":"Where Are They Now? With filipv","url":"blog/where-are-they-now-filipv#filipv-where-is-he-now","content":"Filipv is still comfortably engaged with JB initiatives around governance, populating the YouTube channel, and serving as MC for town hall’s, among many other things. You can find filipv in the general chat always helping out, or across the discord helping to craft and curate threads and proposals as needed. It was his invisible hand that guided this very article into the ether that is our web3 blog. On the heels of an engaging discussion that took place in the after-party of the last JB town hall, I also decided to ask filipv some pointed questions about his feelings on mayonnaise. His answers, as you may expect, did not disappoint. And finally and perhaps most importantly, filipv announced that he is working on his very own NFT music project. It’s all very hush hush at the moment, but he looks forward to sharing more when the time is right. "},{"title":"The Horse’s Mouth​","type":1,"pageTitle":"Where Are They Now? With filipv","url":"blog/where-are-they-now-filipv#the-horses-mouth","content":"If you’d like to delve further into any of the revelations above, please find a carefully curated video of filipv being interviewed about his ambitions, his mic technique, and mayonnaise. He didn’t end up winning the golf game, but he’s clearly winning at life. And please excuse the awful audio— my mic technique is nothing to write home about. Enjoy!  "},{"title":"How to Make a Governance Proposal","type":0,"sectionRef":"#","url":"dao/proposals","content":"How to Make a Governance Proposal Note: Juicebox DAO operates on a 14 day governance cycle which you can read about here. You can see where we are in the current cycle on the Governance Cycle Calendar. The revision process can cause a proposal to take more than one funding cycle to reach the Juicebox snapshot. Honest and plain feedback in Discord proposal threads is encouraged. In order to create a new proposal: Visit the proposals database. Click the ⬇ next to &quot;New&quot; (pictured below) and select 📜 Proposal Template Fill out the template by following the Proposal Template Guide. Once you've answered each question to the best of your ability, change your proposal’s status (the first Notion field at the top of the document) from Draft to Discussion. A discussion thread for your proposal will be generated in the #💡-proposals channel of Juicebox's Discord server. From there, community members will help you to prepare the proposal for the next temperature check.","keywords":""},{"title":"WHY Juicebox for NFT Projects?","type":0,"sectionRef":"#","url":"blog/why-juicebox-for-nfts","content":"","keywords":""},{"title":"1. Basics of Juicebox​","type":1,"pageTitle":"WHY Juicebox for NFT Projects?","url":"blog/why-juicebox-for-nfts#1-basics-of-juicebox","content":"Juicebox allows people and communities to crowdfund their project and give their contributors a stake as community tokens (ERC20) in return. Once funds have been raised, the protocol can be leveraged to automate payments from the treasury in a controlled, transparent and decentralized fashion. "},{"title":"2. Why Juicebox NFT projects are better​","type":1,"pageTitle":"WHY Juicebox for NFT Projects?","url":"blog/why-juicebox-for-nfts#2-why-juicebox-nft-projects-are-better","content":"Juicebox NFT projects are a win-win for both communities and owners. There are countless ways you can configure your Juicebox project for your specific goals, but here’s a general strategy we recommend for NFT projects: Instead of sending your NFT royalty fees directly to the owner’s wallet, you can send them to a shared treasury owned by your community. Upon buying an NFT (and paying the royalty fee), the new owners of your NFT’s would automatically receive an amount of your community tokens proportional to their purchase amount. The more someone pays for an NFT, the more tokens they receive. This gives your community members a formal and quantifiable stake in the shared treasury - your project as a whole. Your community could also contribute and gain stake in your project by just buying tokens, not necessarily having to own an NFT. "},{"title":"For communities​","type":1,"pageTitle":"WHY Juicebox for NFT Projects?","url":"blog/why-juicebox-for-nfts#for-communities","content":"Token value​ You can use these tokens for anything you want, perhaps governance, raffles or exclusive access to future drops. But a unique feature of Juicebox is that it allows the option for these tokens to be redeemed by community members for a portion of your project’s treasury. As the pie grows over time, a contributor’s tokens will be worth more. Your community can gain on top of just the increase in value of their NFT’s. Having a shared treasury is optional, however, and you could instead just have all royalty fees sent to the Juicebox project route straight to the creators. In this case, the token your community receives could not be redeemed for any ETH. Your community can gain on top of just the increase in value of their NFT’s. Trust and transparency​ Firstly, a properly configured Juicebox project makes rug-pulls impossible. You can give your community time to react before any changes to your funding and spending parameters take effect. Additionally, your Juicebox page shows exactly how all your funds are flowing - how much and where it’s coming from, and where those funds are subsequently being spent. The only way funds can leave the treasury is by configuring and scheduling a payment, for which your community will always have time to react to.  Spending (left) and income (right) shown on a project’s Juicebox page You may be asking, “Ok I see the benefit for my community, but what’s in it for the owner?&quot; "},{"title":"For owners​","type":1,"pageTitle":"WHY Juicebox for NFT Projects?","url":"blog/why-juicebox-for-nfts#for-owners","content":"Maintain a high stake in your project using the Reserved Rate.​ If you choose the option of your token holders being able to redeem from a shared treasury, we should mention that as an owner you can control exactly how much stake you maintain of this treasury over time. The reserved rate allows you to keep a portion of all newly minted tokens. A 50% reserved rate means you will maintain a 50% ownership of treasury no matter how big your project gets. This is mostly irrelevant if you don’t want a shared treasury and to simply route all funds into the project straight to creators. Allow for people to contribute to your project without buying an NFT and, therefore, raise more funds.​ This model opens up a massive and mostly untapped market of people interested in investing in an NFT project without necessarily buying an NFT. Whether it be too high of a floor price, not wanting to go through the whole selection/auction/listing process, or anything else, Juicebox opens the door of your project to these people through community tokens. Consider if the projects like the Bored Apes had followed this model - how much more funds could the creators have raised as a result of people buying some stake worth less than the purchase price of a Bored Ape? How much more funds could the [Bored Apes] creators have raised as a result of people buying some stake worth less than the purchase price of a Bored Ape? Automate payments to key members of your team.​ If you’re going for the shared treasury approach, Juicebox allows you to pre-program specific distribution amounts from your treasury to any ETH address, e.g. pay vitalik.eth US$1000 every week. This saves the hassle of manually transferring funds to your team from your personal or shared multisig wallet. Otherwise, as mentioned prior, you can simply route all funds from the project to creators and their teams. "},{"title":"3. What does it cost?​","type":1,"pageTitle":"WHY Juicebox for NFT Projects?","url":"blog/why-juicebox-for-nfts#3-what-does-it-cost","content":"Up front, all Juicebox costs is gas. As of the 23th of May, it’s about US$150-200 worth of gas to launch your project, deploy your own ERC20 token and a payable ETH address for you to link your royalty fees to. Then, for any funds you end up withdrawing from your project’s treasury, you’ll pay a 2.5% fee to Juicebox. But, for this 2.5% cut of your payout distributions, you’ll receive Juicebox’s native token (JBX) in return at its current issue rate. Moreover, your fee will give you a growing stake of Juicebox’s expanding ecosystem and treasury. "},{"title":"Conclusion​","type":1,"pageTitle":"WHY Juicebox for NFT Projects?","url":"blog/why-juicebox-for-nfts#conclusion","content":"If this has already been enough information for one reading, feel free to tap out now. But if we’ve piqued your interest at all, you may want to read on about exactly how you’d setup your Juicebox NFT project here (https://docs.google.com/document/d/1Xqj5AyG8pZcpdtbxYfOzqwIaMNyrhQZPfVhfsUpYw1M/edit). Alternatively, come hangout in our Discord and arrange an onboarding call if you’re interested in learning more. Happy Juicing!! Disclaimer: This is not financial or legal advice. As always, speak with an expert and do your own research. "},{"title":"Official Links","type":0,"sectionRef":"#","url":"dao/links","content":"Official Links Website​ juicebox.money Testnet juicebox.money JuiceboxDAO Project Resources​ Notion, Wiki, and Proposals Docs Dune Dashboards Brand Kit Moody's DAO Diligence Database Site Analytics and Docs Analytics Social​ Twitter Discord Juicebox Cryptovoxels Lounge Blog YouTube Dev​ Github Docs Governance​ Snapshot Snapshot Delegation Governance Process Juicebox DAO Foundation Governance Calendar Juicebox DAO Accounting Token Addresses​ $JBX ERC-20 Token (Claimed): 0x3abf2a4f8452ccc2cf7b4c1e4663147600646f66 $JBX (Claimed + Unclaimed), call totalSupplyOf(1): 0xee2eBCcB7CDb34a8A822b589F9E8427C24351bfc","keywords":""},{"title":"How to Contribute","type":0,"sectionRef":"#","url":"dao/contribute","content":"","keywords":""},{"title":"A Permeable DAO​","type":1,"pageTitle":"How to Contribute","url":"dao/contribute#a-permeable-dao","content":"JuiceboxDAO strives to maintain an open contribution policy. Anyone may pitch in and help with any of the Focus Areas defined in the DAO Foundation, such as protocol and frontend development, community alignment, and governance. Unlike traditional workplaces, the DAO is open to pseudonymous contributors (&quot;anons&quot;). New contributors are not expected to present a resumé or any other identifying material. The DAOs permeability to new contributors with no substantial reputation informs its contributor onboarding structure. To welcome new contributors, many of whom have little to no reputation online, the DAO suggests that contributors consider the following process to successfully onboard as a paid contributor "},{"title":"How can I start contributing to Juicebox DAO?​","type":1,"pageTitle":"How to Contribute","url":"dao/contribute#how-can-i-start-contributing-to-juicebox-dao","content":"If you’re looking for ways to get started, check the tasks database. This page functions as a “to-do list” for the DAO, keeping track of future goals and tasks that are in-progress. If you have a contribution idea that isn’t already in the database, feel free to either add it yourself or send a message in our Discord. "},{"title":"How can I get rewarded as a new contributor?​","type":1,"pageTitle":"How to Contribute","url":"dao/contribute#how-can-i-get-rewarded-as-a-new-contributor","content":"Once you have made some contributions, the next step is to submit a proposal for a Payout Trial Period in the proposals database. These proposals are typically payments of $300-600 for 1-3 cycles, used to gauge contributor fit with the DAO. For more information on making a proposal, look at How to Make a Governance Proposal. "},{"title":"How can I advance to recurring payouts?​","type":1,"pageTitle":"How to Contribute","url":"dao/contribute#how-can-i-advance-to-recurring-payouts","content":"Once you have completed a Payout Trial Period, it is recommended that you fill out a Recurring Payment template in the database. This template will ask you to explain what you have done so far and how you plan to contribute to the community going forward. It is encouraged for recurring payouts to be renewed/updated every 90 days. "},{"title":"What should I do next​","type":1,"pageTitle":"How to Contribute","url":"dao/contribute#what-should-i-do-next","content":"Join the Discord.Join the weekly Town Halls if possible (Tuesday 22:00 UTC).Read the most recent cycle of governance proposals (or more, if you are able).Read the recent message history in relevant Discord channels to familiarize yourself with the high level ongoing projects in the DAO, and details of the areas you wish to contribute to. Reach out to active contributors in the channels related to work you’d like to help contribute. Ask what you can help on or propose a new work action.Participate in the DAO for 1-2 weeks before asking for a payout.Write a governance proposal for a Trial Payout (see recent trial payout proposals to size the payout). See How to Make a Governance Proposal.If you would like to continue after the initial trial payout period, write another trial payout proposal, or a recurring payout proposal. You may want to talk with other contributors first to feel out which makes sense. Note: In order to get paid by Juicebox DAO, you will need to have a cryptocurrency wallet. You can read more about wallets here. "},{"title":"Juicebox DAO Foundation","type":0,"sectionRef":"#","url":"dao/foundation","content":"","keywords":""},{"title":"Mission statement​","type":1,"pageTitle":"Juicebox DAO Foundation","url":"dao/foundation#mission-statement","content":"What the DAO works toward JuiceboxDAO helps people confidently run programmable and community funded treasuries from startup to scale, openly on Ethereum. "},{"title":"Values​","type":1,"pageTitle":"Juicebox DAO Foundation","url":"dao/foundation#values","content":"Who we are We're builders. The decisions we make prioritize those building, and we trust those who we've delegated responsibilities to.We're focused. We encourage one another to focus on the commitments we've made to the DAO, and keep each other accountable to them.We're supportive. We're here to help, and we communicate in a way that empowers one another.We're listeners. We are humble with our knowledge, and seek balance between urgency and patience.We're honest. We are each unique selves, and we communicate our individual ideas openly and with clarity. We express ourselves and exchange feedback with this in mind.We’re stewards. We respect the opportunity to help set a tone for what it means to build on the open internet together. Focus areas​ Where the DAO focuses its resources (No particular order) Protocol Define, optimize, test, monitor, and document the Juicebox protocol. Community alignment Help members of the JB community get the resources and attention they need to get started and work together. Web3 ecosystem Position JB to work with and help other public DAOs, tools, and services to safely widen opportunities for all in Web3. Onboarding Help people launch their projects on JB and build extensions to the protocol through active Q&amp;A availability, providing useful documentation, and helping shape the information architecture of web clients. Governance Plan out how we will make decisions together as the DAO scales, and keep it accountable to its agreed upon decision-making schedule. Legal Work towards the legal clarity necessary to make JB a welcoming DAO where anyone can contribute with confidence to any focus area and get compensated for their work. Data viz Give projects rich insights into their community, and provide overview information about the JB protocol. Frontend Develop web clients for the protocol that make the user experience more empowering, reliable, and delightful over time. Juicebox ecosystem Stand up infrastructure to help projects running on the Juicebox protocol grow their decentralized communities and experiment with various treasury strategies. Visibility &amp; materials Create and propagate digital and physical publications, stickers, art, videos, memes, and other stuff that radiate JB vibes and tell our story. Dev ops Make it as easy as possible for people to build on JB by improving processes, tooling, and documentation for all developers. Mechanism Build models and tools to analyze Juicebox project configurations. Develop and implement utilities for tokens in the Juicebox ecosystem. Product, project, and program management Regularly define, assess, prioritize, and publicly communicate the goals and progress of what we’re working towards across focus areas. Membership​ What does it mean to be a JuiceboxDAO member DAO members are responsible for proposing and voting on: how the DAO's treasury funds are allocated.changes to the protocol the DAO has agreed to steward.changes to formal processes the DAO has agreed to follow.criteria for membership admission and boundaries for quitting. DAO membership is required by the people and projects who raise funds on the Juicebox protocol, is given to people who are currently stewarding its focus areas, and is open to people who choose to help fund its treasury. Membership is represented via the JBX token issued using the Juicebox protocol itself. Members can quit by burning any portion of their tokens at any time and take with them a portion of the treasury's funds. "},{"title":"Contracts","type":0,"sectionRef":"#","url":"dev/api/contracts/","content":"Contracts Contract\tDescriptionJBProjects\tStores project ownership and identifying information. JBTokenStore\tManage token minting, burning, and account balances. JBFundingCycleStore\tManages funding cycle scheduling. JBSplitsStore\tStores splits information for all groups of each project. Projects can create split groups for directing percents of a total token allocation to any address, any other Juicebox project, or any contract that inherits from the IJBSplitAllocator interface. JBPrices\tManages and normalizes price feeds. JBOperatorStore\tStores operator permissions for all addresses. Addresses can give permissions to any other address to take specific indexed actions on their behalf. JBDirectory\tKeeps a reference of which terminal contracts each project is currently accepting funds through, and which controller contract is managing each project's tokens and funding cycles. JBController\tStitches together funding cycles and project tokens, making sure all activity is accounted for and correct. JBETHPaymentTerminal\tManages all inflows and outflows of ETH funds into the protocol ecosystem. JBSingleTokenPaymentTerminalStore\tManages all bookkeeping for inflows and outflows of funds from any IJBSingleTokenPaymentTerminal. JBETHERC20ProjectPayer\tSends ETH or ERC20's to a project treasury as it receives direct payments or has it's functions called. JBETHERC20ProjectPayerDeployer\tDeploys project payer contracts. JBETHERC20SplitsPayer\tSends ETH or ERC20's to a group of splits as it receives direct payments or has its functions called. JBETHERC20SplitsPayerDeployer\tDeploys splits payer contracts.","keywords":""},{"title":"Year of the Dev","type":0,"sectionRef":"#","url":"blog/year-of-the-dev","content":"Devs aren't just coders. Anyone who recognizes genuine inefficiencies and makes themself useful toward delivering great solutions is a dev. filipv, STVG, twodam, zeugh, phytann, sage, mieos, nicholas, zom-bae, mrgoldstein, zhape, westlife29, linywan, peacenode, germs, gulan, and a few other JB friends don't contribute code to the core contracts or site, but they show up to dev everything else they recognize can add value: governance, tools, dev ops, analytics, Banny, cryptovoxels empire, Discord bots, podcasts, translations, education, bookkeeping, support, strategy etc. Devs are individuals, not entities. DAOs, VCs, corporations, campaigns, and projects may have great devs within them, but aren't devs themselves.Devs like to dev with other devs.Devs are often artful.Devs are never zero-sum thinkers.Devs should continue to improve how we build alongside each other at scale and audit each other's work along the way. More agency, less management.Leaders are devs who also delegate effectively between other devs. Any dev can be a leader, the more the merrier.Devs should continue to work towards improving the experience of other devs.Devs who build in the open have leverage. Resources follow devs.Power decentralizes as more people become devs.","keywords":""},{"title":"Governance Process","type":0,"sectionRef":"#","url":"dao/process","content":"","keywords":""},{"title":"Governance Schedule​","type":1,"pageTitle":"Governance Process","url":"dao/process#governance-schedule","content":"Day 1 - Temperature Check - Saturday (00:00 UTC) Day 4 - Snapshot Vote - Tuesday (00:00 UTC) Day 8 - Multisig Execution - Saturday (00:00 UTC) Day 12 - Reconfiguration Delay - Wednesday (19:19 UTC) Day 15 / Day 1 - Funding Cycle Updated - Saturday (19:19 UTC)  "},{"title":"Step 0 - Discussion​","type":1,"pageTitle":"Governance Process","url":"dao/process#step-0---discussion","content":"Proposals can be submitted to the Proposals Database at any time. Once a proposal is ready for discussion, authors can change the proposal Status from Draft to Discussion, which will automatically create a discussion thread in the JuiceboxDAO Discord Server. For more, see How to Make a Governance Proposal "},{"title":"Step 1 - Temperature Check​","type":1,"pageTitle":"Governance Process","url":"dao/process#step-1---temperature-check","content":"Begins on Day 1 of the Governance Cycle - Saturday 00:00 UTC A 3 day temperature check (react-vote Discord poll) will be created for each proposal submitted by day 1 of each Governance Cycle. During the temperature check, authors can update or redact their proposals based on the DAO's feedback. Executable proposals which receive at least 10 affirmative votes amounting to at least 30% of total votes will proceed to the next stage. Proposals must clearly specify multisig actions to be deemed executable. "},{"title":"Step 2 - Offchain Voting​","type":1,"pageTitle":"Governance Process","url":"dao/process#step-2---offchain-voting","content":"Begins on Day 4 of the Governance Cycle - Tuesday 00:00 UTC A 4 day Snapshot vote (basic single choice) will be created for each proposal which passes temperature checks. Each Snapshot proposal must include the full proposal text and a link to an immutable (IPFS or Arweave) version of the proposal text. Proposals which receive at least 80,000,000 affirmative JBX votes amounting to at least 66% of total votes are queued for execution. &quot;Abstain&quot; votes are not included in these counts. "},{"title":"Step 3 - Execution​","type":1,"pageTitle":"Governance Process","url":"dao/process#step-3---execution","content":"Begins on Day 7 of the Governance Cycle - Saturday 00:00 UTC The DAO's Gnosis multisig (mainnet:0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e) has four days to queue the funding cycle reconfiguration. The multisig has control over JuiceboxDAO treasury parameters and onchain protocol parameters. The execution of JBX token holder votes depends upon the cooperation of these signers. The JuiceboxDAO multisig signers have committed to executing the will of the DAO as expressed by Snapshot votes. "},{"title":"Step 4 - Reconfiguration Delay​","type":1,"pageTitle":"Governance Process","url":"dao/process#step-4---reconfiguration-delay","content":"Begins on Day 12 of the Governance Cycle - Wednesday 19:19 UTC The JuiceboxDAO multisig must submit reconfigurations to the JuiceboxDAO project at least 3 days before the start of the next funding cycle. This practice gives the DAO time to verify queued reconfigurations and proposals, and to burn their JBX tokens if desired. "},{"title":"About JuiceboxDAO","type":0,"sectionRef":"#","url":"dao/","content":"About JuiceboxDAO JuiceboxDAO helps people confidently run programmable and community funded treasuries from startup to scale, openly on Ethereum.​ JuiceboxDAO and its community build and maintain the Juicebox protocol, a framework for funding and operating projects openly on Ethereum. Its contracts allow communities to deploy an administrative NFT, programmable payment terminals for receiving and distributing funds, project tokens for community membership, and funding cycles for timelocked and recurring constraints—all in powerful, customizable ways. Juicebox treasuries can evolve over time, allowing people to launch open-ended projects and to adjust constraints, extensions, and incentives over time as needed. The protocol is light enough for a group of friends, yet powerful enough for a global network of anons sharing thousands of ETH, ERC-20s, or other assets. JuiceboxDAO contributors build the protocol and ecosystem around it, enabling projects to raise thousands of ETH and build robust communities around their treasuries and tokens. Partners​ Peel is a DAO of immensely talented frontend devs. Peel DAO's contributors are the masterminds behind juicebox.money. WAGMI Studios is a collective of quirky creatives behind Juicebox DAO's visual identity. WAGMI Studios' contributors are masters of storytelling, visual art, and animation. CanuDAO is a team of talented builders focused on communication, community management, and automation for DAOs. Lexicon Devils is a collective architecting hyperverse experiences in Cryptovoxels and Substrata. Lexicon Devils is behind the magical Juicebox Lounge and orchestrate its many live events, metaverse parties, and DJ sets.","keywords":""},{"title":"controllerOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/properties/controllerof","content":"controllerOf Contract: JBDirectory​‌ Interface: IJBDirectory For each project ID, the controller that manages how terminals interact with tokens and funding cycles. Definition​ /** @notice For each project ID, the controller that manages how terminals interact with tokens and funding cycles. _projectId The ID of the project to get the controller of. */ mapping(uint256 =&gt; address) public override controllerOf; Arguments: _projectId is the ID of the project to get the controller of. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBDirectory interface.","keywords":""},{"title":"SetIsAllowedToSetFirstController","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/events/setisallowedtosetfirstcontroller","content":"SetIsAllowedToSetFirstController Emitted from: setIsAllowedToSetFirstController Definition: event SetIsAllowedToSetFirstController(address indexed addr, bool indexed flag, address caller); addr is the address of the contract that is being given or revoked allowance to set projects' first controllers on their behalf. flag is the value that was set, either true or false.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"_terminalsOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/properties/-_terminalsof","content":"_terminalsOf Contract: JBDirectory‌ For each project ID, the terminals that are currently managing its funds. Definition​ /** @notice For each project ID, the terminals that are currently managing its funds. _projectId The ID of the project to get terminals of. */ mapping(uint256 =&gt; IJBPaymentTerminal[]) private _terminalsOf; Arguments: _projectId is the ID of the project to get terminals of. The resulting view function is private to this contract.","keywords":""},{"title":"fundingCycleStore","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/properties/fundingcyclestore","content":"fundingCycleStore Contract: JBController​‌ Interface: IJBController The contract storing all funding cycle configurations. Definition​ /** @notice The contract storing all funding cycle configurations. */ IJBFundingCycleStore public immutable fundingCycleStore; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBController interface.","keywords":""},{"title":"SetController","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/events/setcontroller","content":"SetController Emitted from: setControllerOf Definition: event SetController(uint256 indexed projectId, IJBController indexed controller, address caller); projectId is the ID of the project whose controller was set.controller is the address of the controller that was set.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"AddTerminal","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/events/addterminal","content":"AddTerminal Emitted from: _addTerminalIfNeeded Definition: event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller); projectId is the ID of the project that added a terminal.terminal is the address of the terminal that was added.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"projects","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/properties/projects","content":"projects Contract: JBDirectory​‌ Interface: IJBDirectory Mints ERC-721's that represent project ownership and transfers. Definition​ /** @notice Mints ERC-721's that represent project ownership and transfers. */ IJBProjects public immutable override projects; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBDirectory interface.","keywords":""},{"title":"_primaryTerminalOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/properties/-_primaryterminalof","content":"_primaryTerminalOf Contract: JBDirectory‌ The project's primary terminal for a token. Definition​ /** @notice The project's primary terminal for a token. _projectId The ID of the project to get the primary terminal of. _token The token to get the project's primary terminal of. */ mapping(uint256 =&gt; mapping(address =&gt; IJBPaymentTerminal)) private _primaryTerminalOf; Arguments: _projectId is the ID of the project to get the primary terminal of._token is the token to get the project's primary terminal of. The resulting view function is private to this contract.","keywords":""},{"title":"isAllowedToSetFirstController","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/properties/isallowedtosetfirstcontroller","content":"isAllowedToSetFirstController Contract: JBDirectory‌ Interface: IJBDirectory Addresses that can set a project's first controller on their behalf. These addresses/contracts have been vetted and verified by this contract's owner. Definition​ /** @notice Addresses that can set a project's first controller on their behalf. These addresses/contracts have been vetted and verified by this contract's owner. _address The address that is either allowed or not. */ mapping(address =&gt; bool) public override isAllowedToSetFirstController; Arguments: _address is the address that is either allowed or not. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBDirectory interface.","keywords":""},{"title":"isTerminalOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/read/isterminalof","content":"isTerminalOf Step by stepCodeBug bounty Whether or not a specified terminal is a terminal of the specified project. Definition​ function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) public view override returns (bool) { ... } Arguments: _projectId is the ID of the project to check within._terminal is the address of the terminal to check for. The view function can be accessed externally by anyone, and internally within this contract.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBDirectory interface.The function returns a flag indicating whether or not the specified terminal is a terminal of the specified project. Body​ Loop through each of the project's terminals looking for the one specified. If it's found, return true. for (uint256 _i; _i &lt; _terminalsOf[_projectId].length; _i++) if (_terminalsOf[_projectId][_i] == _terminal) return true; Internal references: _terminalsOf If a terminal is not found, return false. return false; ","keywords":""},{"title":"Configure","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/events/configure","content":"Configure Emitted from: configureFor Definition​ event Configure( uint256 indexed configuration, uint256 indexed projectId, JBFundingCycleData data, uint256 metadata, uint256 mustStartAtOrAfter, address caller ); configuration is the funding cycle configuration that was successfully updated.projectId is the ID of the project to which the configured funding cycle belongs.data are the data of the configuration.metadata is the metadata attached the configuration.mustStartAtOrAfter is the time before which the initialized funding cycle can't start.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"SetPrimaryTerminal","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/events/setprimaryterminal","content":"SetPrimaryTerminal Emitted from: setPrimaryTerminalOf Definition: event SetPrimaryTerminal( uint256 indexed projectId, address indexed token, IJBPaymentTerminal indexed terminal, address caller ); projectId is the ID of the project that set a primary terminal.token is the token for which the terminal is the project's primary.terminal is the address of the terminal that is now the project's primary for the token.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"primaryTerminalOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/read/primaryterminalof","content":"primaryTerminalOf Step by stepCodeBug bounty The primary terminal that is managing funds for a project for a specified token. Contracts should send tokens of the specified type to a project's primary terminal. The zero address is returned if a terminal isn't found for the specified token. Definition​ function primaryTerminalOf(uint256 _projectId, address _token) external view override returns (IJBPaymentTerminal) { ... } Arguments: _projectId is the ID of the project to get a terminal for._token is the token the terminal accepts. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBDirectory interface.The function returns the primary terminal for the project for the specified token. Body​ Check to see if the project has explicitly set a primary terminal for this token. If so, return it. // If a primary terminal for the token was specifically set and its one of the project's terminals, return it. if ( _primaryTerminalOf[_projectId][_token] != IJBPaymentTerminal(address(0)) &amp;&amp; isTerminalOf(_projectId, _primaryTerminalOf[_projectId][_token]) ) return _primaryTerminalOf[_projectId][_token]; Internal references: _primaryTerminalOfisTerminalOf Loop through each of the project's terminals looking for one that uses the same token as the one specified. If one is found, return it. // Return the first terminal which accepts the specified token. for (uint256 _i; _i &lt; _terminalsOf[_projectId].length; _i++) { IJBPaymentTerminal _terminal = _terminalsOf[_projectId][_i]; if (_terminal.acceptsToken(_token, _projectId)) return _terminal; } Internal references: _terminalsOf External references: acceptsToken Return an empty terminal if not found. // Not found. return IJBPaymentTerminal(address(0)); ","keywords":""},{"title":"terminalsOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/read/terminalsof","content":"terminalsOf Step by stepCodeBug bounty For each project ID, the terminals that are currently managing its funds. Definition​ function terminalsOf(uint256 _projectId) external view override returns (IJBPaymentTerminal[] memory) { ... } Arguments: _projectId is the ID of the project to get terminals of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBDirectory interface.The function returns an array of terminal addresses. Body​ This function just reads and returns the stored _terminalsOf the project. return _terminalsOf[_projectId]; Internal references: _terminalsOf","keywords":""},{"title":"SetTerminal","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/events/setterminals","content":"SetTerminal Emitted from: setTerminalsOf Definition: event SetTerminals( uint256 indexed projectId, IJBPaymentTerminal[] indexed terminals, address caller ); projectId is the ID of the project that set terminals.terminals are the terminals that were set.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"setIsAllowedToSetFirstController","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/write/setisallowedtosetfirstcontroller","content":"setIsAllowedToSetFirstController Contract: JBDirectory​‌ Interface: IJBDirectory Step by stepCodeEventsBug bounty Set a contract to the list of trusted addresses that can set a controller for any project. The owner can add addresses which are allowed to change projects' first controllers.These addresses are known and vetted controllers as well as contracts designed to launch new projects. A project can set its own controller without it being on the allow list. If you would like an address/contract allowlisted, please reach out to the contract owner. Definition​ function setIsAllowedToSetFirstController(address _address, bool _flag) external override onlyOwner { ... } Arguments: _address is the address to allow or revoke allowance from._flag is whether allowance is being added or revoked. Through the onlyOwner modifier, this function can only be accessed by the address that owns this contract.The function overrides a function definition from the IJBDirectory interface.The function returns nothing. Body​ Set the allowlist property for the provided address to the flag's value. // Set the flag in the allowlist. isAllowedToSetFirstController[_address] = _flag; Internal references: isAllowedToSetFirstController Emit a SetIsAllowedToSetFirstController event with the relevant parameters. emit SetIsAllowedToSetFirstController(_address, _flag, msg.sender); Event references: SetIsAllowedToSetFirstController","keywords":""},{"title":"_addTerminalIfNeeded","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/write/-_addterminalifneeded","content":"_addTerminalIfNeeded Contract: JBDirectory​‌ Interface: IJBDirectory Step by stepCodeErrorsEventsBug bounty Add a terminal to a project's list of terminals if it hasn't been already. Definition​ function _addTerminalIfNeeded(uint256 _projectId, IJBPaymentTerminal _terminal) private { ... } Arguments: _projectId is the ID of the project having a terminal added._terminal is the terminal to add. The function is private to this contract.The function doesn't return anything. Body​ Nothing to do if the terminal is already a terminal of the project. // Check that the terminal has not already been added. if (isTerminalOf(_projectId, _terminal)) return; Internal references: isTerminalOf Get a reference to the project's current funding cycle. // Get a reference to the project's current funding cycle. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); Internal references: fundingCycleStore External references: currentOf Make sure the project's current funding cycle is set to allow setting its terminals, or the request to set the controller is coming from the project's current controller. // Setting terminals must be allowed if not called from the current controller. if ( msg.sender != address(controllerOf[_projectId]) &amp;&amp; !uint8(_fundingCycle.metadata &gt;&gt; 8).setTerminalsAllowed() ) revert SET_TERMINALS_NOT_ALLOWED(); Library references: JBFundingCycleMetadataResolver .setTerminalsAllowed(...) Internal references: controllerOf Add the terminal. // Add the new terminal. _terminalsOf[_projectId].push(_terminal); Internal references: _terminalsOf Emit a AddTerminal event with the relevant parameters. emit AddTerminal(_projectId, _terminal, msg.sender); Event references: AddTerminal","keywords":""},{"title":"_packedIntrinsicPropertiesOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/properties/-_packedintrinsicpropertiesof","content":"_packedIntrinsicPropertiesOf Contract: JBFundingCycleStore​‌ Stores the properties added by the mechanism to manage and schedule each funding cycle, packed into one storage slot. Definition​ /** @notice Stores the properties added by the mechanism to manage and schedule each funding cycle, packed into one storage slot. _projectId The ID of the project to get instrinsic properties of. _configuration The funding cycle configuration to get properties of. */ mapping(uint256 =&gt; mapping(uint256 =&gt; uint256)) private _packedIntrinsicPropertiesOf; Arguments: _projectId is the ID of the project to get instrinsic properties of._configuration is the funding cycle configuration to get properties of. The resulting view function is private to this contract.","keywords":""},{"title":"setPrimaryTerminalOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/write/setprimaryterminalof","content":"setPrimaryTerminalOf Contract: JBDirectory​‌ Interface: IJBDirectory Step by stepCodeErrorsEventsBug bounty Project's can set which terminal should be their primary for a particular token. This is useful in case a project has several terminals connected for a particular token. The terminal will be set as the primary terminal where ecosystem contracts should route tokens. If setting a newly added terminal and the funding cycle doesn't allow new terminals, the caller must be the current controller. Definition​ function setPrimaryTerminalOf( uint256 _projectId, address _token, IJBPaymentTerminal _terminal ) external override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.SET_PRIMARY_TERMINAL) { ... } Arguments: _projectId is the ID of the project for which a primary token is being set._token is the token to set the primary terminal of._terminal is the terminal to make primary. Through the requirePermission modifier, the function is only accessible by the project's owner, or from an operator that has been given the JBOperations.SET_PRIMARY_TERMINAL permission by the project owner for the provided _projectId.The function overrides a function definition from the IJBDirectory interface.The function doesn't return anything. Body​ Make sure the provided terminal accepts to provided token. // Can't set the primary terminal for a token if it doesn't accept the token. if (!_terminal.acceptsToken(_token, _projectId)) revert TOKEN_NOT_ACCEPTED(); External references: acceptsToken Make sure the project's current funding cycle is set to allow setting terminals, or the request to set the terminals is coming from the project's current controller. // Add the terminal to the project if it hasn't been already. _addTerminalIfNeeded(_projectId, _terminal); Internal references: _addTerminalIfNeeded Store the new terminal as the primary. // Store the terminal as the primary for the particular token. _primaryTerminalOf[_projectId][_token] = _terminal; Internal references: _primaryTerminalOf Emit a SetPrimaryTerminal event with the relevant parameters. emit SetPrimaryTerminal(_projectId, _token, _terminal, msg.sender); Event references: SetPrimaryTerminal","keywords":""},{"title":"JBDirectory","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/","content":"JBDirectory Keeps a reference of which terminal contracts each project is currently accepting funds through, and which controller contract is managing each project's tokens and funding cycles. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBDirectory.sol Addresses​ Ethereum mainnet: 0xCc8f7a89d89c2AB3559f484E0C656423E979ac9C Ethereum rinkeby: 0x1A9b04A9617ba5C9b7EBfF9668C30F41db6fC21a Interfaces​ Name\tDescriptionIJBDirectory\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionJBOperatable\tIncludes convenience functionality for checking a message sender's permissions before executing certain transactions. Ownable\tIncludes convenience functionality for checking a message sender's permissions before executing certain transactions. Constructor​ /** @param _operatorStore A contract storing operator assignments. @param _projects A contract which mints ERC-721's that represent project ownership and transfers. @param _fundingCycleStore A contract storing all funding cycle configurations. @param _owner The address that will own the contract. */ constructor( IJBOperatorStore _operatorStore, IJBProjects _projects, IJBFundingCycleStore _fundingCycleStore, address _owner ) JBOperatable(_operatorStore) { projects = _projects; fundingCycleStore = _fundingCycleStore; _transferOwnership(_owner); } _operatorStore is an IJBOperatorStore contract storing operator assignments._projects is an IJBProjects contract which mints ERC-721's that represent project ownership and transfers._fundingCycleStore is an IJBFundingCycleStore contract storing all funding cycle configurations._owner is the address that will own the contract. Events​ Name\tDataSetController int256 indexed projectIdIJBController indexed controlleraddress caller AddTerminal uint256 indexed projectIdIJBPaymentTerminal indexed terminaladdress caller SetTerminals uint256 indexed projectIdIJBPaymentTerminal[] indexed terminalsaddress caller SetPrimaryTerminal uint256 indexed projectIdaddress indexed tokenIJBPaymentTerminal indexed terminaladdress caller SetIsAllowedToSetFirstController address indexed addrbool indexed flagaddress caller Properties​ Function\tDefinitionprojects Traits immutable Returns IJBProjects fundingCycleStore Traits immutable Returns IJBFundingCycleStore controllerOf Params uint256 _projectId Returns address isAllowedToSetFirstController Params address _address Returns bool Read​ Function\tDefinitionterminalsOf Params uint256 _projectId Returns IJBPaymentTerminal[] terminals isTerminalOf Params uint256 _projectIdIJBPaymentTerminal terminal Returns bool isTerminal primaryTerminalOf Params uint256 _projectIdaddress _token Returns IJBPaymentTerminal terminal Write​ Function\tDefinitionsetControllerOf Traits requirePermissionAllowingOverride Params uint256 _projectIdaddress _controller setTerminalsOf Traits requirePermissionAllowingOverride Params uint256 _projectIdIJBPaymentTerminal[] _terminals setPrimaryTerminalOf Traits requirePermission Params uint256 _projectIdaddress _tokenIJBPaymentTerminal _terminal setIsAllowedToSetFirstController Traits onlyOwner Params address _addressbool _flag","keywords":""},{"title":"_metadataOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/properties/-_metadataof","content":"_metadataOf Contract: JBFundingCycleStore​‌ Stores the metadata for each funding cycle configuration, packed into one storage slot. Definition​ /** @notice Stores the metadata for each funding cycle configuration, packed into one storage slot. _projectId The ID of the project to get metadata of. _configuration The funding cycle configuration to get metadata of. */ mapping(uint256 =&gt; mapping(uint256 =&gt; uint256)) private _metadataOf; Arguments: _projectId is the ID of the project to get metadata of._configuration is the funding cycle configuration to get metadata of. The resulting view function is private to this contract.","keywords":""},{"title":"latestConfigurationOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/properties/latestconfigurationof","content":"latestConfigurationOf Contract: JBFundingCycleStore​‌ The latest funding cycle configuration for each project. Definition​ /** @notice The latest funding cycle configuration for each project. _projectId The ID of the project to get the latest funding cycle configuration of. */ mapping(uint256 =&gt; uint256) public override latestConfigurationOf; Arguments: _projectId is the ID of the project to get the latest funding cycle configuration of. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBFundingCycleStore interface.","keywords":""},{"title":"_packedUserPropertiesOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/properties/-_packeduserpropertiesof","content":"_packedUserPropertiesOf Contract: JBFundingCycleStore​‌ Stores the user defined properties of each funding cycle, packed into one storage slot. Definition​ /** @notice Stores the user defined properties of each funding cycle, packed into one storage slot. _projectId The ID of the project to get properties of. _configuration The funding cycle configuration to get properties of. */ mapping(uint256 =&gt; mapping(uint256 =&gt; uint256)) private _packedUserPropertiesOf; Arguments: _projectId is the ID of the project to get properties of._configuration is the funding cycle configuration to get properties of. The resulting view function is private to this contract.","keywords":""},{"title":"Init","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/events/init","content":"Init Emitted from: _initFor Definition​ event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn); configuration is the funding cycle configuration that was initialized.projectId is the ID of the project to which the initialized funding cycle belongs.basedOn is the ID of the funding cycle that the initialized funding cycle is based on.","keywords":""},{"title":"JBFundingCycleStore","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/","content":"JBFundingCycleStore Manages funding cycle configurations and scheduling. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBFundingCycleStore.sol Addresses​ Ethereum mainnet: 0x6B8e01DAA8A61b544F96d2738893E05D04BF1D12 Ethereum rinkeby: 0x8b3e0af1f7ee6C5a3fab969b5cAdD9347B009F1a Interfaces​ Name\tDescriptionIJBFundingCycleStore\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionJBControllerUtility\tIncludes convenience functionality for checking if the message sender is the current controller of the project whose data is being manipulated. Constructor​ /** @param _directory A contract storing directories of terminals and controllers for each project. */ constructor(IJBDirectory _directory) JBControllerUtility(_directory) {} _directory is an IJBDirectory contract storing directories of terminals and controllers for each project. Events​ Name\tDataConfigure uint256 indexed configurationuint256 indexed projectIdJBFundingCycleData datauint256 metadatauint256 mustStartAtOrAfteraddress caller Init uint256 indexed configurationuint256 indexed projectIduint256 indexed basedOn Properties​ Function\tDefinitionlatestConfigurationOf Params uint256 _projectId Returns uint256 Read​ Function\tDefinitionget Params uint256 _projectIduint256 _configuration Returns JBFundingCycle fundingCycle latestConfiguredOf Params uint256 _projectId Returns JBFundingCycle fundingCycleJBBallotState ballotState queuedOf Params uint256 _projectId Returns JBFundingCycle fundingCycle currentOf Params uint256 _projectId Returns JBFundingCycle fundingCycle currentBallotStateOf Params uint256 _projectId Returns JBBallotState ballotState Write​ Function\tDefinitionconfigureFor Traits onlyController Params uint256 _projectIdJBFundingCycleData _datauint256 _metadatauint256 _mustStartAtOrAfter Returns JBFundingCycle fundingCycle","keywords":""},{"title":"_deriveNumberFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/-_derivenumberfrom","content":"_deriveNumberFrom Contract: JBFundingCycleStore​ Step by stepCodeBug bounty The number of the next funding cycle given the specified funding cycle. Definition​ function _deriveNumberFrom(JBFundingCycle memory _baseFundingCycle, uint256 _start) private pure returns (uint256) { ... } Arguments: _baseFundingCycle is the JBFundingCycle to base the calculation on._start is the start time of the funding cycle to derive a number for. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns the funding cycle number. Body​ If the base funding cycle doesn't have a duration, the next number is 1 more than the base's number. // A subsequent cycle to one with a duration of 0 should be the next number. if (_baseFundingCycle.duration == 0) return _baseFundingCycle.number + 1; Get a reference to how long after the base funding cycle's start the specified start time is. // The difference between the start of the base funding cycle and the proposed start. uint256 _startDistance = _start - _baseFundingCycle.start; Return the number of base cycles that fit in the base distance. // Find the number of base cycles that fit in the start distance. return _baseFundingCycle.number + (_startDistance / _baseFundingCycle.duration); ","keywords":""},{"title":"setTerminalsOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/write/setterminalsof","content":"setTerminalsOf Contract: JBDirectory​‌ Interface: IJBDirectory Step by stepCodeErrorsEventsBug bounty Set a project's terminals. Only a project owner, an operator, or its controller can set its terminals. Definition​ function setTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external override requirePermissionAllowingOverride( projects.ownerOf(_projectId), _projectId, JBOperations.SET_TERMINALS, msg.sender == address(controllerOf[_projectId]) ) { ... } Arguments: _projectId is the ID of the project having terminals set._terminals is the terminals to set. Through the requirePermissionAllowingOverride modifier, the function is only accessible by the project's owner, from an operator that has been given the JBOperations.SET_TERMINALS permission by the project owner for the provided _projectId, or by the project's controller.The function overrides a function definition from the IJBDirectory interface.The function doesn't return anything. Body​ Get a reference to the project's current funding cycle. // Get a reference to the project's current funding cycle. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); External references: currentOf Make sure the project's current funding cycle is set to allow setting terminals, or the request to set the terminals is coming from the project's current controller. // Setting terminals must be allowed if not called from the current controller. if ( msg.sender != address(controllerOf[_projectId]) &amp;&amp; !uint8(_fundingCycle.metadata &gt;&gt; 8).setTerminalsAllowed() ) revert SET_TERMINALS_NOT_ALLOWED(); Library references: JBFundingCycleMetadataResolver .setTerminalsAllowed(...) Internal references: controllerOf Get a reference to the project's current funding cycle. // Get a reference to the project's current funding cycle. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); External references: currentOf Delete the project's current set of terminals from storage. // Delete the stored terminals for the project. _terminalsOf[_projectId] = _terminals; Internal references: _terminalsOf Make sure the same terminal isn't being set multiple times. // Make sure duplicates were not added. if (_terminals.length &gt; 1) for (uint256 _i; _i &lt; _terminals.length; _i++) for (uint256 _j = _i + 1; _j &lt; _terminals.length; _j++) if (_terminals[_i] == _terminals[_j]) revert DUPLICATE_TERMINALS(); Emit a SetTerminals event with the relevant parameters. emit SetTerminals(_projectId, _terminals, msg.sender); Event references: SetTerminals","keywords":""},{"title":"JBOperatorStore","type":0,"sectionRef":"#","url":"dev/api/contracts/jboperatorstore/","content":"JBOperatorStore Stores operator permissions for all addresses. Addresses can give permissions to any other address to take specific indexed actions on their behalf. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBOperatorStore.sol Addresses​ Ethereum mainnet: 0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb Ethereum rinkeby: 0xEDB2db4b82A4D4956C3B4aA474F7ddf3Ac73c5AB Interfaces​ Name\tDescriptionIJBOperatorStore\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Events​ Name\tDataSetOperator address indexed operatoraddress indexed accountuint256 indexed domainuint256[] permissionIndexesuint256 packed Properties​ Function\tDefinitionpermissionsOf Params address _operatoraddress _accountuint256 _domain Returns uint256 Read​ Function\tDefinitionhasPermission Params address _operatoraddress _accountuint256 _domainuint256 _permissionIndex Returns bool hasPermission hasPermissions Params address _operatoraddress _accountuint256 _domainuint256[] _permissionIndexes Returns bool hasPermissions Write​ Function\tDefinitionsetOperator Params JBOperatorData _operatorData setOperators Params JBOperatorData[] _operatorData","keywords":""},{"title":"setControllerOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbdirectory/write/setcontrollerof","content":"setControllerOf Contract: JBDirectory​‌ Interface: IJBDirectory Step by stepCodeErrorsEventsBug bounty Update the controller that manages how terminals interact with the ecosystem. A controller can be set if: the message sender is the project owner or an operator having the correct authorization.the message sender is the project's current controller.or, an allowedlisted address is setting a controller for a project that doesn't already have a controller. Definition​ function setControllerOf(uint256 _projectId, address _controller) external override requirePermissionAllowingOverride( projects.ownerOf(_projectId), _projectId, JBOperations.SET_CONTROLLER, (msg.sender == address(controllerOf[_projectId]) || (isAllowedToSetFirstController[msg.sender] &amp;&amp; controllerOf[_projectId] == IJBController(address(0)))) ) { ... } Arguments: _projectId is the ID of the project to set a new controller for._controller is the new controller to set. Through the requirePermissionAllowingOverride modifier, the function is only accessible by the project's owner, from an operator that has been given the JBOperations.SET_CONTROLLER permission by the project owner for the provided _projectId, from the project's current controller, or from an allow-listed controller if the project doesn't already have a controller set.The function overrides a function definition from the IJBDirectory interface.The function doesn't return anything Body​ Project IDs are assigned incrementally. If the provided project ID is greater than the number of projects, it must not be a valid project ID. // The project must exist. if (projects.count() &lt; _projectId) revert INVALID_PROJECT_ID_IN_DIRECTORY(); Internal references: projects External references: count Get a reference to the project's current funding cycle. // Get a reference to the project's current funding cycle. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); Internal references: fundingCycleStore External references: currentOf Make sure the project's current funding cycle is set to allow setting its controller, or the request to set the controller is coming from the project's current controller or is setting the first controller. // Setting controller must be allowed if not called from the current controller or if the project already has a controller. if ( msg.sender != address(controllerOf[_projectId]) &amp;&amp; controllerOf[_projectId] != address(0) &amp;&amp; !uint8(_fundingCycle.metadata &gt;&gt; 8).setControllerAllowed() ) revert SET_CONTROLLER_NOT_ALLOWED(); Library references: JBFundingCycleMetadataResolver .setControllerAllowed(...) Internal references: controllerOf Store the provided controller as the controller of the project. // Set the new controller. controllerOf[_projectId] = _controller; Internal references: controllerOf Emit a SetController event with the relevant parameters. emit SetController(_projectId, _controller, msg.sender); Event references: SetController","keywords":""},{"title":"_eligibleOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/-_eligibleof","content":"_eligibleOf Contract: JBFundingCycleStore​ Step by stepCodeBug bounty The project's stored funding cycle that has started and hasn't yet expired. A value of 0 is returned if no funding cycle was found. Assumes the project has a latest configuration. Definition​ function _eligibleOf(uint256 _projectId) private view returns (uint256 configuration) { ... } Arguments: _projectId is the ID of the project to look through. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns the configuration of an eligible funding cycle if one exists, or 0 if one doesn't exist. Body​ Get a reference to the latest funding cycle for the project. // Get a reference to the project's latest funding cycle. configuration = latestConfigurationOf[_projectId]; Internal references: latestConfigurationOf Get the struct for the latest funding cycle. // Get the latest funding cycle. JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, configuration); Internal references: _getStructFor If the latest is expired, return an empty funding cycle since there can't be a stored eligible cycle. // If the latest is expired, return an empty funding cycle. // A duration of 0 cannot be expired. if ( _fundingCycle.duration &gt; 0 &amp;&amp; block.timestamp &gt;= _fundingCycle.start + _fundingCycle.duration ) return 0; If the funding cycle has started, it must be eligible. // Return the funding cycle's configuration if it has started. if (block.timestamp &gt;= _fundingCycle.start) return _fundingCycle.configuration; Get a reference to the funding cycle that the current cycle is based on. // Get a reference to the cycle's base configuration. JBFundingCycle memory _baseFundingCycle = _getStructFor(_projectId, _fundingCycle.basedOn); Internal references: _getStructFor If the base is expired, return an empty funding cycle since there can't be a stored eligible cycle. // If the base cycle isn't eligible, the project has no eligible cycle. // A duration of 0 is always eligible. if ( _baseFundingCycle.duration &gt; 0 &amp;&amp; block.timestamp &gt;= _baseFundingCycle.start + _baseFundingCycle.duration ) return 0; Return the configuration that the latest funding cycle is based on. // Return the configuration that the latest funding cycle is based on. configuration = _fundingCycle.basedOn; ","keywords":""},{"title":"_deriveStartFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/-_derivestartfrom","content":"_deriveStartFrom Contract: JBFundingCycleStore​ Step by stepCodeBug bounty The date that is the nearest multiple of the specified funding cycle's duration from its end. Definition​ function _deriveStartFrom(JBFundingCycle memory _baseFundingCycle, uint256 _mustStartAtOrAfter) private pure returns (uint256 start) { ... } Arguments: _baseFundingCycle is The JBFundingCycle to base the calculation on._mustStartAtOrAfter is a date that the derived start must be on or come after. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns the next start time. Body​ A funding cycle with a duration of 0 can start as soon as possible. // A subsequent cycle to one with a duration of 0 should start as soon as possible. if (_baseFundingCycle.duration == 0) return _mustStartAtOrAfter; Get a reference to the start time of the cycle immediately following the base cycle. This is the base cycle's start time plus the base cycle's duration. // The time when the funding cycle immediately after the specified funding cycle starts. uint256 _nextImmediateStart = _baseFundingCycle.start + _baseFundingCycle.duration; If the next immediate start is allowed, it should be used. Otherwise, calculate a value depending on how much time has passed since the next immediate start. // If the next immediate start is now or in the future, return it. if (_nextImmediateStart &gt;= _mustStartAtOrAfter) return _nextImmediateStart; Save a reference to the amount of seconds since the time when the funding cycle must start on or after, which results in a start time that might satisfy the specified constraints. // The amount of seconds since the `_mustStartAtOrAfter` time which results in a start time that might satisfy the specified constraints. uint256 _timeFromImmediateStartMultiple = (_mustStartAtOrAfter - _nextImmediateStart) % _baseFundingCycle.duration; Save a reference to the first possible start time. // A reference to the first possible start timestamp. start = _mustStartAtOrAfter - _timeFromImmediateStartMultiple; It's possible that the start time doesn't satisfy the specified constraints. If so, add increments of the funding cycle's duration as necessary to satisfy the threshold. // Add increments of duration as necessary to satisfy the threshold. while (_mustStartAtOrAfter &gt; start) start = start + _baseFundingCycle.duration; ","keywords":""},{"title":"_mockFundingCycleBasedOn","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/-_mockfundingcyclebasedon","content":"_mockFundingCycleBasedOn Contract: JBFundingCycleStore​ Step by stepCodeBug bounty A view of the funding cycle that would be created based on the provided one if the project doesn't make a reconfiguration. Returns an empty funding cycle if there can't be a mock funding cycle based on the provided one. Assumes a funding cycle with a duration of 0 will never be asked to be the base of a mock. Definition​ function _mockFundingCycleBasedOn(JBFundingCycle memory _baseFundingCycle, bool _allowMidCycle) private view returns (JBFundingCycle memory) { ... } Arguments: _baseFundingCycle is the JBFundingCycle that the resulting funding cycle should follow._allowMidCycle is a flag indicating if the mocked funding cycle is allowed to already be mid cycle. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns a mock JBFundingCycle of what the next funding cycle will be. Body​ Save a reference to time at or after which the mock must have started. There are a few possibilities. If the call to the function does not allow mid cycle, the start date must be now or in the future. This is also the case if the base funding cycle doesn't have a duration because the next funding cycle can start immediately.If neither of these cases apply, moving back one full duration period of the base funding cycle will find the most recent possible start time for the mock cycle to start. // Get the distance of the current time to the start of the next possible funding cycle. // If the returned mock cycle must not yet have started, the start time of the mock must be in the future. uint256 _mustStartAtOrAfter = !_allowMidCycle ? block.timestamp + 1 : block.timestamp - _baseFundingCycle.duration + 1; Find the correct start time for the mock funding cycle. // Derive what the start time should be. uint256 _start = _deriveStartFrom(_baseFundingCycle, _mustStartAtOrAfter); Internal references: _deriveStartFrom Find the correct number for the mock funding cycle. // Derive what the number should be. uint256 _number = _deriveNumberFrom(_baseFundingCycle, _start); Internal references: _deriveNumberFrom Return a JBFundingCycle with the aggregated configuration. return JBFundingCycle( _number, _baseFundingCycle.configuration, _baseFundingCycle.basedOn, _start, _baseFundingCycle.duration, _deriveWeightFrom(_baseFundingCycle, _start), _baseFundingCycle.discountRate, _baseFundingCycle.ballot, _baseFundingCycle.metadata ); Internal references: _deriveWeightFrom","keywords":""},{"title":"_deriveWeightFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/-_deriveweightfrom","content":"_deriveWeightFrom Contract: JBFundingCycleStore​ Step by stepCodeBug bounty The accumulated weight change since the specified funding cycle. Definition​ function _deriveWeightFrom(JBFundingCycle memory _baseFundingCycle, uint256 _start) private pure returns (uint256 weight) { ... } Arguments: _baseFundingCycle is The JBFundingCycle to base the calculation on._start is the start time of the funding cycle to derive a number for. The view function is private to this contract.The function does not alter state on the blockchain.The function returns the derived weight, as a fixed point number with 18 decimals. Body​ If the base funding cycle has no duration, the derived weight should be calculated from it no matter how much time has passed since it was active. The discount rate property in a JBFundingCycle is out of JBConstants.MAX_DISCOUNT_RATE. // A subsequent cycle to one with a duration of 0 should have the next possible weight. if (_baseFundingCycle.duration == 0) return PRBMath.mulDiv( _baseFundingCycle.weight, JBConstants.MAX_DISCOUNT_RATE - _baseFundingCycle.discountRate, JBConstants.MAX_DISCOUNT_RATE ); Library references: PRBMath .mulDiv(...) JBConstants .MAX_DISCOUNT_RATE The calculations that follow will progressively apply discount rates to the base funding cycle's weight to arrive at the correct weight to return. // The weight should be based off the base funding cycle's weight. weight = _baseFundingCycle.weight; If the base doesn't have a discount rate, the original weight won't change and should be returned. // If the discount is 0, the weight doesn't change. if (_baseFundingCycle.discountRate == 0) return weight; Get a reference to how long after the base funding cycle's start the specified start time is. // The difference between the start of the base funding cycle and the proposed start. uint256 _startDistance = _start - _baseFundingCycle.start; Apply the base funding cycle's discount rate. Apply the rate as many times as there have been cycles within the start distance. No need to keep iterating if the weight has reached 0. // Apply the base funding cycle's discount rate for each cycle that has passed. uint256 _discountMultiple = _startDistance / _baseFundingCycle.duration; for (uint256 i = 0; i &lt; _discountMultiple; i++) { // The number of times to apply the discount rate. // Base the new weight on the specified funding cycle's weight. weight = PRBMath.mulDiv( weight, JBConstants.MAX_DISCOUNT_RATE - _baseFundingCycle.discountRate, JBConstants.MAX_DISCOUNT_RATE ); // The calculation doesn't need to continue if the weight is 0. if (weight == 0) break; } Library references: PRBMath .mulDiv(...) JBConstants .MAX_DISCOUNT_RATE ","keywords":""},{"title":"_ballotStateOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/-_ballotstateof","content":"_ballotStateOf Contract: JBFundingCycleStore​ Step by stepCodeBug bounty A project's latest funding cycle configuration approval status. Definition​ function _ballotStateOf( uint256 _projectId, uint256 _configuration, uint256 _start, uint256 _ballotFundingCycleConfiguration ) private view returns (JBBallotState) { ... } Arguments: _projectId is the ID of the project to which the funding cycle belongs._configuration is the funding cycle configuration to get the ballot state of._start is the start time of the funding cycle configuration to get the ballot state of._ballotFundingCycleConfiguration is the configuration of the funding cycle which is configured with the ballot that should be used. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns the JBBallotState of the project. Body​ If there is no ballot configuration, the ballot state is implicitly approved. // If there is no ballot funding cycle, implicitly approve. if (_ballotFundingCycleConfiguration == 0) return JBBallotState.Approved; Enums used: JBBallotState .Approved Get the funding cycle that has a reference of the ballot that should be used. // Get the ballot funding cycle. JBFundingCycle memory _ballotFundingCycle = _getStructFor( _projectId, _ballotFundingCycleConfiguration ); Internal references: _getStructFor If there's no ballot, the funding cycle configuration is implicitly approved. Otherwise if the ballot's duration has not yet expired, it is implicitly active. Otherwise, return the state that the ballot for the provided configuration. // If there is no ballot, the ID is auto approved. // Otherwise if the ballot's duration hasn't passed, its still active. // Otherwise, return the ballot's state. if (_ballotFundingCycle.ballot == IJBFundingCycleBallot(address(0))) return JBBallotState.Approved; else if (_ballotFundingCycle.ballot.duration() &gt;= block.timestamp - _configuration) return JBBallotState.Active; else return _ballotFundingCycle.ballot.stateOf(_projectId, _configuration, _start); Enums used: JBBallotState .Approved.Active External references: durationstateOf","keywords":""},{"title":"_packAndStoreIntrinsicPropertiesOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/write/-_packandstoreintrinsicpropertiesof","content":"_packAndStoreIntrinsicPropertiesOf Contract: JBFundingCycleStore​ Step by stepCodeBug bounty Efficiently stores a funding cycle's provided intrinsic properties. Definition​ function _packAndStoreIntrinsicPropertiesOf( uint256 _configuration, uint256 _projectId, uint256 _number, uint256 _weight, uint256 _basedOn, uint256 _start ) private { ... } Arguments: _configuration is the configuration of the funding cycle to pack and store._projectId is the ID of the project to which the funding cycle belongs._number is the number of the funding cycle._weight is the weight of the funding cycle._basedOn is the configuration of the base funding cycle._start is the start time of this funding cycle. The function is private to this contract.The function doesn't return anything. Body​ The weight property should take up the first 80 bits of the packed uint256. // weight in bits 0-87. uint256 packed = _weight; The based on configuration should take up the next 56 bits. // basedOn in bits 88-143. packed |= _basedOn &lt;&lt; 88; The start should take up the next 56 bits. // start in bits 144-199. packed |= _start &lt;&lt; 144; The number should take up the last 56 bits. // number in bits 200-255. packed |= _number &lt;&lt; 200; Store the packed intrinsic properties for the funding cycle. // Store the packed value. _packedIntrinsicPropertiesOf[_projectId][_configuration] = packed; Internal references: _packedIntrinsicPropertiesOf","keywords":""},{"title":"_getStructFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/-_getstructfor","content":"_getStructFor Contract: JBFundingCycleStore​ Step by stepCodeBug bounty Unpack a funding cycle's packed stored values into an easy-to-work-with funding cycle struct. Definition​ function _getStructFor(uint256 _projectId, uint256 _configuration) private view returns (JBFundingCycle memory fundingCycle) { ... } Arguments: _projectId is the ID of the project to which the funding cycle belongs._configuration is the funding cycle configuration to get the full struct for. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns a JBFundingCycle struct. Body​ If the configuration provided is 0, return an empty funding cycle. // Return an empty funding cycle if the configuration specified is 0. if (_configuration == 0) return fundingCycle; Set the funding cycle's configuration to the provided value. fundingCycle.configuration = _configuration; Get the stored intrinsic properties of the funding cycle. Populate the struct values by unpacking the uint256. uint256 _packedIntrinsicProperties = _packedIntrinsicPropertiesOf[_projectId][_configuration]; // weight in bits 0-87 bits. fundingCycle.weight = uint256(uint88(_packedIntrinsicProperties)); // basedOn in bits 88-143 bits. fundingCycle.basedOn = uint256(uint56(_packedIntrinsicProperties &gt;&gt; 88)); // start in bits 144-199 bits. fundingCycle.start = uint256(uint56(_packedIntrinsicProperties &gt;&gt; 144)); // number in bits 200-255 bits. fundingCycle.number = uint256(uint56(_packedIntrinsicProperties &gt;&gt; 200)); Internal references: _packedIntrinsicPropertiesOf Get the stored user properties of the funding cycle. Populate the struct values by unpacking the uint256. uint256 _packedUserProperties = _packedUserPropertiesOf[_projectId][_configuration]; // ballot in bits 0-159 bits. fundingCycle.ballot = IJBFundingCycleBallot(address(uint160(_packedUserProperties))); // duration in bits 160-223 bits. fundingCycle.duration = uint256(uint64(_packedUserProperties &gt;&gt; 160)); // discountRate in bits 224-255 bits. fundingCycle.discountRate = uint256(uint32(_packedUserProperties &gt;&gt; 224)); Internal references: _packedUserPropertiesOf Populate the metadata property of the struct by reading from what's stored. fundingCycle.metadata = _metadataOf[_projectId][_configuration]; Internal references: _metadataOf","keywords":""},{"title":"currentBallotStateOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/latestconfiguredof","content":"currentBallotStateOf Contract: JBFundingCycleStore​‌ Interface: IJBFundingCycleStore Step by stepCodeBug bounty The latest funding cycle to be configured for the specified project, and its current ballot state. Definition​ function latestConfiguredOf(uint256 _projectId) external view override returns (JBFundingCycle memory fundingCycle, JBBallotState ballotState) { ... } Arguments: _projectId is the ID of the project to get the latest configured funding cycle of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBFundingCycleStore interface.The function returns: fundingCycle is the latest configured funding cycle.ballotState is the JBBallotState of the ballot for the reconfiguration. Body​ Get a reference to the latest funding cycle for the project. // Get a reference to the latest funding cycle configuration. uint256 _fundingCycleConfiguration = latestConfigurationOf[_projectId]; Internal references: latestConfigurationOf Get a reference to the funding cycle for the latest configuration. // Resolve the funding cycle for the for the latest configuration. fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration); Internal references: _getStructFor Return the ballot state of the latest funding cycle configuration as is determined by the current configuration and the funding cycle it's based on. // Resolve the ballot state. ballotState = _ballotStateOf( _projectId, fundingCycle.configuration, fundingCycle.start, fundingCycle.basedOn ); Internal references: _ballotStateOf","keywords":""},{"title":"AddFeed","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprices/events/addfeed","content":"AddFeed Emitted from: addFeedFor Definition​ event AddFeed(uint256 indexed currency, uint256 indexed base, IJBPriceFeed feed); currency is the currency the feed was added for.base is the currency that the feed's price will be reported based on.feed is the IJBPriceFeed feed contract that was added.","keywords":""},{"title":"_isApproved","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/-_isapproved","content":"_isApproved Contract: JBFundingCycleStore​ Step by stepCodeBug bounty Checks to see if the provided funding cycle is approved according to the correct ballot. Definition​ function _isApproved(uint256 _projectId, JBFundingCycle memory _fundingCycle) private view returns (bool) { ... } Arguments: _projectId is the ID of the project to which the funding cycle belongs. _fundingCycle is the JBFundingCycle to get an approval flag for. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns the approval flag. Body​ Check to see if the state of the ballot for the provided funding cycle configuration is approved. The ballot that should be used is that of the funding cycle that the provided one is based on. This is because each funding cycle's ballot dictates the approval conditions of the next proposed reconfiguration. return _ballotStateOf( _projectId, _fundingCycle.configuration, _fundingCycle.start, _fundingCycle.basedOn ) == JBBallotState.Approved; Enums used: JBBallotState .Approved Internal references: _ballotStateOf","keywords":""},{"title":"feedFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprices/properties/feedfor","content":"feedFor Contract: JBPrices Interface: IJBPrices The available price feeds. Definition​ /** @notice The available price feeds. @dev The feed returns the number of `_currency` units that can be converted to 1 `_base` unit. _currency The currency units the feed's resulting price is in terms of. _base The base currency unit being priced by the feed. */ mapping(uint256 =&gt; mapping(uint256 =&gt; IJBPriceFeed)) public override feedFor; Arguments: uint256 is the currency units the feed's resulting price is in terms of.uint256 is the base currency unit being priced by the feed. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPrices interface.","keywords":""},{"title":"SetOperator","type":0,"sectionRef":"#","url":"dev/api/contracts/jboperatorstore/events/setoperator","content":"SetOperator Emitted from: setOperatorsetOperators Definition​ event SetOperator( address indexed operator, address indexed account, uint256 indexed domain, uint256[] permissionIndexes, uint256 packed ); operator is the address of the operator that was set.account is the account that is that now has an operator set.domain is the domain that the operator's permissions will be applied within.permissionIndexes is an array of permissions that has been given to the operator.packed is the packed version of the permission indexes.","keywords":""},{"title":"permissionsOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jboperatorstore/properties/permissionsof","content":"permissionsOf Contract: JBOperatorStore​‌ Interface: IJBOperatorStore The permissions that an operator has been given to operate on a specific domain. An account can give an operator permissions that only pertain to a specific domain namespace. There is no domain with a value of 0 – accounts can use the 0 domain to give an operator permissions to all domains on their behalf. Permissions are stored in a packed uint256. Each 256 bits represents the on/off state of a permission. Applications can specify the significance of each index. Definition​ /** @notice The permissions that an operator has been given to operate on a specific domain. @dev An account can give an operator permissions that only pertain to a specific domain namespace. There is no domain with a value of 0 – accounts can use the 0 domain to give an operator permissions to all domains on their behalf. @dev Permissions are stored in a packed `uint256`. Each 256 bits represents the on/off state of a permission. Applications can specify the significance of each index. _operator The address of the operator. _account The address of the account being operated. _domain The domain within which the permissions apply. Applications can use the domain namespace as they wish. */ mapping(address =&gt; mapping(address =&gt; mapping(uint256 =&gt; uint256))) public override permissionsOf; Arguments: _operator is the address of the operator._account is the address of the account being operated._domain is the domain within which the permissions apply. Applications can use the domain namespace as they wish. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBOperatorStore interface.","keywords":""},{"title":"get","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/get","content":"get Contract: JBFundingCycleStore​‌ Interface: IJBFundingCycleStore Step by stepCodeBug bounty Get the funding cycle with the given configuration for the specified project. Definition​ function get(uint256 _projectId, uint256 _configuration) external view override returns (JBFundingCycle memory fundingCycle) { ... } Arguments: _projectId is the ID of the project to which the funding cycle belongs._configuration is the configuration of the funding cycle to get. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBFundingCycleStore interface.The function returns the JBFundingCycle. Body​ Return the struct for the provided configuration and project. return _getStructFor(_projectId, _configuration); Internal references: _getStructFor","keywords":""},{"title":"currentBallotStateOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/currentballotstateof","content":"currentBallotStateOf Contract: JBFundingCycleStore​‌ Interface: IJBFundingCycleStore Step by stepCodeBug bounty The current ballot state of the project. Definition​ function currentBallotStateOf(uint256 _projectId) external view override returns (JBBallotState) { ... } Arguments: _projectId is the ID of the project to check the ballot state of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBFundingCycleStore interface.The function returns the project's current JBBallotState. Body​ Get a reference to the latest funding cycle for the project. // Get a reference to the latest funding cycle configuration. uint256 _fundingCycleConfiguration = latestConfigurationOf[_projectId]; Internal references: latestConfigurationOf Get a reference to the funding cycle for the latest configuration. // Resolve the funding cycle for the for the latest configuration. JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration); Internal references: _getStructFor Return the ballot state of the latest funding cycle configuration as is determined by the current configuration and the funding cycle it's based on. return _ballotStateOf( _projectId, _fundingCycle.configuration, _fundingCycle.start, _fundingCycle.basedOn ); Internal references: _ballotStateOf","keywords":""},{"title":"JBPrices","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprices/","content":"JBPrices Manages and normalizes price feeds. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBPrices.sol Addresses​ Ethereum mainnet: 0xCDE93bdA2a706Fc652F7e75241bA949aCB9f4Fe5 Ethereum rinkeby: 0xFF1D73AB28140b574Bb7A90e9fBCeD1eDAFce5c1 Interfaces​ Name\tDescriptionIJBPrices\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionOwnable\tIncludes convenience functionality for checking a message sender's permissions before executing certain transactions. Constructor​ /** @param _owner The address that will own the contract. */ constructor(address _owner) { // Transfer the ownership. transferOwnership(_owner); } _owner is the address that will own the contract. Events​ Name\tDataAddFeed uint256 indexed currencyuint256 indexed baseIJBPriceFeed feed Properties​ Function\tDefinitionfeedFor Params uint256 _currencyuint256 _base Returns IJBPriceFeed Read​ Function\tDefinitionpriceFor Params uint256 _currencyuint256 _baseuint256 _decimals Returns uint256 price Write​ Function\tDefinitionaddFeedFor Traits onlyOwner Params uint256 _currencyuint256 _baseIJBPriceFeed _feed","keywords":""},{"title":"_packedPermissions","type":0,"sectionRef":"#","url":"dev/api/contracts/jboperatorstore/read/-_packedpermissions","content":"_packedPermissions Contract: JBOperatorStore​‌ Step by stepCodeErrorsBug bounty Converts an array of permission indexes to a packed uint256. Definition​ function _packedPermissions(uint256[] calldata _indexes) private pure returns (uint256 packed) {...} _indexes are the indexes of the permissions to pack.The view function is private to the contract.The view function does not modify or reference state variables outside the function.The function returns the packed value. Body​ Loop through the provided indexes. for (uint256 _i = 0; _i &lt; _indexes.length; _i++) { ... } Get a reference to the permission index being iterated on. uint256 _index = _indexes[_i]; Make sure the permission index is one of the 255 indexes in a uint256. if (_index &gt; 255) revert PERMISSION_INDEX_OUT_OF_BOUNDS(); Flip the bit at the specified index of the packed value being returned to indicate a truthy permission. // Turn the bit at the index on. packed |= 1 &lt;&lt; _index; ","keywords":""},{"title":"_configureIntrinsicPropertiesFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/write/-_configureintrinsicpropertiesfor","content":"_configureIntrinsicPropertiesFor Contract: JBFundingCycleStore​ Step by stepCodeErrorsBug bounty Updates the configurable funding cycle for this project if it exists, otherwise creates one. Definition​ function _configureIntrinsicPropertiesFor( uint256 _projectId, uint256 _configuration, uint256 _weight, uint256 _mustStartAtOrAfter ) private { ... } Arguments: _projectId is the ID of the project to find a configurable funding cycle for._configuration is the time at which the funding cycle was configured._weight is the weight to store in the configured funding cycle._mustStartAtOrAfter is the time before which the initialized funding cycle can't start. The function is private to this contract.The function doesn't return anything. Body​ If the project does not yet have a funding cycle, initialize a new one. // If there's not yet a funding cycle for the project, initialize one. if (latestConfigurationOf[_projectId] == 0) // Use an empty funding cycle as the base. return _initFor(_projectId, _getStructFor(0, 0), _configuration, _mustStartAtOrAfter, _weight); Internal references: latestConfigurationOf_initFor_getStructFor If there's no standby funding cycle, get a reference to the project's eligible funding cycle. The configurable funding cycle will have to be initialized based on the eligible cycle. // Get the active funding cycle's configuration. uint256 _currentConfiguration = _eligibleOf(_projectId); Internal references: _eligibleOf If there is no eligible funding cycle for the project, get a reference instead to the project's latest funding cycle configuration, which may have been initialized long into the past. // If an eligible funding cycle does not exist, get a reference to the latest funding cycle configuration for the project. if (_currentConfiguration == 0) // Get the latest funding cycle's configuration. _currentConfiguration = latestConfigurationOf[_projectId]; Internal references: latestConfigurationOf Resolve the funding cycle struct for the currently referenced configuration. // Get a reference to the funding cycle. JBFundingCycle memory _baseFundingCycle = _getStructFor(_projectId, _currentConfiguration); Internal references: _getStructFor If the configuration isn't approved, get a reference to the configuration it's based on which must be the latest approved configuration. if (!_isApproved(_projectId, _baseFundingCycle) || block.timestamp &lt; _baseFundingCycle.start) // If it hasn't been approved or hasn't yet started, set the ID to be the funding cycle it's based on, // which carries the latest approved configuration. _baseFundingCycle = _getStructFor(_projectId, _baseFundingCycle.basedOn; Internal references: _isApproved_getStructFor Make sure the configuration isn't the same as the base configuration. Only one configuration can be made to a project's funding cycles per block. // The configuration can't be the same as the base configuration. if (_baseFundingCycle.configuration == _configuration) revert NO_SAME_BLOCK_RECONFIGURATION(); Get a reference to the time after which the base funding cycle's ballot will be resolved. The funding cycle that will be initialized can start any time after the base funding cycle's ballot's duration is up. // The time after the ballot of the provided funding cycle has expired. // If the provided funding cycle has no ballot, return the current timestamp. uint256 _timestampAfterBallot = _baseFundingCycle.ballot == IJBFundingCycleBallot(address(0)) ? 0 : _configuration + _baseFundingCycle.ballot.duration(); Internal references: duration Initialize a funding cycle with the correct configuration. Make sure it can only start after the base cycle's ballot has resolved. _initFor( _projectId, _baseFundingCycle, _configuration, // Can only start after the ballot. _timestampAfterBallot &gt; _mustStartAtOrAfter ? _timestampAfterBallot : _mustStartAtOrAfter, _weight ); Internal references: _initFor","keywords":""},{"title":"setOperator","type":0,"sectionRef":"#","url":"dev/api/contracts/jboperatorstore/write/setoperator","content":"setOperator Contract: JBOperatorStore​‌ Interface: IJBOperatorStore Step by stepCodeEventsBug bounty Sets permissions for an operator. Only an address can set its own operators. Definition​ function setOperator(JBOperatorData calldata _operatorData) external override { ... } _operatorData is the JBOperatorData that specifies the params for the operator being set.The function can be accessed externally by anyone.The function overrides a function definition from the IJBOperatorStore interface.The function doesn't return anything. Body​ Pack the provided permissions into a uint256. Each bit of the resulting value represents whether or not permission has been granted for that index. // Pack the indexes into a uint256. uint256 _packed = _packedPermissions(_operatorData.permissionIndexes); Internal references: _packedPermissions Store the packed permissions as the permissions of the provided operator, on behalf of the msg.sender, specifically for the provided domain. // Store the new value. permissionsOf[_operatorData.operator][msg.sender][_operatorData.domain] = _packed; Internal references: permissionsOf Emit a SetOperator event with the relevant parameters. emit SetOperator( _operatorData.operator, msg.sender, _operatorData.domain, _operatorData.permissionIndexes, _packed ); Event references: SetOperator","keywords":""},{"title":"currentOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/currentof","content":"currentOf Contract: JBFundingCycleStore​‌ Interface: IJBFundingCycleStore Step by stepCodeBug bounty The funding cycle that is currently active for the specified project. If a current funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0. Definition​ function currentOf(uint256 _projectId) external view override returns (JBFundingCycle memory fundingCycle) { ... } Arguments: _projectId is the ID of the project to get the current funding cycle of. The view function can be accessed externally by anyone, and internally by the contract.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBFundingCycleStore interface.The function returns the project's current JBFundingCycle. Body​ If there are no stored funding cycles for the provided project, there can't be an active funding cycle so an empty funding cycle should be returned. // If the project does not have a funding cycle, return an empty struct. if (latestConfigurationOf[_projectId] == 0) return _getStructFor(0, 0); Internal references: latestConfigurationOf_getStructFor Get a reference to the configuration of an eligible funding cycle if there is one. This eligible cycle might not yet be approved. // Get a reference to the configuration of the eligible funding cycle. uint256 _fundingCycleConfiguration = _eligibleOf(_projectId); Internal references: _eligibleOf Create a reference to a funding cycle. // Keep a reference to the eligible funding cycle. JBFundingCycle memory _fundingCycle; If there's a candidate funding cycle configuration, check to see if it is approved. If so, return the funding cycle as the current funding cycle of the project. Otherwise, get a reference to the funding cycle that the candidate is based on. A current funding cycle will be one derived from this reference. // If an eligible funding cycle exists... if (_fundingCycleConfiguration &gt; 0) { // Resolve the funding cycle for the eligible configuration. _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration); // Check to see if this funding cycle's ballot is approved. // If so, return it. if (_isApproved(_projectId, _fundingCycle)) return _fundingCycle; // If it hasn't been approved, set the funding cycle configuration to be the configuration of the funding cycle that it's based on, // which carries the last approved configuration. _fundingCycleConfiguration = _fundingCycle.basedOn; } Internal references: _getStructFor_isApproved If there's not a candidate funding cycle configuration, get a reference the latest stored funding cycle for the project. If it's not approved or if it hasn't yet started, get a reference to the cycle it's based on. A current funding cycle will be one derived from this reference. else { // No upcoming funding cycle found that is eligible to become active, // so use the last configuration. _fundingCycleConfiguration = latestConfigurationOf[_projectId]; // Get the funding cycle for the latest ID. _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration); // If it's not approved or if it hasn't yet started, get a reference to the funding cycle that the latest is based on, which has the latest approved configuration. if (!_isApproved(_projectId, _fundingCycle) || block.timestamp &lt; _fundingCycle.start) _fundingCycleConfiguration = _fundingCycle.basedOn; } Internal references: latestConfigurationOf_getStructFor_isApproved If the current referenced configuration is 0, there must not be a current cycle so return an empty one. // If there is not funding cycle to base the current one on, there can't be a current one. if (_fundingCycleConfiguration == 0) return _getStructFor(0, 0); Internal references: _getStructFor Create the funding cycle structure using the current reference. The current funding cycle will be one based on this reference. // The funding cycle to base a current one on. _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration); Internal references: _getStructFor If the base has a duration of 0, it must still be current. // If the base has no duration, it's still the current one. if (_fundingCycle.duration == 0) return _fundingCycle; Return a funding cycle based on the one currently referenced. The mock funding cycle is allowed to have started already, which is why a true flag is passed in. // Return a mock of the current funding cycle. return _mockFundingCycleBasedOn(_fundingCycle, true); Internal references: _mockFundingCycleBasedOn","keywords":""},{"title":"hasPermissions","type":0,"sectionRef":"#","url":"dev/api/contracts/jboperatorstore/read/haspermissions","content":"hasPermissions Contract: JBOperatorStore​‌ Interface: IJBOperatorStore Step by stepCodeErrorsBug bounty Whether or not an operator has the permission to take certain actions pertaining to the specified domain. Definition​ function hasPermissions( address _operator, address _account, uint256 _domain, uint256[] calldata _permissionIndexes ) external view override returns (bool) { ... } _operator is the operator to check_account is the account that has given out permission to the operator._domain is the domain that the operator has been given permissions to operate._permissionIndexes is an array of permission indexes to check for.The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBOperatorStore interface.The function returns a flag indicating whether the operator has all specified permissions. Body​ Loop through the provided _permissionIndexes. for (uint256 _i = 0; _i &lt; _permissionIndexes.length; _i++) { ... } Get a reference to the _permissionIndex being iterated on. uint256 _permissionIndex = _permissionIndexes[_i]; Make sure the _permissionIndex is one of the 255 indexes in a uint256. if (_permissionIndex &gt; 255) revert PERMISSION_INDEX_OUT_OF_BOUNDS(); If the bit at the specified permission index of the packed permissions of the operator for the specified account and within the specified domain is off, return false because all provided permissions are not on. if (((permissionsOf[_operator][_account][_domain] &gt;&gt; _permissionIndex) &amp; 1) == 0) return false; Internal references: permissionsOf After the loop, return true since the loop checked all specified permissions without returning false. return true; ","keywords":""},{"title":"SetMetadata","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/events/setmetadata","content":"SetMetadata Emitted from: setMetadataOf Definition​ event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller); projectId is the token ID of the NFT (ERC-721) that represents the project who's URI was set.metadata is the metadata that that was associated with the project upon its creation. It can be found using the metadataContentOf property.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"hasPermission","type":0,"sectionRef":"#","url":"dev/api/contracts/jboperatorstore/read/haspermission","content":"hasPermission Contract: JBOperatorStore​‌ Interface: IJBOperatorStore Step by stepCodeErrors Whether or not an operator has the permission to take a certain action pertaining to the specified domain. Definition​ function hasPermissions( address _operator, address _account, uint256 _domain, uint256[] calldata _permissionIndexes ) external view override returns (bool) { ... } _operator is the operator to check_account is the account that has given out permission to the operator._domain is the domain that the operator has been given permissions to operate._permissionIndexes are the permission index to check for.The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBOperatorStore interface.The function returns a flag indicating whether the operator has the specified permission. Body​ Make sure the _permissionIndex is one of the 255 indexes in a uint256. if (_permissionIndex &gt; 255) revert PERMISSION_INDEX_OUT_OF_BOUNDS(); Return true if the bit is flipped on for the specified permission index. Otherwise return false. return (((permissionsOf[_operator][_account][_domain] &gt;&gt; _permissionIndex) &amp; 1) == 1) Internal references: permissionsOf","keywords":""},{"title":"JBProjects","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/","content":"JBProjects Stores project ownership and metadata. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBProjects.sol Addresses​ Ethereum mainnet: 0xD8B4359143eda5B2d763E127Ed27c77addBc47d3 Ethereum rinkeby: 0x2d8e361f8F1B5daF33fDb2C99971b33503E60EEE Interfaces​ Name\tDescriptionIJBProjects\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionJBOperatable\tIncludes convenience functionality for checking a message sender's permissions before executing certain transactions. ERC721Votes\tA checkpointable standard definition for non-fungible tokens (NFTs). Ownable\tIncludes convenience functionality for specifying an address that owns the contract, with modifiers that only allow access by the owner. Constructor​ constructor(IJBOperatorStore _operatorStore) ERC721('Juicebox Projects', 'JUICEBOX') EIP712('Juicebox Projects', '1') JBOperatable(_operatorStore) {} _operatorStore is an IJBOperatorStore contract storing operator assignments. Events​ Name\tDataCreate uint256 indexed projectIdaddress indexed ownerJBProjectMetadata metadataaddress caller SetMetadata uint256 indexed projectIdJBProjectMetadata metadataaddress caller SetTokenUriResolver IJBTokenUriResolver indexed resolveraddress caller Properties​ Name\tDefinitioncount Returns uint256 metadataContentOf Params uint256 _projectIduint256 _domain Returns string tokenUriResolver Returns IJBTokenUriResolver Read​ Function\tDefinitiontokenURI Params uint256 _projectId supportsInterface Params uint256 _interfaceId Returns bool Write​ Function\tDefinitioncreateFor Params address _ownerJBProjectMetadata _metadata Returns uint256 projectId setMetadataOf Traits requirePermission Params uint256 _projectIdJBProjectMetadata _metadata setTokenUriResolver Traits onlyOwner Params IJBTokenUriResolver _newResolver","keywords":""},{"title":"_standbyOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/-_standbyof","content":"_standbyOf Contract: JBFundingCycleStore​ Step by stepCodeBug bounty The project's stored funding cycle that hasn't yet started and should be used next, if one exists. A value of 0 is returned if no funding cycle was found. Assumes the project has a latest configuration. Definition​ function _standbyOf(uint256 _projectId) private view returns (uint256 configuration) { ... } Arguments: _projectId is the ID of a project to look through for a standby cycle. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns the configuration of the standby funding cycle if one exists, or 0 if one doesn't exist. Body​ Get a reference to the latest funding cycle for the project. // Get a reference to the project's latest funding cycle. configuration = latestConfigurationOf[_projectId]; Internal references: latestConfigurationOf Get the struct for the latest funding cycle. // Get the necessary properties for the latest funding cycle. JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, configuration); Internal references: _getStructFor If the cycle has started, return 0 since there is not a stored funding cycle in standby. // There is no upcoming funding cycle if the latest funding cycle has already started. if (block.timestamp &gt;= _fundingCycle.start) return 0; If this is the first funding cycle, it must be queued since it doesn't require a ballot's approval. // If this is the first funding cycle, it is queued. if (_fundingCycle.number == 1) return configuration; Get a reference to the cycle that the latest is based on. // Get the necessary properties for the base funding cycle. JBFundingCycle memory _baseFundingCycle = _getStructFor(_projectId, _fundingCycle.basedOn); Internal references: _getStructFor It's possible that the latest cycle was configured to start at or after a date in the future that comes after another iteration of the currently active funding cycle. If this is the case, there is no immediately queued funding cycle. // If the latest configuration doesn't start until after another base cycle, return 0. if ( _baseFundingCycle.duration &gt; 0 &amp;&amp; block.timestamp &lt; _fundingCycle.start - _baseFundingCycle.duration ) return 0; ","keywords":""},{"title":"SetTokenUriResolver","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/events/settokenuriresolver","content":"SetTokenUriResolver Emitted from: setTokenUriResolver Definition​ event SetTokenUriResolver(IJBTokenUriResolver indexed newResolver, address caller); newResolver is the new URI resolver contract.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"queuedOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/read/queuedof","content":"queuedOf Contract: JBFundingCycleStore​‌ Interface: IJBFundingCycleStore Step by stepCodeBug bounty The funding cycle that's next up for the specified project. If a queued funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0. Definition​ function queuedOf(uint256 _projectId) external view override returns (JBFundingCycle memory fundingCycle) { ... } Arguments: _projectId is the ID of the project to get the queued funding cycle of. The view function can be accessed externally by anyone, and internally by the contract.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBFundingCycleStore interface.The function returns a JBFundingCycle. Body​ If there are no stored funding cycles for the provided project, there can't be a queued funding cycle so an empty funding cycle should be returned. // If the project does not have a funding cycle, return an empty struct. if (latestConfigurationOf[_projectId] == 0) return _getStructFor(0, 0); Internal references: latestConfigurationOf_getStructFor Check to see if there's a standby funding cycle configuration. // Get a reference to the configuration of the standby funding cycle. uint256 _standbyFundingCycleConfiguration = _standbyOf(_projectId); Internal references: _standbyOf If there is a stanby cycle and it is approved, it must be the queued funding cycle for the project. Otherwise get a reference to the funding cycle structure based on the yet-to-be-approved standby configuration. // If it exists, return its funding cycle if it is approved. if (_standbyFundingCycleConfiguration &gt; 0) { fundingCycle = _getStructFor(_projectId, _standbyFundingCycleConfiguration); if (_isApproved(_projectId, fundingCycle)) return fundingCycle; // Resolve the funding cycle for the latest configured funding cycle. fundingCycle = _getStructFor(_projectId, fundingCycle.basedOn); } Internal references: _isApproved_getStructFor If there is no standby funding cycle, get the last stored funding cycle for the project. If it has already started, a queued funding cycle can be constructed based on the properties of this funding cycle. else { // Resolve the funding cycle for the latest configured funding cycle. fundingCycle = _getStructFor(_projectId, latestConfigurationOf[_projectId]); // If the latest funding cycle starts in the future, it must start in the distant future // since its not in standby. In this case base the queued cycles on the base cycle. if (fundingCycle.start &gt; block.timestamp) fundingCycle = _getStructFor(_projectId, fundingCycle.basedOn); } Internal references: latestConfigurationOf_getStructFor If the referenced funding cycle has a duration of 0, there can't be a queued funding cycle since configurations with no duration are being made manually instead of on a schedule. // There's no queued if the current has a duration of 0. if (fundingCycle.duration == 0) return _getStructFor(0, 0); Internal references: _getStructFor If the referenced funding cycle has been approved, return a queued cycle based on it. The mock funding cycle is not allowed to have started already, which is why a false flag is passed in. // Check to see if this funding cycle's ballot is approved. // If so, return a funding cycle based on it. if (_isApproved(_projectId, fundingCycle)) return _mockFundingCycleBasedOn(fundingCycle, false); Internal references: _isApproved_mockFundingCycleBasedOn Get a reference to the funding cycle that the current eligible cycle is based on which must be the latest approved cycle configuration. // Get the funding cycle of its base funding cycle, which carries the last approved configuration. fundingCycle = _getStructFor(_projectId, fundingCycle.basedOn); Internal references: _getStructFor If the base has a duration of 0, it must still be current and there must not be a queued cycle. // There's no queued if the base, which must still be the current, has a duration of 0. if (fundingCycle.duration == 0) return _getStructFor(0, 0); Internal references: _getStructFor Return a funding cycle based on the one current referenced, which must be the last approved cycle. The mock funding cycle is not allowed to have started already, which is why a false flag is passed in. // Return a mock of the next up funding cycle. return _mockFundingCycleBasedOn(fundingCycle, false); Internal references: _mockFundingCycleBasedOn","keywords":""},{"title":"count","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/properties/count","content":"count Contract: JBProjects Interface: IJBProjects The number of projects that have been created using this contract. The count is incremented with each new project created. The resulting ERC-721 token ID for each project is the newly incremented count value. Definition​ /** @notice The number of projects that have been created using this contract. @dev The count is incremented with each new project created. The resulting ERC-721 token ID for each project is the newly incremented count value. */ uint256 public override count = 0; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjects interface.","keywords":""},{"title":"priceFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprices/read/pricefor","content":"priceFor Contract: JBPrices​‌ Interface: IJBPrices Step by stepCodeErrorsBug bounty Gets the number of _currency units that can be converted to 1 _base unit. Definition​ function priceFor( uint256 _currency, uint256 _base, uint256 _decimals ) external view override returns (uint256) { ... } Arguments: _currency is the currency units the feed's resulting price is in terms of._base is the base currency unit being priced by the feed._decimals is the number of decimals the returned fixed point price should include. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBPrices interface.The function returns the price of the currency in terms of the base, as a fixed point number with the specified number of decimals. Body​ Return 1 if the currency and the base are the same, since they have the same price. Normalize to the desired number of decimals. // If the currency is the base, return 1 since they are priced the same. Include the desired number of decimals. if (_currency == _base) return 10**_decimals; Get a reference to the feed. // Get a reference to the feed. IJBPriceFeed _feed = feedFor[_currency][_base]; Internal references: feedFor If the feed exists, return the price that it's currently reporting. // If it exists, return the price. if (_feed != IJBPriceFeed(address(0))) return _feed.currentPrice(_decimals); External references: currentPrice Get a reference to the feed using the inverse pair. // Get the inverse feed. _feed = feedFor[_base][_currency]; Internal references: feedFor If the inverse feed exists, return the inverse of the price that it's currently reporting. // If it exists, return the inverse price. if (_feed != IJBPriceFeed(address(0))) return PRBMath.mulDiv(10**_decimals, 10**_decimals, _feed.currentPrice(_decimals)); Library references: PRBMath .mulDiv(...) External references: currentPrice Revert if no feed was found. // No price feed available, revert. revert PRICE_FEED_NOT_FOUND(); ","keywords":""},{"title":"addFeedFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprices/write/addfeed","content":"addFeedFor Contract: JBPrices​‌ Interface: IJBPrices Step by stepCodeErrorsEventsBug bounty Add a price feed for a currency in terms of the provided base currency. Current feeds can't be modified. Definition​ function addFeedFor( uint256 _currency, uint256 _base, IJBPriceFeed _feed ) external override onlyOwner { ... } Arguments: _currency is the currency that the price feed is for._base is the currency that the price feed is based on._feed is the IJBPriceFeed contract being added. Through the onlyOwner modifier, this function can only be accessed by the address that owns this contract.The function overrides a function definition from the IJBPrices interface.The function doesn't return anything. Body​ Make sure there isn't already a price feed set for the currency base pair. // There can't already be a feed for the specified currency. if (feedFor[_currency][_base] != IJBPriceFeed(address(0))) revert PRICE_FEED_ALREADY_EXISTS(); Internal references: feedFor Store the provided feed for the currency base pair. // Store the feed. feedFor[_currency][_base] = _feed; Internal references: feedFor Emit an AddFeed event with the relevant parameters. emit AddFeed(_currency, _base, _feed); Event references: AddFeed","keywords":""},{"title":"_initFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/write/-_initfor","content":"_initFor Contract: JBFundingCycleStore​ Step by stepCodeEventsBug bounty Initializes a funding cycle with the specified properties. Definition​ function _initFor( uint256 _projectId, JBFundingCycle memory _baseFundingCycle, uint256 _configuration, uint256 _mustStartAtOrAfter, uint256 _weight ) private { ... } Arguments: _projectId is the ID of the project to which the funding cycle being initialized belongs._baseFundingCycle is the funding cycle to base the initialized one on._configuration is the configuration of the funding cycle being initialized._mustStartAtOrAfter is the time before which the initialized funding cycle cannot start._weight is the weight to give the newly initialized funding cycle. The function is private to this contract.The function doesn't return anything. Body​ If no base funding cycle was provided, create a first funding cycle for the project by storing its intrinsic properties. Otherwise, create a new funding cycle by deriving values from the specified base cycle, interpreting a weight of 0 to inherit from the discounted weight of the base funding cycle and a weight of 1 as a weight of 0. // If there is no base, initialize a first cycle. if (_baseFundingCycle.number == 0) { // The first number is 1. uint256 _number = 1; // Set fresh intrinsic properties. _packAndStoreIntrinsicPropertiesOf( _configuration, _projectId, _number, _weight, _baseFundingCycle.configuration, _mustStartAtOrAfter ); } else { // Derive the correct next start time from the base. uint256 _start = _deriveStartFrom(_baseFundingCycle, _mustStartAtOrAfter); // A weight of 1 is treated as a weight of 0. // This is to allow a weight of 0 (default) to represent inheriting the discounted weight of the previous funding cycle. _weight = _weight &gt; 0 ? (_weight == 1 ? 0 : _weight) : _deriveWeightFrom(_baseFundingCycle, _start); // Derive the correct number. uint256 _number = _deriveNumberFrom(_baseFundingCycle, _start); // Update the intrinsic properties. _packAndStoreIntrinsicPropertiesOf( _configuration, _projectId, _number, _weight, _baseFundingCycle.configuration, _start ); } Internal references: _packAndStoreIntrinsicPropertiesOf_deriveStartFrom_deriveWeightFrom_deriveNumberFrom Store the initialized configuration as the latest of the project. // Set the project's latest funding cycle configuration. latestConfigurationOf[_projectId] = _configuration; Internal references: latestConfigurationOf Emit an Init event with the relevant parameters. emit Init(_configuration, _projectId, _baseFundingCycle.configuration); Event references: Init","keywords":""},{"title":"fundingCycleStore","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/properties/fundingcyclestore","content":"fundingCycleStore Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore The contract storing all funding cycle configurations. Definition​ /** @notice The contract storing all funding cycle configurations. */ IJBFundingCycleStore public immutable override fundingCycleStore; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.","keywords":""},{"title":"supportsInterface","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/read/supportsinterface","content":"supportsInterface Contract: JBETHERC20SplitsPayer Interface: IERC165 Step by stepCodeBug bounty Indicates if this contract adheres to the specified interface. See {IERC165-supportsInterface}. Definition​ function supportsInterface(bytes4 _interfaceId) public view virtual override(IERC165, ERC721) returns (bool) { ... } Arguments: _interfaceId is the ID of the interface to check for adherance to. The view function can be accessed externally by anyone, and internally within this contract.The view function does not alter state on the blockchain.The function overrides a function definition from the IERC165 interface.The function returns a flag indicating if this contract adheres to the specified interface. Body​ Return true if the provided interface ID is in the list of interfaces this contract adheres to. return _interfaceId == type(IJBProjects).interfaceId || _interfaceId == type(IJBOperatable).interfaceId || super.supportsInterface(_interfaceId); ","keywords":""},{"title":"createFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/write/createfor","content":"createFor Contract: JBProjects Interface: IJBProjects Step by stepCodeEventsBug bounty Create a new project for the specified owner, which mints an NFT (ERC-721) into their wallet. Anyone can create a project on an owner's behalf. Definition​ function createFor(address _owner, JBProjectMetadata calldata _metadata) external override returns (uint256 projectId) { ... } Arguments: _owner is the address that will be the owner of the project._metadata is a struct containing metadata content about the project, and domain within which the metadata applies. The function can be accessed externally by anyone.The function overrides a function definition from the IJBProjects interface.The function returns the token ID of the newly created project. Body​ Increment the count. Set it as the project's ID which is the returned value. // Increment the count, which will be used as the ID. projectId = ++count; Internal references: count Mint a new NFT token belonging to the owner using the projectId as the tokenId. // Mint the project. _safeMint(projectId, count); Internal references: _safeMint If metadata was provided (meaning its content is not an empty string), store it for newly created project under the provided domain. // Set the metadata if one was provided. if (bytes(_metadata.content).length &gt; 0) metadataContentOf[projectId][_metadata.domain] = _metadata.content; Internal references: metadataContentOf Emit a Create event with all relevant parameters. emit Create(projectId, _owner, _metadata, msg.sender); Event references: Create","keywords":""},{"title":"tokenUriResolver","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/properties/tokenuriresolver","content":"tokenUriResolver Contract: JBProjects Interface: IJBProjects The contract resolving each project ID to its ERC721 URI. Definition​ /** @notice The contract resolving each project ID to its ERC721 URI. */ IJBTokenUriResolver public override tokenUriResolver; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjects interface.","keywords":""},{"title":"Create","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/events/create","content":"Create Emitted from: createFor Definition​ event Create( uint256 indexed projectId, address indexed owner, JBProjectMetadata metadata, address caller ); projectId is the token ID of the NFT (ERC-721) that was created to represent the project.owner is the address that owns the NFT (ERC-721) token representing the project.metadata is the metadata that that was associated with the project upon its creation. It can be found using the metadataContentOf property.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"_MAX_FIXED_POINT_FIDELITY","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/properties/-_max_fixed_point_fidelity","content":"_MAX_FIXED_POINT_FIDELITY Contract: JBSingleTokenPaymentTerminalStore​‌ Ensures a maximum number of decimal points of persisted fidelity on mulDiv operations of fixed point numbers. Definition​ /** @notice Ensures a maximum number of decimal points of persisted fidelity on mulDiv operations of fixed point numbers. */ uint256 private constant _MAX_FIXED_POINT_FIDELITY = 18; This value must be hardcoded.The resulting view function is private to this contract.","keywords":""},{"title":"metadataContentOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/properties/metadatacontentof","content":"metadataContentOf Contract: JBProjects Interface: IJBProjects The metadata for each project, which can be used across several domains. Definition​ /** @notice The metadata for each project, which can be used across several domains. _projectId The ID of the project to which the metadata belongs. _domain The domain within which the metadata applies. Applications can use the domain namespace as they wish. */ mapping(uint256 =&gt; mapping(uint256 =&gt; string)) public override metadataContentOf; Arguments: _projectId is the ID of the project to which the metadata belongs._domain is the domain within which the metadata applies. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjects interface.","keywords":""},{"title":"balanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/properties/balanceof","content":"balanceOf Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore The amount of tokens that each project has for each terminal, in terms of the terminal's token. Definition​ /** @notice The amount of tokens that each project has for each terminal, in terms of the terminal's token. @dev The used distribution limit is represented as a fixed point number with the same amount of decimals as its relative terminal. _terminal The terminal to which the balance applies. _projectId The ID of the project to get the balance of. */ mapping(IJBSingleTokenPaymentTerminal =&gt; mapping(uint256 =&gt; uint256)) public override balanceOf; Arguments: _terminal is the terminal to which the balance applies._projectId is the ID of the project to get the balance of. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.","keywords":""},{"title":"directory","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/properties/directory","content":"directory Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore The directory of terminals and controllers for projects. Definition​ /** @notice The directory of terminals and controllers for projects. */ IJBDirectory public immutable override directory; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.","keywords":""},{"title":"setOperators","type":0,"sectionRef":"#","url":"dev/api/contracts/jboperatorstore/write/setoperators","content":"setOperators Contract: JBOperatorStore​‌ Interface: IJBOperatorStore Step by stepCodeEventsBug bounty Sets permissions for many operators. Only an address can set its own operators. Definition​ function setOperators(JBOperatorData[] calldata _operatorData) external override { ... } _operatorData are the JBOperatorData that specify the params for each operator being set.The function can be accessed externally by anyone.The function overrides a function definition from the IJBOperatorStore interface.The function doesn't return anything. Body​ Loop through the provided operator data. for (uint256 _i = 0; _i &lt; _operatorData.length; _i++) { ... } Pack the provided permissions into a uint256. Each bit of the resulting value represents whether or not permission has been granted for that index. // Pack the indexes into a uint256. uint256 _packed = _packedPermissions(_operatorData[_i].permissionIndexes); Internal references: _packedPermissions Store the packed permissions as the permissions of the provided operator, on behalf of the msg.sender, specifically for the provided domain. // Store the new value. permissionsOf[_operatorData[_i].operator][msg.sender][_operatorData[_i].domain] = _packed; Internal references: permissionsOf Emit a SetOperator event with the relevant parameters. emit SetOperator( _operatorData[_i].operator, msg.sender, _operatorData[_i].domain, _operatorData[_i].permissionIndexes, _packed ); Event references: SetOperator","keywords":""},{"title":"setMetadataOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/write/setmetadataof","content":"setMetadataOf Contract: JBProjects Interface: IJBProjects Step by stepCodeEventsBug bounty Allows a project owner to set the project's metadata content for a particular domain namespace. Only a project's owner or operator can set its metadata. Applications can use the domain namespace as they wish. Definition​ function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external override requirePermission(ownerOf(_projectId), _projectId, JBOperations.SET_METADATA) { ... } Arguments: _projectId is the ID of the project who's metadata is being changed._metadata is the struct containing metadata content, and domain within which the metadata applies. Through the requirePermission modifier, the function is only accessible by the project's owner, or from an operator that has been given the JBOperations.SET_METADATA permission by the project owner for the provided _projectId.The function overrides a function definition from the IJBProjects interface.The function doesn't return anything. Body​ Store the project's new metadata content within the specified domain. // Set the project's new metadata content within the specified domain. metadataContentOf[_projectId][_metadata.domain] = _metadata.content; Internal references: metadataContentOf Emit a SetMetadataCid event with the relevant parameters. emit SetMetadata(_projectId, _metadata, msg.sender); Event references: SetMetadata","keywords":""},{"title":"configureFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbfundingcyclestore/write/configurefor","content":"configureFor Contract: JBFundingCycleStore​‌ Interface: IJBFundingCycleStore Step by stepCodeErrorsEventsBug bounty Configures the next eligible funding cycle for the specified project. Only a project's current controller can configure its funding cycles. Definition​ function configureFor( uint256 _projectId, JBFundingCycleData calldata _data, uint256 _metadata, uint256 _mustStartAtOrAfter ) external override onlyController(_projectId) returns (JBFundingCycle memory) { ... } Arguments: _projectId is the ID of the project being configured._data is the JBFundingCycleData for the configuration._metadata is arbitrary extra data to associate with this funding cycle configuration that's not used within._mustStartAtOrAfter is the time before which the initialized funding cycle cannot start. Through the onlyController modifier, the function can only be accessed by the controller of the _projectId.The function overrides a function definition from the IJBFundingCycleStore interface.Returns the JBFundingCycle that the configuration will take effect during.. Body​ Make sure the duration fits in a uint64. // Duration must fit in a uint64. if (_data.duration &gt; type(uint64).max) revert INVALID_DURATION(); Make sure the _data.discountRate is less than the expected maximum value. // Discount rate must be less than or equal to 100%. if (_data.discountRate &gt; JBConstants.MAX_DISCOUNT_RATE) revert INVALID_DISCOUNT_RATE(); Library references: JBConstants .MAX_DISCOUNT_RATE Make sure the _data.weight fits in a uint80. // Weight must fit into a uint88. if (_data.weight &gt; type(uint88).max) revert INVALID_WEIGHT(); Get a reference to the time at which the configuration is occurring. // The configuration timestamp is now. uint256 _configuration = block.timestamp; Configure the intrinsic properties. This'll create a new funding cycle if there isn't a queued one already. // Set up a reconfiguration by configuring intrinsic properties. _configureIntrinsicPropertiesFor( _projectId, _configuration, _data.weight, // Must start on or after the current timestamp. _mustStartAtOrAfter &gt; block.timestamp ? _mustStartAtOrAfter : block.timestamp ); Internal references: _configureIntrinsicpropertiesFor Store all of the user configuration properties provided. These properties can all be packed into one uint256 storage slot. No need to store if the resulting stored value would be 0 since the storage slot defaults to 0. // Efficiently stores a funding cycles provided user defined properties. // If all user config properties are zero, no need to store anything as the default value will have the same outcome. if ( _data.ballot != IJBFundingCycleBallot(address(0)) || _data.duration &gt; 0 || _data.discountRate &gt; 0 ) { // ballot in bits 0-159 bytes. uint256 packed = uint160(address(_data.ballot)); // duration in bits 160-223 bytes. packed |= _data.duration &lt;&lt; 160; // discountRate in bits 224-255 bytes. packed |= _data.discountRate &lt;&lt; 224; // Set in storage. _packedUserPropertiesOf[_projectId][_configuration] = packed; } Internal references: _packedUserPropertiesOf Store the provided metadata for the configuration. No need to store if the value is 0 since the storage slot defaults to 0. // Set the metadata if needed. if (_metadata &gt; 0) _metadataOf[_projectId][_configuration] = _metadata; Internal references: _metadataOf Emit a Configure event with the relevant parameters. emit Configure(_configuration, _projectId, _data, _metadata, _mustStartAtOrAfter, msg.sender); Event references: Configure Return the JBFundingCycle struct that carries the new configuration. // Return the funding cycle for the new configuration. return _getStructFor(_projectId, _configuration); Internal references: _getStructFor","keywords":""},{"title":"JBSingleTokenPaymentTerminalStore","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/","content":"JBSingleTokenPaymentTerminalStore Manages all bookkeeping for inflows and outflows of funds from any IJBSingleTokenPaymentTerminal. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBSingleTokenPaymentTerminalStore.sol Addresses​ Ethereum mainnet: 0x96a594ABE6B910E05E486b63B32fFe29DA5d33f7 Ethereum rinkeby: 0x5d4eb71749DD9984118EBdF96aaF3CF6EAE1A745 Interfaces​ Name\tDescriptionIJBSingleTokenPaymentTerminalStore\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionReentrancyGuard\tContract module that helps prevent reentrant calls to a function. Constructor​ /** @param _directory A contract storing directories of terminals and controllers for each project. @param _fundingCycleStore A contract storing all funding cycle configurations. @param _prices A contract that exposes price feeds. */ constructor( IJBDirectory _directory, IJBFundingCycleStore _fundingCycleStore, IJBPrices _prices ) { directory = _directory; fundingCycleStore = _fundingCycleStore; prices = _prices; } _directory is an IJBDirectory contract storing directories of terminals and controllers for each project._fundingCycleStore is an IJBFundingCycleStore contract storing all funding cycle configurations._prices is an IJBPrices contract that exposes price feeds. Properties​ Function\tDefinitiondirectory Traits immutable Returns IJBDirectory fundingCycleStore Traits immutable Returns IJBFundingCycleStore prices Traits immutable Returns IJBPrices balanceOf Params IJBSingleTokenPaymentTerminal _terminaluint256 _projectId Returns uint256 usedOverflowAllowanceOf Params IJBSingleTokenPaymentTerminal _terminaluint256 _projectIduint256 _configuration Returns uint256 usedDistributionLimitOf Params IJBSingleTokenPaymentTerminal _terminaluint256 _projectIduint256 _fundingCycleId Returns uint256 Read​ Function\tDefinitioncurrentOverflowOf Params uint256 _projectId Returns uint256 currentOverflow currentTotalOverflowOf Params uint256 _projectId Returns uint256 currentTotalOverflow currentReclaimableOverflowOf Params IJBSingleTokenPaymentTerminal _terminaluint256 _projectIduint256 _tokenCountbool _useTotalOverflow Returns uint256 reclaimableOverflow currentReclaimableOverflowOf Params uint256 _projectIduint256 _tokenCountuint256 _totalSupplyuint256 _overflow Returns uint256 reclaimableOverflow Write​ Function\tDefinitionrecordPaymentFrom Traits nonReentrant Params address _payerJBTokenAmount _amountuint256 _projectIdaddress _beneficiaryuint256 _baseWeightCurrencyaddress _beneficiarystring _memobytes _metadata Returns JBFundingCycle fundingCycleuint256 tokenCountIJBPayDelegate delegatestring memo recordDistributionFor Traits nonReentrant Params uint256 _projectIduint256 _amountuint256 _currency Returns JBFundingCycle fundingCycleuint256 distributedAmount recordUsedAllowanceOf Traits nonReentrant Params uint256 _projectIduint256 _amountuint256 _currency Returns JBFundingCycle fundingCycleuint256 usedAmount recordRedemptionFor Traits nonReentrant Params address _holderuint256 _projectIduint256 _tokenCountaddress payable _beneficiarystring _memobytes _metadata Returns JBFundingCycle fundingCycleuint256 reclaimAmountIJBRedemptionDelegate delegatestring memo recordAddedBalanceFor Traits nonReentrant Params uint256 _projectIduint256 _amount recordMigration Traits nonReentrant Params uint256 _projectId Returns uint256 balance","keywords":""},{"title":"currentTotalOverflowOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/read/currenttotaloverflowof","content":"currentTotalOverflowOf Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore Step by stepCodeBug bounty Gets the current overflowed amount for a specified project across all terminals. Definition​ function currentTotalOverflowOf( uint256 _projectId, uint256 _decimals, uint256 _currency ) external view override returns (uint256) { ... } Arguments: _projectId is the ID of the project to get total overflow for._decimals is the number of decimals that the fixed point overflow should include._currency is the currency that the total overflow should be in terms of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.The function returns the current total amount of overflow that project has across all terminals. Body​ Forward the call to the internal version of the function that is also used by other operations. return _currentTotalOverflowOf(_projectId, _decimals, _currency); Internal references: _currentTotalOverflowOf","keywords":""},{"title":"tokenURI","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/read/tokenuri","content":"tokenURI Contract: JBProjects​‌ Interface: IERC721Metadata​‌ Step by stepCodeBug bounty Returns the URI where the ERC-721 standard JSON of a project is hosted. Definition​ function tokenURI(uint256 _projectId) public view override returns (string memory) { ... } Arguments: _projectId is the ID of the project to get a URI of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IERC721Metadata interface.The function returns the token URI to use for the provided _projectId. Body​ Return an empty string if there is no URI resolver set. // If there's no resolver, there's no URI. if (tokenUriResolver == IJBTokenUriResolver(address(0))) return ''; Internal references: tokenUriResolver Resolve the URI for the project. // Return the resolved URI. return tokenUriResolver.getUri(_projectId); External references: getUri","keywords":""},{"title":"currentOverflowOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/read/currentoverflowof","content":"currentOverflowOf Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore Step by stepCodeBug bounty Gets the current overflowed amount in a terminal for a specified project. The current overflow is represented as a fixed point number with the same amount of decimals as the specified terminal. Definition​ function currentOverflowOf(IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId) external view override returns (uint256) { ... } Arguments: _terminal is the terminal for which the overflow is being calculated._projectId is the ID of the project to get overflow for. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.The function returns the current amount of overflow that project has in the specified terminal. Body​ Forward the call to the internal version of the function that is also used by other operations, using the project's current funding cycle. // Return the overflow during the project's current funding cycle. return _overflowDuring( _terminal, _projectId, fundingCycleStore.currentOf(_projectId), _terminal.currency() ); Internal references: _overflowDuring External references: currentOfcurrency","keywords":""},{"title":"usedDistributionLimitOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/properties/useddistributionlimitof","content":"usedDistributionLimitOf Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore The amount of funds that a project has distributed from its limit during the current funding cycle for each terminal, in terms of the distribution limit's currency. Increases as projects use their preconfigured distribution limits. The used distribution limit is represented as a fixed point number with the same amount of decimals as its relative terminal. Definition​ /** @notice The amount of funds that a project has distributed from its limit during the current funding cycle for each terminal, in terms of the distribution limit's currency. @dev Increases as projects use their preconfigured distribution limits. @dev The used distribution limit is represented as a fixed point number with the same amount of decimals as its relative terminal. _terminal The terminal to which the used distribution limit applies. _projectId The ID of the project to get the used distribution limit of. _fundingCycleNumber The number of the funding cycle during which the distribution limit was used. */ mapping(IJBSingleTokenPaymentTerminal =&gt; mapping(uint256 =&gt; mapping(uint256 =&gt; uint256))) public override usedDistributionLimitOf; Arguments: _terminal is the terminal to which the used distribution limit applies._projectId is the ID of the project to get the used distribution limit of._fundingCycleNumber is the number of the funding cycle during which the distribution limit was used. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.","keywords":""},{"title":"recordAddedBalanceFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/write/recordaddedbalancefor","content":"recordAddedBalanceFor Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore Step by stepCodeBug bounty Records newly added funds for the project. The msg.sender must be an IJBSingleTokenPaymentTerminal. Definition​ function recordAddedBalanceFor(uint256 _projectId, uint256 _amount) external override { ... } Arguments: _projectId is the ID of the project to which the funds being added belong._amount is the amount of terminal tokens added, as a fixed point number with the same amount of decimals as its relative terminal. The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.The function doesn't return anything. Body​ Increment the project's balance by the specified amount. // Increment the balance. balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] = balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] + _amount; Internal references: balanceOf","keywords":""},{"title":"prices","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/properties/prices","content":"prices Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore The contract that exposes price feeds. Definition​ /** @notice The contract that exposes price feeds. */ IJBPrices public immutable override prices; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.","keywords":""},{"title":"_splitCountOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsplitsstore/properties/-_splitcountof","content":"_splitCountOf Contract: JBSplitsStore​‌ The number of splits currently set for each project ID's configurations. Definition​ /** @notice The number of splits currently set for each project ID's configurations. _projectId The ID of the project to get the split count for. _domain An identifier within which the returned splits should be considered active. _group The identifying group of the splits. */ mapping(uint256 =&gt; mapping(uint256 =&gt; mapping(uint256 =&gt; uint256))) private _splitCountOf; Arguments: _projectId is the ID of the project to get the split count for._domain is an identifier within which the returned splits should be considered active._group is the identifying group of the splits. Returns the number of splits the project has under the specified domain and gorup.The resulting view function is private to this contract.","keywords":""},{"title":"directory","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsplitsstore/properties/directory","content":"directory Contract: JBSplitsStore​‌ Interface: IJBSplitsStore The directory of terminals and controllers for projects. Definition​ /** @notice The directory of terminals and controllers for projects. */ IJBDirectory public immutable override directory; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBSplitsStore interface.","keywords":""},{"title":"_packedsplitParts1Of","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsplitsstore/properties/-_packedsplitparts1of","content":"_packedsplitParts1Of Contract: JBSplitsStore​‌ Packed data of splits for each project ID's configurations. Definition​ /** @notice Packed data of splits for each project ID's configurations. _projectId The ID of the project to get packed splits data for. _domain An identifier within which the returned splits should be considered active. _group The identifying group of the splits. _index The indexed order that the split was set at. */ mapping(uint256 =&gt; mapping(uint256 =&gt; mapping(uint256 =&gt; mapping(uint256 =&gt; uint256)))) private _packedSplitParts1Of; Arguments: _projectId is the ID of the project to get packed splits data for._domain is an identifier within which the returned splits should be considered active._group is the identifying group of the splits._index is the indexed order that the split was set at. Returns packed split data.The resulting view function is private to this contract.","keywords":""},{"title":"usedOverflowAllowanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/properties/usedoverflowallowanceof","content":"usedOverflowAllowanceOf Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore The amount of funds that a project has used from its allowance during the current funding cycle configuration for each terminal, in terms of the overflow allowance's currency. Increases as projects use their allowance. The used allowance is represented as a fixed point number with the same amount of decimals as its relative terminal. Definition​ /** @notice The amount of funds that a project has used from its allowance during the current funding cycle configuration for each terminal, in terms of the overflow allowance's currency. @dev Increases as projects use their allowance. @dev The used allowance is represented as a fixed point number with the same amount of decimals as its relative terminal. _terminal The terminal to which the overflow allowance applies. _projectId The ID of the project to get the used overflow allowance of. _configuration The configuration of the during which the allowance was used. */ mapping(IJBSingleTokenPaymentTerminal =&gt; mapping(uint256 =&gt; mapping(uint256 =&gt; uint256))) public override usedOverflowAllowanceOf; Arguments: _terminal is the terminal to which the overflow allowance applies._projectId is the ID of the project to get the used overflow allowance of._configuration is the configuration of the during which the allowance was used. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.","keywords":""},{"title":"SetSplit","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsplitsstore/events/setsplit","content":"SetSplit Emitted from: _set Definition​ event SetSplit( uint256 indexed projectId, uint256 indexed domain, uint256 indexed group, JBSplit split, address caller ); projectId is the ID of the project to which the split belongs.domain is the namespace that differentiates different split groups for the projectId.group is the property that joins multiple splits into one full group.split is a JBSplit struct.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"setTokenUriResolver","type":0,"sectionRef":"#","url":"dev/api/contracts/jbprojects/write/settokenuriresolver","content":"setTokenUriResolver Contract: JBProjects Interface: IJBProjects Step by stepCodeEventsBug bounty Sets the address of the resolver used to retrieve the tokenURI of projects. Definition​ function setTokenUriResolver(IJBTokenUriResolver _newResolver) external override onlyOwner { ... } Arguments: _newResolver is the address of the new resolver. Through the onlyOwner modifier, this function can only be accessed by the address that owns this contract.The function overrides a function definition from the IJBProjects interface.The function doesn't return anything. Body​ Store the new resolver. // Store the new resolver. tokenUriResolver = _newResolver; Internal references: tokenUriResolver Emit a SetTokenUriResolver event with the relevant parameters. emit SetTokenUriResolver(_newResolver, msg.sender); Event references: SetTokenUriResolver","keywords":""},{"title":"projects","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsplitsstore/properties/projects","content":"projects Contract: JBSplitsStore​‌ Interface: IJBSplitsStore Mints ERC-721's that represent project ownership and transfers. Definition​ /** @notice Mints ERC-721's that represent project ownership and transfers. */ IJBProjects public immutable override projects; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBSplitsStore interface.","keywords":""},{"title":"JBSplitsStore","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsplitsstore/","content":"JBSplitsStore Stores splits for each project. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBSplitsStore.sol Addresses​ Ethereum mainnet: 0xFBE1075826B7FFd898cf8D944885ba6a8D714A7F Ethereum rinkeby: 0x5918B60672f53D504881C63AB04c65338ff185d7 Interfaces​ Name\tDescriptionIJBSplitsStore\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionJBOperatable\tIncludes convenience functionality for checking a message sender's permissions before executing certain transactions. Constructor​ /** @param _operatorStore A contract storing operator assignments. @param _projects A contract which mints ERC-721's that represent project ownership and transfers. @param _directory A contract storing directories of terminals and controllers for each project. */ constructor( IJBOperatorStore _operatorStore, IJBProjects _projects, IJBDirectory _directory ) JBOperatable(_operatorStore) { projects = _projects; directory = _directory; } _operatorStore is an IJBOperatorStore contract storing operator assignments._projects is an IJBProjects contract which mints ERC-721's that represent project ownership and transfers._directory is an IJBDirectory contract storing directories of terminals and controllers for each project. Events​ Name\tDataSetSplit uint256 indexed projectIduint256 indexed domainuint256 indexed groupJBSplit splitaddress caller Properties​ Function\tDefinitionprojects Returns IJBProjects directory Returns IJBPaymentTerminal Read​ Function\tDefinitionsplitsOf Params uint256 _projectIduint256 _domainJBGroupedSplits[] calldata _groupedSplits Returns JBSplit[] splits Write​ Function\tDefinitionset Traits requirePermissionAllowingOverride Params uint256 _projectIduint256 _domainuint256 _groupJBSplit[] _splits","keywords":""},{"title":"currentReclaimableOverflowOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/read/currentreclaimableoverflowof2","content":"currentReclaimableOverflowOf Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore Step by stepCodeBug bounty The current amount of overflowed tokens from a terminal that can be reclaimed by the specified number of tokens, using the specified total token supply and overflow amounts. If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used. Definition​ function currentReclaimableOverflowOf( uint256 _projectId, uint256 _tokenCount, uint256 _totalSupply, uint256 _overflow ) external view override returns (uint256) { ... } Arguments: _projectId is the ID of the project to get the reclaimable overflow amount for._tokenCount is the number of tokens to make the calculation with, as a fixed point number with 18 decimals._totalSupply is the total number of tokens to make the calculation with, as a fixed point number with 18 decimals._overflow is the amount of overflow to make the calculation with, as a fixed point number. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.The function returns the amount of overflowed tokens that can be reclaimed, as a fixed point number with the same number of decimals as the provided _overflow. Body​ If there's no overflow, there's nothing reclaimable. // If there's no overflow, there's no reclaimable overflow. if (_overflow == 0) return 0; Make sure the provided token count is within the bounds of the total supply. // Can't redeem more tokens that is in the supply. if (_tokenCount &gt; _totalSupply) return 0; Get a reference to the project's current funding cycle. // Get a reference to the project's current funding cycle. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); External references: currentOf Return the reclaimable overflow using the project's current funding cycle and the provided parameters. // If there is no overflow, nothing is reclaimable. return _reclaimableOverflowDuring(_projectId, _fundingCycle, _tokenCount, _totalSupply, _overflow); Internal references: _reclaimableOverflowDuring","keywords":""},{"title":"_reclaimableOverflowDuring","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/read/-_reclaimableoverflowduring","content":"_reclaimableOverflowDuring Contract: JBSingleTokenPaymentTerminalStore​‌ Step by stepCodeBug bounty The amount of overflowed tokens from a terminal that can be reclaimed by the specified number of tokens when measured from the specified. If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used. Definition​ function _reclaimableOverflowDuring( uint256 _projectId, JBFundingCycle memory _fundingCycle, uint256 _tokenCount, uint256 _overflow ) private view returns (uint256) { ... } Arguments: _projectId is the ID of the project to get the reclaimable overflow amount for._fundingCycle is the funding cycle during which reclaimable overflow is being calculated._tokenCount is the number of tokens to make the calculation with, as a fixed point number with 18 decimals._overflow is the amount of overflow to make the calculation with. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns the amount of overflowed tokens that can be reclaimed, as a fixed point number with the same number of decimals as the _overflow. Body​ If there are reserved tokens, add them to the total supply for the purposes of this calculation. // If there are reserved tokens, add them to the total supply. if (_reservedTokenAmount &gt; 0) _totalSupply = _totalSupply + _reservedTokenAmount; If the calculation is being made to find the claimable amount for all of a project's tokens, return the entire current overflow. // If the amount being redeemed is the total supply, return the rest of the overflow. if (_tokenCount == _totalSupply) return _overflow; Get a reference to the redemption rate that should be used in the redemption bonding curve formula. If the current funding cycle has an active ballot, use its ballot redemption rate, otherwise use the standard redemption rate. This lets projects configure different bonding curves depending on the state of pending reconfigurations. // Use the ballot redemption rate if the queued cycle is pending approval according to the previous funding cycle's ballot. uint256 _redemptionRate = fundingCycleStore.currentBallotStateOf(_projectId) == JBBallotState.Active ? _fundingCycle.ballotRedemptionRate() : _fundingCycle.redemptionRate(); Enums used: JBBallotState .Active Library references: JBFundingCycleMetadataResolver .ballotRedemptionRate(...).redemptionRate(...) Internal references: fundingCycleStore External references: currentBallotStateOf If the redemption rate is 0%, nothing is claimable regardless of the amount of tokens. // If the redemption rate is 0, nothing is claimable. if (_redemptionRate == 0) return 0; The redemption bonding curve formula depends on a base claimable value that is the linear proportion of the provided tokens to the total supply of tokens. Get a reference to this proportion to use in the formula. // Get a reference to the linear proportion. uint256 _base = PRBMath.mulDiv(_overflow, _tokenCount, _totalSupply); Library references: PRBMath .mulDiv(...) Return the claimable amount determined by a bonding curve. At a 100% bonding curve the linear base can be returned immediately, this outcome is naturally part of the curve – checking for it first could prevent an unnecessary and slightly more expensive mulDiv calculation. // These conditions are all part of the same curve. Edge conditions are separated because fewer operation are necessary. if (_redemptionRate == JBConstants.MAX_REDEMPTION_RATE) return _base; return PRBMath.mulDiv( _base, _redemptionRate + PRBMath.mulDiv( _tokenCount, JBConstants.MAX_REDEMPTION_RATE - _redemptionRate, _totalSupply ), JBConstants.MAX_REDEMPTION_RATE ); Library references: PRBMath .mulDiv(...) JBConstants .MAX_REDEMPTION_RATE","keywords":""},{"title":"splitsOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsplitsstore/read/splitsof","content":"splitsOf Contract: JBSplitsStore​‌ Interface: IJBSplitsStore Step by stepCodeBug bounty Get all splits for the specified project ID, within the specified domain, for the specified group. Definition​ function splitsOf( uint256 _projectId, uint256 _domain, uint256 _group ) external view override returns (JBSplit[] memory) { ... } Arguments: _projectId is the ID of the project to get splits for._domain is an identifier within which the returned splits should be considered active._group is the identifying group of the splits. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBSplitsStore interface.The function returns an array of all JBSplits for the project. Body​ This function just reads and returns the splits of the project, within the specified domain, for the specified group. return _getStructsFor(_projectId, _domain, _group); Internal references: _getStructsFor","keywords":""},{"title":"_currentTotalOverflowOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/read/-_currenttotaloverflowof","content":"_currentTotalOverflowOf Contract: JBSingleTokenPaymentTerminalStore​‌ Step by stepCodeBug bounty Gets the amount that is currently overflowing across all of a project's terminals. This amount changes as the value of the balances changes in relation to the currency being used to measure the project's distribution limits. Definition​ function _currentTotalOverflowOf( uint256 _projectId, uint256 _decimals, uint256 _currency ) private view returns (uint256) { ... } Arguments: _projectId is the ID of the project to get the total overflow for._decimals is the number of decimals that the fixed point overflow should include._currency is the currency that the overflow should be in terms of. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns the total overflow of a project's funds. Body​ Get a reference to all of the project's current terminals. // Get a reference to the project's terminals. IJBPaymentTerminal[] memory _terminals = directory.terminalsOf(_projectId); Internal references: terminalsOf Create a reference where the total balance across all terminals is be stored in terms of ETH. // Keep a reference to the ETH overflow across all terminals, as a fixed point number with 18 decimals. uint256 _ethOverflow; For each terminal, add its balance in terms of ETH to the total ETH balance. // Add the current ETH overflow for each terminal. for (uint256 _i = 0; _i &lt; _terminals.length; _i++) _ethOverflow = _ethOverflow + _terminals[_i].currentEthOverflowOf(_projectId); External references: currentEthOverflowOf If the total overflow is to be returned in a currency other than ETH, make the conversion while maintaining 18 decimals of fidelity. // Convert the ETH overflow to the specified currency if needed, maintaining a fixed point number with 18 decimals. uint256 _totalOverflow18Decimal = _currency == JBCurrencies.ETH ? _ethOverflow : PRBMath.mulDiv(_ethOverflow, 10**18, prices.priceFor(JBCurrencies.ETH, _currency, 18)); Library references: PRBMath .mulDiv(...) JBCurrencies .ETH External references: priceFor If the fixed point overflow is to be returned with a number of decimals other than 18, adjust the number accordingly. // Adjust the decimals of the fixed point number if needed to match the target decimals. return (_decimals == 18) ? _totalOverflow18Decimal : JBFixedPointNumber.adjustDecimals(_totalOverflow18Decimal, 18, _decimals); Library references: PRBMath .mulDiv(...) JBFixedPointNumber .adjustDecimals(...)","keywords":""},{"title":"recordMigration","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/write/recordmigration","content":"recordMigration Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore Step by stepCodeErrorsBug bounty Records the migration of funds from this store. The msg.sender must be an IJBSingleTokenPaymentTerminal. Definition​ function recordMigration(uint256 _projectId) external override nonReentrant returns (uint256 balance) { ... } Arguments: _projectId is the ID of the project being migrated. The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.The function returns the project's migrated balance, as a fixed point number with the same amount of decimals as its relative terminal. Body​ Get a reference to the project's current funding cycle. // Get a reference to the project's current funding cycle. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); External references: currentOf Make sure that migrating terminals is allowed by the current funding cycle. // Migration must be allowed. if (!_fundingCycle.terminalMigrationAllowed()) revert PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED(); Library references: JBFundingCycleMetadataResolver .terminalMigrationAllowed(...) Get a reference to the project's current balance. Set this to the value that the function will return. // Return the current balance. balance = balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId]; Internal references: balanceOf Set the project's balance to 0 since funds are moving away from this terminal. // Set the balance to 0. balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] = 0; Internal references: balanceOf","keywords":""},{"title":"currentReclaimableOverflowOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/read/currentreclaimableoverflowof1","content":"currentReclaimableOverflowOf Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore Step by stepCodeBug bounty The current amount of overflowed tokens from a terminal that can be reclaimed by the specified number of tokens, using the total token supply and overflow in the ecosystem. If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used. The current reclaimable overflow is returned in terms of the specified terminal's currency. The reclaimable overflow is represented as a fixed point number with the same amount of decimals as the specified terminal. Definition​ function currentReclaimableOverflowOf( IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId, uint256 _tokenCount, bool _useTotalOverflow ) external view override returns (uint256) { ... } Arguments: _terminal is the terminal from which the reclaimable amount would come._projectId is the ID of the project to get the reclaimable overflow amount for._tokenCount is the number of tokens to make the calculation with, as a fixed point number with 18 decimals._useTotalOverflow is a flag indicating whether the overflow used in the calculation should be summed from all of the project's terminals. If false, overflow should be limited to the amount in the specified _terminal. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.The function returns the amount of overflowed tokens that can be reclaimed, as a fixed point number with the same number of decimals as the provided _terminal. Body​ Get a reference to the project's current funding cycle. // Get a reference to the project's current funding cycle. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); External references: currentOf Get the amount of overflow to make the calculation with. Use the total overflow of all of the project's terminals if total overflow should be used, otherwise use the overflow of the provided terminal. // Get the amount of current overflow. // Use the project's total overflow across all of its terminals if the flag species specifies so. Otherwise, use the overflow local to the specified terminal. uint256 _currentOverflow = _useTotalOverflow ? _currentTotalOverflowOf(_projectId, _terminal.decimals(), _terminal.currency()) : _overflowDuring( _terminal, _projectId, _fundingCycle, _terminal.currency() ); Internal references: _overflowDuring_currentTotalOverflowOf External references: decimalscurrency If there's no overflow, there's nothing reclaimable. // If there's no overflow, there's no reclaimable overflow. if (_currentOverflow == 0) return 0; Get a reference to the total outstanding supply of project tokens that should be used in the calculation. // Get the number of outstanding tokens the project has. uint256 _totalSupply = IJBController(directory.controllerOf(_projectId)) .totalOutstandingTokensOf(_projectId, _fundingCycle.reservedRate()); Library references: JBFundingCycleMetadataResolver .reservedRate(...) Internal references: directory External references: controllerOftotalOutstandingTokensOf Make sure the provided token count is within the bounds of the total supply. // Can't redeem more tokens that is in the supply. if (_tokenCount &gt; _totalSupply) return 0; Return the reclaimable overflow using the project's current funding cycle and the derived current overflow. // Return the reclaimable overflow amount. return _reclaimableOverflowDuring( _projectId, _fundingCycle, _tokenCount, _totalSupply, _currentOverflow ); Internal references: _reclaimableOverflowDuring","keywords":""},{"title":"_overflowDuring","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/read/-_overflowduring","content":"_overflowDuring Contract: JBSingleTokenPaymentTerminalStore​‌ Step by stepCodeBug bounty Gets the amount that is overflowing when measured from the specified funding cycle. This amount changes as the value of the balance changes in relation to the currency being used to measure the distribution limit. Definition​ function _overflowDuring( IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId, JBFundingCycle memory _fundingCycle, uint256 _balanceCurrency ) private view returns (uint256) { ... } Arguments: _terminal is the terminal for which the overflow is being calculated._projectId is the ID of the project to get overflow for._fundingCycle is the ID of the funding cycle to base the overflow on._balanceCurrency is the currency that the stored balance is expected to be in terms of. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns the overflow of funds, as a fixed point number with the same amount of decimals as the specified terminal. Body​ Get a reference to the current balance of the project. // Get the current balance of the project. uint256 _balanceOf = balanceOf[_terminal][_projectId]; Internal references: balanceOf If the project has no balance, there can't be any overflow. // If there's no balance, there's no overflow. if (_balanceOf == 0) return 0; Get a reference to the current distribution limit of the project, along with the currency the limit is in terms of. // Get a reference to the distribution limit during the funding cycle. (uint256 _distributionLimit, uint256 _distributionLimitCurrency) = IJBController( directory.controllerOf(_projectId) ).distributionLimitOf(_projectId, _fundingCycle.configuration, _terminal, _terminal.token()); External references: controllerOfdistributionLimitOf Get a reference to the amount of the funding cycle's target that can still be distributed. This is the difference between its distribution limit and what has already been distributed during this funding cycle. // Get a reference to the amount still distributable during the funding cycle. uint256 _distributionLimitRemaining = _distributionLimit - usedDistributionLimitOf[_terminal][_projectId][_fundingCycle.number]; Internal references: usedDistributionLimitOf Convert the distribution remaining into the balance's currency using the appropriate price feed. The distribution remaining and balance fixed point numbers should already be using the same number of decimals. // Convert the _distributionRemaining to be in terms of the provided currency. if (_distributionLimitRemaining != 0 &amp;&amp; _distributionLimitCurrency != _balanceCurrency) _distributionLimitRemaining = PRBMath.mulDiv( _distributionLimitRemaining, 10**_MAX_FIXED_POINT_FIDELITY, // Use _MAX_FIXED_POINT_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting. prices.priceFor(_distributionLimitCurrency, _balanceCurrency, _MAX_FIXED_POINT_FIDELITY) ); Library references: PRBMath .mulDiv(...) Internal references: _MAX_FIXED_POINT_FIDELITYprices External references: priceFor If the current balance of the project is at most the target remaining, there is no overflow. Otherwise the difference between the project's current balance and the remaining distribution limit is the overflow. // Overflow is the balance of this project minus the amount that can still be distributed. return _balanceOf &gt; _distributionLimitRemaining ? _balanceOf - _distributionLimitRemaining : 0; ","keywords":""},{"title":"balanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtoken/read/balanceof","content":"balanceOf Contract: JBToken​‌ Interface: IJBToken Step by stepCodeBug bounty An account's balance of this ERC20. Definition​ function balanceOf(address _account, uint256 _projectId) external view override returns (uint256) { ... } Arguments: _account is the account to get a balance of._projectId is the ID of the project to which the token belongs. This is ignored. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBToken interface.The function returns the balance of the _account of this ERC20, as a fixed point number with 18 decimals. Body​ Forward the call to the ERC20 implementation. return super.balanceOf(_account); Inherited references: balanceOf","keywords":""},{"title":"_getStructsFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsplitsstore/read/-_getstructsfor","content":"_getStructsFor Contract: JBSplitsStore​‌ Step by stepCodeBug bounty Unpack splits' packed stored values into easy-to-work-with split structs. Definition​ function _getStructsFor( uint256 _projectId, uint256 _domain, uint256 _group ) private view returns (JBSplit[] memory) { ... } Arguments: _projectId is the ID of the project to get splits for._domain is an identifier within which the returned splits should be considered active._group is the identifying group of the splits. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns an array of JBSplits. Body​ Get a reference to the expected number of splits for the specified domain and group. // Get a reference to the number of splits that need to be added to the returned array. uint256 _splitCount = _splitCountOf[_projectId][_domain][_group]; Internal references: _splitCountOf Inititalize an array of JBSplit with length equal to the number of splits expected. // Initialize an array to be returned that has the set length. JBSplit[] memory _splits = new JBSplit[](_splitCount); For each index, parse out the packed split parts into JBSplit structs and add to the array. The packed splits are stored in two different uint256 slots, the second of which contains info that is populated way less frequently. // Loop through each split and unpack the values into structs. for (uint256 _i = 0; _i &lt; _splitCount; _i++) { // Get a reference to the fist packed data. uint256 _packedSplitPart1 = _packedSplitParts1Of[_projectId][_domain][_group][_i]; // Store the first spit part. JBSplit memory _split; // prefer claimed in bit 0. _split.preferClaimed = _packedSplitPart1 &amp; 1 == 1; // prefer add to balance in bit 1. _split.preferAddToBalance = (_packedSplitPart1 &gt;&gt; 1) &amp; 1 == 1; // percent in bits 2-33. _split.percent = uint256(uint32(_packedSplitPart1 &gt;&gt; 2)); // projectId in bits 32-89. _split.projectId = uint256(uint56(_packedSplitPart1 &gt;&gt; 34)); // beneficiary in bits 90-249. _split.beneficiary = payable(address(uint160(_packedSplitPart1 &gt;&gt; 90))); // Get a reference to the second packed data. uint256 _packedSplitPart2 = _packedSplitParts2Of[_projectId][_domain][_group][_i]; // If there's anything in it, unpack. if (_packedSplitPart2 &gt; 0) { // Locked until in bits 0-47. _split.lockedUntil = uint256(uint48(_packedSplitPart2)); // Locked until in bits 48-207. _split.allocator = IJBSplitAllocator(address(uint160(_packedSplitPart2 &gt;&gt; 48))); } // Add the split to the value being returned. _splits[_i] = _split; } Internal references: _packedSplitParts1Of_packedSplitParts2Of Return the array of splits. return _splits; ","keywords":""},{"title":"approve","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtoken/write/approve","content":"approve Contract: JBToken​‌ Interface: IJBToken Step by stepCodeBug bounty Approves an account to spend tokens on the msg.senders behalf. Definition​ function approve( uint256 _projectId, address _spender, uint256 _amount ) external override { ... } Arguments: _projectId is the ID of the project to which the token belongs. This is ignored._spender is the address that will be spending tokens on the msg.senders behalf._amount is the amount the _spender is allowed to spend. The function overrides a function definition from the IJBToken interface.The function doesn't return anything. Body​ Forward the call to the ERC20 implementation. approve(_spender, _amount); Inherited references: _mint","keywords":""},{"title":"burn","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtoken/write/burn","content":"burn Contract: JBToken​‌ Interface: IJBToken Step by stepCodeBug bounty Burn some outstanding tokens. Only the owner of this contract cant burn some of its supply. Definition​ function burn( uint256 _projectId, address _account, uint256 _amount ) external override onlyOwner { ... } Arguments: _projectId is the ID of the project to which the token belongs. This is ignored._account is the account to burn tokens from._amount is the amount of tokens to burn, as a fixed point number with 18 decimals. Through the onlyOwner modifier, this function can only be accessed by the address that owns this contract.The function overrides a function definition from the IJBToken interface.The function doesn't return anything. Body​ Forward the call to the ERC20 implementation. return _burn(_account, _amount); Inherited references: _burn","keywords":""},{"title":"decimals","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtoken/read/decimals","content":"decimals Contract: JBToken​‌ Interface: IJBToken Step by stepCodeBug bounty The number of decimals included in the fixed point accounting of this token. Definition​ function decimals() public view override(ERC20, IJBToken) returns (uint8) { ... } The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBToken interface.The function returns the number of decimals. Body​ Forward the call to the ERC20 implementation. return super.decimals(); Inherited references: decimals","keywords":""},{"title":"_packedsplitParts2Of","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsplitsstore/properties/-_packedsplitparts2of","content":"_packedsplitParts2Of Contract: JBSplitsStore​‌ More packed data of splits for each project ID's configurations. This packed data is often 0. Definition​ /** @notice More packed data of splits for each project ID's configurations. @dev This packed data is often 0. _projectId The ID of the project to get packed splits data for. _domain An identifier within which the returned splits should be considered active. _group The identifying group of the splits. _index The indexed order that the split was set at. */ mapping(uint256 =&gt; mapping(uint256 =&gt; mapping(uint256 =&gt; mapping(uint256 =&gt; uint256)))) private _packedSplitParts2Of; Arguments: _projectId is the ID of the project to get packed splits data for._domain is an identifier within which the returned splits should be considered active._group is the identifying group of the splits._index is the indexed order that the split was set at. Returns packed split data.The resulting view function is private to this contract.","keywords":""},{"title":"recordPaymentFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/write/recordpaymentfrom","content":"recordPaymentFrom Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore Step by stepCodeErrorsBug bounty Records newly contributed tokens to a project. Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution. The msg.sender must be an IJBSingleTokenPaymentTerminal. The amount specified in the params is in terms of the msg.sender's tokens. Definition​ function recordPaymentFrom( address _payer, JBTokenAmount calldata _amount, uint256 _projectId, uint256 _baseWeightCurrency, address _beneficiary, string calldata _memo, bytes memory _metadata ) external override nonReentrant returns ( JBFundingCycle memory fundingCycle, uint256 tokenCount, IJBPayDelegate delegate, string memory memo ) { ... } Arguments: _payer is the original address that sent the payment to the terminal._amount is a JBTokenAmount data structure specifying the amount of tokens being paid. Includes the token being paid, the value, the number of decimals included, and the currency of the amount._projectId is the ID of the project being paid._baseWeightCurrency is the currency to base token issuance on._beneficiary is the specified address that should be the beneficiary of anything that results from the payment._memo is a memo to pass along to the emitted event, and passed along to the funding cycle's data source._metadata are bytes to send along to the data source, if one is provided. The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.The function returns: fundingCycle is the project's funding cycle during which payment was made.tokenCount is the number of project tokens that were minted, as a fixed point number with 18 decimals.delegate is a delegate contract to use for subsequent calls.memo is a memo that should be passed along to the emitted event. Body​ Get a reference to the project's current funding cycle that should have its properties used in the subsequent calculations and returned. // Get a reference to the current funding cycle for the project. fundingCycle = fundingCycleStore.currentOf(_projectId); External references: currentOf Make sure the project has a funding cycle configured. This is done by checking if the project's current funding cycle number is non-zero. // The project must have a funding cycle configured. if (fundingCycle.number == 0) revert INVALID_FUNDING_CYCLE(); Make sure the project's funding cycle isn't configured to pause payments. // Must not be paused. if (fundingCycle.payPaused()) revert FUNDING_CYCLE_PAYMENT_PAUSED(); Library references: JBFundingCycleMetadataResolver .payPaused(...) Create a variable where the weight to use in subsquent calculations will be saved. // The weight according to which new token supply is to be minted, as a fixed point number with 18 decimals. uint256 _weight; If the project's current funding cycle is configured to use a data source when receiving payments, ask the data source for the parameters that should be used throughout the rest of the function given provided contextual values in a JBPayParamsData structure. Otherwise default parameters are used. // If the funding cycle has configured a data source, use it to derive a weight and memo. if (fundingCycle.useDataSourceForPay()) { // Create the params that'll be sent to the data source. JBPayParamsData memory _data = JBPayParamsData( IJBSingleTokenPaymentTerminal(msg.sender), _payer, _amount, _projectId, _beneficiary, fundingCycle.configuration, fundingCycle.weight, fundingCycle.reservedRate(), _memo, _metadata ); (_weight, memo, delegate) = IJBFundingCycleDataSource(fundingCycle.dataSource()).payParams( _data ); } // Otherwise use the funding cycle's weight else { _weight = fundingCycle.weight; memo = _memo; } Library references: JBFundingCycleMetadataResolver .useDataSourceForPay(...)\\.dataSource(...)\\.reservedRate(...) External references: payParams If there is no amount being recorded, there's nothing left to do so the current values can be returned. // If there's no amount being recorded, there's nothing left to do. if (_amount.value == 0) return (fundingCycle, 0, delegate, memo); Add the amount being paid to the stored balance. // Add the amount to the token balance of the project. balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] = balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] + _amount.value; Internal references: balanceOf If there is no weight, the resulting token count will be 0. There's nothing left to do so the current values can be returned. // If there's no weight, token count must be 0 so there's nothing left to do. if (_weight == 0) return (fundingCycle, 0, delegate, memo); Calculate the weight ratio. This allows a project to get paid in a certain token, but issue project tokens relative to a different base currency. The weight ratio will be used to divide the product of the paid amount and the weight to determine the number of tokens that should be distributed. Since the number of distributed tokens should be a fixed point number with 18 decimals, the weight ratio must have the same number of decimals as the amount to cancel it out and leave only the fidelity of the 18 decimal fixed point weight. // Get a reference to the number of decimals in the amount. (prevents stack too deep). uint256 _decimals = _amount.decimals; // If the terminal should base its weight on a different currency from the terminal's currency, determine the factor. // The weight is always a fixed point mumber with 18 decimals. To ensure this, the ratio should use the same number of decimals as the `_amount`. uint256 _weightRatio = _amount.currency == _baseWeightCurrency ? 10**_decimals : prices.priceFor(_amount.currency, _baseWeightCurrency, _decimals); External references: priceFor Determine the number of tokens to mint. // Find the number of tokens to mint, as a fixed point number with as many decimals as `weight` has. tokenCount = PRBMath.mulDiv(_amount.value, _weight, _weightRatio); Library references: PRBMath .mulDiv(...)","keywords":""},{"title":"mint","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtoken/write/mint","content":"mint Contract: JBToken​‌ Interface: IJBToken Step by stepCodeBug bounty Mints more of the token. Only the owner of this contract cant mint more of it. Definition​ function mint( uint256 _projectId, address _account, uint256 _amount ) external override onlyOwner { ... } Arguments: _projectId is the ID of the project to which the token belongs. This is ignored._account is the account to mint the tokens for._amount is the amount of tokens to mint, as a fixed point number with 18 decimals. Through the onlyOwner modifier, this function can only be accessed by the address that owns this contract.The function overrides a function definition from the IJBToken interface.The function doesn't return anything. Body​ Forward the call to the ERC20 implementation. return _mint(_account, _amount); Inherited references: _mint","keywords":""},{"title":"JBToken","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtoken/","content":"JBToken An ERC-20 token that can be used by a project in the JBTokenStore. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBToken.sol Interfaces​ Name\tDescriptionIJBToken\tAllows this contract to be used by projects in the JBTokenStore. Inheritance​ Contract\tDescriptionERC20Permit\tGeneral token standard for fungible accounting. Ownable\tIncludes convenience functionality for specifying an address that owns the contract, with modifiers that only allow access by the owner. Constructor​ /** @param _name The name of the token. @param _symbol The symbol that the token should be represented by. */ constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) ERC20Permit(_name) {} _name is the name of the token._symbol is the symbol that the token should be represented by. Read​ Function\tDefinitiondecimals Returns uint256 totalSupply totalSupply Params uint256 _projectId Returns uint256 totalSupply balanceOf Params uint256 _projectIdaddress _account Returns uint256 balanceOf Write​ Function\tDefinitionmint Traits onlyOwner Params uint256 _projectIdaddress _accountuint256 _amount burn Traits onlyOwner Params uint256 _projectIdaddress _accountuint256 _amount approve Params uint256 _projectIdaddress _spenderuint256 _amount transfer Params uint256 _projectIdaddress _touint256 _amount transferFrom Params uint256 _projectIdaddress _fromaddress _touint256 _amount transferOwnership Traits onlyOwner Params address _newOwner","keywords":""},{"title":"transferFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtoken/write/transferfrom","content":"transferFrom Contract: JBToken​‌ Interface: IJBToken Step by stepCodeBug bounty Transfer tokens between accounts. Only the owner of this contract cant burn some of its supply. Definition​ function transferFrom( uint256 _projectId, address _from, address _to, uint256 _amount ) external override { ... } Arguments: _projectId is the ID of the project to which the token belongs. This is ignored. _from is the originating address._to is the destination address._amount is the amount of the transfer, as a fixed point number with 18 decimals. The function overrides a function definition from the IJBToken interface.The function doesn't return anything. Body​ Forward the call to the ERC20 implementation. transferFrom(_from, _to, _amount); Inherited references: transferFrom","keywords":""},{"title":"set","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsplitsstore/write/set","content":"set Contract: JBSplitsStore​‌ Interface: IJBSplitsStore Step by stepCodeBug bounty Sets a project's splits. Only the owner or operator of a project, or the current controller contract of the project, can set its splits. The new splits must include any currently set splits that are locked. Definition​ function set( uint256 _projectId, uint256 _domain, JBGroupedSplits[] calldata _groupedSplits ) external override requirePermissionAllowingOverride( projects.ownerOf(_projectId), _projectId, JBOperations.SET_SPLITS, address(directory.controllerOf(_projectId)) == msg.sender ) { ... } Arguments: _projectId is the ID of the project for which splits are being added._domain is an identifier within which the splits should be considered active._groupedSplits An array of splits to set for any number of groups. Through the requirePermissionAllowingOverride modifier, the function is only accessible by the project's owner, from an operator that has been given the JBOperations.SET_SPLITS permission by the project owner for the provided _projectId , or from the current controller of the _projectId of the specified.The function overrides a function definition from the IJBSplitsStore interface.The function doesn't return anything. Body​ Loop through each grouped split and set it. // Push array length in stack uint256 _groupedSplitsLength = _groupedSplits.length; // Set each grouped splits. for (uint256 _i = 0; _i &lt; _groupedSplitsLength; ) { // Get a reference to the grouped split being iterated on. JBGroupedSplits memory _groupedSplit = _groupedSplits[_i]; // Set the splits for the group. _set(_projectId, _domain, _groupedSplit.group, _groupedSplit.splits); unchecked { ++_i; } } Internal references: _set","keywords":""},{"title":"totalSupply","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtoken/read/totalsupply","content":"totalSupply Contract: JBToken​‌ Interface: IJBToken Step by stepCodeBug bounty The total supply of this ERC20. Definition​ function totalSupply(uint256) external view override returns (uint256) { ... } Arguments: _projectId is the ID of the project to which the token belongs. This is ignored. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBToken interface.The function returns the total supply of this ERC20, as a fixed point number with 18 decimals. Body​ Forward the call to the ERC20 implementation. return super.totalSupply(); Inherited references: totalSupply","keywords":""},{"title":"Issue","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/events/issue","content":"Issue Emitted from: issueFor Definition​ event Issue( uint256 indexed projectId, IJBToken indexed token, string name, string symbol, address caller ) projectId is the ID of the project to which the issued token belongs.token is the address of the newly issued token.name is the name of the token.symbol is the symbol of the token.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"transferOwnership","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtoken/write/transferownership","content":"transferOwnership Contract: JBToken​‌ Interface: IJBToken Step by stepCodeBug bounty Transfer ownership of this contract to another address. Only the owner of this contract can transfer it. Definition​ function transferOwnership(uint256 _projectId, address _newOwner) public virtual override onlyOwner { ... } Arguments: _projectId is the ID of the project to which the token belongs. This is ignored._newOwner is the new owner. Through the onlyOwner modifier, this function can only be accessed by the address that owns this contract.The function overrides a function definition from the IJBToken interface.The function returns nothing. Body​ Forward the call to the inherited version from Ownable. return super.transferOwnership(_newOwner); Inherited references: transferOwnership","keywords":""},{"title":"Burn","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/events/burn","content":"Burn Emitted from: burnFrom Definition​ event Burn( address indexed holder, uint256 indexed projectId, uint256 amount, uint256 initialUnclaimedBalance uint256 initialClaimedBalance, bool preferClaimedTokens, address caller ) holder is the address from which the tokens were burned.projectId is the ID of the project to which the burned tokens belong.amount is the amount of tokens that were burned.initialUnclaimedBalance is the amount of unclaimed tokens the holder had a balance of at the time of burning.initialClaimedBalance is the amount of claimed tokens the holder had a balance of at the time of burning.preferClaimedTokens is a flag indicating if the burning had a preference to burn claimed tokens from the holder's wallet.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"recordDistributionFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/write/recorddistributionfor","content":"recordDistributionFor Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore Step by stepCodeErrorsBug bounty Records newly distributed funds for a project. The msg.sender must be an IJBSingleTokenPaymentTerminal. Definition​ function recordDistributionFor( uint256 _projectId, uint256 _amount, uint256 _currency ) external override nonReentrant returns (JBFundingCycle memory fundingCycle, uint256 distributedAmount) { ... } Arguments: _projectId is the ID of the project that is having funds distributed._amount is the amount to use from the distribution limit, as a fixed point number._currency is the currency of the _amount. This must match the project's current funding cycle's currency. The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.The function returns: fundingCycle is the funding cycle during which the withdrawal was made.distributedAmount is the amount of terminal tokens distributed, as a fixed point number with the same amount of decimals as its relative terminal. Body​ Get a reference to the project's current funding cycle. // Get a reference to the project's current funding cycle. fundingCycle = fundingCycleStore.currentOf(_projectId); External references: currentOf Make sure the current funding cycle doesn't have distributions paused. // The funding cycle must not be configured to have distributions paused. if (fundingCycle.distributionsPaused()) revert FUNDING_CYCLE_DISTRIBUTION_PAUSED(); Library references: JBFundingCycleMetadataResolver .distributionsPaused(...) Calculate the new total amount that has been distributed during this funding cycle by adding the amount being distributed to the used distribution limit. // The new total amount that has been distributed during this funding cycle. uint256 _newUsedDistributionLimitOf = usedDistributionLimitOf[ IJBSingleTokenPaymentTerminal(msg.sender) ][_projectId][fundingCycle.number] + _amount; Internal references: usedDistributionLimitOf Get a reference to the currrent distribution limit of the project during the current funding cycle, and the currency the distribution limit is in terms of. // Amount must be within what is still distributable. (uint256 _distributionLimitOf, uint256 _distributionLimitCurrencyOf) = IJBController( directory.controllerOf(_projectId) ).distributionLimitOf( _projectId, fundingCycle.configuration, IJBSingleTokenPaymentTerminal(msg.sender), IJBSingleTokenPaymentTerminal(msg.sender).token() ); External references: distributionLimitOftoken Make sure the new total amount distributed will be at most the distribution limit. // Make sure the new used amount is within the distribution limit. if (_newUsedDistributionLimitOf &gt; _distributionLimitOf || _distributionLimitOf == 0) revert DISTRIBUTION_AMOUNT_LIMIT_REACHED(); Make the sure the provided currency matches the expected currency for the distribution limit. // Make sure the currencies match. if (_currency != _distributionLimitCurrencyOf) revert CURRENCY_MISMATCH(); Get a reference to the terminal's currency. // Get a reference to the terminal's currency. uint256 _balanceCurrency = IJBSingleTokenPaymentTerminal(msg.sender).currency(); Calculate how much of the balance will be used. If the currency of the distribution limit and the balance are the same, no price conversion is necessary. Otherwise, convert the distribution limit currency to that of the balance. // Convert the amount to the balance's currency. distributedAmount = (_currency == _balanceCurrency) ? _amount : PRBMath .mulDiv( _amount, 10**_MAX_FIXED_POINT_FIDELITY, // Use _MAX_FIXED_POINT_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting. prices.priceFor(_currency, _balanceCurrency, _MAX_FIXED_POINT_FIDELITY) ); Library references: PRBMath .mulDiv(...) Internal references: _MAX_FIXED_POINT_FIDELITY External references: priceFor Make sure the project has access to the amount being distributed. // The amount being distributed must be available. if (distributedAmount &gt; balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId]) revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE(); Internal references: balanceOf Store the new used distributed amount. // Store the new amount. usedDistributionLimitOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId][ fundingCycle.number ] = _newUsedDistributionLimitOf; Internal references: usedDistributionLimitOf Store the decremented balance. // Removed the distributed funds from the project's token balance. balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] = balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] - distributedAmount; Internal references: balanceOf","keywords":""},{"title":"Mint","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/events/mint","content":"Mint Emitted from: mintFor Definition​ event Mint( address indexed holder, uint256 indexed projectId, uint256 amount, bool tokensWereClaimed, bool preferClaimedTokens, address caller ) holder is the address to which the tokens were minted.projectId is the ID of the project to which the minted tokens belong.amount is the amount of tokens that were minted.tokensWereClaimed is a flag indicating if the minted tokens were distributed into the holder's wallet.preferClaimedTokens is a flag indicating if the minting had a preference to claim the tokens into the holder's wallet.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"transferFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtoken/write/transfer","content":"transferFrom Contract: JBToken​‌ Interface: IJBToken Step by stepCodeBug bounty Transfer tokens to an account. Definition​ function transfer( uint256 _projectId, address _to, uint256 _amount ) external override { ... } Arguments: _projectId is the ID of the project to which the token belongs. This is ignored._to is the destination address._amount is the amount of the transfer, as a fixed point number with 18 decimals. The function overrides a function definition from the IJBToken interface.The function doesn't return anything. Body​ Forward the call to the ERC20 implementation. transfer(_to, _amount); Inherited references: transfer","keywords":""},{"title":"Change","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/events/change","content":"Change Emitted from: changefor Definition​ event Change( uint256 indexed projectId, IJBToken indexed newToken, IJBToken indexed oldToken, address owner, address caller ); projectId is the ID of the project to which the changed token belongs.newToken is the new token that is being used by the project.newToken is the old token that was previously being used by the project.owner is the new owner of the token that was previously being used by the project.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"Claim","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/events/claim","content":"Claim Emitted from: claimFor Definition​ event Claim( address indexed holder, uint256 indexed projectId, uint256 initialUnclaimedTokenBalance, uint256 amount, address caller ); holder is the address to which the tokens being claimed belong.projectId is the ID of the project to which the claimed tokens belong.initialUnclaimedBalance is the amount of unclaimed tokens the holder had a balance of at the time of claiming.amount is the amount of tokens that were claimed.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"projects","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/properties/projects","content":"projects Contract: JBTokenStore​‌ Interface: IJBTokenStore Mints ERC-721's that represent project ownership and transfers. Definition​ /** @notice Mints ERC-721's that represent project ownership and transfers. */ IJBProjects public immutable override projects; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBTokenStore interface.","keywords":""},{"title":"recordUsedAllowanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/write/recordusedallowanceof","content":"recordUsedAllowanceOf Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore Step by stepCodeErrorsBug bounty Records newly used allowance funds of a project. The msg.sender must be an IJBSingleTokenPaymentTerminal. Definition​ function recordUsedAllowanceOf( uint256 _projectId, uint256 _amount, uint256 _currency ) external override nonReentrant returns (JBFundingCycle memory fundingCycle, uint256 usedAmount) { ... } Arguments: _projectId is the ID of the project to use the allowance of._amount is the amount to use from the allowance, as a fixed point number. _currency is the currency of the _amount. Must match the currency of the overflow allowance. The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.The function returns: fundingCycle is the funding cycle during which the withdrawal was made.usedAmount is the amount of terminal tokens used, as a fixed point number with the same amount of decimals as its relative terminal. Body​ Get a reference to the project's first funding cycle. // Get a reference to the project's current funding cycle. fundingCycle = fundingCycleStore.currentOf(_projectId); External references: currentOf Get a reference to the new used overflow allowance for this funding cycle configuration. // Get a reference to the new used overflow allowance for this funding cycle configuration. uint256 _newUsedOverflowAllowanceOf = usedOverflowAllowanceOf[ IJBSingleTokenPaymentTerminal(msg.sender) ][_projectId][fundingCycle.configuration] + _amount; Internal references: usedOverflowAllowanceOf Get a reference to the overflow allowance of the project during the current funding cycle configuration, and the currency the overflow allowance is in terms of. // There must be sufficient allowance available. (uint256 _overflowAllowanceOf, uint256 _overflowAllowanceCurrency) = IJBController( directory.controllerOf(_projectId) ).overflowAllowanceOf( _projectId, fundingCycle.configuration, IJBSingleTokenPaymentTerminal(msg.sender), IJBSingleTokenPaymentTerminal(msg.sender).token() ); External references: controllerOfoverflowAllowanceOftoken Make sure there's enough allowance left to accomodate the new used amount. // Make sure the new used amount is within the allowance. if (_newUsedOverflowAllowanceOf &gt; _overflowAllowanceOf || _overflowAllowanceOf == 0) revert INADEQUATE_CONTROLLER_ALLOWANCE(); Make the sure the provided currency matches the expected currency for the overflow allowance. // Make sure the currencies match. if (_currency != _overflowAllowanceCurrency) revert CURRENCY_MISMATCH(); Get a reference to the terminal's currency. // Get a reference to the terminal's currency. uint256 _balanceCurrency = IJBSingleTokenPaymentTerminal(msg.sender).currency(); Get a reference to the current distribution limit of the project during the current funding cycle configuration. // Get the current funding target uint256 distributionLimit = directory.controllerOf(_projectId).distributionLimitOf( _projectId, fundingCycle.configuration, terminal ); External references: controllerOfdistributionLimitOf Calculate how much of the balance will be used. If the currency of the allowance and the balance are the same, no price conversion is necessary. Otherwise, convert the allowance currency to that of the balance. // Convert the amount to this store's terminal's token. usedAmount = (_currency == _balanceCurrency) ? _amount : PRBMath.mulDiv( _amount, 10**_MAX_FIXED_POINT_FIDELITY, // Use _MAX_FIXED_POINT_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting. prices.priceFor(_currency, _balanceCurrency, _MAX_FIXED_POINT_FIDELITY) ); Library references: PRBMath .mulDiv(...) Internal references: _MAX_FIXED_POINT_FIDELITY External references: priceFor Make sure the amount being used is available in overflow. // The amount being distributed must be available in the overflow. if ( usedAmount &gt; _overflowDuring( IJBSingleTokenPaymentTerminal(msg.sender), _projectId, fundingCycle, _balanceCurrency ) ) revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE(); Internal references: _overflowDuring Store the incremented value that tracks how much of a project's allowance was used during the current funding cycle configuration. // Store the incremented value. usedOverflowAllowanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId][ fundingCycle.configuration ] = _newUsedOverflowAllowanceOf; Internal references: usedOverflowAllowanceOf Store the decremented balance. // Update the project's balance. balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] = balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] - usedAmount; Internal references: balanceOf","keywords":""},{"title":"unclaimedBalanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/properties/unclaimedbalanceof","content":"unclaimedBalanceOf Contract: JBTokenStore​‌ Interface: IJBTokenStore Each holder's balance of unclaimed tokens for each project. Definition​ /** @notice Each holder's balance of unclaimed tokens for each project. _holder The holder of balance. _projectId The ID of the project to which the token belongs. */ mapping(address =&gt; mapping(uint256 =&gt; uint256)) public override unclaimedBalanceOf; Arguments: _holder is the holder of balance._projectId is the ID of the project to which the token belongs. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBTokenStore interface.","keywords":""},{"title":"unclaimedTotalSupplyOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/properties/unclaimedtotalsupplyof","content":"unclaimedTotalSupplyOf Contract: JBTokenStore​‌ Interface: IJBTokenStore The total supply of unclaimed tokens for each project. Definition​ /** @notice The total supply of unclaimed tokens for each project. _projectId The ID of the project to which the token belongs. */ mapping(uint256 =&gt; uint256) public override unclaimedTotalSupplyOf; Arguments: _projectId is the ID of the project to which the token belongs. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBTokenStore interface.","keywords":""},{"title":"ShouldRequireClaim","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/events/shouldrequireclaim","content":"ShouldRequireClaim Emitted from: shouldRequireClaimingFor Definition​ event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller) projectId is the ID of the project which is requiring claimed tokens or not.flag is whether or not claimed tokens are being required.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"balanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/read/balanceof","content":"balanceOf Contract: JBTokenStore​‌ Interface: IJBTokenStore Step by stepCodeBug bounty The total balance of tokens a holder has for a specified project, including claimed and unclaimed tokens. Definition​ function balanceOf(address _holder, uint256 _projectId) external view override returns (uint256 balance) { ... } Arguments: _holder is the token holder to get a balance for._projectId is the project to get the _holders balance of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBTokenStore interface.The function returns the project token balance of the _holder. Body​ Get a reference to the holder's unclaimed balance for the project. // Get a reference to the holder's unclaimed balance for the project. balance = unclaimedBalanceOf[_holder][_projectId]; Internal references: unclaimedBalanceOf Get a reference to the project's current token. // Get a reference to the project's current token. IJBToken _token = tokenOf[_projectId]; Internal references: tokenOf If the project has a current token, add the holder's balance to the total. // If the project has a current token, add the holder's balance to the total. if (_token != IJBToken(address(0))) balance = balance + _token.balanceOf(_holder, _projectId); External references: balanceOf","keywords":""},{"title":"totalSupplyOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/read/totalsupplyof","content":"totalSupplyOf Contract: JBTokenStore​‌ Interface: IJBTokenStore Step by stepCodeBug bounty The total supply of tokens for each project, including claimed and unclaimed tokens. Definition​ function totalSupplyOf(uint256 _projectId) external view override returns (uint256 totalSupply) { ... } Arguments: _projectId is the ID of the project to get the total token supply of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBTokenStore interface.The function returns the total supply of the project's tokens. Body​ Get a reference to the total supply of the project's unclaimed tokens. // Get a reference to the total supply of the project's unclaimed tokens. Assign it to the return value. totalSupply = unclaimedTotalSupplyOf[_projectId]; Internal references: unclaimedTotalSupplyOf Get a reference to the project's current token. // Get a reference to the project's current token. IJBToken _token = tokenOf[_projectId]; Internal references: tokenOf If the project has a current token, add its total supply to the total. // If the project has a current token, add its total supply to the total. if (_token != IJBToken(address(0))) totalSupply = totalSupply + _token.totalSupply(_projectId); External references: totalSupply","keywords":""},{"title":"JBTokenStore","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/","content":"JBTokenStore Manage token minting, burning, and account balances. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBTokenStore.sol Addresses​ Ethereum mainnet: 0xCBB8e16d998161AdB20465830107ca298995f371 Ethereum rinkeby: 0x220468762c6cE4C05E8fda5cc68Ffaf0CC0B2A85 Interfaces​ Name\tDescriptionIJBTokenStore\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionJBControllerUtility\tIncludes convenience functionality for checking if the message sender is the current controller of the project whose data is being manipulated. JBOperatable\tIncludes convenience functionality for checking a message sender's permissions before executing certain transactions. Constructor​ /** @param _operatorStore A contract storing operator assignments. @param _projects A contract which mints ERC-721's that represent project ownership and transfers. @param _directory A contract storing directories of terminals and controllers for each project. */ constructor( IJBOperatorStore _operatorStore, IJBProjects _projects, IJBDirectory _directory ) JBOperatable(_operatorStore) JBControllerUtility(_directory) { projects = _projects; } _operatorStore is an IJBOperatorStore contract storing operator assignments._projects is an IJBProjects contract which mints ERC-721's that represent project ownership and transfers._directory is an IJBDirectory contract storing directories of terminals and controllers for each project. Events​ Name\tDataIssue uint256 indexed projectIdIJBToken indexed tokenstring namestring symboladdress caller Mint address indexed holderuint256 indexed projectIduint256 amountbool tokensWereClaimedbool preferClaimedTokensaddress caller Burn address indexed holderuint256 indexed projectIduint256 amountuint256 initialUnclaimedBalanceuint256 initialClaimedBalancebool preferClaimedTokensaddress caller Claim address indexed holderuint256 indexed projectIduint256 initialUnclaimedBalanceuint256 amountaddress caller ShouldRequireClaim uint256 indexed projectIdbool indexed flagaddress caller Change uint256 indexed projectIdIJBToken indexed newTokenIJBToken indexed oldTokenaddress indexed owneraddress caller Transfer address indexed holderuint256 indexed projectIdaddress indexed recipientuint256 amountaddress caller Properties​ Function\tDefinitionprojects Traits immutable Returns IJBProjects tokenOf Params uint256 _projectId Returns IJBToken projectOf Params uint256 _token Returns uint256 unclaimedBalanceOf Params address _holderuint256 _projectId Returns uint256 unclaimedTotalSupplyOf Params uint256 _projectId Returns uint256 requireClaimFor Params uint256 _projectId Returns bool Read​ Function\tDefinitiontotalSupplyOf Params uint256 _projectId Returns uint256 totalSupply balanceOf Params uint256 _holderuint256 _projectId Returns uint256 balance Write​ Function\tDefinitionissueFor Traits onlyController Params uint256 _projectIdstring _namestring _symbol Returns IJBToken token changeFor Traits onlyController Params uint256 _projectIdIJBToken _tokenaddress _newOwner Returns IJBToken oldToken mintFor Traits onlyController Params address _holderuint256 _projectIduint256 _amountbool _preferClaimedTokens burnFrom Traits onlyController Params address _holderuint256 _projectIduint256 _amountbool _preferClaimedTokens claimFor Traits requirePermissionAllowingOverride Params address _holderuint256 _projectIduint256 _amount transferFrom Traits requirePermission Params address _holderuint256 _projectIdaddress _recipientuint256 _amount shouldRequireClaimingFor Traits requirePermission Params uint256 _projectIdbool _flag","keywords":""},{"title":"projectOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/properties/projectof","content":"projectOf Contract: JBTokenStore​‌ Interface: IJBTokenStore The ID of the project that each token belongs to. Definition​ /** @notice The ID of the project that each token belongs to. _token The token to check the project association of. */ mapping(IJBToken =&gt; uint256) public override projectOf; Arguments: _token is token to check the project association of. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBTokenStore interface.","keywords":""},{"title":"JBControllerUtility","type":0,"sectionRef":"#","url":"dev/api/contracts/or-abstract/jbcontrollerutility/","content":"JBControllerUtility Provides tools for contracts with functionality that can only be accessed by a project's controller. Traits​ abstract Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/abstract/JBControllerUtility.sol Interfaces​ Name\tDescriptionIJBControllerUtility\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Constructor​ /** @param _directory A contract storing directories of terminals and controllers for each project. */ constructor(IJBDirectory _directory) { directory = _directory; } _directory is an IJBDirectory contract storing directories of terminals and controllers for each project. Modifiers​ Name\tDataonlyController uint256 _projectId Read​ Function\tDefinitiondirectory Traits immutable Returns IJBDirectory directory","keywords":""},{"title":"recordRedemptionFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsingletokenpaymentterminalstore/write/recordredemptionfor","content":"recordRedemptionFor Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBSingleTokenPaymentTerminalStore Step by stepCodeErrorsBug bounty Records newly redeemed tokens of a project. Redeems the project's tokens according to values provided by a configured data source. If no data source is configured, redeems tokens along a redemption bonding curve that is a function of the number of tokens being burned. The msg.sender must be an IJBSingleTokenPaymentTerminal. Definition​ function recordRedemptionFor( address _holder, uint256 _projectId, uint256 _tokenCount, string memory _memo, bytes memory _metadata ) external override nonReentrant returns ( JBFundingCycle memory fundingCycle, uint256 reclaimAmount, IJBRedemptionDelegate delegate, string memory memo ) { ... } Arguments: _holder is the account that is having its tokens redeemed._projectId is the ID of the project to which the tokens being redeemed belong._tokenCount is the number of project tokens to redeem, as a fixed point number with 18 decimals._memo is a memo to pass along to the emitted event._metadata are bytes to send along to the data source, if one is provided. The resulting function overrides a function definition from the JBSingleTokenPaymentTerminalStore interface.The function returns: fundingCycle is the funding cycle during which the redemption was made.reclaimAmount is the amount of terminal tokens reclaimed, as a fixed point number with 18 decimals.delegate is a delegate contract to use for subsequent calls.memo is a memo that should be passed along to the emitted event. Body​ Get a reference to the project's current funding cycle. // Get a reference to the project's current funding cycle. fundingCycle = fundingCycleStore.currentOf(_projectId); External references: currentOf Make sure the project's funding cycle isn't configured to pause redemptions. // The current funding cycle must not be paused. if (fundingCycle.redeemPaused()) revert FUNDING_CYCLE_REDEEM_PAUSED(); Library references: JBFundingCycleMetadataResolver .redeemPaused(...) The following scoped block is a bit of a hack to prevent a &quot;Stack too deep&quot; error. // Scoped section prevents stack too deep. `_reclaimedTokenAmount`, `_currentOverflow`, and `_totalSupply` only used within scope. { ... } Keep a reference to the reclaimed token amount, current overflow amount, and total supply variables to use outside of the subsequent scoped block // Get a reference to the reclaimed token amount struct, the current overflow, and the total token supply. JBTokenAmount memory _reclaimedTokenAmount; uint256 _currentOverflow; uint256 _totalSupply; The following other scoped block uses the same hack to prevent a &quot;Stack too deep&quot; error. // Another scoped section prevents stack too deep. `_token`, `_decimals`, and `_currency` only used within scope. { ... } Get a reference to the terminal's token, decimals, and currency. // Get a reference to the terminal's tokens. address _token = IJBSingleTokenPaymentTerminal(msg.sender).token(); // Get a reference to the terminal's decimals. uint256 _decimals = IJBSingleTokenPaymentTerminal(msg.sender).decimals(); // Get areference to the terminal's currency. uint256 _currency = IJBSingleTokenPaymentTerminal(msg.sender).currency(); External references: tokendecimalscurrency Get a reference to the amount of overflow the project has. Either the project's total overflow or the overflow local to the msg.sender's balance will be used depending on how the project's funding cycle is configured. // Get the amount of current overflow. // Use the local overflow if the funding cycle specifies that it should be used. Otherwise, use the project's total overflow across all of its terminals. _currentOverflow = fundingCycle.useTotalOverflowForRedemptions() ? _currentTotalOverflowOf(_projectId, _decimals, _currency) : _overflowDuring( IJBSingleTokenPaymentTerminal(msg.sender), _projectId, fundingCycle, _currency ); Library references: JBFundingCycleMetadataResolver .useTotalOverflowForRedemptions(...) Internal references: _currentTotalOverflowOf_overflowDuring Get a reference to the total outstanding supply of project tokens. // Get the number of outstanding tokens the project has. _totalSupply = IJBController(directory.controllerOf(_projectId)) .totalOutstandingTokensOf(_projectId, fundingCycle.reservedRate()); Library references: JBFundingCycleMetadataResolver .reservedRate(...) Internal references: directory External references: controllerOftotalOutstandingTokensOf Make sure the provided token count is within the bounds of the total supply. // Can't redeem more tokens that is in the supply. if (_tokenCount &gt; _totalSupply) revert INSUFFICIENT_TOKENS(); Get a reference to the reclaimable overflow if there is overflow. if (_currentOverflow &gt; 0) // Calculate reclaim amount using the current overflow amount. reclaimAmount = _reclaimableOverflowDuring( _projectId, fundingCycle, _tokenCount, _totalSupply, _currentOverflow ); Internal references: _reclaimableOverflowDuring Construct the reclaim amount struct. _reclaimedTokenAmount = JBTokenAmount(_token, reclaimAmount, _decimals, _currency); If the project's current funding cycle is configured to use a data source when making redemptions, ask the data source for the parameters that should be used throughout the rest of the function given provided contextual values in a JBRedeemParamsData structure. Otherwise default parameters are used. // If the funding cycle has configured a data source, use it to derive a claim amount and memo. if (fundingCycle.useDataSourceForRedeem()) { // Create the params that'll be sent to the data source. JBRedeemParamsData memory _data = JBRedeemParamsData( IJBSingleTokenPaymentTerminal(msg.sender), _holder, _projectId, fundingCycle.configuration, _tokenCount, _totalSupply, _currentOverflow, _reclaimedTokenAmount, fundingCycle.useTotalOverflowForRedemptions(), fundingCycle.redemptionRate(), fundingCycle.ballotRedemptionRate(), _memo, _metadata ); (reclaimAmount, memo, delegate) = IJBFundingCycleDataSource(fundingCycle.dataSource()) .redeemParams(_data); } else { memo = _memo; } Library references: JBFundingCycleMetadataResolver .useDataSourceForRedeem(...).dataSource(...).redemptionRate(...).ballotRedemptionRate(...).useTotalOverflowForRedemptions(...) Make sure the amount being claimed is within the bounds of the project's balance. // The amount being reclaimed must be within the project's balance. if (reclaimAmount &gt; balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId]) revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE(); Internal references: balanceOf Decrement any claimed funds from the project's balance if needed. // Remove the reclaimed funds from the project's balance. if (reclaimAmount &gt; 0) balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] = balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] - reclaimAmount; Internal references: balanceOf","keywords":""},{"title":"requireClaimFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/properties/requireclaimfor","content":"requireClaimFor Contract: JBTokenStore​‌ Interface: IJBTokenStore A flag indicating if tokens are required to be issued as claimed for a particular project. Definition​ /** @notice A flag indicating if tokens are required to be issued as claimed for a particular project. _projectId The ID of the project to which the requirement applies. */ mapping(uint256 =&gt; bool) public override requireClaimFor; Arguments: _projectId is the ID of the project to which the requirement applies. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBTokenStore interface.","keywords":""},{"title":"tokenOf","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/properties/tokenof","content":"tokenOf Contract: JBTokenStore​‌ Interface: IJBTokenStore Each project's attached token contract. Definition​ /** @notice Each project's attached token contract. _projectId The ID of the project to which the token belongs. */ mapping(uint256 =&gt; IJBToken) public override tokenOf; Arguments: _projectId is the ID of the project to which the token belongs. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBTokenStore interface.","keywords":""},{"title":"onlyController","type":0,"sectionRef":"#","url":"dev/api/contracts/or-abstract/jbcontrollerutility/modifiers/onlycontroller","content":"onlyController Contract: JBControllerUtility​‌ Step by stepCodeBug bounty Only allows the controller of the specified project to proceed. Definition​ modifier onlyController(uint256 _projectId) { ... } Arguments: _projectId is the ID of the project. The modifier function can be used by any internal function. Body​ Make sure the message's sender is the project's controller. if (address(directory.controllerOf(_projectId)) != msg.sender) revert CONTROLLER_UNAUTHORIZED(); Internal references: directory External references: controllerOf Continue the rest of the function. _; ","keywords":""},{"title":"Transfer","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/events/transfer","content":"Transfer Emitted from: transferFrom Definition​ event Transfer( address indexed holder, uint256 indexed projectId, address indexed recipient, uint256 amount, address caller ); holder is the address from which the tokens were transferred.projectId is the ID of the project to which the transferred token belongs.recipient is the address to which the tokens were transferred.amount is the amount of tokens that were transferred.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"directory","type":0,"sectionRef":"#","url":"dev/api/contracts/or-abstract/jbcontrollerutility/properties/directory","content":"directory Contract: JBControllerUtility​‌ Interface: IJBControllerUtility The directory of terminals and controllers for projects. Definition​ /** @notice The directory of terminals and controllers for projects. */ IJBDirectory public immutable override directory; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBControllerUtility interface.","keywords":""},{"title":"operatorStore","type":0,"sectionRef":"#","url":"dev/api/contracts/or-abstract/jboperatable/properties/operatorstore","content":"operatorStore Contract: JBOperatable​‌ Interface: IJBOperatableA contract storing operator assignments. Definition​ /** @notice A contract storing operator assignments. */ IJBOperatorStore public immutable override operatorStore; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBOperatable interface.","keywords":""},{"title":"claimFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/write/claimfor","content":"claimFor Contract: JBTokenStore​‌ Interface: IJBTokenStore Step by stepCodeErrorsEventsBug bounty Claims internally accounted for tokens into a holder's wallet. Only a token holder, the owner of the token's project, or an operator specified by the token holder can claim its unclaimed tokens. Definition​ function claimFor( address _holder, uint256 _projectId, uint256 _amount ) external override requirePermission(_holder, _projectId, JBOperations.CLAIM) { ... } Arguments: _holder is the owner of the tokens being claimed._projectId is the ID of the project whose tokens are being claimed._amount is the amount of tokens to claim. Through the requirePermission modifier, the function is only accessible by the token holder, or from an operator that has been given the JBOperations.CLAIM permission by the token holder. The function overrides a function definition from the IJBTokenStore interface.The function does't return anything. Body​ Get a reference to the project's current token. // Get a reference to the project's current token. IJBToken _token = tokenOf[_projectId]; Internal references: tokenOf Make sure the project has a token. If it doesn't, there's nowhere to claim tokens onto. // The project must have a token contract attached. if (_token == IJBToken(address(0))) revert TOKEN_NOT_FOUND(); Get a reference to the amount of unclaimed project tokens the holder has. // Get a reference to the amount of unclaimed project tokens the holder has. uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId]; Internal references: unclaimedBalanceOf Make sure the holder has enough tokens to claim. // There must be enough unlocked unclaimed tokens to claim. if (_unclaimedBalance &lt; _amount) revert INSUFFICIENT_UNCLAIMED_TOKENS(); Subtract from the unclaimed project token balance of the holder. // Subtract the claim amount from the holder's unclaimed project token balance. unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] - _amount; Internal references: unclaimedBalanceOf Subtract from the unclaimed token total supply of the project. // Subtract the claim amount from the project's unclaimed total supply. unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] - _amount; Internal references: unclaimedTotalSupplyOf Mint the tokens to the holder's wallet. // Mint the equivalent amount of the project's token for the holder. _token.mint(_projectId, _holder, _amount); External references: mint Emit a Claim event with the relevant parameters. emit Claim(_holder, _projectId, _unclaimedBalance, _amount, msg.sender); Event references: Claim","keywords":""},{"title":"transferFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/write/transferfrom","content":"transferFrom Contract: JBTokenStore​‌ Interface: IJBTokenStore Step by stepCodeErrorsEventsBug bounty Allows a holder to transfer unclaimed tokens to another account. Only a token holder or an operator can transfer its unclaimed tokens. Definition​ function transferFrom( address _holder, uint256 _projectId, address _recipient, uint256 _amount ) external override requirePermission(_holder, _projectId, JBOperations.TRANSFER) { ... } Arguments: _holder is the address to transfer tokens from._projectId is the ID of the project whose tokens are being transferred._recipient is thhe recipient of the tokens._amount is the amount of tokens to transfer. Through the requirePermission modifier, the function is only accessible by the token holder, or from an operator that has been given the JBOperations.TRANSFER permission by the token holder. The function overrides a function definition from the IJBTokenStore interface.The function doesn't return anything. Body​ Make sure a non-zero recipient was specified. // Can't transfer to the zero address. if (_recipient == address(0)) revert RECIPIENT_ZERO_ADDRESS(); Get a reference to the amount of unclaimed project tokens the holder has. // Get a reference to the holder's unclaimed project token balance. uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId]; Internal references: unclaimedBalanceOf Make sure the holder has enough unclaimed tokens to transfer. // The holder must have enough unclaimed tokens to transfer. if (_amount &gt; _unclaimedBalance) revert INSUFFICIENT_UNCLAIMED_TOKENS(); Subtract the amount from the holder's unclaimed balance of project tokens. // Subtract from the holder's unclaimed token balance. unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] - _amount; Internal references: unclaimedBalanceOf Add the amount of unclaimed project tokens to the recipient's balance. // Add the unclaimed project tokens to the recipient's balance. unclaimedBalanceOf[_recipient][_projectId] = unclaimedBalanceOf[_recipient][_projectId] + _amount; Internal references: unclaimedBalanceOf Emit a Transfer event with the relevant parameters. emit Transfer(_holder, _projectId, _recipient, _amount, msg.sender); Event references: Transfer","keywords":""},{"title":"JBOperatable","type":0,"sectionRef":"#","url":"dev/api/contracts/or-abstract/jboperatable/","content":"JBOperatable Modifiers to allow access to functions based on the message sender's operator status. Traits​ abstract Code​ https://github.com/jbx-protocol/juice-contracts/tree/main/contracts/v2abstract/JBOperatable.sol Interfaces​ Name\tDescriptionIJBOperatable\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Constructor​ /** @param _operatorStore A contract storing operator assignments. */ constructor(IJBOperatorStore _operatorStore) { operatorStore = _operatorStore; } _operatorStore is an IJBOperatorStore contract storing operator assignments. Modifiers​ Name\tDatarequirePermission address _accountuint256 _domainuint256 _index requirePermissionAllowingOverride address _accountuint256 _domainuint256 _permissionIndexbool _override Read​ Function\tDefinitionoperatorStore Traits immutable Returns IJBOperationStore operatorStore _requirePermission Traits internal Params uint256 _projectIduint256 _domainuint256 _permissionIndex _requirePermissionAllowingOverride Traits internal Params uint256 _projectIduint256 _domainuint256 _permissionIndexbool override","keywords":""},{"title":"issueFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/write/issuefor","content":"issueFor Contract: JBTokenStore​‌ Interface: IJBTokenStore Step by stepCodeErrorsEventsBug bounty Issues an project's ERC-20 tokens that'll be used when claiming tokens. Deploys a project's ERC-20 token contract. Only a project's current controller can issue its token. Definition​ function issueFor( uint256 _projectId, string calldata _name, string calldata _symbol ) external override onlyController(_projectId) returns (IJBToken token) { ... } Arguments: _projectId is the ID of the project being issued tokens._name is the ERC-20's name._symbol is the ERC-20's symbol. Through the onlyController modifier, the function can only be accessed by the controller of the _projectId.The function overrides a function definition from the IJBTokenStore interface.The function returns the token that was issued. Body​ Make sure a name was provided. // There must be a name. if (bytes(_name).length == 0) revert EMPTY_NAME(); Make sure a symbol was provided. // There must be a symbol. if (bytes(_symbol).length == 0) revert EMPTY_SYMBOL(); Make sure the project doesn't already have a token. // The project shouldn't already have a token. if (tokenOf[_projectId] != IJBToken(address(0))) revert PROJECT_ALREADY_HAS_TOKEN(); Internal references: tokenOf Deploy a new instance of a JBToken contract. Assign it to the return value. // Deploy the token contract. token = new JBToken(_name, _symbol); Store the newly deployed token contract as the token of the project. // Store the token contract. tokenOf[_projectId] = token; Internal references: tokenOf Store the project the token is being used for. // Store the project for the token. projectOf[token] = _projectId; Internal references: projectOf Emit an Issue event with the relevant parameters. emit Issue(_projectId, token, _name, _symbol, msg.sender); Event references: Issue","keywords":""},{"title":"mintFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/write/mintfor","content":"mintFor Contract: JBTokenStore​‌ Interface: IJBTokenStore Step by stepCodeEventsBug bounty Mint new project tokens. Only a project's current controller can mint its tokens. Definition​ function mintFor( address _holder, uint256 _projectId, uint256 _amount, bool _preferClaimedTokens ) external override onlyController(_projectId) { ... } Arguments: _holder is the address receiving the new tokens._projectId is the ID of the project to which the tokens belong._amount is the amount of tokens to mint._preferClaimedTokens is a flag indicating whether there's a preference for minted tokens to be claimed automatically into the _holders wallet if the project currently has a token contract attached. Through the onlyController modifier, the function can only be accessed by the controller of the _projectId.The function overrides a function definition from the IJBTokenStore interface.The function doesn't return anything. Body​ Get a reference to the project's current token. // Get a reference to the project's current token. IJBToken _token = tokenOf[_projectId]; Internal references: tokenOf Check if tokens should be minted using the internal accounting mechanism, or if they should be claimed into the holder's wallet. Tokens should be claimed if the project has issued tokens, and either the project forces tokens to be claimed or if the _preferClaimedTokens flag is true. The internal accounting mechanism uses less gas, and tokens issued using it can later be claimed into the holders wallet by anyone who submits a claimFor transaction. // Save a reference to whether there exists a token and the caller prefers these claimed tokens or the project requires it. bool _shouldClaimTokens = (requireClaimFor[_projectId] || _preferClaimedTokens) &amp;&amp; _token != IJBToken(address(0)); Internal references: requireClaimFor If claimed tokens should be minted, mint the project's token into the holders wallet. Otherwise increment the holder's balance or the unclaimed tokens for the project, and the total supply of unclaimed tokens for the project. if (_shouldClaimTokens) // If tokens should be claimed, mint tokens into the holder's wallet. _token.mint(_projectId, _holder, _amount); else { // Otherwise, add the tokens to the unclaimed balance and total supply. unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] + _amount; unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] + _amount; } Internal references: unclaimedBalanceOfunclaimedTotalSupplyOf External references: mint Emit a Mint event with the relevant parameters. emit Mint(_holder, _projectId, _amount, _shouldClaimTokens, _preferClaimedTokens, msg.sender); Event references: Mint","keywords":""},{"title":"_set","type":0,"sectionRef":"#","url":"dev/api/contracts/jbsplitsstore/write/-_set","content":"_set Contract: JBSplitsStore​‌ Interface: IJBSplitsStore Step by stepCodeErrorsEventsBug bounty Sets a project's splits. The new splits must include any currently set splits that are locked. Definition​ function _set( uint256 _projectId, uint256 _domain, uint256 _group, JBSplit[] memory _splits ) internal { ... } Arguments: _projectId is the ID of the project for which splits are being added._domain is an identifier within which the splits should be considered active._group is an identifier between of splits being set. All splits within this _group must add up to within 100%._splits are the JBSplits to set. The resulting function is internal to this contract and its inheriters. The function doesn't return anything. Body​ Get a reference to the current splits set for the specified project's domain, within the specified group. // Get a reference to the project's current splits. JBSplit[] memory _currentSplits = _getStructsFor(_projectId, _domain, _group); Internal references: _getStructsFor Loop through each current split to make sure the new splits being set respect any current split bound by a lock constraint. // Check to see if all locked splits are included. for (uint256 _i = 0; _i &lt; _currentSplits.length; _i++) { ... } If the current split isn't locked, move on to the next one. // If not locked, continue. if (block.timestamp &gt;= _currentSplits[_i].lockedUntil) continue; If the current split is locked, check to make sure the new splits includes it. The only property of a locked split that can have changed is its locked deadline, which can be extended. // Keep a reference to whether or not the locked split being iterated on is included. bool _includesLocked = false; for (uint256 _j = 0; _j &lt; _splits.length; _j++) { // Check for sameness. if ( _splits[_j].percent == _currentSplits[_i].percent &amp;&amp; _splits[_j].beneficiary == _currentSplits[_i].beneficiary &amp;&amp; _splits[_j].allocator == _currentSplits[_i].allocator &amp;&amp; _splits[_j].projectId == _currentSplits[_i].projectId &amp;&amp; // Allow lock extention. _splits[_j].lockedUntil &gt;= _currentSplits[_i].lockedUntil ) _includesLocked = true; } Check to make sure the provided splits includes any locked current splits. if (!_includesLocked) revert PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED(); Store a local variable to keep track of all the percents from the splits. // Add up all the percents to make sure they cumulative are under 100%. uint256 _percentTotal = 0; Loop through each newly provided splits to validate the provided properties. for (uint256 _i = 0; _i &lt; _splits.length; _i++) { ... } Check that the percent for the current split is not zero. // The percent should be greater than 0. if (_splits[_i].percent == 0) revert INVALID_SPLIT_PERCENT(); Check that the ID of the project for the current split is within the max value that can be packed. // ProjectId should be within a uint56 if (_splits[_i].projectId &gt; type(uint56).max) revert INVALID_PROJECT_ID(); Increment the total percents that have been accumulated so far. // Add to the total percents. _percentTotal = _percentTotal + _splits[_i].percent; Make sure the accumulated percents are under 100%. // Validate the total does not exceed the expected value. if (_percentTotal &gt; JBConstants.SPLITS_TOTAL_PERCENT) revert INVALID_TOTAL_PERCENT(); Library references: JBConstants .SPLITS_TOTAL_PERCENT Pack common split properties into a storage slot. // Pack the first split part properties. uint256 _packedSplitParts1; // prefer claimed in bit 0. if (_splits[_i].preferClaimed) _packedSplitParts1 = 1; // prefer add to balance in bit 1. if (_splits[_i].preferAddToBalance) _packedSplitParts1 |= 1 &lt;&lt; 1; // percent in bits 2-33. _packedSplitParts1 |= _splits[_i].percent &lt;&lt; 2; // projectId in bits 32-89. _packedSplitParts1 |= _splits[_i].projectId &lt;&lt; 34; // beneficiary in bits 90-249. _packedSplitParts1 |= uint256(uint160(address(_splits[_i].beneficiary))) &lt;&lt; 90; // Store the first split part. _packedSplitParts1Of[_projectId][_domain][_group][_i] = _packedSplitParts1; Internal references: _packedSplitParts1Of Pack less common split properties into another storage slot if needed. Otherwise, delete any content in storage at the index being iterated on. // If there's data to store in the second packed split part, pack and store. if (_splits[_i].lockedUntil &gt; 0 || _splits[_i].allocator != IJBSplitAllocator(address(0))) { // Locked until should be within a uint48 if (_splits[_i].lockedUntil &gt; type(uint48).max) revert INVALID_LOCKED_UNTIL(); // lockedUntil in bits 0-47. uint256 _packedSplitParts2 = uint48(_splits[_i].lockedUntil); // allocator in bits 48-207. _packedSplitParts2 |= uint256(uint160(address(_splits[_i].allocator))) &lt;&lt; 48; // Store the second split part. _packedSplitParts2Of[_projectId][_domain][_group][_i] = _packedSplitParts2; // Otherwise if there's a value stored in the indexed position, delete it. } else if (_packedSplitParts2Of[_projectId][_domain][_group][_i] &gt; 0) delete _packedSplitParts2Of[_projectId][_domain][_group][_i]; Internal references: _packedSplitParts2Of For each added split, emit a SetSplit event with all relevant parameters. emit SetSplit(_projectId, _domain, _group, _splits[_i], msg.sender); Event references: SetSplit Store the new array length. // Set the new length of the splits. _splitCountOf[_projectId][_domain][_group] = _splits.length; Internal references: _splitCountOf","keywords":""},{"title":"duration","type":0,"sectionRef":"#","url":"dev/api/contracts/or-ballots/jbreconfigurationbufferballot/properties/duration","content":"duration Contract: JBReconfigurationBufferBallot Interface: IJBFundingCycleBallot The number of seconds that must pass for a funding cycle reconfiguration to become either Approved or Failed. Definition​ /** @notice The number of seconds that must pass for a funding cycle reconfiguration to become either `Approved` or `Failed`. */ uint256 public immutable override duration; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBFundingCycleBallot interface.","keywords":""},{"title":"shouldRequireClaimingFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/write/shouldrequireclaimingfor","content":"shouldRequireClaimingFor Contract: JBTokenStore​‌ Interface: IJBTokenStore Step by stepCodeErrorsEventsBug bounty Allows a project to force all future mints of its tokens to be claimed into the holder's wallet, or revoke the flag if it's already set. Only a token holder or an operator can require claimed token. Definition​ function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.REQUIRE_CLAIM) { ... } Arguments: _projectId is the ID of the project being affected._flag is a flag indicating whether or not claiming should be required. Through the requirePermission modifier, the function is only accessible by the project's owner, or from an operator that has been given the JBOperations.REQUIRE_CLAIM permission by the project owner for the provided _projectId.The function overrides a function definition from the IJBTokenStore interface.The function doesn't return anything. Body​ Get a reference to the project's current token. // Get a reference to the project's current token. IJBToken _token = tokenOf[_projectId]; Internal references: tokenOf Make sure the project has a token. If it doesn't, there's nowhere to claim tokens onto. // The project must have a token contract attached. if (_token == IJBToken(address(0))) revert TOKEN_NOT_FOUND(); Store the flag for the project. // Store the flag. requireClaimFor[_projectId] = _flag; Internal references: requireClaimFor Emit a ShouldRequireClaim event with the relevant parameters. emit ShouldRequireClaim(_projectId, _flag, msg.sender); Event references: ShouldRequireClaim","keywords":""},{"title":"finalState","type":0,"sectionRef":"#","url":"dev/api/contracts/or-ballots/jbreconfigurationbufferballot/properties/finalstate","content":"finalState Contract: JBReconfigurationBufferBallot Interface: IJBReconfigurationBufferBallot The finalized state. If Active, the ballot for the provided configuration can still be finalized whenever its state settles. Definition​ /** @notice The finalized state. @dev If `Active`, the ballot for the provided configuration can still be finalized whenever its state settles. _projectId The ID of the project to check the final ballot state of. _configuration The configuration of the funding cycle to check the final ballot state of. */ mapping(uint256 =&gt; mapping(uint256 =&gt; JBBallotState)) public override finalState; Arguments: _projectId is the ID of the project to check the final ballot state of._configuration is the configuration of the funding cycle to check the final ballot state of. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBReconfigurationBufferBallot interface.","keywords":""},{"title":"fundingCycleStore","type":0,"sectionRef":"#","url":"dev/api/contracts/or-ballots/jbreconfigurationbufferballot/properties/fundingcyclestore","content":"fundingCycleStore Contract: JBReconfigurationBufferBallot Interface: IJBReconfigurationBufferBallot The contract storing all funding cycle configurations. Definition​ /** @notice The contract storing all funding cycle configurations. */ IJBFundingCycleStore public immutable override fundingCycleStore; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBReconfigurationBufferBallot interface.","keywords":""},{"title":"requirePermission","type":0,"sectionRef":"#","url":"dev/api/contracts/or-abstract/jboperatable/modifiers/requirepermission","content":"requirePermission Contract: JBOperatable​‌ Step by stepCodeBug bounty Only allows the speficied account or an operator of the account to proceed. Definition​ modifier requirePermission( address _account, uint256 _domain, uint256 _permissionIndex ) { ... } Arguments: _projectId is the ID of the project. The modifier function can be used by any internal function. Body​ Make sure the message's sender fulfills the criteria. _requirePermission(_account, _domain, _permissionIndex); Internal references: _requirePermission Continue the rest of the function. _; ","keywords":""},{"title":"requirePermissionAllowingOverride","type":0,"sectionRef":"#","url":"dev/api/contracts/or-abstract/jboperatable/modifiers/requirepermissionallowingoverride","content":"requirePermissionAllowingOverride Contract: JBOperatable​‌ Step by stepCodeBug bounty Only allows the speficied account, an operator of the account to proceed, or a truthy override flag. Definition​ modifier requirePermissionAllowingOverride( address _account, uint256 _domain, uint256 _permissionIndex, bool _override ) { ... } Arguments: _account is the account to check for._domain is the domain namespace to look for an operator within. _permissionIndex is the index of the permission to check for. _override is a condition to force allowance for. The modifier function can be used by any internal function. Body​ Make sure the message's sender fulfills the criteria. _requirePermissionAllowingOverride(_account, _domain, _permissionIndex, _override); Internal references: _requirePermissionAllowingOverride Continue the rest of the function. _; ","keywords":""},{"title":"_requirePermission","type":0,"sectionRef":"#","url":"dev/api/contracts/or-abstract/jboperatable/read/-_requirepermission","content":"_requirePermission Contract: JBOperatable​‌ Step by stepCodeErrorsBug bounty Require the message sender is either the account or has the specified permission. Definition​ function _requirePermission( address _account, uint256 _domain, uint256 _permissionIndex ) internal view { ... } Arguments: _account is the account to allow._domain is the domain namespace within which the permission index will be checked._permissionIndex is the permission index that an operator must have within the specified domain to be allowed. The resulting function is internal to this contract and its inheriters.The function doesn't return anything. Body​ Make sure the message sender is the specified account, an operator of the account within the specified domain, or an operator of the account within the wildcard domain. if ( msg.sender != _account &amp;&amp; !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &amp;&amp; !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex) ) revert UNAUTHORIZED(); Internal references: operatorStore External references: hasPermission","keywords":""},{"title":"_requirePermissionAllowingOverride","type":0,"sectionRef":"#","url":"dev/api/contracts/or-abstract/jboperatable/read/-_requirepermissionallowingoverride","content":"_requirePermissionAllowingOverride Contract: JBOperatable​‌ Step by stepCodeErrorsBug bounty Require the message sender is either the account, has the specified permission, or the override condition is true. Definition​ function _requirePermissionAllowingOverride( address _account, uint256 _domain, uint256 _permissionIndex, bool _override ) internal view { ... } Arguments: _account is the account to allow._domain is the domain namespace within which the permission index will be checked._permissionIndex is the permission index that an operator must have within the specified domain to be allowed._override is the override condition to allow. The resulting function is internal to this contract and its inheriters.The function doesn't return anything. Body​ Make sure the override flag is on, or the message sender is the specified account, an operator of the account within the specified domain, or an operator of the account within the wildcard domain. if ( !_override &amp;&amp; msg.sender != _account &amp;&amp; !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &amp;&amp; !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex) ) revert UNAUTHORIZED(); Internal references: operatorStore External references: hasPermission","keywords":""},{"title":"Finalize","type":0,"sectionRef":"#","url":"dev/api/contracts/or-ballots/jbreconfigurationbufferballot/events/finalize","content":"Finalize Emitted from: finalize Definition​ event Finalize( uint256 indexed projectId, uint256 indexed configuration, JBBallotState indexed ballotState, address caller ); projectId is the ID of the project whose ballot state was finalized.configuration is the configuration that was finalized.ballotState is the final ballot state.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"burnFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/write/burnfrom","content":"burnFrom Contract: JBTokenStore​‌ Interface: IJBTokenStore Step by stepCodeErrorsEventsBug bounty Burns a project's tokens. Only a project's current controller can burn its tokens. Definition​ function burnFrom( address _holder, uint256 _projectId, uint256 _amount, bool _preferClaimedTokens ) external override onlyController(_projectId) { ... } Arguments: _holder is the address that owns the tokens being burned._projectId is the ID of the project to which the burned tokens belong._amount is the amount of tokens to burn._preferClaimedTokens is a flag indicating whether there's a preference for tokens to burned from the _holders wallet if the project currently has a token contract attached. Through the onlyController modifier, the function can only be accessed by the controller of the _projectId.The function overrides a function definition from the IJBTokenStore interface.The function doesn't return anything. Body​ Get a reference to the project's current token. // Get a reference to the project's current token. IJBToken _token = tokenOf[_projectId]; Internal references: tokenOf Get a reference to the amount of unclaimed project tokens the holder has. // Get a reference to the amount of unclaimed project tokens the holder has. uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId]; Internal references: unclaimedBalanceOf Get a reference to the amount of the project's tokens the holder has in their wallet. If the project does not yet have tokens issued, the holder must not have a claimed balance. // Get a reference to the amount of the project's current token the holder has in their wallet. uint256 _claimedBalance = _token == IJBToken(address(0)) ? 0 : _token.balanceOf(_holder, _projectId); External references: balanceOf Make sure the holder has enough tokens to burn. // There must be adequate tokens to burn across the holder's claimed and unclaimed balance. if (_amount &gt; _claimedBalance + _unclaimedBalance) revert INSUFFICIENT_FUNDS(); Find the amount of claimed tokens that should be burned. This will be 0 if the holder has no claimed balance, an amount up to the holder's claimed balance if there is a preference for burning claimed tokens, or the difference between the amount being burned and the holder's unclaimed balance otherwise. // The amount of tokens to burn. uint256 _claimedTokensToBurn; // If there's no balance, redeem no tokens. if (_claimedBalance == 0) _claimedTokensToBurn = 0; // If prefer converted, redeem tokens before redeeming unclaimed tokens. else if (_preferClaimedTokens) _claimedTokensToBurn = _claimedBalance &lt; _amount ? _claimedBalance : _amount; // Otherwise, redeem unclaimed tokens before claimed tokens. else _claimedTokensToBurn = _unclaimedBalance &lt; _amount ? _amount - _unclaimedBalance : 0; The amount of unclaimed tokens to burn is necessarily the amount of tokens to burn minus the amount of claimed tokens to burn. // The amount of unclaimed tokens to redeem. uint256 _unclaimedTokensToBurn = _amount - _claimedTokensToBurn; If there are unclaimed tokens to burn, subtract the amount from the unclaimed balance of the holder for the project, and from the unclaimed total supply of the project. // Subtract the tokens from the unclaimed balance and total supply. if (_unclaimedTokensToBurn &gt; 0) { // Reduce the holders balance and the total supply. unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] - _unclaimedTokensToBurn; unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] - _unclaimedTokensToBurn; } Internal references: unclaimedBalanceOfunclaimedTotalSupplyOf If there are claimed tokens to burn, burn them from the holder's wallet. // Burn the claimed tokens. if (_claimedTokensToBurn &gt; 0) _token.burn(_projectId, _holder, _claimedTokensToBurn); External references: burn Emit a Burn event with the relevant parameters. emit Burn( _holder, _projectId, _amount, _unclaimedBalance, _claimedBalance, _preferClaimedTokens, msg.sender ); Event references: Burn","keywords":""},{"title":"BurnTokens","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/events/burntokens","content":"BurnTokens Emitted from: burnTokensOf Definition​ event BurnTokens( address indexed holder, uint256 indexed projectId, uint256 tokenCount, string memo, address caller ); holder is the address from which the tokens were burned.projectId is the ID of the token's project.tokenCount is the number of tokens that were burned.memo is a note that was attached.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"DistributeReservedTokens","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/events/distributereservedtokens","content":"DistributeReservedTokens Emitted from: distributeReservedTokensOf Definition​ event DistributeReservedTokens( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, address beneficiary, uint256 tokenCount, uint256 beneficiaryTokenCount, string memo, address caller ); fundingCycleConfiguration is the funding cycle configuration during which the reserved tokens were distributed.fundingCycleNumber is the number of the funding cycle during which the reserved tokens were distributed.projectId is the ID of the token's project.beneficiary is the address that received any leftover tokens after splits were applied.tokenCount is the total number of tokens that were distributed.beneficiaryTokenCount is the number of tokens that were distributed to the beneficiary.memo is a note that was attached.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"supportsInterface","type":0,"sectionRef":"#","url":"dev/api/contracts/or-ballots/jbreconfigurationbufferballot/read/supportsinterface","content":"supportsInterface Contract: JBReconfigurationBufferBallot Interface: IERC165 Step by stepCodeBug bounty Indicates if this contract adheres to the specified interface. See {IERC165-supportsInterface}. Definition​ function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC165, IERC165) returns (bool) { ... } Arguments: _interfaceId is the ID of the interface to check for adherance to. The view function can be accessed externally by anyone, and internally within this contract.The view function does not alter state on the blockchain.The function overrides a function definition from the IERC165 interface.The function returns a flag indicating if this contract adheres to the specified interface. Body​ Return true if the provided interface ID is in the list of interfaces this contract adheres to. return _interfaceId == type(IJBReconfigurationBufferBallot).interfaceId || _interfaceId == type(IJBFundingCycleBallot).interfaceId || super.supportsInterface(_interfaceId); ","keywords":""},{"title":"DistributeToReservedTokenSplit","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/events/distributetoreservedtokensplit","content":"DistributeToReservedTokenSplit Emitted from: _distributeToReservedTokenSplitsOf Definition​ event DistributeToReservedTokenSplit( uint256 indexed projectId, uint256 indexed domain, uint256 indexed group, JBSplit split, uint256 tokenCount, address caller ); projectId is the ID of the project to which the split belongs.domain is the namespace that differentiates different split groups for the projectId.group is the property that joins multiple splits into one full group.split is the JBSplit that received reserved tokens.amount is the total token amount that was distributed to the split.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"Migrate","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/events/migrate","content":"Migrate Emitted from: migrate Definition​ event Migrate(uint256 indexed projectId, IJBController to, address caller); projectId is the ID of the project that was migrated.to is the controller that was migrated to.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"LaunchProject","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/events/launchproject","content":"LaunchProject Emitted from: launchProjectFor Definition​ event LaunchProject(uint256 configuration, uint256 projectId, string memo, address caller); configuration is the configuration of the first funding cycle.projectId is the ID of the project that was launched.memo is a note that was attached.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"SetFundAccessConstraints","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/events/setfundaccessconstraints","content":"SetFundAccessConstraints Emitted from: _configure Definition​ event SetFundAccessConstraints( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, JBFundAccessConstraints constraints, address caller ); fundingCycleConfiguration is the funding cycle configuration during which the constraints are valid.fundingCycleNumber is the number of the funding cycle during which the constraints were set.projectId is the ID of the project who has set an fund access constraints.constraints is the JBFundAccessConstraints data structure.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"JBReconfigurationBufferBallot","type":0,"sectionRef":"#","url":"dev/api/contracts/or-ballots/jbreconfigurationbufferballot/","content":"JBReconfigurationBufferBallot Manages approving funding cycle reconfigurations automatically after a buffer period. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBReconfigurationBufferBallot.sol Interfaces​ Name\tDescriptionIJBReconfigurationBufferBallot\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionERC165\tIntrospection on interface adherance. Constructor​ /** @param _duration The number of seconds to wait until a reconfiguration can be either `Approved` or `Failed`. @param _fundingCycleStore A contract storing all funding cycle configurations. */ constructor(uint256 _duration, IJBFundingCycleStore _fundingCycleStore) { duration = _duration; fundingCycleStore = _fundingCycleStore; } _duration is the number of seconds to wait until a reconfiguration can be either Approved or Failed._fundingCycleStore is a contract storing all funding cycle configurations. Events​ Name\tDataFinalize uint256 indexed projectIduint256 indexed configurationJBBallotState indexed ballotStateaddress caller Properties​ Function\tDefinitionduration Traits immutable Returns uint256 fundingCycleStore Traits immutable Returns IJBFundingCycleStore finalState Returns uint256 Read​ Function\tDefinitionstateOf Params uint256 _projectIduint256 _configureduint256 _start Returns JBBallotState ballotState supportsInterface Params uint256 _interfaceId Returns bool Write​ Function\tDefinitionfinalize Params uint256 _projectIduint256 _configured Returns JBBallotState ballotState","keywords":""},{"title":"ReconfigureFundingCycles","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/events/reconfigurefundingcycles","content":"ReconfigureFundingCycles Emitted from: reconfigureFundingCyclesOf Definition​ event ReconfigureFundingCycles( uint256 configuration, uint256 projectId, string memo, address caller ); configuration is the configuration of the funding cycle that was configured.projectId is the ID of the project that reconfigured its funding cycles.memo is a note that was attached.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"stateOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-ballots/jbreconfigurationbufferballot/read/stateof","content":"stateOf Contract: JBReconfigurationBufferBallot Interface: IJBFundingCycleBallot Step by stepCodeBug bounty The approval state of a particular funding cycle. Definition​ function stateOf( uint256 _projectId, uint256 _configured, uint256 _start ) public view override returns (JBBallotState) { ... } Arguments: _projectId is the ID of the project to which the funding cycle being checked belongs._configured is the configuration of the funding cycle to check the state of._start is the start timestamp of the funding cycle to check the state of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBFundingCycleBallot interface.The function returns the state of the provided ballot. Body​ Return the final state if there is one. // If there is a finalized state, return it. if (finalState[_projectId][_configured] != JBBallotState.Active) return finalState[_projectId][_configured]; Enums used: JBBallotState .Active Internal references: finalState If the ballot's duration has not yet passed since the reconfiguration was proposed, the state is failed if the funding cycle is supposed to have already started. Otherwise it is still active. // If the delay hasn't yet passed, the ballot is either failed or active. if (block.timestamp &lt; _configured + duration) // If the current timestamp is past the start, the ballot is failed. return (block.timestamp &gt;= _start) ? JBBallotState.Failed : JBBallotState.Active; Enums used: JBBallotState .Failed.Active The ballot is otherwise approved. // The ballot is otherwise approved. return JBBallotState.Approved; Enums used: JBBallotState .Approved","keywords":""},{"title":"LaunchFundingCycles","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/events/launchfundingcycles","content":"LaunchFundingCycles Emitted from: launchProjectFor Definition​ event LaunchFundingCycles(uint256 configuration, uint256 projectId, string memo, address caller); configuration is the configuration of the first funding cycle.projectId is the ID of the project that launched its first funding cycle.memo is a note that was attached.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"MintTokens","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/events/minttokens","content":"MintTokens Emitted from: mintTokensOf Definition​ event MintTokens( address indexed beneficiary, uint256 indexed projectId, uint256 tokenCount, uint256 beneficiaryTokenCount, string memo, uint256 reservedRate, address caller ); beneficiary is the address to which the tokens were minted.projectId is the ID of the token's project.tokenCount is the number of tokens that were minted in total, counting however many were reserved.beneficiaryTokenCount is the number of tokens that were minted for the beneficiary.memo is a note that was attached.reservedRate is the project's current reserved rate.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"Migrate","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/events/prepmigration","content":"Migrate Emitted from: prepMigrationOf Definition​ event PrepMigration(uint256 indexed projectId, IJBController from, address caller); projectId is the ID of the project that was prepped for migration.from is the controller that the project is being migrated from.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"changeFor","type":0,"sectionRef":"#","url":"dev/api/contracts/jbtokenstore/write/changefor","content":"changeFor Contract: JBTokenStore​‌ Interface: IJBTokenStore Step by stepCodeErrorsEventsBug bounty Swap the current project's token for another, and transfer ownership of the current token to another address if needed. Only a project's current controller can change its token. This contract must have access to all of the token's IJBToken interface functions. Can't change to a token that's currently being used by another project. Definition​ function changeFor( uint256 _projectId, IJBToken _token, address _newOwner ) external override onlyController(_projectId) { ... } Arguments: _projectId is the ID of the project to which the changed token belongs._token is the new token. Send an empty address to remove the project's current token without adding a new one, if claiming tokens isn't currency required by the project_newOwner is an address to transfer the current token's ownership to. This is optional, but it cannot be done later. Through the onlyController modifier, the function can only be accessed by the controller of the _projectId.The function overrides a function definition from the IJBTokenStore interface.The function doesn't return anything. Body​ Make sure claiming isn't required if removing the token. // Can't remove the project's token if the project requires claiming tokens. if (_token == IJBToken(address(0)) &amp;&amp; requireClaimFor[_projectId]) revert CANT_REMOVE_TOKEN_IF_ITS_REQUIRED(); Internal references: requireClaimFor Make sure the token being changed to isn't being used by another project. // Can't change to a token already in use. if (projectOf[_token] != 0) revert TOKEN_ALREADY_IN_USE(); Internal references: projectOf Make sure the token has 18 decimals. // Can't change to a token that doesn't use 18 decimals. if (_token != IJBToken(address(0)) &amp;&amp; _token.decimals() != 18) revert TOKENS_MUST_HAVE_18_DECIMALS(); External references: decimals Get a reference to the project's current token. // Get a reference to the current token for the project. oldToken = tokenOf[_projectId]; Internal references: tokenOf Store the provided token as the token of the project. // Store the new token. tokenOf[_projectId] = _token; Internal references: tokenOf Store the project the new token is being used for. // Store the project for the new token. if (_token != IJBToken(address(0))) projectOf[_token] = _projectId; Internal references: projectOf Reset the project for the project's old token. // Reset the project for the old token. projectOf[oldToken] = 0; Internal references: projectOf If there's a current token and a new owner address was provided, transfer the ownership of the current token from this contract to the new owner. // If there's a current token and a new owner was provided, transfer ownership of the old token to the new owner. if (_newOwner != address(0) &amp;&amp; oldToken != IJBToken(address(0))) oldToken.transferOwnership(_projectId, _newOwner); External references: transferOwnership Emit a Change event with the relevant parameters. emit Change(_projectId, _token, oldToken, _newOwner, msg.sender); Event references: Change","keywords":""},{"title":"_packedOverflowAllowanceDataOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/properties/-_packedoverflowallowancedataof","content":"_packedOverflowAllowanceDataOf Contract: JBController​‌ Data regarding the overflow allowance of a project during a configuration. bits 0-247: The amount of overflow that a project is allowed to tap into on-demand throughout the configuration. bits 248-255: The currency of the amount of overflow that a project is allowed to tap. Definition​ /** @notice Data regarding the overflow allowance of a project during a configuration. @dev bits 0-231: The amount of overflow that a project is allowed to tap into on-demand throughout the configuration. @dev bits 232-255: The currency of the amount of overflow that a project is allowed to tap. _projectId The ID of the project to get the packed overflow allowance data of. _configuration The configuration during which the packed overflow allowance data applies. _terminal The terminal managing the overflow. _token The token for which overflow is being allowed. */ mapping(uint256 =&gt; mapping(uint256 =&gt; mapping(IJBPaymentTerminal =&gt; mapping(address =&gt; uint256)))) internal _packedOverflowAllowanceDataOf; Arguments: _projectId is the ID of the project to get the packed overflow allowance data of._configuration is the configuration during which the packed overflow allowance data applies._terminal is the IJBPaymentTerminal managing the overflow._token is the token for which overflow is being allowed. The resulting function is internal to this contract and its inheriters.","keywords":""},{"title":"projects","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/properties/projects","content":"projects Contract: JBController​‌ Interface: IJBController Mints ERC-721's that represent project ownership and transfers. Definition​ /** @notice Mints ERC-721's that represent project ownership and transfers. */ IJBProjects public immutable override projects; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBController interface.","keywords":""},{"title":"_packedDistributionLimitDataOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/properties/-_packeddistributionlimitdataof","content":"_packedDistributionLimitDataOf Contract: JBController​‌ Data regarding the distribution limit of a project during a configuration. bits 0-247: The amount of token that a project can distribute per funding cycle. bits 248-255: The currency of amount that a project can distribute. Definition​ /** @notice Data regarding the distribution limit of a project during a configuration. @dev bits 0-231: The amount of token that a project can distribute per funding cycle. @dev bits 232-255: The currency of amount that a project can distribute. _projectId The ID of the project to get the packed distribution limit data of. _configuration The configuration during which the packed distribution limit data applies. _terminal The terminal from which distributions are being limited. _token The token for which distributions are being limited. */ mapping(uint256 =&gt; mapping(uint256 =&gt; mapping(IJBPaymentTerminal =&gt; mapping(address =&gt; uint256)))) internal _packedDistributionLimitDataOf; Arguments: _projectId is the ID of the project to get the packed distribution limit data of._configuration is the configuration during which the packed distribution limit data applies._terminal is the IJBPaymentTerminal from which distributions are being limited._token is the token for which distributions are being limited. The resulting function is internal to this contract and its inheriters.","keywords":""},{"title":"finalize","type":0,"sectionRef":"#","url":"dev/api/contracts/or-ballots/jbreconfigurationbufferballot/write/finalize","content":"finalize Contract: JBReconfigurationBufferBallot Interface: IJBReconfigurationBufferBallot Step by stepCodeEventsBug bounty Finalizes a configuration state if the current state has settled. Definition​ function finalize(uint256 _projectId, uint256 _configured) external override returns (JBBallotState ballotState) { ... } Arguments: _projectId is the ID of the project to which the funding cycle being checked belongs._configured is the configuration of the funding cycle to check the state of. The function overrides a function definition from the IJBReconfigurationBufferBallot interface.The function returns the state of the finalized ballot. If Active, the ballot can still later be finalized when it's state resolves. Body​ Get a reference to the project's currency funding cycle. // Get the funding cycle for the configuration. JBFundingCycle memory _fundingCycle = fundingCycleStore.get(_projectId, _configured); Internal references: fundingCycleStore External references: get Get a reference to the current finalized ballot state. // Get the current ballot state. ballotState = finalState[_projectId][_configured]; Internal references: finalState If the currency final state is still unresolved, store the updated value it if it has now resolved and emit a Finalize event with the relevant parameters. // If the final ballot skate is still `Active`. if (ballotState == JBBallotState.Active) { ballotState = stateOf(_projectId, _configured, _fundingCycle.start); // If the ballot is active after the cycle has started, it should be finalized as failed. if (ballotState != JBBallotState.Active) { // Store the updated value. finalState[_projectId][_configured] = ballotState; emit Finalize(_projectId, _configured, ballotState, msg.sender); } } Enums used: JBBallotState .Active Internal references: stateOffinalState Event references: Finalize","keywords":""},{"title":"fundingCycleStore","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/properties/fundingcyclestore","content":"fundingCycleStore Contract: JBController​‌ Interface: IJBController The contract storing all funding cycle configurations. Definition​ /** @notice The contract storing all funding cycle configurations. */ IJBFundingCycleStore public immutable fundingCycleStore; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBController interface.","keywords":""},{"title":"tokenStore","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/properties/tokenstore","content":"tokenStore Contract: JBController​‌ Interface: IJBController The contract that manages token minting and burning. Definition​ /** @notice The contract that manages token minting and burning. */ IJBTokenStore public immutable tokenStore; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBController interface.","keywords":""},{"title":"_processedTokenTrackerOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/properties/-_processedtokentrackerof","content":"_processedTokenTrackerOf Contract: JBController​‌ The difference between the processed token tracker of a project and the project's token's total supply is the amount of tokens that still need to have reserves minted against them. Definition​ /** @notice The difference between the processed token tracker of a project and the project's token's total supply is the amount of tokens that still need to have reserves minted against them. _projectId The ID of the project to get the tracker of. */ mapping(uint256 =&gt; int256) internal _processedTokenTrackerOf; Arguments: _projectId is the ID of the project to get the tracker of. The resulting function is internal to this contract and its inheriters.","keywords":""},{"title":"directory","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/properties/directory","content":"directory Contract: JBController​‌ Interface: IJBController The directory of terminals and controllers for projects. Definition​ /** @notice The directory of terminals and controllers for projects. */ IJBDirectory public immutable override directory; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBController interface.","keywords":""},{"title":"latestConfiguredFundingCycleOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/read/latestconfiguredfundingcycleof","content":"latestConfiguredFundingCycleOf Contract: JBController​‌ Interface: IJBController Step by stepCodeBug bounty A project's latest configured funding cycle along with its metadata and the ballot state of the configuration. Definition​ function latestConfiguredFundingCycleOf(uint256 _projectId) external view override returns ( JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata, JBBallotState ballotState ) { ... } Arguments:_projectId is the ID of the project to which the funding cycle belongs.The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBController interface.The function returns: fundingCycle is the latest configured funding cycle.metadata is the latest configured funding cycle's metadata.ballotState is the state of the configuration. Body​ Get the latest configured funding cycle and its ballot state. (fundingCycle, ballotState) = fundingCycleStore.latestConfiguredOf(_projectId); Internal references: fundingCycleStore External references: latestConfiguredOf Expand the metadata of the funding cycle. metadata = fundingCycle.expandMetadata(); Library references: JBFundingCycleMetadataResolver .expandMetadata(...)","keywords":""},{"title":"distributionLimitOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/read/distributionlimitof","content":"distributionLimitOf Contract: JBController​‌ Interface: IJBController Step by stepCodeBug bounty The amount of token that a project can distribute per funding cycle, and the currency it's in terms of. The number of decimals in the returned fixed point amount is the same as that of the specified terminal. Definition​ function distributionLimitOf( uint256 _projectId, uint256 _configuration, IJBPaymentTerminal _terminal, address _token ) external view override returns (uint256, uint256) { ... } Arguments:_projectId is the ID of the project to get the distribution limit of._configuration is the configuration during which the distribution limit applies._terminal is the IJBPaymentTerminal from which distributions are being limited._token is the token for which the distribution limit applies.The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBController interface.The function returns: distributionLimit is the distribution limit, as a fixed point number with the same number of decimals as the provided terminal.distributionLimitCurrency is the currency from JBCurrencies that the returned distribution limit is in terms of. Body​ Get a reference to the packed distribution limit data. // Get a reference to the packed data. uint256 _data = _packedDistributionLimitDataOf[_projectId][_configuration][_terminal][_token]; Internal references: _packedDistributionLimitDataOf Return the distribution limit, which is in the first 248 bits, and the currency the distribution limit is in terms of, which is in the last 8 bits. // The limit is in bits 0-231. The currency is in bits 232-255. return (uint256(uint232(_data)), _data &gt;&gt; 232); ","keywords":""},{"title":"currentFundingCycleOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/read/currentfundingcycleof","content":"currentFundingCycleOf Contract: JBController​‌ Interface: IJBController Step by stepCodeBug bounty A project's current funding cycle along with its metadata. Definition​ function currentFundingCycleOf(uint256 _projectId) external view override returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata) { ... } Arguments:_projectId is the ID of the project to which the funding cycle belongs.The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBController interface.The function returns: fundingCycle is the current funding cycle.metadata is the current funding cycle's metadata. Body​ Get the current funding cycle. fundingCycle = fundingCycleStore.currentOf(_projectId); Internal references: fundingCycleStore External references: currentOf Expand the metadata of the funding cycle. metadata = fundingCycle.expandMetadata(); Library references: JBFundingCycleMetadataResolver .expandMetadata(...)","keywords":""},{"title":"reservedTokenBalanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/read/reservedtokenbalanceof","content":"reservedTokenBalanceOf Contract: JBController​‌ Interface: IJBController Step by stepCodeBug bounty Gets the amount of reserved tokens that a project has available to distribute. Definition​ function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate) external view override returns (uint256) { ... } Arguments: _projectId is the ID of the project to get a reserved token balance of._reservedRate is the reserved rate to use when making the calculation. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBController interface.The function returns the reserved token balance. Body​ Forward the call to the internal version of the function that is also used by other operations. return _reservedTokenAmountFrom( _processedTokenTrackerOf[_projectId], _reservedRate, tokenStore.totalSupplyOf(_projectId) ); Internal references: _reservedTokenAmountFrom_processedTokenTrackerOf External references: totalSupplyOf","keywords":""},{"title":"totalOutstandingTokensOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/read/totaloutstandingtokensof","content":"totalOutstandingTokensOf Contract: JBController​‌ Interface: IJBController Step by stepCodeBug bounty Gets the current total amount of outstanding tokens for a project, given a reserved rate. Definition​ function totalOutstandingTokensOf(uint256 _projectId, uint256 _reservedRate) external view override returns (uint256) { ... } Arguments: _projectId is the ID of the project to get total outstanding tokens of._reservedRate is the reserved rate to use when making the calculation. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBController interface.The function returns the current total amount of outstanding tokens for the project. Body​ Get the total supply of tokens in circulation. // Get the total number of tokens in circulation. uint256 _totalSupply = tokenStore.totalSupplyOf(_projectId); Internal references: tokenStore External references: totalSupplyOf Get the number of outstanding reserved tokens the project has given the provided reserved rate. // Get the number of reserved tokens the project has. uint256 _reservedTokenAmount = _reservedTokenAmountFrom( _processedTokenTrackerOf[_projectId], _reservedRate, _totalSupply ); Internal references: _reservedTokenAmountFrom_processedTokenTrackerOf Return the sum of the total supply and the reserved tokens. // Add the reserved tokens to the total supply. return _totalSupply + _reservedTokenAmount; ","keywords":""},{"title":"currentFundingCycleOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/read/getfundingcycleof","content":"currentFundingCycleOf Contract: JBController​‌ Interface: IJBController Step by stepCodeBug bounty A project's funding cycle for the specified configuration along with its metadata. Definition​ function getFundingCycleOf(uint256 _projectId, uint256 _configuration) external view override returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata) { ... } Arguments:_projectId is the ID of the project to which the funding cycle belongs.The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBController interface.The function returns: fundingCycle is the funding cycle.metadata is the funding cycle's metadata. Body​ Get the current funding cycle. fundingCycle = fundingCycleStore.get(_projectId, _configuration); Internal references: fundingCycleStore External references: get Expand the metadata of the funding cycle. metadata = fundingCycle.expandMetadata(); Library references: JBFundingCycleMetadataResolver .expandMetadata(...)","keywords":""},{"title":"_reservedTokenAmountFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/read/-_reservedtokenamountfrom","content":"_reservedTokenAmountFrom Step by stepOnly codeBug bounty Gets the amount of reserved tokens currently tracked for a project given a reserved rate. Definition​ function _reservedTokenAmountFrom( int256 _processedTokenTracker, uint256 _reservedRate, uint256 _totalEligibleTokens ) internal pure returns (uint256) { ... } Arguments: _processedTokenTracker is the tracker to make the calculation with._reservedRate is the reserved rate to use to make the calculation._totalEligibleTokens is the total amount to make the calculation with. The resulting function is internal to this contract and its inheriters. The function does not alter state on the blockchain.The function returns the reserved token amount. Body​ Get a reference to the number of tokens that have yet to be processed. This is the difference between the total eligible tokens and the tracker. If the tracker is negative, the difference can be found by adding its absolute value to the total eligible tokens. // Get a reference to the amount of tokens that are unprocessed. uint256 _unprocessedTokenBalanceOf = _processedTokenTracker &gt;= 0 ? _totalEligibleTokens - uint256(_processedTokenTracker) : _totalEligibleTokens + uint256(-_processedTokenTracker); If there are no unprocessed tokens, there are no outstanding reserved tokens. // If there are no unprocessed tokens, return. if (_unprocessedTokenBalanceOf == 0) return 0; If the reserved rate is 100%, the reserved token amount is equal to the unprocessed balance. // If all tokens are reserved, return the full unprocessed amount. if (_reservedRate == JBConstants.MAX_RESERVED_RATE) return _unprocessedTokenBalanceOf; Library references: JBConstants .MAX_RESERVED_RATE The reserved token amount is the reserved percentage of the unprocessed balance. return PRBMath.mulDiv( _unprocessedTokenBalanceOf, JBConstants.MAX_RESERVED_RATE, JBConstants.MAX_RESERVED_RATE - _reservedRate ) - _unprocessedTokenBalanceOf; Library references: PRBMath .mulDiv(...) JBConstants .MAX_RESERVED_RATE","keywords":""},{"title":"supportsInterface","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/read/supportsinterface","content":"supportsInterface Contract: JBController​‌ Interface: IERC165 Step by stepCodeBug bounty Indicates if this contract adheres to the specified interface. See {IERC165-supportsInterface}. Definition​ function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC165, IERC165) returns (bool) { ... } Arguments: _interfaceId is the ID of the interface to check for adherance to. The view function can be accessed externally by anyone, and internally within this contract.The view function does not alter state on the blockchain.The function overrides a function definition from the IERC165 interface.The function returns a flag indicating if this contract adheres to the specified interface. Body​ Return true if the provided interface ID is in the list of interfaces this contract adheres to. return _interfaceId == type(IJBController).interfaceId || _interfaceId == type(IJBMigratable).interfaceId || _interfaceId == type(IJBOperatable).interfaceId || super.supportsInterface(_interfaceId); ","keywords":""},{"title":"overflowAllowanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/read/overflowallowanceof","content":"overflowAllowanceOf Contract: JBController​‌ Interface: IJBController Step by stepCodeBug bounty The amount of overflow that a project is allowed to tap into on-demand throughout a configuration, and the currency it's in terms of. The number of decimals in the returned fixed point amount is the same as that of the specified terminal. Definition​ function overflowAllowanceOf( uint256 _projectId, uint256 _configuration, IJBPaymentTerminal _terminal, address _token ) external view override returns (uint256, uint256) { ... } Arguments:_projectId is the ID of the project to get the overflow allowance of._configuration is the configuration of the during which the allowance applies._terminal is the IJBPaymentTerminal managing the overflow._token is the token for which the overflow allowance applies.The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBController interface.The function returns: overflowAllowance is the overflow allowance, as a fixed point number with the same number of decimals as the provided terminal.overflowAllowanceCurrency is the currency from JBCurrencies that the returned overflow allowance is in terms of. Body​ Get a reference to the packed overflow allowance data. // Get a reference to the packed data. uint256 _data = _packedOverflowAllowanceDataOf[_projectId][_configuration][_terminal]; Internal references: _packedOverflowAllowanceDataOf Return the overflow allowance, which is in the first 248 bits, and the currency the overflow allowance is in terms of, which is in the last 8 bits. // The allowance is in bits 0-231. The currency is in bits 232-255. return (uint256(uint232(_data)), _data &gt;&gt; 232); ","keywords":""},{"title":"splitsStore","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/properties/splitsstore","content":"splitsStore Contract: JBController​‌ Interface: IJBController The contract that stores splits for each project. Definition​ /** @notice The contract that stores splits for each project. */ IJBSplitsStore public immutable splitsStore; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBController interface.","keywords":""},{"title":"JBController","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/","content":"JBController Stitches together funding cycles and project tokens, making sure all activity is accounted for and correct. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBController.sol Addresses​ Ethereum mainnet: 0x4e3ef8AFCC2B52E4e704f4c8d9B7E7948F651351 Ethereum rinkeby: 0xd96ecf0E07eB197587Ad4A897933f78A00B21c9a Interfaces​ Name\tDescriptionIJBController\tGeneral interface for the generic controller methods in this contract that interacts with funding cycles and tokens according to the protocol's rules. IJBMigratable\tAllows migrating to this contract, with a hook called to prepare for the migration. Inheritance​ Contract\tDescriptionJBOperatable\tIncludes convenience functionality for checking a message sender's permissions before executing certain transactions. ERC165\tIntrospection on interface adherance. Constructor​ /** @param _operatorStore A contract storing operator assignments. @param _projects A contract which mints ERC-721's that represent project ownership and transfers. @param _directory A contract storing directories of terminals and controllers for each project. @param _fundingCycleStore A contract storing all funding cycle configurations. @param _tokenStore A contract that manages token minting and burning. @param _splitsStore A contract that stores splits for each project. */ constructor( IJBOperatorStore _operatorStore, IJBProjects _projects, IJBDirectory _directory, IJBFundingCycleStore _fundingCycleStore, IJBTokenStore _tokenStore, IJBSplitsStore _splitsStore ) JBOperatable(_operatorStore) { projects = _projects; directory = _directory; fundingCycleStore = _fundingCycleStore; tokenStore = _tokenStore; splitsStore = _splitsStore; } _operatorStore is an IJBOperatorStore contract storing operator assignments._projects is an IJBProjects contract which mints ERC-721's that represent project ownership and transfers._directory is an IJBDirectory contract storing directories of terminals and controllers for each project._fundingCycleStore is an IJBFundingCycleStore contract storing all funding cycle configurations._tokenStore is an IJBTokenStore contract that manages token minting and burning._splitsStore is an IJBSplitsStore contract that stores splits for each project. Events​ Name\tDataLaunchProject uint256 configurationuint256 projectIdstring memoaddress caller LaunchFundingCycles uint256 configurationuint256 projectIdstring memoaddress caller ReconfigureFundingCycles uint256 configurationuint256 projectIdstring memoaddress caller SetFundAccessConstraints uint256 indexed fundingCycleConfigurationuint256 indexed fundingCycleNumberuint256 indexed projectIdJBFundAccessConstraints constraintsaddress caller DistributeReservedTokens uint256 indexed fundingCycleConfigurationuint256 indexed fundingCycleNumberuint256 indexed projectIdaddress beneficiaryuint256 tokenCountuint256 beneficiaryTokenCountstring memoaddress caller DistributeToReservedTokenSplit uint256 indexed projectIduint256 indexed domainuint256 indexed groupJBSplit splituint256 countaddress caller MintTokens address indexed beneficiaryuint256 indexed projectIduint256 tokenCountstring memouint256 reservedRateaddress caller BurnTokens address indexed holderuint256 indexed projectIduint256 tokenCountstring memoaddress caller PrepMigration uint256 projectIdIJBController fromaddress caller Migrate uint256 projectIdIJBController toaddress caller Properties​ Function\tDefinitionprojects Traits immutable Returns IJBProjects fundingCycleStore Traits immutable Returns IJBFundingCycleStore tokenStore Traits immutable Returns IJBTokenStore splitsStore Traits immutable Returns IJBSplitsStore directory Traits immutable Returns IJBDirectory Read​ Function\tDefinitiondistributionLimitOf Params uint256 _projectIduint256 _configurationIJBPaymentTerminal _terminaladdress _token Returns uint256 distributionLimit overflowAllowanceOf Params uint256 _projectIduint256 _configurationIJBPaymentTerminal _terminaladdress _token Returns uint256 overflowAllowance reservedTokenBalanceOf Params uint256 _projectIduint256 _reservedRate Returns uint256 reservedTokenBalance totalOutstandingTokensOf Params uint256 _projectIduint256 _reservedRate Returns uint256 totalOutstandingTokens getFundingCycleOf Params uint256 _projectIduint256 _configuration Returns JBFundingCycle fundingCycleJBFundingCycleMetadata metadata latestConfiguredFundingCycleOf Params uint256 _projectId Returns JBFundingCycle fundingCycleJBFundingCycleMetadata metadataJBBallotState ballotState currentFundingCycleOf Params uint256 _projectId Returns JBFundingCycle fundingCycleJBFundingCycleMetadata metadata queuedFundingCycleOf Params uint256 _projectId Returns JBFundingCycle fundingCycleJBFundingCycleMetadata metadata supportsInterface Params uint256 _interfaceId Returns bool Write​ Function\tDefinitionlaunchProjectFor Traits virtual Params address _ownerJBMetadataContent _projectMetadataJBFundingCycleData _dataJBFundingCycleMetadata _metadatauint256 _mustStartAtOrAfterJBGroupedSplits[] _groupedSplitsJBFundAccessConstraints[] _fundAccessConstraintsIJBPaymentTerminal[] _terminalsstring calldata _memo Returns uint256 projectId launchFundingCyclesFor Traits requirePermissionvirtual Params uint256 _projectIdJBFundingCycleData _dataJBFundingCycleMetadata _metadatauint256 _mustStartAtOrAfterJBGroupedSplits[] _groupedSplitsJBFundAccessConstraints[] _fundAccessConstraintsIJBPaymentTerminal[] _terminalsstring calldata _memo Returns uint256 configuration reconfigureFundingCyclesOf Traits requirePermissionvirtual Params uint256 _projectIdJBFundingCycleData _dataJBFundingCycleMetadata _metadataJBGroupedSplits[] _groupedSplitsJBFundAccessConstraints[] _fundAccessConstraintsstring calldata _memo Returns uint256 configuration issueTokenFor Traits requirePermissionvirtual Params uint256 _projectIdstring _namestring _symbol Returns IJBToken token changeTokenOf Traits requirePermissionvirtual Params uint256 _projectIdIJBToken _tokenaddress _newOwner mintTokensOf Traits requirePermissionAllowingOverridevirtual Params uint256 _projectIduint256 _tokenCountaddress _beneficiarystring _memobool _preferClaimedTokens,bool _useReservedRate Returns uint256 beneficiaryTokenCount burnTokensOf Traits requirePermissionAllowingOverridevirtual Params address _holderuint256 _projectIduint256 _tokenCountstring _memobool _preferClaimedTokens distributeReservedTokensOf Traits virtual Params uint256 _projectIdstring _memo Returns uint256 tokenCount prepForMigrationOf Traits virtual Params uint256 _projectIdaddress _from migrate Traits requirePermissionvirtual Params uint256 _projectIdIJBMigratable _to","keywords":""},{"title":"changeTokenOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/changetokenof","content":"changeTokenOf Contract: JBController​‌ Interface: IJBController Step by stepCodeErrorsBug bounty Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed. Only a project's owner or operator can change its token. Definition​ function changeTokenOf( uint256 _projectId, IJBToken _token, address _newOwner ) external virtual override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.CHANGE_TOKEN) { ... } Arguments: _projectId is the ID of the project to which the changed token belongs._token is the new token, which must adhere to the IJBToken specification._newOwner is an address to transfer the current token's ownership to. This is optional, but it cannot be done later. Through the requirePermission modifier, the function is only accessible by the project's owner, or from an operator that has been given the JBOperations.CHANGE_TOKEN permission by the project owner for the provided _projectId.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBController interface.The function doesn't return anything. Body​ Get a reference to the project's current funding cycle. // Get a reference to the project's current funding cycle. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); Internal references: fundingCycleStore External references: currentOf Make sure the current funding cycle for the project allows changing tokens. // The current funding cycle must not be paused. if (!_fundingCycle.changeTokenAllowed()) revert CHANGE_TOKEN_NOT_ALLOWED(); Library references: JBFundingCycleMetadataResolver .changeTokenAllowed(...) Forward the call to the token store. // Change the token in the store. tokenStore.changeFor(_projectId, _token, _newOwner); Internal references: tokenStore External references: changeFor","keywords":""},{"title":"_distributeReservedTokensOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/-_distributereservedtokensof","content":"_distributeReservedTokensOf Step by stepCodeEventsBug bounty Distributes all outstanding reserved tokens for a project. Definition​ function _distributeReservedTokensOf(uint256 _projectId, string memory _memo) internal returns (uint256 tokenCount) { ... } Arguments: _projectId is the ID of the project to which the reserved tokens belong._memo is a memo to pass along to the emitted event. The resulting function is internal to this contract and its inheriters. The function returns the amount of reserved tokens that were minted. Body​ Get a reference to the current funding cycle of the project. // Get the current funding cycle to read the reserved rate from. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); Internal references: fundingCycleStore External references: currentOf Get a reference to the current total supply of tokens issued for the project. // Get a reference to new total supply of tokens before minting reserved tokens. uint256 _totalTokens = tokenStore.totalSupplyOf(_projectId); Internal references: tokenStore External references: totalSupplyOf Get a reference to the current amount of reserved tokens given the current state of the tracker, the current funding cycle's reserved rate, and the current total token supply. // Get a reference to the number of tokens that need to be minted. tokenCount = _reservedTokenAmountFrom( _processedTokenTrackerOf[_projectId], _fundingCycle.reservedRate(), _totalTokens ); Library references: JBFundingCycleMetadataResolver .reservedRate(...) Internal references: _processedTokenTrackerOf_reservedTokenAmountFrom Set the tracker to be equal to the new current total token supply, which is the amount stored plus the amount that will be minted and distributed. // Set the tracker to be the new total supply. _processedTokenTrackerOf[_projectId] = int256(_totalTokens + tokenCount); Internal references: _processedTokenTrackerOf Get a reference to the project's owner. // Get a reference to the project owner. address _owner = projects.ownerOf(_projectId); Internal references: projects External references: ownerOf If there are outstanding reserved tokens, distribute them to reserved token splits. Get a reference to any leftover amount after the splits are settled. // Distribute tokens to splits and get a reference to the leftover amount to mint after all splits have gotten their share. uint256 _leftoverTokenCount = tokenCount == 0 ? 0 : _distributeToReservedTokenSplitsOf( _projectId, _fundingCycle.configuration, JBSplitsGroups.RESERVED_TOKENS, tokenCount ); Library references: JBSplitsGroups .RESERVED_TOKENS Internal references: _distributeToReservedTokenSplitsOf If there are any leftover reserved tokens, mint them for the project's owner. // Mint any leftover tokens to the project owner. if (_leftoverTokenCount &gt; 0) tokenStore.mintFor(_owner, _projectId, _leftoverTokenCount, false); Internal references: mintFor Emit a DistributeReservedTokens event with the relevant parameters. emit DistributeReservedTokens( _fundingCycle.configuration, _fundingCycle.number, _projectId, _owner, tokenCount, _leftoverTokenCount, _memo, msg.sender ); Event references: DistributeReservedTokens","keywords":""},{"title":"distributeReservedTokensOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/distributereservedtokensof","content":"distributeReservedTokensOf Contract: JBController​‌ Interface: IJBController Step by stepCodeBug bounty Distributes all outstanding reserved tokens for a project. Definition​ function distributeReservedTokensOf(uint256 _projectId, string memory _memo) external virtual override returns (uint256) { ... } Arguments: _projectId is the ID of the project to which the reserved tokens belong._memo is a memo to pass along to the emitted event. The function can be accessed externally by anyone.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBController interface.The function returns the amount of minted reserved tokens. Body​ Forward the call to the internal version of the function that is also used by other operations. return _distributeReservedTokensOf(_projectId, _memo); Internal references: _distributeReservedTokensOf","keywords":""},{"title":"queuedFundingCycleOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/read/queuedfundingcycleof","content":"queuedFundingCycleOf Contract: JBController​‌ Interface: IJBController Step by stepCodeBug bounty A project's queued funding cycle along with its metadata. Definition​ function queuedFundingCycleOf(uint256 _projectId) external view override returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata) { ... } Arguments:_projectId is the ID of the project to which the funding cycle belongs.The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBController interface.The function returns: fundingCycle is the queued funding cycle.metadata is the queued funding cycle's metadata. Body​ Get the current funding cycle. fundingCycle = fundingCycleStore.queuedOf(_projectId); Internal references: fundingCycleStore External references: queuedOf Expand the metadata of the funding cycle. metadata = fundingCycle.expandMetadata(); Library references: JBFundingCycleMetadataResolver .expandMetadata(...)","keywords":""},{"title":"issueTokenFor","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/issuetokenfor","content":"issueTokenFor Contract: JBController​‌ Interface: IJBController Step by stepCodeBug bounty Issues an owner's ERC20 JBTokens that'll be used when claiming tokens. Deploys a project's ERC20 JBToken contract. Only a project's owner or operator can issue its token. Definition​ function issueFor( uint256 _projectId, string calldata _name, string calldata _symbol ) external virtual override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.ISSUE) returns (IJBToken token) { ... } Arguments: _projectId is the ID of the project being issued tokens._name is the ERC20's name._symbol is the ERC20's symbol. Through the requirePermission modifier, the function is only accessible by the project's owner, or from an operator that has been given the JBOperations.ISSUE permission by the project owner for the provided _projectId.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBController interface.The function returns the address of the token that was issued. Body​ Forward the call to the token store. // Issue the token in the store. return tokenStore.issueFor(_projectId, _name, _symbol); Internal references: tokenStore External references: issueFor","keywords":""},{"title":"SetBaseUri","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/events/setbaseuri","content":"SetBaseUri Emitted from: setBaseUri Definition​ event SetBaseUri(string indexed baseUri, address caller); baseUri is the base URI to use for tokens if a URI resolver isn't provided.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"SetContractUri","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/events/setcontracturi","content":"SetContractUri Emitted from: setContractUri Definition​ event SetContractUri(string indexed contractUri, address caller); contractUri is the contract metadata uri.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"burnTokensOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/burntokensof","content":"burnTokensOf Contract: JBController​‌ Interface: IJBController Step by stepCodeErrorsEventsBug bounty Burns a token holder's supply. Only a token's holder, a designated operator, or a project's terminal can burn it. Definition​ function burnTokensOf( address _holder, uint256 _projectId, uint256 _tokenCount, string calldata _memo, bool _preferClaimedTokens ) external virtual override nonReentrant requirePermissionAllowingOverride( _holder, _projectId, JBOperations.BURN, directory.isTerminalDelegateOf(_projectId, msg.sender) ) { ... } Arguments: _holder is the account that is having its tokens burned._projectId is the ID of the project to which the tokens being burned belong._tokenCount is the number of tokens to burn._memo is a memo to pass along to the emitted event._preferClaimedTokens is flag indicating whether a project's attached token contract should be burned first if they have been issued. Through the requirePermissionAllowingOverride modifier, the function is only accessible by the project's owner, from an operator that has been given the JBOperations.BURN permission by the project owner for the provided _projectId, or from one of the project's terminal's delegates.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBController interface.The function doesn't return anything. Body​ Make sure there is a specified number of tokens to burn. // There should be tokens to burn if (_tokenCount == 0) revert NO_BURNABLE_TOKENS(); Get a reference to the current funding cycle for the project. // Get a reference to the project's current funding cycle. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); Internal references: fundingCycleStore External references: currentOf Make sure the current funding cycle for the project hasn't paused burning if the request is not coming from one of the project's terminals. If the request is coming from a terminal, allow burning regardless of the pause state because it could be a sub-routine of another operation such as redemption. // If the message sender is not a terminal, the current funding cycle must not be paused. if ( _fundingCycle.burnPaused() &amp;&amp; !directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender)) ) revert BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE(); Internal references: directory Library references: JBFundingCycleMetadataResolver .burnPaused(...) External references: isTerminalOf Update the token tracker so that the correct amount of reserved tokens are still mintable after the burn. // Update the token tracker so that reserved tokens will still be correctly mintable. _processedTokenTrackerOf[_projectId] = _processedTokenTrackerOf[_projectId] - int256(_tokenCount); Internal references: _processedTokenTrackerOf Burn the tokens. // Burn the tokens. tokenStore.burnFrom(_holder, _projectId, _tokenCount, _preferClaimedTokens); Internal references: tokenStore External references: burnFrom Emit a BurnTokens event with the relevant parameters. emit BurnTokens(_holder, _projectId, _tokenCount, _memo, msg.sender); Event references: BurnTokens","keywords":""},{"title":"SetTokenUriResolver","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/events/settokenuriresolver","content":"SetTokenUriResolver Emitted from: setTokenUriResolver Definition​ event SetTokenUriResolver(IJBTokenUriResolver indexed newResolver, address caller); newResolver is the new URI resolver contract.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"contractUri","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/properties/contracturi","content":"contractUri Contract: JBNFTRewardDelegate​‌ Interface: IJBNFTRewardDelegate Contract metadata uri. Definition​ /** @notice Contract metadata uri. */ string public override contractUri; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBNFTRewardDelegate interface.","keywords":""},{"title":"prepForMigrationOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/prepformigrationof","content":"prepForMigrationOf Contract: JBController​‌ Interface: IJBController Step by stepCodeErrorsEventsBug bounty Allows other controllers to signal to this one that a migration is expected for the specified project. This controller should not yet be the project's controller. Definition​ function prepForMigrationOf(uint256 _projectId, address _from) external virtual override { ... } Arguments: _projectId is the ID of the project that will be migrated to this controller._from is the controller being migrated from. The function can be accessed externally by anyone.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBController interface.The function doesn't return anything. Body​ Make sure this controller isn't the project's current controller. If it is, there shouldn't be a need to prepare anything. // This controller must not be the project's current controller. if (directory.controllerOf(_projectId) == address(this)) revert CANT_MIGRATE_TO_CURRENT_CONTROLLER(); Internal references: directory External references: controllerOf Update the processed token tracker to equal the current total supply of tokens. This prevents any inadvertant outstanding reserved tokens from being distributable upon migrating to this controller. // Set the tracker as the total supply. _processedTokenTrackerOf[_projectId] = int256(tokenStore.totalSupplyOf(_projectId)); Internal references: tokenStore_processedTokenTrackerOf External references: totalSupplyOf Emit a PrepMigration event with the relevant parameters. emit PrepMigration(_projectId, _from, msg.sender); Event references: PrepMigration","keywords":""},{"title":"baseUri","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/properties/baseuri","content":"baseUri Contract: JBNFTRewardDelegate​‌ Interface: IJBNFTRewardDelegate The base URI to use for tokens if a URI resolver isn't provided. The token ID will be concatenated onto the base URI to form the token URI. Definition​ /** @notice The base URI to use for tokens if a URI resolver isn't provided. @dev The token ID will be concatenated onto the base URI to form the token URI. */ string public override baseUri; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBNFTRewardDelegate interface.","keywords":""},{"title":"directory","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/properties/directory","content":"directory Contract: JBNFTRewardDelegate​‌ Interface: IJBNFTRewardDelegate The directory of terminals and controllers for projects. Definition​ /** @notice The directory of terminals and controllers for projects. */ IJBDirectory public immutable override directory; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBNFTRewardDelegate interface.","keywords":""},{"title":"setbaseuri","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/write/setbaseuri","content":"setbaseuri","keywords":""},{"title":"launchProjectFor","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/launchprojectfor","content":"launchProjectFor Contract: JBController​‌ Step by stepCodeEventsBug bounty Creates a project. This will mint an ERC-721 into the specified owner's account, configure a first funding cycle, and set up any splits. Each operation within this transaction can be done in sequence separately. Anyone can deploy a project on an owner's behalf. Definition​ function launchProjectFor( address _owner, JBProjectMetadata calldata _projectMetadata, JBFundingCycleData calldata _data, JBFundingCycleMetadata calldata _metadata, uint256 _mustStartAtOrAfter, JBGroupedSplits[] calldata _groupedSplits, JBFundAccessConstraints[] calldata _fundAccessConstraints, IJBPaymentTerminal[] calldata _terminals, string calldata _memo ) external virtual override returns (uint256 projectId) { ... } Arguments: _owner is the address to set as the owner of the project. The project ERC-721 will be owned by this address._projectMetadata is a JBProjectMetadata data structure to associate with the project within a particular domain. This can be updated any time by the owner of the project._data is a JBFundingCycleData data structure that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle._metadata is a JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle._mustStartAtOrAfter is the time before which the configured funding cycle cannot start._groupedSplits is an array of JBGroupedSplits data structures containing splits to set for any number of groups. The core protocol makes use of groups defined in JBSplitsGroups._fundAccessConstraints is an array of JBFundAccessConstraints data structures containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal. The _distributionLimit and _overflowAllowance parameters must fit in a uint232. The _distributionLimit applies for each funding cycle, and the _overflowAllowance applies for the entirety of the configuration._terminals is an array of IJBPaymentTerminal payment terminals to add for the project._memo is a memo to pass along to the emitted event. The function can be accessed externally by anyone.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBController interface.The function returns the ID of the project that was launched. Body​ Create the project. This will mint an ERC-721 in the owner's wallet representing ownership over the project. // Mint the project into the wallet of the message sender. projectId = projects.createFor(_owner, _projectMetadata); Internal references: projects External references: createFor Set this controller as the controller of the project. // Set this contract as the project's controller in the directory. directory.setControllerOf(projectId, address(this)); Internal references: directory External references: setControllerOf Configure the project's funding cycle, fund access constraints, and splits. Get a reference to the resulting funding cycle's configuration. // Configure the first funding cycle. uint256 _configuration = _configure( projectId, _data, _metadata, _mustStartAtOrAfter, _groupedSplits, _fundAccessConstraints ); Internal references: _configure If terminals were provided, add them to the list of terminals the project can accept funds through. // Add the provided terminals to the list of terminals. if (_terminals.length &gt; 0) directory.setTerminalsOf(projectId, _terminals); Internal references: directory External references: setTerminalsOf Emit a LaunchProject event with the relevant parameters. emit LaunchProject(_configuration, projectId, _memo, msg.sender); Event references: LaunchProject","keywords":""},{"title":"_distributeToReservedTokenSplitsOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/-_distributetoreservedtokensplitsof","content":"_distributeToReservedTokenSplitsOf Step by stepOnly codeEventsBug bounty Distribute tokens to the splits according to the specified funding cycle configuration. Definition​ function _distributeToReservedTokenSplitsOf( uint256 _projectId, uint256 _domain, uint256 _group, uint256 _amount ) internal returns (uint256 leftoverAmount) { ... } Arguments: _projectId is the ID of the project for which reserved token splits are being distributed._fundingCycle is the JBFundingCycle to base the token distribution on._domain is the domain of the splits to distribute the reserved tokens between._group is the group of the splits to distribute the reserved tokens between._amount is the total amount of tokens to mint. The resulting function is internal to this contract and its inheriters. The function returns the leftover amount after all splits have been distributed. Body​ Save the passed in amount as the leftover amount that will be returned. The subsequent routine will decrement the leftover amount as splits are settled. // Set the leftover amount to the initial amount. leftoverAmount = _amount; Get a reference to reserved token splits for the current funding cycle configuration of the project. // Get a reference to the project's reserved token splits. JBSplit[] memory _splits = splitsStore.splitsOf(_projectId, _domain, _group); Internal references: splitsStore External references: splitsOf Loop through each split. //Transfer between all splits. for (uint256 _i = 0; _i &lt; _splits.length; _i++) { ... } Get a reference to the current split being iterated on. // Get a reference to the split being iterated on. JBSplit memory _split = _splits[_i]; Get a reference to the amount of tokens to distribute to the current split. This amount is the total amount multiplied by the percentage of the split, which is a number out of the max value. // The amount to send towards the split. uint256 _tokenCount = PRBMath.mulDiv( _amount, _split.percent, JBConstants.SPLITS_TOTAL_PERCENT ); Library references: PRBMath .mulDiv(...) JBConstants .SPLITS_TOTAL_PERCENT If there are tokens to mint for the given split, do so. If the split has an allocator specified, the tokens should go to that address. Otherwise if the split has a project ID specified, the tokens should be directed to the project's owner. Otherwise, the tokens should be directed at the beneficiary address of the split if it has one, or to the message sender if not. Afterwards, if there's an allocator specified, let it know that tokens have been sent. Reduce the leftover amount by the tokens that were sent to the split. // Mints tokens for the split if needed. if (_tokenCount &gt; 0) { tokenStore.mintFor( // If an allocator is set in the splits, set it as the beneficiary. // Otherwise if a projectId is set in the split, set the project's owner as the beneficiary. // If the split has a beneficiary send to the split's beneficiary. Otherwise send to the msg.sender. _split.allocator != IJBSplitAllocator(address(0)) ? address(_split.allocator) : _split.projectId != 0 ? projects.ownerOf(_split.projectId) : _split.beneficiary != address(0) ? _split.beneficiary : msg.sender, _projectId, _tokenCount, _split.preferClaimed ); // If there's an allocator set, trigger its `allocate` function. if (_split.allocator != IJBSplitAllocator(address(0))) _split.allocator.allocate( JBSplitAllocationData( address(tokenStore.tokenOf(_projectId)), _tokenCount, 18, // 18 decimals. _projectId, _group, _split ) ); // Subtract from the amount to be sent to the beneficiary. leftoverAmount = leftoverAmount - _tokenCount; } External references: mintFortokenOfallocateownerOf Emit a DistributeToReservedTokenSplit event for the split being iterated on with the relevant parameters. emit DistributeToReservedTokenSplit( _projectId, _domain, _group, _split, _tokenCount, msg.sender ); Event references: DistributeToReservedTokenSplit","keywords":""},{"title":"tokenUriResolver","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/properties/tokenuriresolver","content":"tokenUriResolver Contract: JBNFTRewardDelegate​‌ Interface: IJBNFTRewardDelegate Custom token URI resolver, superceeds base URI. Definition​ /** @notice Custom token URI resolver, superceeds base URI. */ IJBTokenUriResolver public override tokenUriResolver; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBNFTRewardDelegate interface.","keywords":""},{"title":"payparams","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/read/payparams","content":"payparams","keywords":""},{"title":"JBNFTRewardDelegate","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/","content":"JBNFTRewardDelegate Delegate that offers project contributors NFTs upon payment. Also can be used as a data source. Code​ https://github.com/jbx-protocol/juice-nft-rewards/blob/main/contracts/abstract/JBNFTRewardDelegate.sol Addresses​ Ethereum mainnet: Not yet deployed Interfaces​ Name\tDescriptionIJBNFTRewardDelegate\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. IJBFundingCycleDataSource\tAllows this contract to be attached to a funding cycle to have its methods called during regular protocol operations. IJBPayDelegate\tAllows this contract to receive callbacks when a project receives a payment. Inheritance​ Contract\tDescriptionJBOperatable\tIncludes convenience functionality for checking a message sender's permissions before executing certain transactions. ERC721Votes\tA checkpointable standard definition for non-fungible tokens (NFTs). Ownable\tIncludes convenience functionality for specifying an address that owns the contract, with modifiers that only allow access by the owner. Constructor​ /** @param _projectId The ID of the project for which this NFT should be minted in response to payments made. @param _directory The directory of terminals and controllers for projects. @param _name The name of the token. @param _symbol The symbol that the token should be represented by. @param _tokenUriResolver A contract responsible for resolving the token URI for each token ID. @param _baseUri The token's base URI, to be used if a URI resolver is not provided. @param _contractUri A URI where contract metadata can be found. @param __expectedCaller The address that should be calling the data source. @param _owner The address that will own this contract. */ constructor( uint256 _projectId, IJBDirectory _directory, string memory _name, string memory _symbol, IJBTokenUriResolver _tokenUriResolver, string memory _baseUri, string memory _contractUri, address __expectedCaller, address _owner ) ERC721Rari(_name, _symbol) { projectId = _projectId; directory = _directory; baseUri = _baseUri; tokenUriResolver = _tokenUriResolver; contractUri = _contractUri; _expectedCaller = __expectedCaller; // Transfer the ownership to the specified address. if (_owner != address(0)) _transferOwnership(_owner); } _projectId is the ID of the project for which this NFT should be minted in response to payments made. _directory is the directory of terminals and controllers for projects._name is the name of the token._symbol is the symbol that the token should be represented by._tokenUriResolver is a contract responsible for resolving the token URI for each token ID._baseUri is the token's base URI, to be used if a URI resolver is not provided. _contractUri is a URI where contract metadata can be found. __expectedCaller is the address that should be calling the data source._owner is the address that will own this contract. Events​ Name\tDataSetContractUri string indexed contractUriaddress caller SetBaseUri string indexed baseUriaddress caller SetTokenUriResolver IToken721UriResolver indexed _newResolveraddress caller Properties​ Function\tDefinitionprojectId Traits immutable Returns uint256 directory Traits immutable Returns IJBDirectory baseUri Traits immutable Returns string memory contractUri Traits immutable Returns string memory tokenUriResolver Traits immutable Returns IJBTokenUriResolver Read​ Function\tDefinitionpayParams Params JBPayParamsData calldata _data Returns uint256 reclaimAmountstring memory memoIJBPayDelegate delegate redeemParams Params JBRedeemParamsData calldata _data Returns uint256 weightstring memory memoIJBRedemptionDelegate delegate supportsInterface Params bytes4 _interfaceId Returns bool tokenURI Params uint256 _tokenId Returns string memory Write​ Function\tDefinitiondidPay Params JBDidPayData _data setContractUri Params string calldata _contractMetadataUri setTokenUriResolver Params IJBTokenUriResolver _newResolver setBaseUri Params string calldata _baseUri","keywords":""},{"title":"redeemparams","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/read/redeemparams","content":"redeemparams","keywords":""},{"title":"supportsinterface","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/read/supportsinterface","content":"supportsinterface","keywords":""},{"title":"settokenuriresolver","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/write/settokenuriresolver","content":"settokenuriresolver","keywords":""},{"title":"tokenuri","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/read/tokenuri","content":"tokenuri","keywords":""},{"title":"reconfigureFundingCyclesOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/reconfigurefundingcyclesof","content":"reconfigureFundingCyclesOf Contract: JBController​‌ Interface: IJBController Step by stepCodeEventsBug bounty Proposes a configuration of a subsequent funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot. Only a project's owner or a designated operator can configure its funding cycles. Definition​ function reconfigureFundingCyclesOf( uint256 _projectId, JBFundingCycleData calldata _data, JBFundingCycleMetadata calldata _metadata, uint256 _mustStartAtOrAfter, JBGroupedSplits[] memory _groupedSplits, JBFundAccessConstraints[] memory _fundAccessConstraints, string calldata _memo ) external virtual override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE) returns (uint256 configuration) { ... } Arguments: _projectId is the ID of the project whose funding cycles are being reconfigured._data is a JBFundingCycleData data structure that defines the funding cycle. These properties will remain fixed for the duration of the funding cycle._metadata is a JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle._mustStartAtOrAfter is the time before which the configured funding cycle cannot start._groupedSplits is an array of JBGroupedSplits data structures containing splits to set for any number of groups. The core protocol makes use of groups defined in JBSplitsGroups._fundAccessConstraints is an array of JBFundAccessConstraints data structures containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal. The _distributionLimit and _overflowAllowance parameters must fit in a uint232. The _distributionLimit applies for each funding cycle, and the _overflowAllowance applies for the entirety of the configuration. Through the requirePermission modifier, the function is only accessible by the project's owner, or from an operator that has been given the JBOperations.RECONFIGURE permission by the project owner for the provided _projectId.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBController interface.The function returns the configuration of the funding cycle that was successfully updated. Body​ Configure the project's funding cycle, fund access constraints, and splits. Get a reference to the resulting funding cycle's configuration. // Configure the next funding cycle. configuration = _configure( _projectId, _data, _metadata, _mustStartAtOrAfter, _groupedSplits, _fundAccessConstraints ); Internal references: _configure Emit a ReconfigureFundingCycles event with the relevant parameters. emit ReconfigureFundingCycles(configuration, _projectId, _memo, msg.sender); Event references: ReconfigureFundingCycles","keywords":""},{"title":"_configure","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/-_configure","content":"_configure Step by stepOnly codeErrorsEventsBug bounty Configures a funding cycle and stores information pertinent to the configuration. Definition​ function _configure( uint256 _projectId, JBFundingCycleData calldata _data, JBFundingCycleMetadata calldata _metadata, uint256 _mustStartAtOrAfter, JBGroupedSplits[] memory _groupedSplits, JBFundAccessConstraints[] memory _fundAccessConstraints ) internal returns (uint256) { ... } Arguments: _projectId is the ID of the project whose funding cycles are being reconfigured._data is a JBFundingCycleData data structure that defines the funding cycle. These properties will remain fixed for the duration of the funding cycle._metadata is a JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle._mustStartAtOrAfter is the time before which the configured funding cycle cannot start._groupedSplits is an array of JBGroupedSplits data structures containing splits to set for any number of groups. The core protocol makes use of groups defined in JBSplitsGroups._fundAccessConstraints is an array of JBFundAccessConstraints data structures containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal. The distributionLimit applies for each funding cycle, and the overflowAllowance applies for the entirety of the configuration. The _distributionLimit and _overflowAllowance parameters must fit in a uint232. The resulting function is internal to this contract and its inheriters. The function returns the funding cycle configuration that was successfully updated. Body​ Make sure the reserved rate is a valid number out of the max value. // Make sure the provided reserved rate is valid. if (_metadata.reservedRate &gt; JBConstants.MAX_RESERVED_RATE) revert INVALID_RESERVED_RATE(); Library references: JBConstants .MAX_RESERVED_RATE(...) Make sure the redemption rate is a valid number out of the max value. // Make sure the provided redemption rate is valid. if (_metadata.redemptionRate &gt; JBConstants.MAX_REDEMPTION_RATE) revert INVALID_REDEMPTION_RATE(); Library references: JBConstants .MAX_REDEMPTION_RATE(...) Make sure the ballot redemption rate is less than the max value. // Make sure the provided ballot redemption rate is valid. if (_metadata.ballotRedemptionRate &gt; JBConstants.MAX_REDEMPTION_RATE) revert INVALID_BALLOT_REDEMPTION_RATE(); Library references: JBConstants .MAX_REDEMPTION_RATE(...) Configure the project's funding cycles. Pack the metadata into a uint256. // Configure the funding cycle's properties. JBFundingCycle memory _fundingCycle = fundingCycleStore.configureFor( _projectId, _data, JBFundingCycleMetadataResolver.packFundingCycleMetadata(_metadata), _mustStartAtOrAfter ); External references: configureFor Library references: JBFundingCycleMetadataResolver .packFundingCycleMetadata(...) Set splits. // Set splits for the group. splitsStore.set(_projectId, _fundingCycle.configuration, _groupedSplits); External references: set For each fund access constraint struct in the array passed in, store the values of the distribution limit and overflow allowance packed with their respective currencies. Make sure the values are contained within their bit limit so that they can be packed together in one uint256. Emit a SetFundAccessConstraints event with the relevant parameters. // Set distribution limits if there are any. for (uint256 _i; _i &lt; _fundAccessConstraints.length; _i++) { JBFundAccessConstraints memory _constraints = _fundAccessConstraints[_i]; // If distribution limit value is larger than 232 bits, revert. if (_constraints.distributionLimit &gt; type(uint232).max) revert INVALID_DISTRIBUTION_LIMIT(); // If distribution limit currency value is larger than 24 bits, revert. if (_constraints.distributionLimitCurrency &gt; type(uint24).max) revert INVALID_DISTRIBUTION_LIMIT_CURRENCY(); // If overflow allowance value is larger than 232 bits, revert. if (_constraints.overflowAllowance &gt; type(uint232).max) revert INVALID_OVERFLOW_ALLOWANCE(); // If overflow allowance currency value is larger than 24 cbits, revert. if (_constraints.overflowAllowanceCurrency &gt; type(uint24).max) revert INVALID_OVERFLOW_ALLOWANCE_CURRENCY(); // Set the distribution limit if there is one. if (_constraints.distributionLimit &gt; 0) _packedDistributionLimitDataOf[_projectId][_fundingCycle.configuration][ _constraints.terminal ] = _constraints.distributionLimit | (_constraints.distributionLimitCurrency &lt;&lt; 232); // Set the overflow allowance if there is one. if (_constraints.overflowAllowance &gt; 0) _packedOverflowAllowanceDataOf[_projectId][_fundingCycle.configuration][ _constraints.terminal ] = _constraints.overflowAllowance | (_constraints.overflowAllowanceCurrency &lt;&lt; 232); emit SetFundAccessConstraints( _fundingCycle.configuration, _fundingCycle.number, _projectId, _constraints, msg.sender ); } Internal references: _packedDistributionLimitDataOf_packedOverflowAllowanceDataOf Event references: SetFundAccessConstraints Return the funding cycle's configuration. return _fundingCycle.configuration; ","keywords":""},{"title":"didpay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/write/didpay","content":"didpay","keywords":""},{"title":"setcontracturi","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/write/setcontracturi","content":"setcontracturi","keywords":""},{"title":"projectId","type":0,"sectionRef":"#","url":"dev/api/contracts/or-delegates/or-abstract/jbnftrewarddelegate/properties/projectid","content":"projectId Contract: JBNFTRewardDelegate​‌ Interface: IJBNFTRewardDelegate The ID of the project this NFT should be distributed for. Definition​ /** @notice The ID of the project this NFT should be distributed for. */ uint256 public immutable override projectId; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBNFTRewardDelegate interface.","keywords":""},{"title":"_transferFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jberc20paymentterminal/write/-_transferfrom","content":"_transferFrom Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeBug bounty Transfers tokens. Definition​ function _transferFrom( address _from, address payable _to, uint256 _amount ) internal override { ...} Arguments: _from is the address from which the transfer should originate._to is the address to which the transfer should go._amount is the amount of the transfer, as a fixed point number with the same number of decimals as this terminal. The resulting function is internal to this contract and its inheriters.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface. Body​ Send the ERC20. If the specified sender is this contract, use the transfer transaction that doesn't require pre-approval. Otherwise, transfer from the specified address. _from == address(this) ? IERC20(token).transfer(_to, _amount) : IERC20(token).transferFrom(_from, _to, _amount); External references: transfertransferFrom","keywords":""},{"title":"migrate","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/migrate","content":"migrate Contract: JBController​‌ Step by stepCodeErrorsEventsBug bounty Allows a project to migrate from this controller to another. Only a project's owner or a designated operator can migrate it. Definition​ function migrate(uint256 _projectId, IJBMigratable _to) external virtual override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MIGRATE_CONTROLLER) { ... } Arguments: _projectId is the ID of the project that will be migrated from this controller._to is the IJBMigratable controller to which the project is migrating. Through the requirePermission modifier, the function is only accessible by the project's owner, or from an operator that has been given the JBOperations.MIGRATE_CONTROLLER permission by the project owner for the provided _projectId.The function can be overriden by inheriting contracts.The function doesn't return anything. Body​ Make sure this controller is the project's current controller. // This controller must be the project's current controller. if (directory.controllerOf(_projectId) != address(this)) revert NOT_CURRENT_CONTROLLER(); Internal references: directory External references: controllerOf Get a reference to the current funding cycle for the project. // Get a reference to the project's current funding cycle. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); Internal references: fundingCycleStore External references: currentOf Make sure the project's current funding cycle is configured to allow controller migrations. // Migration must be allowed. if (!_fundingCycle.controllerMigrationAllowed()) revert MIGRATION_NOT_ALLOWED(); Library references: JBFundingCycleMetadataResolver .controllerMigrationAllowed(...) Distribute any outstanding reserved tokens. There are reserved tokens to be distributed if the tracker does not equal the token's total supply. // All reserved tokens must be minted before migrating. if (uint256(_processedTokenTrackerOf[_projectId]) != tokenStore.totalSupplyOf(_projectId)) _distributeReservedTokensOf(_projectId, ''); Internal references: tokenStore_processedTokenTrackerOf_distributeReservedTokensOf External references: totalSupplyOf Let the new controller know that a migration to it is happening. // Make sure the new controller is prepped for the migration. _to.prepForMigrationOf(_projectId, address(this)); External references: prepForMigrationOf Set the new controller of the project. // Set the new controller. directory.setControllerOf(_projectId, _to); Internal references: directory External references: setControllerOf Emit a Migrate event with the relevant parameters. emit Migrate(_projectId, _to, msg.sender); Event references: Migrate","keywords":""},{"title":"JBERC20PaymentTerminal","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jberc20paymentterminal/","content":"JBERC20PaymentTerminal Manages all inflows and outflows of an ERC20 into the protocol ecosystem. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBERC20PaymentTerminal.sol Addresses​ Ethereum mainnet: Not yet deployed Interfaces​ Contract\tDescriptionIJBPayoutRedemptionPaymentTerminal\tGeneric terminal managing all inflows and outflows of funds into the protocol ecosystem. Constructor​ /** @param _token The token that this terminal manages. @param _currency The currency that this terminal's token adheres to for price feeds. @param _baseWeightCurrency The currency to base token issuance on. @param _payoutSplitsGroup The group that denotes payout splits from this terminal in the splits store. @param _operatorStore A contract storing operator assignments. @param _projects A contract which mints ERC-721's that represent project ownership and transfers. @param _directory A contract storing directories of terminals and controllers for each project. @param _splitsStore A contract that stores splits for each project. @param _prices A contract that exposes price feeds. @param _store A contract that stores the terminal's data. @param _owner The address that will own this contract. */ constructor( IERC20Metadata _token, uint256 _currency, uint256 _baseWeightCurrency, uint256 _payoutSplitsGroup, IJBOperatorStore _operatorStore, IJBProjects _projects, IJBDirectory _directory, IJBSplitsStore _splitsStore, IJBPrices _prices, IJBSingleTokenPaymentTerminalStore _store, address _owner ) JBPayoutRedemptionPaymentTerminal( address(_token), _token.decimals(), _currency, _baseWeightCurrency, _payoutSplitsGroup, _operatorStore, _projects, _directory, _splitsStore, _prices, _store, _owner ) {} _token is the ERC20 token that this terminal manages._currency is the currency that this terminal's token adheres to for price feeds. From JBCurrencies._baseWeightCurrency is the currency to base token issuance on. From JBCurrencies._payoutSplitsGroup is the group that denotes payout splits from this terminal in the splits store. From JBSplitGroups._operatorStore is an IJBOperatorStore contract storing operator assignments._projects is an IJBProjects contract which mints ERC-721's that represent project ownership and transfers._directory is an IJBDirectory contract storing directories of terminals and controllers for each project._splitsStore is an IJBSplitsStore contract that stores splits for each project._prices is an IJBPrices contract that exposes price feeds._store is a contract that stores the terminal's data._owner is the address that will own this contract. Write​ Function\tDefinition_transferFrom Traits internal Params address _fromaddress payable _touint256 _amount _beforeTransferTo Traits internalvirtual Params address _touint256 _amount","keywords":""},{"title":"launchFundingCyclesFor","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/launchfundingcyclesfor","content":"launchFundingCyclesFor Contract: JBController​‌ Interface: IJBController Step by stepCodeEventsBug bounty Creates a funding cycle for an already existing project ERC-721. Each operation within this transaction can be done in sequence separately. Only a project owner or operator can launch its funding cycles. Definition​ function launchFundingCyclesFor( uint256 _projectId, JBFundingCycleData calldata _data, JBFundingCycleMetadata calldata _metadata, uint256 _mustStartAtOrAfter, JBGroupedSplits[] calldata _groupedSplits, JBFundAccessConstraints[] memory _fundAccessConstraints, IJBPaymentTerminal[] memory _terminals, string calldata _memo ) external virtual override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE) returns (uint256 configuration) { ... } Arguments: _projectId is the ID of the project to launch funding cycles for._data is a JBFundingCycleData data structure that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle._metadata is a JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle._mustStartAtOrAfter is the time before which the configured funding cycle cannot start._groupedSplits is an array of JBGroupedSplits data structures containing splits to set for any number of groups. The core protocol makes use of groups defined in JBSplitsGroups._fundAccessConstraints is an array of JBFundAccessConstraints data structures containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal. The _distributionLimit and _overflowAllowance parameters must fit in a uint232. The _distributionLimit applies for each funding cycle, and the _overflowAllowance applies for the entirety of the configuration._terminals is an array of IJBPaymentTerminal payment terminals to add for the project._memo is a memo to pass along to the emitted event. Through the requirePermission modifier, the function is only accessible by the project's owner, or from an operator that has been given the JBOperations.RECONFIGURE permission by the project owner for the provided _projectId.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBController interface.The function returns the configuration of the funding cycle that was successfully updated. Body​ Make sure there's isn't already a funding cycle configuration for the project. // If there is a previous configuration, reconfigureFundingCyclesOf should be called instead if (fundingCycleStore.latestConfigurationOf(_projectId) &gt; 0) revert FUNDING_CYCLE_ALREADY_LAUNCHED(); Internal references: fundingCycleStore External references: latestConfigurationOf Set this controller as the controller of the project. // Set this contract as the project's controller in the directory. directory.setControllerOf(_projectId, address(this)); Internal references: directory External references: setControllerOf Configure the project's funding cycle, fund access constraints, and splits. Get a reference to the resulting funding cycle's configuration. // Configure the first funding cycle. configuration = _configure( _projectId, _data, _metadata, _mustStartAtOrAfter, _groupedSplits, _fundAccessConstraints ); Internal references: _configure If terminals were provided, add them to the list of terminals the project can accept funds through. // Add the provided terminals to the list of terminals. if (_terminals.length &gt; 0) directory.setTerminalsOf(_projectId, _terminals); Internal references: directory External references: setTerminalsOf Emit a LaunchFundingCycles event with the relevant parameters. emit LaunchFundingCycles(configuration, _projectId, _memo, msg.sender); Event references: LaunchFundingCycles","keywords":""},{"title":"_beforeTransferTo","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbethpaymentterminal/write/-_beforetransferto","content":"_beforeTransferTo Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeBug bounty Logic to be triggered before transferring tokens from this terminal. Definition​ function _beforeTransferTo(address _to, uint256 _amount) internal pure override { ...} Arguments: _to is the address to which the transfer is going. This is ignored._amount is the amount of the transfer, as a fixed point number with the same number of decimals as this terminal. This is ignored. The resulting function is internal to this contract and its inheriters.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface. Body​ Empty","keywords":""},{"title":"projects","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/properties/projects","content":"projects Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBV1TokenPaymentTerminal Mints ERC-721's that represent project ownership and transfers. Definition​ /** @notice Mints ERC-721's that represent project ownership and transfers. */ IJBProjects public immutable override projects; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBV1TokenPaymentTerminal interface.","keywords":""},{"title":"_beforeTransferTo","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jberc20paymentterminal/write/-_beforetransferto","content":"_beforeTransferTo Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeBug bounty Logic to be triggered before transferring tokens from this terminal. Definition​ function _beforeTransferTo(address, uint256) internal override { ...} Arguments: _to is the address to which the transfer is going._amount is the amount of the transfer, as a fixed point number with the same number of decimals as this terminal. The resulting function is internal to this contract and its inheriters.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface. Body​ Before transferring tokens to another address, approve that address to pull the specified amount of tokens from this contract. IERC20(token).approve(_to, _amount); External references: approve","keywords":""},{"title":"_transferFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbethpaymentterminal/write/-_transferfrom","content":"_transferFrom Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeBug bounty Transfers tokens. Definition​ function _transferFrom( address _from, address payable _to, uint256 _amount ) internal override { ...} Arguments: _from is the address from which the transfer should originate. This is ignored._to is the address to which the transfer should go._amount is the amount of the transfer, as a fixed point number with the same number of decimals as this terminal. The resulting function is internal to this contract and its inheriters.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface. Body​ Send the specified amount of ETH from this contract to the specified address. Address.sendValue(_to, _amount); Library references: Address .sendValue(...)","keywords":""},{"title":"JBV1TokenPaymentTerminal","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/","content":"JBV1TokenPaymentTerminal Allows project owners to specify the v1 project token that they are willing to accept from holders in exchange for their v2 project token. Code​ https://github.com/jbx-protocol/juice-v1-token-payment-terminal/blob/main/contracts/JBV1TokenPaymentTerminal.sol Addresses​ Ethereum mainnet: 0x88465c0a24a2e3ac55b7176beb07b3d56ec5cde1 Ethereum rinkeby: 0x349384f3ccc2045443b94b20d0af71edaf7fea36 Interfaces​ Contract\tDescriptionIJBV1TokenPaymentTerminal\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. IJBPaymentTerminal\tA standard for a contract where project can receive payments through. Inheritance​ Contract\tDescriptionERC165\tIntrospection on interface adherance. Constructor​ /** @param _projects A contract which mints ERC-721's that represent project ownership and transfers. @param _directory A contract storing directories of terminals and controllers for each project. @param _ticketBooth The V1 contract where tokens are stored. */ constructor( IJBProjects _projects, IJBDirectory _directory, ITicketBooth _ticketBooth ) { projects = _projects; directory = _directory; ticketBooth = _ticketBooth; } _projects is an IJBProjects contract which mints ERC-721's that represent project ownership and transfers._directory is an IJBDirectory contract storing directories of terminals and controllers for each project._ticketBooth is an ITicketBooth contract that stores project tokens in the v1 Juicebox protocol. Events​ Name\tDataPay uint256 indexed projectIdaddress payeraddress beneficiaryuint256 amountuint256 beneficiaryTokenCountstring memoaddress caller SetV1ProjectId uint256 indexed projectIduint256 indexed v1ProjectIdaddress caller ReleaseV1Tokens uint256 indexed projectIduint256 indexed beneficiaryuint256 unclaimedBalanceuint256 claimedBalanceaddress caller Modifiers​ Function\tDefinitionisTerminalOf Params uint256 _projectId Properties​ Function\tDefinitionprojects Traits immutable Returns IJBProjects directory Traits immutable Returns IJBDirectory ticketBooth Traits immutable Returns ITicketBooth v1ProjectIdOf Params uint256 _projectId Returns uint256 finalized Params uint256 _projectId Returns bool Read​ Function\tDefinitionacceptsToken Params address _token Returns bool flag decimalsForToken Params address _token Returns uint256 decimals currencyForToken Params address _token Returns uint256 currency currentEthOverflowOf Params uint256 _projectId Returns uint256 ethOverflow supportsInterface Params uint256 _interfaceId Returns bool Write​ Function\tDefinitionpay Traits payable Params uint256 _projectIduint256 _amountaddress _tokenaddress _beneficiaryuint256 _minReturnedTokensbool _preferClaimedTokensstring _memobytes _metadata Returns uint256 beneficiaryTokenCount addToBalanceOf Traits payable Params uint256 _projectIduint256 _amountaddress _tokenstring _memo setV1ProjectIdOf Params uint256 _projectIduint256 _v1ProjectId releaseV1TokensOf Params uint256 _v1ProjectIdaddress _beneficiary","keywords":""},{"title":"Pay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/events/pay","content":"Pay Emitted from: pay Definition​ event Pay( uint256 indexed projectId, address payer, address beneficiary, uint256 amount, uint256 beneficiaryTokenCount, string memo, address caller ); projectId is the ID of the project that was paid.payer is the address that paid. beneficiary is the address that was specified to receive benefits from the payment, such as the project's tokens.amount is the amount of tokens that was paid.beneficiaryTokenCount is the amount of the project's tokens that were issued to the beneficiary as a result of the payment made.memo is a note that was attached.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"ReleaseV1Tokens","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/events/releasev1tokens","content":"ReleaseV1Tokens Emitted from: releaseV1TokensOf Definition​ event ReleaseV1Tokens( uint256 indexed projectId, address indexed beneficiary, uint256 unclaimedBalance, uint256 erc20Balance, address caller ); projectId is the ID of the v1 project whose tokens were released.beneficiary is the address that received the v1 project's tokens. unclaimedBalance is the amount of unclaimed tokens this contract had that were transfered to the beneficiary, as a fixed point number with 18 decimals.erc20Balance is the amount of ERC20 tokens this contract had that were transfered to the beneficiary, as a fixed point number with 18 decimals.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"mintTokensOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-controllers/jbcontroller/write/minttokensof","content":"mintTokensOf Contract: JBController​‌ Interface: IJBController Step by stepCodeErrorsEventsBug bounty Mint new token supply into an account, and optionally reserve a supply to be distributed according to the project's current funding cycle configuration. Only a project's owner, a designated operator, one of its terminals, or the current data source can mint its tokens. Definition​ function mintTokensOf( uint256 _projectId, uint256 _tokenCount, address _beneficiary, string calldata _memo, bool _preferClaimedTokens, bool _useReservedRate ) external virtual override returns (uint256 beneficiaryTokenCount) { ... } Arguments: _projectId is the ID of the project to which the tokens being minted belong._tokenCount is the amount of tokens to mint in total, counting however many should be reserved._beneficiary is the account that the tokens are being minted for._memo is a memo to pass along to the emitted event._preferClaimedTokens is a flag indicating whether a project's attached token contract should be minted if they have been issued._useReservedRate is whether to use the current funding cycle's reserved rate in the mint calculation. Through the _requirePermissionAllowingOverride` internal function call, the function is only accessible by the project's owner, from an operator that has been given the JBOperations.MINT permission by the project owner for the provided _projectId, from one of the project's terminals, or from the project's current funding cycle data source.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBController interface.The function returns the amount of tokens minted for the beneficiary. Body​ Make sure there is a specified amount of tokens to mint. // There should be tokens to mint. if (_tokenCount == 0) revert ZERO_TOKENS_TO_MINT(); Make sure the message sender has appropriate permissions and that the project currently allows directly minting tokens by checking that it isn't paused when being called by any contract other than one of the project's terminals or current data sources. If the request is coming from a terminal or current data source, allow minting regardless of the pause state because it could be a sub-routine of another operation such as receiving payments. If minting is allowed, get a reference to the reserved rate that should be used. // Define variables that will be needed outside scoped section below. uint256 _reservedRate; // Scoped section prevents stack too deep. `_fundingCycle` is only used within scope. { // Get a reference to the project's current funding cycle. JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId); // Minting limited to: project owner, authorized callers, project terminal and current funding cycle data source _requirePermissionAllowingOverride( projects.ownerOf(_projectId), _projectId, JBOperations.MINT, directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender)) || msg.sender == address(_fundingCycle.dataSource()) ); // If the message sender is not a terminal or a datasource, the current funding cycle must allow minting. if ( !_fundingCycle.mintingAllowed() &amp;&amp; !directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender)) &amp;&amp; msg.sender != address(_fundingCycle.dataSource()) ) revert MINT_NOT_ALLOWED_AND_NOT_TERMINAL_DELEGATE(); // Determine the reserved rate to use. _reservedRate = _useReservedRate ? _fundingCycle.reservedRate() : 0; } Library references: JBFundingCycleMetadataResolver .mintPaused(...).reservedRate(...) Internal references: fundingCycleStoredirectory External references: currentOfisTerminalOf If the operation should reserve 100% of the minted tokens, the token tracker should be updated to add a difference of the specified token count instead of minting the tokens directly. This will allow a future distribution of reserved tokens to mint the token count to reserved addresses. Otherwise, update the token tracker if there is no intent to reserve tokens alongside the mint and mint the unreserved tokens for the beneficiary. if (_reservedRate == JBConstants.MAX_RESERVED_RATE) // Subtract the total weighted amount from the tracker so the full reserved token amount can be printed later. _processedTokenTrackerOf[_projectId] = _processedTokenTrackerOf[_projectId] - int256(_tokenCount); else { // The unreserved token count that will be minted for the beneficiary. beneficiaryTokenCount = PRBMath.mulDiv( _tokenCount, JBConstants.MAX_RESERVED_RATE - _reservedRate, JBConstants.MAX_RESERVED_RATE ); if (_reservedRate == 0) // If there's no reserved rate, increment the tracker with the newly minted tokens. _processedTokenTrackerOf[_projectId] = _processedTokenTrackerOf[_projectId] + int256(beneficiaryTokenCount); // Mint the tokens. tokenStore.mintFor(_beneficiary, _projectId, beneficiaryTokenCount, _preferClaimedTokens); } Library references: PRBMath .mulDiv(...) JBConstants .MAX_RESERVED_RATE Internal references: tokenStore_processedTokenTrackerOf External references: mintFor Emit a MintTokens event with the relevant parameters. emit MintTokens(_beneficiary, _projectId, _tokenCount, _memo, _reservedRate, msg.sender); Event references: MintTokens","keywords":""},{"title":"SetV1ProjectId","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/events/setv1projectid","content":"SetV1ProjectId Emitted from: setV1ProjectIdOf Definition​ event SetV1ProjectId(uint256 indexed projectId, uint256 indexed v1ProjectId, address caller); projectId is the ID of the project that is having its v1 project ID set.v1ProjectId is the ID of the v1 project that is being set.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"isTerminalOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/modifiers/isterminalof","content":"isTerminalOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeErrorsBug bounty A modifier that verifies this terminal is a terminal of provided project ID. Definition​ modifier isTerminalOf(uint256 _projectId) { ... } Arguments: _projectId is the ID of the project to check. Body​ Make sure this terminal is a terminal of the specified project. if (!directory.isTerminalOf(_projectId, this)) revert PROJECT_TERMINAL_MISMATCH(); Internal references: directory External references: isTerminalOf Continue the rest of the function. _; ","keywords":""},{"title":"directory","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/properties/directory","content":"directory Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBV1TokenPaymentTerminal The directory of terminals and controllers for projects. Definition​ /** @notice The directory of terminals and controllers for projects. */ IJBDirectory public immutable override directory; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBV1TokenPaymentTerminal interface.","keywords":""},{"title":"JBETHPaymentTerminal","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbethpaymentterminal/","content":"JBETHPaymentTerminal Manages all inflows and outflows of ETH into the protocol ecosystem. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBETHPaymentTerminal.sol Addresses​ Ethereum mainnet: 0x7Ae63FBa045Fec7CaE1a75cF7Aa14183483b8397 Ethereum rinkeby: 0x765A8b9a23F58Db6c8849315C04ACf32b2D55cF8 Inheritance​ Contract\tDescriptionIJBPayoutRedemptionPaymentTerminal\tGeneric terminal managing all inflows and outflows of funds into the protocol ecosystem. Constructor​ /** @param _baseWeightCurrency The currency to base token issuance on. @param _operatorStore A contract storing operator assignments. @param _projects A contract which mints ERC-721's that represent project ownership and transfers. @param _directory A contract storing directories of terminals and controllers for each project. @param _splitsStore A contract that stores splits for each project. @param _prices A contract that exposes price feeds. @param _store A contract that stores the terminal's data. @param _owner The address that will own this contract. */ constructor( uint256 _baseWeightCurrency, IJBOperatorStore _operatorStore, IJBProjects _projects, IJBDirectory _directory, IJBSplitsStore _splitsStore, IJBPrices _prices, IJBSingleTokenPaymentTerminalStore _store, address _owner ) JBPayoutRedemptionPaymentTerminal( JBTokens.ETH, 18, // 18 decimals. JBCurrencies.ETH, _baseWeightCurrency, JBSplitsGroups.ETH_PAYOUT, _operatorStore, _projects, _directory, _splitsStore, _prices, _store, _owner ) {} _baseWeightCurrency is the currency to base token issuance on. From JBCurrencies._operatorStore is an IJBOperatorStore contract storing operator assignments._projects is an IJBProjects contract which mints ERC-721's that represent project ownership and transfers._directory is an IJBDirectory contract storing directories of terminals and controllers for each project._splitsStore is an IJBSplitsStore contract that stores splits for each project._prices is an IJBPrices contract that exposes price feeds._store is a contract that stores the terminal's data._owner is the address that will own this contract. Write​ Function\tDefinition_transferFrom Traits internal Params address _fromaddress payable _touint256 _amount _beforeTransferTo Traits internalvirtual Params address _touint256 _amount","keywords":""},{"title":"finalized","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/properties/finalized","content":"finalized Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBV1TokenPaymentTerminal A flag indicating if a project's migration has finished. Definition​ /** @notice A flag indicating if a project's migration has finished. _projectId The ID of the project to check the migration status. */ mapping(uint256 =&gt; bool) public override finalized; Arguments: _projectId is the ID of the project to check the migration status. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBV1TokenPaymentTerminal interface.","keywords":""},{"title":"ticketBooth","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/properties/ticketbooth","content":"ticketBooth Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBV1TokenPaymentTerminal The V1 contract where token balances are stored. Definition​ /** @notice The V1 contract where token balances are stored. */ ITicketBooth public immutable override ticketBooth; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBV1TokenPaymentTerminal interface.","keywords":""},{"title":"v1ProjectIdOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/properties/v1projectidof","content":"v1ProjectIdOf Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBV1TokenPaymentTerminal The v1 project ID for a v2 project. Definition​ /** @notice The v1 project ID for a v2 project. _projectId The ID of the v2 project to exchange tokens for. */ mapping(uint256 =&gt; uint256) public override v1ProjectIdOf; Arguments: _projectId is the ID of the v2 project to exchange tokens for. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBV1TokenPaymentTerminal interface.","keywords":""},{"title":"currencyForToken","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/read/currencyfortoken","content":"currencyForToken Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeBug bounty The currency that should be used for the specified token. Definition​ function currencyForToken(address _token) external view override returns (uint256) { ... } Arguments: _token is the token to check for the currency of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function returns the currency index. Body​ There are no currencies for v1 project tokens. // There's no currency for the token. return 0; ","keywords":""},{"title":"currentEthOverflowOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/read/currentethoverflowof","content":"currentEthOverflowOf Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeBug bounty Gets the current overflowed amount in this terminal for a specified project, in terms of ETH. The current overflow is represented as a fixed point number with 18 decimals. Definition​ function currentEthOverflowOf(uint256 _projectId) external view override returns (uint256) { ... } Arguments: _projectId is the ID of the project to which the ETH overflow belongs. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function returns the current amount of ETH overflow that project has in this terminal, as a fixed point number with 18 decimals. Body​ This terminal does not manage overflow. // This terminal has no overflow. return 0; ","keywords":""},{"title":"decimalsForToken","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/read/decimalsfortoken","content":"decimalsForToken Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeBug bounty The decimals that should be used in fixed number accounting for the specified token. Definition​ function decimalsForToken(address _token) external view override returns (uint256) { ... } Arguments: _token is the token to check for the decimals of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function returns the number of decimals for the token. Body​ Project token amounts in v1 all use 18 decimals. // V1 tokens are always 18 decimals. return 18; ","keywords":""},{"title":"supportsInterface","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/read/supportsinterface","content":"supportsInterface Contract: JBV1TokenPaymentTerminal​‌ Interface: IERC165 Step by stepCodeBug bounty Indicates if this contract adheres to the specified interface. See {IERC165-supportsInterface}. Definition​ function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC165, IERC165) returns (bool) { ... } Arguments: _interfaceId is the ID of the interface to check for adherance to. The view function can be accessed externally by anyone, and internally within this contract.The view function does not alter state on the blockchain.The function overrides a function definition from the IERC165 interface.The function returns a flag indicating if this contract adheres to the specified interface. Body​ Return true if the provided interface ID is in the list of interfaces this contract adheres to. return _interfaceId == type(IJBPaymentTerminal).interfaceId || _interfaceId == type(IJBV1TokenPaymentTerminal).interfaceId || super.supportsInterface(_interfaceId); ","keywords":""},{"title":"acceptsToken","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/read/acceptstoken","content":"acceptsToken Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeBug bounty A flag indicating if this terminal accepts the specified token. Definition​ function acceptsToken(address _token, uint256 _projectId) external view override returns (bool) { ... } Arguments: _token is the token to check if this terminal accepts or not._projectId is the project ID to check for token acceptance. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function returns the flag. Body​ Get a reference to the v1 project that has been attached to the specified v2 project. // Get a reference to the V1 project for the provided project ID. uint256 _v1ProjectId = v1ProjectIdOf[_projectId]; Internal references: v1ProjectIdOf This terminal should not accept a token if it's been explicitly set by the project, and the exchanging has not yet been finalized. // Accept the token if it has been set and the exchange hasn't yet finalized. return address(ticketBooth.ticketsOf(_v1ProjectId)) == _token &amp;&amp; !finalized[_v1ProjectId]; Internal references: finalizedticketBooth External references: ticketsOf","keywords":""},{"title":"addToBalanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/write/addtobalanceof","content":"addToBalanceOf Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeErrorsBug bounty Receives funds belonging to the specified project. Definition​ function addToBalanceOf( uint256 _projectId, uint256 _amount, address, string calldata _memo, bytes calldata _metadata ) external payable virtual override { ... } Arguments: _projectId is the ID of the project to which the funds received belong. This is ignored since this terminal doesn't allow this function._amount is the amount of tokens to add, as a fixed point number with the same number of decimals as this terminal. This is ignored since this terminal doesn't allow this function._token is the token being paid. This terminal ignores this property since it only manages one token. This is ignored since this terminal doesn't allow this function._memo is a memo to pass along to the emitted event. This is ignored since this terminal doesn't allow this function._metadata is metadata to pass along to the emitted event. This is ignored since this terminal doesn't allow this function. The function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function doesn't return anything. Body​ This function should not be called. Revert every time. revert NOT_SUPPORTED(); ","keywords":""},{"title":"AddToBalance","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/addtobalance","content":"AddToBalance Emitted from: addToBalanceOf Definition​ event AddToBalance(uint256 indexed projectId, uint256 amount, string memo bytes metadata, address caller); projectId is the ID of the balance's project.amount is the amount being added.memo is a note that was attached.metadata is extra data sent to the data source, delegate, and emitted event, if provided.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"DelegateDidPay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/delegatedidpay","content":"DelegateDidPay Emitted from: _pay Definition​ event DelegateDidPay(IJBPayDelegate indexed delegate, JBDidPayData data, address caller); delegate is the IJBPayDelegate whos didPay transaction was triggered.data is the JBDidPayData that was sent to the IJBPayDelegate's didPay function.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"HoldFee","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/holdfee","content":"HoldFee Emitted from: _takeFeeFrom Definition​ event HoldFee( uint256 indexed projectId, uint256 indexed amount, uint256 indexed fee, uint256 feeDiscount, address beneficiary, address caller ); projectId is the ID of the project whos fees are being held.amount is the amount that a fee being held was taken from.fee is the percent of the fee, out of JBConstants.MAX_FEE.feeDiscount is the fee discount that was applicable at the time of holding the fee. beneficiary is the address that should receive any benefits from later processing the fee.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"Migrate","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/migrate","content":"Migrate Emitted from: migrate Definition​ event Migrate( uint256 indexed projectId, IJBPaymentTerminal indexed to, uint256 amount, address caller ); projectId is the ID of the project that was migrated.to is the terminal that was migrated to.amount is the total token amount that was migrated.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"ProcessFee","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/processfee","content":"ProcessFee Emitted from: processFees_takeFeeFrom Definition​ event ProcessFee( uint256 indexed projectId, uint256 indexed amount, bool indexed wasHeld, address beneficiary, address caller ); projectId is the ID of the project whos fees were processed.amount is the amount of the fee that was processed.wasHeld is a flag indicating if the processed fee was previously being held.beneficiary is the address that received any benefits for paying the fee.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"DistributeToPayoutSplit","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/distributetopayoutsplit","content":"DistributeToPayoutSplit Emitted from: _distributeToPayoutSplitsOf Definition​ event DistributeToPayoutSplit( uint256 indexed projectId, uint256 indexed domain, uint256 indexed group, JBSplit split, uint256 amount, address caller ); projectId is the ID of the project to which the split belongs.domain is the namespace that differentiates different split groups for the projectId.group is the property that joins multiple splits into one full group.split is the JBSplit to which the distribution was made.amount is the total token amount that was distributed to the split.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"DelegateDidRedeem","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/delegatedidredeem","content":"DelegateDidRedeem Emitted from: redeemTokensOf Definition​ event DelegateDidRedeem( IJBRedemptionDelegate indexed delegate, JBDidRedeemData data, address caller ); delegate is the IJBRedeemDelegate whos didRedeem transaction was triggered.data is the JBDidRedeemData that was sent to the IJBRedeemDelegate's didRedeem function.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"Pay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/pay","content":"Pay Emitted from: pay Definition​ event Pay( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, address payer, address beneficiary, uint256 amount, uint256 beneficiaryTokenCount, string memo, bytes metadata, address caller ); fundingCycleConfiguration is the funding cycle configuration during which the payment was made.fundingCycleNumber is the number of the funding cycle during which the payment was made.projectId is the ID of the project that was paid.payer is the address that paid. beneficiary is the address that was specified to receive benefits from the payment, such as the project's tokens.amount is the amount of tokens that was paid.beneficiaryTokenCount is the amount of the project's tokens that were issued to the beneficiary as a result of the payment made.memo is a note that was attached.metadata is extra data sent to the data source, delegate, and emitted event, if provided.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"setV1ProjectId","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/write/setv1projectidof","content":"setV1ProjectId Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBV1TokenPaymentTerminal Step by stepCodeErrorsEventsBug bounty Allows a project owner to initialize the acceptance of a v1 project's tokens in exchange for its v2 project token. Definition​ function setV1ProjectId(uint256 _projectId, uint256 _v1ProjectId) external override { ... } Arguments: _projectId is the ID of the v2 project to set a v1 project ID for._v1ProjectId is the ID of the v1 project to set. The function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBV1TokenPaymentTerminal interface.The function doesn't return anything. Body​ Make sure the v1 project and v2 project have the same owner. // Can't set the v1 project ID if it isn't owned by the same address who owns the v2 project. if ( msg.sender != projects.ownerOf(_projectId) || msg.sender != ticketBooth.projects().ownerOf(_v1ProjectId) ) revert NOT_ALLOWED(); Internal references: projectsticketBooth External references: ownerOfprojects Set the v1 project ID. // Store the mapping. v1ProjectIdOf[_projectId] = _v1ProjectId; Internal references: v1ProjectIdOf Emit a SetV1ProjectId event with the relevant parameters. emit SetV1ProjectId(_projectId, _v1ProjectId, msg.sender); Event references: SetV1ProjectId","keywords":""},{"title":"SetFee","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/setfee","content":"SetFee Emitted from: setFee Definition​ event SetFee(uint256 fee, address caller); fee is the new fee.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"SetFeelessAddress","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/setfeelessaddress","content":"SetFeelessAddress Emitted from: setFeelessAddress Definition​ event SetFeelessAddress(address indexed addrs, bool indexed flag, address caller); addrs is the address that was made feeless or not.flag is whether or not the terminal was made feeless.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"DistributePayouts","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/distributepayouts","content":"DistributePayouts Emitted from: _distributePayoutsOf Definition​ event DistributePayouts( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, address beneficiary, uint256 amount, uint256 distributedAmount, uint256 fee, uint256 beneficiaryDistributionAmount, string memo, address caller ); fundingCycleConfiguration is the funding cycle configuration during which payouts were distributed.fundingCycleNumber is the number of the funding cycle during which payouts were distributed.projectId is the ID of the project that had payout distributed.beneficiary is the address who owns the project and who received any leftover payouts after splits were settled.amount is the total amount that was distributed.distributedAmount is the total amount of tokens that were distributed from the project's balance.fee is the total amount of tokens that were paid as a fee as a result of the distribution.beneficiaryDistributionAmount is the total amount of tokens that was distributed to the beneficiary.memo is a note that was attached.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"releaseV1TokensOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/write/releasev1tokensof","content":"releaseV1TokensOf Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeErrorsEventsBug bounty Allows a project owner to gain custody of all the v1 tokens that have been paid, after they have finalized the ability for v1 token holders to convert to v2 tokens via this contract. Definition​ function releaseV1TokensOf(uint256 _v1ProjectId, address _beneficiary) external override { ... } Arguments: _v1ProjectId is the ID of the v1 project whose tokens are being released._beneficiary is the address that the tokens are being sent to. The function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBV1TokenPaymentTerminal interface.The function doesn't return anything. Body​ Make sure the message sender is the owner of the v1 project. // Make sure only the v1 project owner can retrieve the tokens. if (msg.sender != ticketBooth.projects().ownerOf(_v1ProjectId)) revert NOT_ALLOWED(); Internal references: ticketBooth External references: ownerOfprojects Make sure the v1 project has not yet been finalized. // Make sure v1 token conversion has not yet finalized. if (finalized[_v1ProjectId]) revert MIGRATION_TERMINATED(); Internal references: finalized Get a reference to the v1 ERC20 token being used by the project. // Get a reference to the v1 project's ERC20 tokens. ITickets _v1Token = ticketBooth.ticketsOf(_v1ProjectId); Internal references: ticketBooth External references: ticketsOf Get a reference to the v1 unclaimed token balance currently being held by this contract. // Get a reference to this terminal's unclaimed balance. uint256 _unclaimedBalance = ticketBooth.stakedBalanceOf(address(this), _v1ProjectId); Internal references: ticketBooth External references: stakedBalanceOf Get a reference to the v1 ERC20 token balance currently being held by this contract. // Get a reference to this terminal's ERC20 balance. uint256 _erc20Balance = _v1Token == ITickets(address(0)) ? 0 : _v1Token.balanceOf(address(this)); External references: balanceOf Mark this v1 project as finalized so that this terminal no longer accepts this v1 token in exchange for any v2 token. // Store the finalized state. finalized[_v1ProjectId] = true; Internal references: finalized Transfer ERC20 token balance held by this contract to the specified beneficiary. // Transfer ERC20 v1 tokens to the beneficiary. if (_erc20Balance != 0) _v1Token.transfer(_beneficiary, _erc20Balance); External references: transfer Transfer the unclaimed token balance held by this contract to the specified beneficiary. // Transfer unclaimed v1 tokens to the beneficiary. if (_unclaimedBalance != 0) ticketBooth.transfer(address(this), _v1ProjectId, _unclaimedBalance, _beneficiary); Internal references: ticketBooth External references: transfer Emit a ReleaseV1Tokens event with the relevant parameters. emit ReleaseV1Tokens(_v1ProjectId, _beneficiary, _unclaimedBalance, _erc20Balance, msg.sender); Event references: ReleaseV1Tokens","keywords":""},{"title":"_MAX_FEE","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/-_fee_cap","content":"_MAX_FEE Contract: JBPayoutRedemptionPaymentTerminal​‌ Maximum fee that can be set for a funding cycle configuration. Out of MAX_FEE (50_000_000 / 1_000_000_000). Definition​ /** @notice Maximum fee that can be set for a funding cycle configuration. @dev Out of MAX_FEE (50_000_000 / 1_000_000_000). */ uint256 private constant _FEE_CAP = 50_000_000; This value must be hardcoded.The resulting view function is private to this contract.","keywords":""},{"title":"RedeemTokens","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/redeemtokens","content":"RedeemTokens Emitted from: _redeemTokensOf Definition​ event RedeemTokens( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, address holder, address beneficiary, uint256 tokenCount, uint256 reclaimedAmount, string memo, bytes metadata, address caller ); fundingCycleConfiguration is the funding cycle configuration during which tokens were redeemed.fundingCycleNumber is the number of the funding cycle during which tokens were redeemed.projectId is the ID of the project whose tokens were redeemed.holder is the address whose tokens were redeemed.beneficiary is the address to which any redemption benefits were sent.tokenCount is the amount of project tokens that were redeemed.reclaimedAmount is the amount of terminal tokens that were sent to the beneficiary as a result of the redemption.memo is a note that was attached.metadata is extra data sent to the data source, delegate, and emitted event, if provided.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"AddToBalance","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/refundheldfees","content":"AddToBalance Emitted from: _refundHeldFees Definition​ event RefundHeldFees( uint256 indexed projectId, uint256 indexed amount, uint256 indexed refundedFees, uint256 leftoverAmount, address caller ); projectId is the ID of the project having held fees refunded.amount is the amount being used to refund the held fees.refundedFees is the amount of fees that were refunded.leftoverAmount is the leftover funds that weren't needed to refund all held fees.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"decimals","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/payoutsplitsgroup","content":"decimals Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal The group that payout splits coming from this terminal are identified by. Definition​ /** @notice The group that payout splits coming from this terminal are identified by. */ uint256 public immutable override payoutSplitsGroup; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.","keywords":""},{"title":"UseAllowance","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/useallowance","content":"UseAllowance Emitted from: _useAllowanceOf Definition​ event UseAllowance( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, address beneficiary, uint256 amount, uint256 distributedAmount, uint256 netDistributedamount, string memo, address caller ); fundingCycleConfiguration is the funding cycle configuration during which an allowance was used.fundingCycleNumber is the number of the funding cycle during which an allowance was used.projectId is the ID of the project whose allowance was used.beneficiary is the address whose received the allowance.amount is the amount of allowance that was used in terms of the funding cycle's currency.distributedAmount is the total amount of tokens that were distributed from the project's balance.netDistributedamount is the amount of tokens that were distributed to the beneficiary.memo is a note that was attached.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"pay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/write/pay","content":"pay Contract: JBV1TokenPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeErrorsBug bounty Allows a v1 project token holder to pay into this terminal to get commensurate about of its v2 token. Definition​ function pay( uint256 _projectId, uint256 _amount, address _token, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string calldata _memo, bytes calldata _metadata ) external payable override isTerminalOf(_projectId) returns (uint256 beneficiaryTokenCount) { ... } Arguments: _projectId is the ID of the v2 project to pay towards._amount is te amount of v1 project tokens being paid, as a fixed point number with the same amount of decimals as this terminal._token is the token being paid. This terminal ignores this property since it only manages v1 tokens preset by the project being paid._beneficiary is the address to mint v2 project tokens for._minReturnedTokens is the minimum number of v2 project tokens expected in return, as a fixed point number with 18 decimals._preferClaimedTokens is a flag indicating whether the request prefers to mint v2 project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas._memo is memo to pass along to the emitted event. _metadata are bytes to send along to the data source, delegate, and emitted event, if provided. This terminal ignores this property because there's no data source. The function can be accessed externally by anyone.The function can be overriden by inheriting contracts.Through the isTerminalOf modifier, this transaction reverts if this terminal is not one of the project's terminals.The function accepts ETH, but reverts if it receives ETH. The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function returns the number of v2 project tokens minted for the beneficiary, as a fixed point number with 18 decimals. Body​ Make sure the project owner hasn't finalized exchanges yet. // Make sure the migration hasn't already been finalized. if (finalized[_projectId]) revert MIGRATION_TERMINATED(); Internal references: finalized Make sure some v1 project tokens are being paid. // Make sure an amount is specified. if (_amount == 0) revert INVALID_AMOUNT(); Make sure no ETH was sent to the function. // Make sure no ETH was sent. if (msg.value &gt; 0) revert NO_MSG_VALUE_ALLOWED(); Forward the call to the internal version of the function. return _pay(_projectId, _amount, _beneficiary, _minReturnedTokens, _preferClaimedTokens, _memo); Internal references: _pay","keywords":""},{"title":"prices","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/prices","content":"prices Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal The contract that exposes price feeds. Definition​ /** @notice The contract that exposes price feeds. */ IJBPrices public immutable override prices; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.","keywords":""},{"title":"JBPayoutRedemptionPaymentTerminal","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/","content":"JBPayoutRedemptionPaymentTerminal Generic terminal managing all inflows and outflows of funds into the protocol ecosystem. Traits​ abstract Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol Interfaces​ Name\tDescriptionIJBPayoutRedemptionPaymentTerminal\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionJBSingleTokenPaymentTerminal\tGeneric terminal managing all inflows of funds into the protocol ecosystem for one token. JBOperatable\tIncludes convenience functionality for checking a message sender's permissions before executing certain transactions. Ownable\tIncludes convenience functionality for checking a message sender's permissions before executing certain transactions. ReentrancyGuard\tContract module that helps prevent reentrant calls to a function. Constructor​ /** @param _token The token that this terminal manages. @param _decimals The number of decimals the token fixed point amounts are expected to have. @param _currency The currency that this terminal's token adheres to for price feeds. @param _baseWeightCurrency The currency to base token issuance on. @param _payoutSplitsGroup The group that denotes payout splits from this terminal in the splits store. @param _operatorStore A contract storing operator assignments. @param _projects A contract which mints ERC-721's that represent project ownership and transfers. @param _directory A contract storing directories of terminals and controllers for each project. @param _splitsStore A contract that stores splits for each project. @param _prices A contract that exposes price feeds. @param _store A contract that stores the terminal's data. @param _owner The address that will own this contract. */ constructor( // payable constructor save the gas used to check msg.value==0 address _token, uint256 _decimals, uint256 _currency, uint256 _baseWeightCurrency, uint256 _payoutSplitsGroup, IJBOperatorStore _operatorStore, IJBProjects _projects, IJBDirectory _directory, IJBSplitsStore _splitsStore, IJBPrices _prices, IJBSingleTokenPaymentTerminalStore _store, address _owner ) payable JBSingleTokenPaymentTerminal(_token, _decimals, _currency) JBOperatable(_operatorStore) { baseWeightCurrency = _baseWeightCurrency; payoutSplitsGroup = _payoutSplitsGroup; projects = _projects; directory = _directory; splitsStore = _splitsStore; prices = _prices; store = _store; transferOwnership(_owner); } _token is the token that this terminal manages._decimals is the number of decimals the token fixed point amounts are expected to have._currency is the currency that this terminal's token adheres to for price feeds. From JBCurrencies._baseWeightCurrency is the currency to base token issuance on. From JBCurrencies._payoutSplitsGroup is the group that denotes payout splits from this terminal in the splits store. From JBSplitGroups._operatorStore is an IJBOperatorStore contract storing operator assignments._projects is an IJBProjects contract which mints ERC-721's that represent project ownership and transfers._directory is an IJBDirectory contract storing directories of terminals and controllers for each project._splitsStore is an IJBSplitsStore contract that stores splits for each project._prices is an IJBPrices contract that exposes price feeds._store is a contract that stores the terminal's data._owner is the address that will own this contract. Events​ Name\tDataAddToBalance uint256 indexed projectIduint256 amountuint256 refundedFeesstring memoaddress caller Migrate uint256 indexed projectIdIJBPaymentTerminal indexed touint256 amountaddress caller DistributePayouts uint256 indexed fundingCycleConfigurationuint256 indexed fundingCycleNumberuint256 indexed projectIdaddress beneficiaryuint256 amountuint256 distributedAmountuint256 feeuint256 beneficiaryDistributionAmountstring memoaddress caller UseAllowance uint256 indexed fundingCycleConfigurationuint256 indexed fundingCycleNumberuint256 indexed projectIdaddress beneficiaryuint256 amountuint256 distributedAmountuint256 netDistributedamountstring memoaddress caller ProcessFee uint256 indexed projectIduint256 indexed amountbool indexed wasHeldaddress beneficiaryaddress caller RefundHeldFees uint256 indexed projectIduint256 indexed amountuint256 indexed refundedFeesuint256 leftoverAmountaddress caller HoldFee uint256 indexed projectIduint256 indexed amountuint256 indexed feeuint256 feeDiscountaddress beneficiaryaddress caller Pay uint256 indexed fundingCycleConfigurationuint256 indexed fundingCycleNumberuint256 indexed projectIdaddress beneficiaryuint256 amountuint256 beneficiaryTokenCountstring memoaddress payeraddress caller DelegateDidPay IJBPayDelegate indexed delegateJBDidPayData dataaddress caller RedeemTokens uint256 indexed fundingCycleConfigurationuint256 indexed fundingCycleNumberuint256 indexed projectIdaddress holderaddress beneficiaryuint256 tokenCountuint256 reclaimedAmountstring memobytes metadataaddress caller DelegateDidRedeem IJBRedemptionDelegate indexed delegateJBDidRedeemData dataaddress caller DistributeToPayoutSplit uint256 indexed projectIduint256 indexed domainuint256 indexed groupJBSplit splituint256 amountaddress caller SetFee uint256 feeaddress caller SetFeeGauge IJBFeeGauge indexed feeGaugeaddress caller SetFeelessAddress address indexed addrsbool indexed flagaddress caller Modifiers​ Function\tDefinitionisTerminalOf Params uint256 _projectId Properties​ Function\tDefinitionprojects Traits immutable Returns IJBProjects directory Traits immutable Returns IJBDirectory splitsStore Traits immutable Returns IJBSplitsStore prices Traits immutable Returns IJBPrices store Traits immutable Returns JBSingleTokenPaymentTerminalStore baseWeightCurrency Traits immutable Returns uint256 payoutSplitsGroup Traits immutable Returns uint256 fee Returns uint256 feeGauge Params IJBPaymentTerminal terminal Returns IJBFeeGauge isFeelessAddress returns bool Read​ Function\tDefinitioncurrentEthOverflowOf Params uint256 _projectId Returns uint256 ethOverflow heldFeesOf Params uint256 _projectId Returns JBFee[] fees supportsInterface Params uint256 _interfaceId Returns bool Write​ Function\tDefinitionpay Traits payablevirtual Params uint256 _projectIduint256 _amountaddress _tokenaddress _beneficiaryuint256 _minReturnedTokensbool _preferClaimedTokensstring _memobytes _metadata Returns uint256 beneficiaryTokenCount distributePayoutsOf Traits virtual Params uint256 _projectIduint256 _amountuint256 _currencyaddress _tokenuint256 _minReturnedTokensstring _memo Returns uint256 netLeftoverDistributionAmount useAllowanceOf Traits requirePermissionvirtual Params uint256 _projectIduint256 _amountuint256 _currencyaddress _tokenuint256 _minReturnedTokensaddress payable _beneficiarystring _memo Returns uint256 netDistributedAmount redeemTokensOf Traits requirePermissionvirtual Params address _holderuint256 _projectIduint256 _tokenCountaddress _tokenuint256 _minReturnedTokensaddress payable _beneficiarystring _memobytes _metadata Returns uint256 reclaimAmount migrate Traits requirePermissionvirtual Params uint256 _projectIdIJBPaymentTerminal _to Returns uint256 balance addToBalanceOf Traits payablevirtual Params uint256 _projectIduint256 _amountaddress _tokenstring _memo processFees Traits requirePermissionAllowingOverridevirtual Params uint256 _projectId setFee Traits onlyOwnervirtual Params uint256 _fee setFeeGauge Traits onlyOwnervirtual Params IJBFeeGauge _feeGauge setFeelessAddress Traits onlyOwnervirtual Params address _addressbool _flag _transferFrom Traits internalvirtual Params address _fromaddress payable _touint256 _amount _beforeTransferTo Traits internalvirtual Params address _touint256 _amount","keywords":""},{"title":"isTerminalOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/modifiers/isterminalof","content":"isTerminalOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeErrorsBug bounty A modifier that verifies this terminal is a terminal of provided project ID. Definition​ modifier isTerminalOf(uint256 _projectId) { ... } Arguments: _projectId is the ID of the project to check. Body​ Make sure this terminal is a terminal of the specified project. if (!directory.isTerminalOf(_projectId, this)) revert PROJECT_TERMINAL_MISMATCH(); Internal references: directory External references: isTerminalOf Continue the rest of the function. _; ","keywords":""},{"title":"fee","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/fee","content":"fee Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal The platform fee percent. Out of MAX_FEE (25_000_000 / 1_000_000_000). Definition​ /** @notice The platform fee percent. @dev Out of MAX_FEE (25_000_000 / 1_000_000_000). */ uint256 public override fee = 25_000_000; // 2.5% The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.","keywords":""},{"title":"projects","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/projects","content":"projects Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal Mints ERC-721's that represent project ownership and transfers. Definition​ /** @notice Mints ERC-721's that represent project ownership and transfers. */ IJBProjects public immutable override projects; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.","keywords":""},{"title":"directory","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/directory","content":"directory Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal The directory of terminals and controllers for projects. Definition​ /** @notice The directory of terminals and controllers for projects. */ IJBDirectory public immutable override directory; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.","keywords":""},{"title":"_heldFeesOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/-_heldfeesof","content":"_heldFeesOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Fees that are being held to be processed later. Definition​ /** @notice Fees that are being held to be processed later. _projectId The ID of the project for which fees are being held. */ mapping(uint256 =&gt; JBFee[]) private _heldFeesOf; Arguments: _projectId is the ID of the project for which fees are being held. The resulting view function is private to this contract.","keywords":""},{"title":"SetFeeGauge","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/events/setfeegauge","content":"SetFeeGauge Emitted from: setFeeGauge Definition​ event SetFeeGauge(IJBFeeGauge indexed feeGauge, address caller); feeGauge is the new feeGuage.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"_PROTOCOL_PROJECT_ID","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/-_protocol_project_id","content":"_PROTOCOL_PROJECT_ID Contract: JBPayoutRedemptionPaymentTerminal​‌ The protocol project ID is 1, as it should be the first project launched during the deployment process. Definition​ /** @notice The protocol project ID is 1, as it should be the first project launched during the deployment process. */ uint256 private constant _PROTOCOL_PROJECT_ID = 1; This value must be hardcoded.The resulting view function is private to this contract.","keywords":""},{"title":"feeGauge","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/feegauge","content":"feeGauge Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal The data source that returns a discount to apply to a project's fee. Definition​ /** @notice The data source that returns a discount to apply to a project's fee. */ IJBFeeGauge public override feeGauge; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.","keywords":""},{"title":"decimals","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/baseweightcurrency","content":"decimals Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal The currency to base token issuance on. If this differs from currency, there must be a price feed available to convert currency to baseWeightCurrency. Definition​ /** @notice The currency to base token issuance on. @dev If this differs from `currency`, there must be a price feed available to convert `currency` to `baseWeightCurrency`. */ uint256 public immutable override baseWeightCurrency; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.","keywords":""},{"title":"splitsStore","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/splitsstore","content":"splitsStore Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal The contract that stores splits for each project. Definition​ /** @notice The contract that stores splits for each project. */ IJBSplitsStore public immutable override splitsStore; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.","keywords":""},{"title":"isFeelessAddress","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/isfeelessaddress","content":"isFeelessAddress Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal Addresses that can be paid towards from this terminal without incurring a fee. Definition​ /** @notice Addresses that can be paid towards from this terminal without incurring a fee. _address The address that can be paid toward. */ mapping(address =&gt; bool) public override isFeelessAddress; Arguments: _address is the address that can be paid toward. The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.","keywords":""},{"title":"store","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/properties/store","content":"store Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal The contract that stores and manages the terminal's data. Definition​ /** @notice The contract that stores and manages the terminal's data. */ JBSingleTokenPaymentTerminalStore public immutable store; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.","keywords":""},{"title":"_currentFeeDiscount","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/read/-_currentfeediscount","content":"_currentFeeDiscount Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeBug bounty Get the fee discount from the fee gauge for the specified project. Definition​ function _currentFeeDiscount(uint256 _projectId) private view returns (uint256 feeDiscount) { ... } Arguments: _projectId is the ID of the project to get a fee discount for. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns thhe fee discount, which should be interpreted as a percentage out MAX_FEE_DISCOUNT. Body​ If the protocol project doesn't have a terminal that accepts this terminal's token, no fee can be taken so a max discount should be returned. // Can't take a fee if the protocol project doesn't have a terminal that accepts the token. if (directory.primaryTerminalOf(_PROTOCOL_PROJECT_ID, token) == IJBPaymentTerminal(address(0))) return JBConstants.MAX_FEE_DISCOUNT; Library references: JBConstants .MAX_FEE_DISCOUNT Internal references: directory External references: primaryTerminalOf If there's a gauge, ask it for the discount. Otherwise, there is no discount. If the gauge reverts, set the discount to 0. // Get the fee discount. if( feeGauge == IJBFeeGauge(address(0)) ) feeDiscount = 0; else // If the guage reverts, set the discount to 0. try feeGauge.currentDiscountFor(_projectId) returns (uint256 discount) { feeDiscount = discount; } catch { feeDiscount = 0; } Internal references: feeGauge External references: currentDiscountFor If there gauge provided an invalid discount, set the discount to 0. // If the fee discount is greater than the max, nullify the discount. if (feeDiscount &gt; JBConstants.MAX_FEE_DISCOUNT) feeDiscount = 0; Library references: JBConstants .MAX_FEE_DISCOUNT","keywords":""},{"title":"heldFeesOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/read/heldfeesof","content":"heldFeesOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal Step by stepCodeBug bounty The fees that are currently being held to be processed later for each project. Definition​ function heldFeesOf(uint256 _projectId) external view override returns (JBFee[] memory) { ... } Arguments: _projectId is the ID of the project for which fees are being held. The view function can be accessed externally by anyone.The function does not alter state on the blockchain.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.The function returns an array of fees that are being held. Body​ This function just reads and returns the stored held fees of the project. return _heldFeesOf[_projectId]; Internal references: _heldFeesOf","keywords":""},{"title":"_transferFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_transferfrom","content":"_transferFrom Contract: JBPayoutRedemptionPaymentTerminal​‌ Transfers tokens. Definition​ /** @notice Transfers tokens. @param _from The address from which the transfer should originate. @param _to The address to which the transfer should go. @param _amount The amount of the transfer, as a fixed point number with the same number of decimals as this terminal. */ function _transferFrom( address _from, address payable _to, uint256 _amount ) internal virtual; Arguments: _from is the address from which the transfer should originate._to is the address to which the transfer should go._amount is the amount of the transfer, as a fixed point number with the same number of decimals as this terminal. The resulting function is internal to this contract and its inheriters.The virtual function must be implemented by inheriters.","keywords":""},{"title":"supportsInterface","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/read/supportsinterface","content":"supportsInterface Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IERC165 Step by stepCodeBug bounty Indicates if this contract adheres to the specified interface. See {IERC165-supportsInterface}. Definition​ function supportsInterface(bytes4 _interfaceId) public view virtual override(JBSingleTokenPaymentTerminal, IERC165) returns (bool) { ... } Arguments: _interfaceId is the ID of the interface to check for adherance to. The view function can be accessed externally by anyone, and internally within this contract.The view function does not alter state on the blockchain.The function overrides a function definition from the IERC165 interface.The function returns a flag indicating if this contract adheres to the specified interface. Body​ Return true if the provided interface ID is in the list of interfaces this contract adheres to. return _interfaceId == type(IJBPayoutRedemptionPaymentTerminal).interfaceId || _interfaceId == type(IJBPayoutTerminal).interfaceId || _interfaceId == type(IJBAllowanceTerminal).interfaceId || _interfaceId == type(IJBRedemptionTerminal).interfaceId || _interfaceId == type(IJBOperatable).interfaceId || super.supportsInterface(_interfaceId); ","keywords":""},{"title":"_transferFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_beforetransferto","content":"_transferFrom Contract: JBPayoutRedemptionPaymentTerminal​‌ Logic to be triggered before transferring tokens from this terminal. Definition​ /** @notice Logic to be triggered before transferring tokens from this terminal. @param _to The address to which the transfer is going. @param _amount The amount of the transfer, as a fixed point number with the same number of decimals as this terminal. */ function _beforeTransferTo(address _to, uint256 _amount) internal virtual; Arguments: _to is the address to which the transfer should go._amount is the amount of the transfer, as a fixed point number with the same number of decimals as this terminal. The resulting function is internal to this contract and its inheriters.The virtual function must be implemented by inheriters.","keywords":""},{"title":"_addToBalanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_addtobalanceof","content":"_addToBalanceOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeEventsBug bounty Receives funds belonging to the specified project. Definition​ function _addToBalanceOf( uint256 _projectId, uint256 _amount, bool _shouldRefundHeldFees, string memory _memo, bytes memory _metadata ) private { ... } Arguments: _projectId is the ID of the project to which the funds received belong._amount is the amount of tokens to add, as a fixed point number with the same number of decimals as this terminal. If this is an ETH terminal, this is ignored and msg.value is used instead._shouldRefundHeldFees is a flag indicating if held fees should be refunded based on the amount being added._memo is a memo to pass along to the emitted event._metadata is extra data to pass along to the emitted event. The function is private to this contract.The function doesn't return anything. Body​ Refund any held fees. This is useful to allow a project to distribute funds from the protocol and subsequently add them back without paying eventually having to pay double fees. // Refund any held fees to make sure the project doesn't pay double for funds going in and out of the protocol. uint256 _refundedFees = _shouldRefundHeldFees ? _refundHeldFees(_projectId, _amount) : 0; Internal references: _refundHeldFees Record the added funds. // Record the added funds with any refunded fees. store.recordAddedBalanceFor(_projectId, _amount + _refundedFees); Internal references: store External references: recordAddedBalanceFor Emit a AddToBalance event with the relevant parameters. emit AddToBalance(_projectId, _amount, _refundedFees, _memo, _metadata, msg.sender); Event references: AddToBalance","keywords":""},{"title":"currentEthOverflowOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/read/currentethoverflowof","content":"currentEthOverflowOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeBug bounty Gets the current overflowed amount in this terminal for a specified project, in terms of ETH. The current overflow is represented as a fixed point number with 18 decimals. Definition​ function currentEthOverflowOf(uint256 _projectId) external view override returns (uint256) { ... } Arguments: _projectId is the ID of the project to which the ETH overflow belongs. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function returns the current amount of ETH overflow that project has in this terminal, as a fixed point number with 18 decimals. Body​ Get this terminal's current overflow, which is in terms of this terminal's token. // Get this terminal's current overflow. uint256 _overflow = store.currentOverflowOf(this, _projectId); Internal references: store External references: currentOverflowOf If this terminal's fixed point accounting doesn't have 18 decimals, adjust the overflow to have 18 decimals. // Adjust the decimals of the fixed point number if needed to have 18 decimals. uint256 _adjustedOverflow = (decimals == 18) ? _overflow : JBFixedPointNumber.adjustDecimals(_overflow, decimals, 18); Library references: JBFixedPointNumber .adjustDecimals(...) If this terminal's currency isn't ETH, convert the overflow to ETH. Return the 18 decimal ETH fixed point overflow value. // Return the amount converted to ETH. return (currency == JBCurrencies.ETH) ? _adjustedOverflow : PRBMath.mulDiv( _adjustedOverflow, 10**decimals, prices.priceFor(currency, JBCurrencies.ETH, decimals) ); Library references: JBCurrencies .ETH PRBMath .mulDiv(...) Internal references: prices External references: priceFor","keywords":""},{"title":"_feeAmount","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/read/-_feeamount","content":"_feeAmount Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeBug bounty Returns the fee amount based on the provided amount for the specified project. Definition​ function _feeAmount( uint256 _amount, uint256 _fee, uint256 _feeDiscount ) private pure returns (uint256) { ... } Arguments: _amount is the amount that the fee is based on, as a fixed point number with the same amount of decimals as this terminal._fee is the percentage of the fee, out of MAX_FEE._feeDiscount is the percentage discount that should be applied out of the max amount, out of MAX_FEE_DISCOUNT. The view function is private to this contract.The view function does not alter state on the blockchain.The function returns the amount of the fee, as a fixed point number with the same amount of decimals as this terminal. Body​ Calculate the discounted fee by subtracting the discount from the fee. // Calculate the discounted fee. uint256 _discountedFee = _fee - PRBMath.mulDiv(_fee, _feeDiscount, JBConstants.MAX_FEE_DISCOUNT); Library references: PRBMath .mulDiv(...) JBConstants .MAX_FEE_DISCOUNT Return the amount of tokens from the specified amount that should be paid as a fee. // The amount of tokens from the `_amount` to pay as a fee. return _amount - PRBMath.mulDiv(_amount, JBConstants.MAX_FEE, _discountedFee + JBConstants.MAX_FEE); Library references: PRBMath .mulDiv(...) JBConstants .MAX_FEE","keywords":""},{"title":"_pay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/jbv1tokenpaymentterminal/write/-_pay","content":"_pay Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeErrorsEventsBug bounty Allows a v1 project token holder to pay into this terminal to get commensurate about of its v2 token. Definition​ function _pay( uint256 _amount, address _payer, uint256 _projectId, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string memory _memo, bytes memory _metadata ) private returns (uint256 beneficiaryTokenCount) { ... } Arguments: _projectId is the ID of the v2 project to pay towards._amount is te amount of v1 project tokens being paid, as a fixed point number with the same amount of decimals as this terminal._token is the token being paid. This terminal ignores this property since it only manages v1 tokens preset by the project being paid._beneficiary is the address to mint v2 project tokens for._minReturnedTokens is the minimum number of v2 project tokens expected in return, as a fixed point number with 18 decimals._preferClaimedTokens is a flag indicating whether the request prefers to mint v2 project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas._memo is memo to pass along to the emitted event. _metadata are bytes to send along to the data source, delegate, and emitted event, if provided. This terminal ignores this property because there's no data source. The function is private to this contract.The function returns the number of v2 tokens minted for the beneficiary, as a fixed point number with 18 decimals. Body​ Get a reference to the v1 project ID that has been set for the v2 project being paid. // Get the v1 project for the v2 project being paid. uint256 _v1ProjectId = v1ProjectIdOf[_projectId]; Internal references: v1ProjectIdOf Make sure there is a v1 project ID set. // Make sure the v1 project has been set. if (_v1ProjectId == 0) revert V1_PROJECT_NOT_SET(); Get a reference to the v1 project's ERC20 token, if one has been issued. // Get a reference to the v1 project's ERC20 tokens. ITickets _v1Token = ticketBooth.ticketsOf(_v1ProjectId); Internal references: ticketBooth External references: ticketsOf The following scoped block is a bit of a hack to prevent a &quot;Stack too deep&quot; error. Define a few variables outside of the scope that'll be set within the scope but later referenced again outside. // Define variables that will be needed outside the scoped section below. // Keep a reference to the amount of v2 tokens to mint from the message sender's v1 ERC20 balance. uint256 _tokensToMintFromERC20s; // Scoped section prevents stack too deep. `_unclaimedBalance` and `_erc20Balance` only used within scope. { ... } Get a reference to the amount of unclaimed v1 tokens the message sender has in the contract. // Get a reference to the migrator's unclaimed balance. uint256 _unclaimedBalance = ticketBooth.stakedBalanceOf(msg.sender, _v1ProjectId); Internal references: ticketBooth External references: stakedBalanceOf Get a reference to the amount of ERC20 v1 tokens the message sender has. If there's no ERC20, the balance is 0. // Get a reference to the migrator's ERC20 balance. uint256 _erc20Balance = _v1Token == ITickets(address(0)) ? 0 : _v1Token.balanceOf(msg.sender); External references: balanceOf Make sure the message sender has enough of a balance between their v1 unclaimed tokens and v1 ERC20 tokens to cover the amount being exchanged for v2 tokens. // There must be enough v1 tokens to migrate. if (_amount &gt; _erc20Balance + _unclaimedBalance) revert INSUFFICIENT_FUNDS(); Calculate how many v1 project ERC20s will be exchanged for v2 tokens. If a project owner has both unclaimed tokens and ERC20 tokens, adhere to the claimed token preference to determine whether to prioritize exchanging one over the other. // If there's no ERC20 balance, theres no tokens to mint as a result of the ERC20 balance. if (_erc20Balance == 0) _tokensToMintFromERC20s = 0; // If prefer claimed tokens, exchange ERC20 tokens before exchanging unclaimed tokens. else if (_preferClaimedTokens) _tokensToMintFromERC20s = _erc20Balance &lt; _amount ? _erc20Balance : _amount; // Otherwise, exchange unclaimed tokens before ERC20 tokens. else _tokensToMintFromERC20s = _unclaimedBalance &lt; _amount ? _amount - _unclaimedBalance : 0; Get a reference to the amount of v2 tokens to mint from the message sender's v1 unclaimed token balance, which is the total amount to exchange minus the amount of ERC20's to exchange. // The amount of unclaimed tokens to migrate. uint256 _tokensToMintFromUnclaimedBalance = _amount - _tokensToMintFromERC20s; If needed, transfer ERC20's from the message sender to this contract. This requires an allowance for this contract to transfer tokens on the message sender's behalf. // Transfer v1 ERC20 tokens to this terminal from the msg sender if needed. if (_tokensToMintFromERC20s != 0) IERC20(_v1Token).transferFrom(msg.sender, address(this), _tokensToMintFromERC20s); External references: transferFrom If needed, transfer unclaimed tokens from the message sender to this contract. This requires operator permissions for this contract to transfer unclaimed tokens on the message sender's behalf. // Transfer v1 unclaimed tokens to this terminal from the msg sender if needed. if (_tokensToMintFromUnclaimedBalance != 0) ticketBooth.transfer( msg.sender, _v1ProjectId, _tokensToMintFromUnclaimedBalance, address(this) ); Internal references: ticketBooth External references: transfer Mint v2 tokens for the specified beneficiary. // Mint the v2 tokens for the beneficary. beneficiaryTokenCount = IJBController(directory.controllerOf(_projectId)).mintTokensOf( _projectId, _amount, _beneficiary, '', _preferClaimedTokens, false ); Internal references: directory External references: controllerOfmintTokensOf Make sure the beneficiary is getting the same amount of v2 tokens as v1 tokens were exchanged, and that the amount is at least as much as expected. // Make sure the token amount is the same as the v1 token amount and is at least what is expected. if (beneficiaryTokenCount != _amount || beneficiaryTokenCount &lt; _minReturnedTokens) revert UNEXPECTED_AMOUNT(); Emit a Pay event with the relevant parameters. emit Pay( _projectId, msg.sender, _beneficiary, _amount, beneficiaryTokenCount, _memo, msg.sender ); Event references: Pay","keywords":""},{"title":"distributePayoutsOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/distributepayoutsof","content":"distributePayoutsOf Contract: JBSingleTokenPaymentTerminalStore​‌ Interface: IJBPayoutRedemptionPaymentTerminal Step by stepCodeBug bounty Distributes payouts for a project with the distribution limit of its current funding cycle. Payouts are sent to the preprogrammed splits. Any leftover is sent to the project's owner. Anyone can distribute payouts on a project's behalf. The project can preconfigure a wildcard split that is used to send funds to msg.sender. This can be used to incentivize calling this function. All funds distributed outside of this contract or any feeless terminals incure the protocol fee. Definition​ function distributePayoutsOf( uint256 _projectId, uint256 _amount, uint256 _currency, address _token, uint256 _minReturnedTokens, string calldata _memo ) external virtual override returns (uint256 netLeftoverDistributionAmount) { ... } Arguments: _projectId is the ID of the project having its payouts distributed._amount is the amount of terminal tokens to distribute, as a fixed point number with same number of decimals as this terminal._currency is the expected currency of the amount being distributed. Must match the project's current funding cycle's distribution limit currency._token is the token being distributed. This terminal ignores this property since it only manages one token._minReturnedTokens is the minimum number of terminal tokens that the _amount should be valued at in terms of this terminal's currency, as a fixed point number with the same number of decimals as this terminal._memo is a memo to pass along to the emitted event. The function can be accessed externally by anyone.The function can be overriden by inheriting contracts.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.The function returns the amount that was sent to the project owner, as a fixed point number with the same amount of decimals as this terminal. Body​ Forward to the internal function. return _distributePayoutsOf(_projectId, _amount, _currency, _minReturnedTokens, _memo); Internal references: _distributePayoutsOf","keywords":""},{"title":"_takeFeeFrom","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_takefeefrom","content":"_takeFeeFrom Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeEventsBug bounty Takes a fee into the platform's project, which has an id of _PROTOCOL_PROJECT_ID. Definition​ function _takeFeeFrom( uint256 _projectId, JBFundingCycle memory _fundingCycle, uint256 _amount, address _beneficiary, uint256 _feeDiscount ) private returns (uint256 feeAmount) { ... } Arguments: _projectId is the ID of the project having fees taken from._fundingCycle is the JBFundingCycle during which the fee is being taken._amount is the amount to take a fee from._beneficiary is the address to mint the platforms tokens for._feeDiscount is the amount of discount to apply to the fee, out of the MAX_FEE. The function is private to this contract.The function returns the amount of the fee taken. Body​ Get a reference to the amount that should be taken. // Get the fee discount. feeAmount = _feeAmount(_amount, fee, _feeDiscount); Internal references: fee_feeAmount If the funding cycle is configured to hold fees, add a JBFee data structure to the project's stored held fees to be either processed or refunded later, and emit a HoldFee event with the relevant parameters. Otherwise, take the fee and emit a ProcessFee event with the relevant parameters. if (_fundingCycle.shouldHoldFees()) { // Store the held fee. _heldFeesOf[_projectId].push(JBFee(_amount, uint32(fee), uint32(_feeDiscount), _beneficiary)); emit HoldFee(_projectId, _amount, fee, _feeDiscount, _beneficiary, msg.sender); } else { // Process the fee. _processFee(feeAmount, _beneficiary); // Take the fee. emit ProcessFee(_projectId, feeAmount, false, _beneficiary, msg.sender); } Internal references: fee_heldFeesOf_processFee Event references: HoldFeeProcessFee","keywords":""},{"title":"setFee","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/setfee","content":"setFee Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal Step by stepCodeErrorsEventsBug bounty Allows the fee to be updated. Only the owner of this contract can change the fee. Definition​ function setFee(uint256 _fee) external onlyOwner { ... } Arguments: _fee is the new fee, out of MAX_FEE. Through the onlyOwner modifier, the function can only be accessed by the owner of this contract.The function can be overriden by inheriting contracts.The function doesn't return anything. Body​ Make sure the proposed fee is less than the max fee. // The provided fee must be within the max. if (_fee &gt; _FEE_CAP) revert FEE_TOO_HIGH(); Internal references: _FEE_CAP Store the new fee. // Store the new fee. fee = _fee; Internal references: fee Emit a SetFee event with the relevant parameters. emit SetFee(_fee, msg.sender); Event references: SetFee","keywords":""},{"title":"addToBalanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/addtobalanceof","content":"addToBalanceOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeErrorsBug bounty Receives funds belonging to the specified project. Definition​ function addToBalanceOf( uint256 _projectId, uint256 _amount, address, string calldata _memo, bytes calldata _metadata ) external payable virtual override isTerminalOf(_projectId) { ... } Arguments: _projectId is the ID of the project to which the funds received belong._amount is the amount of tokens to add, as a fixed point number with the same number of decimals as this terminal. If this is an ETH terminal, this is ignored and msg.value is used instead._token is the token being paid. This terminal ignores this property since it only manages one token._memo is a memo to pass along to the emitted event._metadata is metadata to pass along to the emitted event. The function can be accessed externally by anyone.The function can be overriden by inheriting contracts.Through the isTerminalOf modifier, this transaction reverts if this terminal is not one of the project's terminals.The function accepts ETH. The transaction reverts if receives ETH but the terminal's token type isn't ETH.The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function doesn't return anything. Body​ If this terminal's token isn't ETH, make sure ETH wasn't sent to the function, then transfer the amount of tokens from the message sender to this contract. If this terminal's contract is ETH, override the specified amount value with with amount of ETH sent to the function. // If this terminal's token isn't ETH, make sure no msg.value was sent, then transfer the tokens in from msg.sender. if (token != JBTokens.ETH) { // Amount must be greater than 0. if (msg.value &gt; 0) revert NO_MSG_VALUE_ALLOWED(); // Transfer tokens to this terminal from the msg sender. _transferFrom(msg.sender, payable(address(this)), _amount); } // If the terminal's token is ETH, override `_amount` with msg.value. else _amount = msg.value; Library references: JBTokens .ETH Virtual references: _transferFrom Forward to the internal function to properly account for the added balance. If the message sender is a feeless address, don't refund held fees. _addToBalanceOf(_projectId, _amount, _memo, !isFeelessAddress[msg.sender] _metadata); Internal references: _addToBalanceOf","keywords":""},{"title":"_processFee","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_processfee","content":"_processFee Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeErrorsBug bounty Process a fee of the specified amount. Definition​ function _processFee(uint256 _amount, address _beneficiary) { ... } Arguments: _amount is the fee amount, as a floating point number with the same amount of decimals as this terminal._beneficiary is the address to mint the platform's tokens for. The function is private to this contract.The function doesn't return anything. Body​ Get the terminal that the protocol project is accepting funds through for this terminal's token. // Get the terminal for the protocol project. IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_PROTOCOL_PROJECT_ID, token); Internal references: directory External references: primaryTerminalOf If the protocol's terminal is the same as this terminal, save gas by paying the contract internally. // When processing the admin fee, save gas if the admin is using this contract as its terminal. if (_terminal == this) { ... } Pay the protocol using the internal pay function. _pay(_amount, address(this), _PROTOCOL_PROJECT_ID, _beneficiary, 0, false, '', bytes('')); // Use the local pay call. Internal references: _pay Otherwise if the terminal is different, transfer the fee over. else { ... } Call any pre-transfer logic. // Trigger any inherited pre-transfer logic. _beforeTransferTo(address(_terminal), _amount); Virtual references: _beforeTransferTo Get a reference to the ETH amount that should be attached to the transaction. Only attach anything if the token being paid is ETH. // If this terminal's token is ETH, send it in msg.value. uint256 _payableValue = token == JBTokens.ETH ? _amount : 0; Library references: JBTokens .ETH Send the payment. // Send the payment. _terminal.pay{value: _payableValue}( _PROTOCOL_PROJECT_ID, _amount, token, _beneficiary, 0, false, '', bytes('') ); // Use the external pay call of the correct terminal. Internal references: _PROTOCOL_PROJECT_ID External references: pay","keywords":""},{"title":"JBSingleTokenPaymentTerminal","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbsingletokenpaymentterminal/","content":"JBSingleTokenPaymentTerminal Generic terminal managing all inflows and outflows of funds into the protocol ecosystem. Traits​ abstract Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol Interfaces​ Name\tDescriptionIJBSingleTokenPaymentTerminal\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionERC165\tIntrospection on interface adherance. Constructor​ /** @param _token The token that this terminal manages. @param _decimals The number of decimals the token fixed point amounts are expected to have. @param _currency The currency that this terminal's token adheres to for price feeds. */ constructor( address _token, uint256 _decimals, uint256 _currency, ) { token = _token; decimals = _decimals; currency = _currency; } _token is the token that this terminal manages._decimals is the number of decimals the token fixed point amounts are expected to have._currency is the currency that this terminal's token adheres to for price feeds. From JBCurrencies. Properties​ Function\tDefinitiontoken Traits immutable Returns address decimals Traits immutable Returns uint256 currency Traits immutable Returns uint256 Read​ Function\tDefinitionacceptsToken Params address _token Returns bool flag decimalsForToken Params address _token Returns uint256 decimals currencyForToken Params address _token Returns uint256 currency supportsInterface Params uint256 _interfaceId Returns bool","keywords":""},{"title":"decimals","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbsingletokenpaymentterminal/properties/currency","content":"decimals Contract: JBSingleTokenPaymentTerminal​‌ Interface: IJBSingleTokenPaymentTerminal The currency to use when resolving price feeds for this terminal. Definition​ /** @notice The currency to use when resolving price feeds for this terminal. */ uint256 public immutable override currency; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBSingleTokenPaymentTerminal interface.","keywords":""},{"title":"redeemTokensOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/redeemtokensof","content":"redeemTokensOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal Step by stepCodeBug bounty Holders can redeem their tokens to claim the project's overflowed tokens, or to trigger rules determined by the project's current funding cycle's data source. Only a token holder or a designated operator can redeem its tokens. Definition​ function redeemTokensOf( address _holder, uint256 _projectId, uint256 _tokenCount, address _token, uint256 _minReturnedTokens, address payable _beneficiary, string memory _memo, bytes memory _metadata ) external virtual override requirePermission(_holder, _projectId, JBOperations.REDEEM) returns (uint256 reclaimAmount) { ... } Arguments: _holder is the account to redeem tokens for._projectId is the ID of the project to which the tokens being redeemed belong._tokenCount is the number of project tokens to redeem, as a fixed point number with 18 decimals._token is the token being reclaimed. This terminal ignores this property since it only manages one currency._minReturnedTokens is the minimum amount of terminal tokens expected in return, as a fixed point number with the same amount of decimals as this terminal._beneficiary is the address to send the terminal tokens to._memo is a memo to pass along to the emitted event._metadata are bytes to send along to the data source, delegate, and emitted event, if provided. Through the requirePermission modifier, the function is only accessible by the token holder, or from an operator that has been given the JBOperations.REDEEM permission by the token holder.The function can be overriden by inheriting contracts.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.The function returns the amount of terminal tokens that the tokens were redeemed for, as a fixed point number with the same amount of decimals as this terminal. Body​ Forward to the internal function. return _redeemTokensOf( _holder, _projectId, _tokenCount, _minReturnedTokens, _beneficiary, _memo, _metadata ); Internal references: _redeemTokensOf","keywords":""},{"title":"decimals","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbsingletokenpaymentterminal/properties/decimals","content":"decimals Contract: JBSingleTokenPaymentTerminal​‌ Interface: IJBSingleTokenPaymentTerminal The number of decimals the token fixed point amounts are expected to have. Definition​ /** @notice The number of decimals the token fixed point amounts are expected to have. */ uint256 public immutable override decimals; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBSingleTokenPaymentTerminal interface.","keywords":""},{"title":"migrate","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/migrate","content":"migrate Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal Step by stepCodeErrorsEventsBug bounty Allows a project owner to migrate its funds and operations to a new terminal that accepts the same token type. Only a project's owner or a designated operator can migrate it. Definition​ function migrate(uint256 _projectId, IJBPaymentTerminal _to) external virtual override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MIGRATE_TERMINAL) returns (uint256 balance) { ... } Arguments: _projectId is the ID of the project being migrated._to is the terminal contract that will gain the project's funds. Through the requirePermission modifier, the function is only accessible by the project's owner, or from an operator that has been given the JBOperations.MIGRATE_TERMINAL permission by the project owner for the provided _projectId.The function can be overriden by inheriting contracts.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.The function returns the amount of funds that were migrated, as a fixed point number with the same amount of decimals as this terminal. Body​ Make sure the token type of the terminal being migrated to matches the token type of this terminal. // The terminal being migrated to must accept the same token as this terminal. if (!_to.acceptsToken(token, _projectId)) revert TERMINAL_TOKENS_INCOMPATIBLE(); Internal references: token External references: acceptsToken Record the migration and get a reference to the project's balance. // Record the migration in the store. balance = store.recordMigration(_projectId); Internal references: store External references: recordMigration If there's a balance to migrate, move the funds over to the new terminal. Send ETH along with the transaction if this terminal is an ETH terminal. Make sure any inherited pre-transfer logic is called before transferring. // Transfer the balance if needed. if (balance &gt; 0) { // Trigger any inherited pre-transfer logic. _beforeTransferTo(address(_to), balance); // If this terminal's token is ETH, send it in msg.value. uint256 _payableValue = token == JBTokens.ETH ? balance : 0; // Withdraw the balance to transfer to the new terminal; _to.addToBalanceOf{value: _payableValue}(balance, _projectId, token, '', bytes('')); } Library references: JBTokens .ETH Virtual references: _beforeTransferTo Internal references: addToBalanceOf Emit a Migrate event with the relevant parameters. emit Migrate(_projectId, _to, balance, msg.sender); Event references: Migrate","keywords":""},{"title":"setFeelessAddress","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/setfeelessaddress","content":"setFeelessAddress Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal Step by stepCodeEventsBug bounty Sets whether projects operating on this terminal can pay towards the specified address without incurring a fee. Only the owner of this contract can set addresses as feeless. Definition​ function setFeelessAddress(address _address, bool _flag) external virtual override onlyOwner { ... } Arguments: _address is the address that can be paid towards while still bypassing fees._flag is a flag indicating whether the terminal should be feeless or not. Through the onlyOwner modifier, the function can only be accessed by the owner of this contract.The function can be overriden by inheriting contracts.The function doesn't return anything. Body​ Store the flag for the terminal. // Set the flag value. isFeelessAddress[_address] = _flag; Internal references: isFeelessAddress Emit a SetFeelessAddress event with the relevant parameters. emit SetFeelessAddress(_address, _flag, msg.sender); Event references: SetFeelessAddress","keywords":""},{"title":"setFeeGauge","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/setfeegauge","content":"setFeeGauge Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal Step by stepCodeEventsBug bounty Allows the fee gauge to be updated. Only the owner of this contract can change the fee gauge. If the fee gauge reverts when called upon while a project is attempting to distribute its funds, a project's funds will be locked. This is a known risk. Definition​ function setFeeGauge(IJBFeeGauge _feeGauge) external virtual override onlyOwner { ... } Arguments: _feeGauge is the new fee gauge. Through the onlyOwner modifier, the function can only be accessed by the owner of this contract.The function can be overriden by inheriting contracts.The function doesn't return anything. Body​ Store the new fee gauge. // Store the new fee gauge. feeGauge = _feeGauge; Internal references: feeGauge Emit a SetFeeGauge event with the relevant parameters. emit SetFeeGauge(_feeGauge, msg.sender); Event references: SetFeeGauge","keywords":""},{"title":"_redeemTokensOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_redeemtokensof","content":"_redeemTokensOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeErrorsEventsBug bounty Holders can redeem their tokens to claim the project's overflowed tokens, or to trigger rules determined by the project's current funding cycle's data source. Only a token holder or a designated operator can redeem its tokens. Definition​ function _redeemTokensOf( address _holder, uint256 _projectId, uint256 _tokenCount, uint256 _minReturnedTokens, address payable _beneficiary, string memory _memo, bytes memory _metadata ) private returns (uint256 reclaimAmount) { ... } Arguments: _holder is the account to redeem tokens for._projectId is the ID of the project to which the tokens being redeemed belong._tokenCount is the number of project tokens to redeem, as a fixed point number with 18 decimals._minReturnedTokens is the minimum amount of terminal tokens expected in return, as a fixed point number with the same amount of decimals as this terminal._beneficiary is the address to send the terminal tokens to._memo is a memo to pass along to the emitted event._metadata are bytes to send along to the data source, delegate, and emitted event, if provided. The function is private to this contract.The function returns the amount of terminal tokens that the tokens were redeemed for, as a fixed point number with the same amount of decimals as this terminal. Body​ Make sure the provided beneficiary of the claimed funds isn't the zero address. // Can't send reclaimed funds to the zero address. if (_beneficiary == address(0)) revert REDEEM_TO_ZERO_ADDRESS(); Define a reference to the project's funding cycle during which the redemption is being made. // Define variables that will be needed outside the scoped section below. // Keep a reference to the funding cycle during which the redemption is being made. JBFundingCycle memory _fundingCycle; The following scoped block is a bit of a hack to prevent a &quot;Stack too deep&quot; error. // Scoped section prevents stack too deep. `_delegate` only used within scope. { ... } Get a reference to the redemption delegate that. IJBRedemptionDelegate _delegate; Record the redemption and get a reference to the funding cycle during which the redemption was made, the terminal token amount that should be reclaimed, a delegate to callback to, and an updated memo. // Record the redemption. (_fundingCycle, reclaimAmount, _delegate, _memo) = store.recordRedemptionFor( _holder, _projectId, _tokenCount, _memo, _metadata ); Internal references: store External references: recordRedemptionFor Make sure the amount of terminal tokens being reclaimed is at least as much as the specified minimum. // The amount being reclaimed must be at least as much as was expected. if (reclaimAmount &lt; _minReturnedTokens) revert INADEQUATE_RECLAIM_AMOUNT(); Burn the project's tokens if needed. // Burn the project tokens. if (_tokenCount &gt; 0) IJBController(directory.controllerOf(_projectId)).burnTokensOf( _holder, _projectId, _tokenCount, '', false ); Internal references: directory External references: controllerOfburnTokensOf If a delegate was provided, callback to its didRedeem function, and emit an event with the relevant parameters.. // If a delegate was returned by the data source, issue a callback to it. if (_delegate != IJBRedemptionDelegate(address(0))) { JBDidRedeemData memory _data = JBDidRedeemData( _holder, _projectId, _tokenCount, _fundingCycle.configuration, JBTokenAmount(token, reclaimAmount, decimals, currency), _beneficiary, _memo, _metadata ); _delegate.didRedeem(_data); emit DelegateDidRedeem(_delegate, _data, msg.sender); } Internal references: tokendecimalscurrency External references: didRedeem Event references: DelegateDidRedeem If an amount is being reclaimed, send the funds to the beneficiary. // Send the reclaimed funds to the beneficiary. if (reclaimAmount &gt; 0) _transferFrom(address(this), _beneficiary, reclaimAmount); Internal references: _transferFrom Emit a RedeemTokens event with the relevant parameters. emit RedeemTokens( _fundingCycle.configuration, _fundingCycle.number, _projectId, _holder, _beneficiary, _tokenCount, reclaimAmount, _memo, msg.sender ); Event references: RedeemTokens","keywords":""},{"title":"_refundHeldFees","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_refundheldfees","content":"_refundHeldFees Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeEventsBug bounty Refund fees based on the specified amount. Definition​ function _refundHeldFees(uint256 _projectId, uint256 _amount) private returns (uint256 refundedFees) { ... } Arguments: _projectId is the project for which fees are being refunded._amount is the amount to base the refund on, as a fixed point number with the same amount of decimals as this terminal. The function is private to this contract.The function doesn't return anything. Body​ Get a reference to any held JBFee's for the project. // Get a reference to the project's held fees. JBFee[] memory _heldFees = _heldFeesOf[_projectId]; Internal references: _heldFeesOf Delete all of the project's held fees. These will be repopulated if they were not refunded. // Delete the current held fees. delete _heldFeesOf[_projectId]; Internal references: _heldFeesOf Get a reference to how much of the amount is left to refund fees for. // Get a reference to the leftover amount once all fees have been settled. uint256 leftoverAmount = _amount; Loop through each held fee, decrementing the amount as held fees are refunded and incrementing the amount of refunded fees. If the entire refund amount has been refunded, add the fee structure back into the project's held fees so that they can be processed or refunded later. If the amount left is greater than the fee structure's amount, decrement the refunded amount and leave the fee structure out of the project's held fees. If only some of the fee structure's amount is needed to cover the rest of the remaining amount, set the amount to 0 after adding the fee structure back into the project's held fees having subtracted the remaining refund amount. // Push length in stack uint256 _heldFeesLength = _heldFees.length; // Process each fee. for (uint256 _i = 0; _i &lt; _heldFeesLength;) { if (leftoverAmount == 0) _heldFeesOf[_projectId].push(_heldFees[_i]); else if (leftoverAmount &gt;= _heldFees[_i].amount) { unchecked { leftoverAmount = leftoverAmount - _heldFees[_i].amount; refundedFees += _feeAmount( _heldFees[_i].amount, _heldFees[_i].fee, _heldFees[_i].feeDiscount ); } } else { _heldFeesOf[_projectId].push( JBFee( _heldFees[_i].amount - leftoverAmount, _heldFees[_i].fee, _heldFees[_i].feeDiscount, _heldFees[_i].beneficiary ) ); unchecked { refundedFees += _feeAmount(leftoverAmount, _heldFees[_i].fee, _heldFees[_i].feeDiscount); } leftoverAmount = 0; } unchecked { ++_i; } } Internal references: _heldFeesOf_feeAmount Emit a RefundHeldFees event with the relevant parameters. emit RefundHeldFees(_projectId, _amount, refundedFees, leftoverAmount, msg.sender); Event references: RefundHeldFees","keywords":""},{"title":"JBChainlinkV3PriceFeed","type":0,"sectionRef":"#","url":"dev/api/contracts/or-price-feeds/jbchainlinkv3pricefeed/","content":"JBChainlinkV3PriceFeed Manages and normalizes price feeds. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBChainlinkV3PriceFeed.sol Addresses​ Ethereum mainnet: 0x729eE70bfdF65bEc7A530Fd49F644d07D0b2c087 Ethereum rinkeby: 0x59F6aEE20d746708539B4f2E75CA50F9dDCFdC70 Interfaces​ Name\tDescriptionIJBPriceFeed\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Constructor​ /** @param _feed The feed to report prices from. */ constructor(AggregatorV3Interface _feed) { feed = _feed; } _feed is the feed to report prices from. Properties​ Function\tDefinitionfeed Returns AggregatorV3Interface Read​ Function\tDefinitioncurrentPrice Params uint256 _decimals Returns uint256 price","keywords":""},{"title":"token","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbsingletokenpaymentterminal/properties/token","content":"token Contract: JBSingleTokenPaymentTerminal​‌ Interface: IJBSingleTokenPaymentTerminal The token that this terminal accepts. Definition​ /** @notice The token that this terminal accepts. */ address public immutable override token; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBSingleTokenPaymentTerminal interface.","keywords":""},{"title":"processFees","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/processfees","content":"processFees Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal Step by stepCodeEventsBug bounty Process any fees that are being held for the project. Only a project owner, an operator, or the contract's owner can process held fees. Definition​ function processFees(uint256 _projectId) external virtual override requirePermissionAllowingOverride( projects.ownerOf(_projectId), _projectId, JBOperations.PROCESS_FEES, msg.sender == owner() ) nonReentrant { ... } Arguments: _projectId is the ID of the project whos held fees should be processed. Through the requirePermissionAllowingOverride modifier, the function is only accessible by the project's owner, from an operator that has been given the JBOperations.PROCESS_FEES permission by the project owner for the provided _projectId, or from the owner of this contract.The function can be overriden by inheriting contracts.The function cannot be accessed recursively or while other nonReentrant functions in this contract are in progress.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.The function doesn't return anything. Body​ Get a reference to all held fees for the project. // Get a reference to the project's held fees. JBFee[] memory _heldFees = _heldFeesOf[_projectId]; Internal references: _heldFeesOf Remove all fees. // Delete the held fee's now that they've been processed. delete _heldFeesOf[_projectId]; Internal references: _heldFeesOf Iterate through the array. Take fee's for each JBFee data structure. Emit a ProcessFee event with the relevant parameters for each fee processed. // Push array length in stack uint256 _heldFeeLength = _heldFees.length; // Process each fee. for (uint256 _i = 0; _i &lt; _heldFeeLength;) { // Get the fee amount. uint256 _amount = _feeAmount( _heldFees[_i].amount, _heldFees[_i].fee, _heldFees[_i].feeDiscount ); // Process the fee. _processFee(_amount, _heldFees[_i].beneficiary); emit ProcessFee(_projectId, _amount, _heldFees[_i].beneficiary, msg.sender); unchecked { ++_i; } } Internal references: _processFee_feeAmount Event references: ProcessFee","keywords":""},{"title":"feed","type":0,"sectionRef":"#","url":"dev/api/contracts/or-price-feeds/jbchainlinkv3pricefeed/properties/feed","content":"feed Contract: JBChainlinkV3PriceFeed The available AggregatorV3Interface price feeds. Definition​ /** @notice The feed that prices are reported from. */ AggregatorV3Interface public feed; The resulting view function can be accessed externally by anyone.","keywords":""},{"title":"_useAllowanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_useallowanceof","content":"_useAllowanceOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeErrorsEventsBug bounty Allows a project to send funds from its overflow up to the preconfigured allowance. Only a project's owner or a designated operator can use its allowance. Incurs the protocol fee. Definition​ function _useAllowanceOf( uint256 _projectId, uint256 _amount, uint256 _currency, uint256 _minReturnedTokens, address payable _beneficiary, string memory _memo ) private returns (uint256 netDistributedAmount) { ... } Arguments: _projectId is the ID of the project to use the allowance of._amount is the amount of terminal tokens to use from this project's current allowance, as a fixed point number with the same amount of decimals as this terminal._currency is the expected currency of the amount being distributed. Must match the project's current funding cycle's overflow allowance currency._minReturnedTokens is the minimum number of tokens that the _amount should be valued at in terms of this terminal's currency, as a fixed point number with the same amount of decimals as this terminal._beneficiary is the address to send the funds to. The function is private to this contract.The function returns the amount of tokens that was distributed to the beneficiary, as a fixed point number with the same amount of decimals as the terminal. Body​ Record the use of the allowed funds. // Record the use of the allowance. (JBFundingCycle memory _fundingCycle, uint256 _distributedAmount) = store.recordUsedAllowanceOf( _projectId, _amount, _currency ); Internal references: store External references: recordUsedAllowanceOf Make sure the distributed amount is at least as much as the specified minimum. // The amount being withdrawn must be at least as much as was expected. if (_distributedAmount &lt; _minReturnedTokens) revert INADEQUATE_DISTRIBUTION_AMOUNT(); The following scoped block is a bit of a hack to prevent a &quot;Stack too deep&quot; error. // Scoped section prevents stack too deep. `_fee`, `_projectOwner`, `_feeDiscount`, and `_netAmount` only used within scope. { ... } Get a reference to the fee. // Get a reference to the fee amount that was paid. uint256 _feeAmount; Get a reference to the project owner, who will be the beneficiary of the paid fee. // Get a reference to the project owner, which will receive tokens from paying the platform fee. address _projectOwner = projects.ownerOf(_projectId); Internal references: projects External references: ownerOf Get a reference to the discount that'll be used when applying the fee. If the fee is 0, set the discount to be 100% to simplify subsequent calculations. No fee is the same as a full discount. // Get the amount of discount that should be applied to any fees taken. // If the fee is zero or if the fee is being used by an address that doesn't incur fees, set the discount to 100% for convinience. uint256 _feeDiscount = fee == 0 || isFeelessAddress[msg.sender] ? JBConstants.MAX_FEE_DISCOUNT : _currentFeeDiscount(_projectId); Library references: JBConstants .MAX_FEE_DISCOUNT(...) Internal references: isFeelessAddress_currentFeeDiscount Take the fee if needed. // Take a fee from the `_distributedAmount`, if needed. _feeAmount = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT ? 0 : _takeFeeFrom(_projectId, _fundingCycle, _distributedAmount, _projectOwner, _feeDiscount); Library references: JBConstants .MAX_FEE_DISCOUNT(...) Internal references: _takeFeeFrom Send the net amount to the beneficiary if needed. unchecked { // The net amount is the withdrawn amount without the fee. netDistributedAmount = _distributedAmount - _fee; } // Transfer any remaining balance to the beneficiary. if (netDistributedAmount &gt; 0) _transferFrom(address(this), _beneficiary, _netAmount); Virtual references: _transferFrom Emit a UseAllowance event with the relevant parameters. emit UseAllowance( _fundingCycle.configuration, _fundingCycle.number, _projectId, _beneficiary, _amount, _distributedAmount, netDistributedAmount, _memo, msg.sender ); Event references: UseAllowance","keywords":""},{"title":"acceptsToken","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbsingletokenpaymentterminal/read/acceptstoken","content":"acceptsToken Contract: JBSingleTokenPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeBug bounty A flag indicating if this terminal accepts the specified token. Definition​ function acceptsToken(address _token, uint256 _projectId) external view override returns (bool) { ... } Arguments: _token is the token to check if this terminal accepts or not._projectId is the project ID to check for token acceptance. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function returns the flag. Body​ In order for this terminal to accept a token, it must match the single token that this terminal is for. return _token == token; ","keywords":""},{"title":"currentPrice","type":0,"sectionRef":"#","url":"dev/api/contracts/or-price-feeds/jbchainlinkv3pricefeed/read/currentprice","content":"currentPrice Contract: JBChainlinkV3PriceFeed​‌ Interface: IJBPriceFeed Step by stepCodeBug bounty Gets the current price from the feed, normalized to the specified number of decimals. Definition​ function currentPrice(uint256 _decimals) external view override returns (uint256) { ... } Arguments: _decimals is the number of decimals the returned fixed point price should include. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBPriceFeed interface.The function returns the current price of the feed, as a fixed point number with the specified number of decimals. Body​ Get the latest price being reported by the price feed. The latestRoundData function returns several feed parameters, but only the _price is needed. // Get the latest round information. Only need the price is needed. (, int256 _price, , , ) = feed.latestRoundData(); Internal references: feed External references: latestRoundData Get the number of decimals being reported by the price feed that the provided price is expected to have. // Get a reference to the number of decimals the feed uses. uint256 _feedDecimals = feed.decimals(); Internal references: feed External references: decimals Return the fixed point price after normalizing the value to the desired number of decimals. // Return the price, adjusted to the target decimals. return uint256(_price).adjustDecimals(_feedDecimals, _decimals); Library references: JBFixedPointNumber .adjustDecimals(...)","keywords":""},{"title":"defaultBeneficiary","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/defaultbeneficiary","content":"defaultBeneficiary Contract: JBETHERC20ProjectPayer Interface: IJBProjectPayer The beneficiary that should be used in the payment made when this contract receives payments. Definition​ /** @notice The beneficiary that should be used in the payment made when this contract receives payments. */ address payable public override defaultBeneficiary; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjectPayer interface.","keywords":""},{"title":"decimalsForToken","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbsingletokenpaymentterminal/read/decimalsfortoken","content":"decimalsForToken Contract: JBSingleTokenPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeBug bounty The decimals that should be used in fixed number accounting for the specified token. Definition​ function decimalsForToken(address _token) external view override returns (uint256) { ... } Arguments: _token is the token to check for the decimals of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function returns the number of decimals for the token. Body​ This terminal only uses one decimals. return decimals; ","keywords":""},{"title":"pay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/pay","content":"pay Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeErrorsBug bounty Contribute tokens to a project. Definition​ function pay( uint256 _projectId, uint256 _amount, address _token, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string calldata _memo, bytes calldata _metadata ) external payable virtual override isTerminalOf(_projectId) returns (uint256) { ... } Arguments: _projectId is the ID of the project being paid._amount is the amount of terminal tokens being received, as a fixed point number with the same amount of decimals as this terminal. If this terminal's token is ETH, this is ignored and msg.value is used in its place._token is the token being paid. This terminal ignores this property since it only manages one token._beneficiary is the address to mint tokens for and pass along to the funding cycle's data source and delegate._minReturnedTokens is the minimum number of project tokens expected in return, as a fixed point number with the same amount of decimals as this terminal._preferClaimedTokens is a flag indicating whether the request prefers to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas._memo is memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate. A data source can alter the memo before emitting in the event and forwarding to the delegate._metadata are bytes to send along to the data source, delegate, and emitted event, if provided. The function can be accessed externally by anyone.The function can be overriden by inheriting contracts.Through the isTerminalOf modifier, this transaction reverts if this terminal is not one of the project's terminals.The function accepts ETH. The transaction reverts if receives ETH but the terminal's token type isn't ETH.The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function returns the number of tokens minted for the beneficiary, as a fixed point number with 18 decimals. Body​ If this terminal's token is not ETH, make sure ETH wasn't sent to it. Then transfer the specified amount of tokens from the message sender to this contract. If this terminal's contract is ETH, override the specified amount value with with amount of ETH sent to the function. // ETH shouldn't be sent if this terminal's token isn't ETH. if (token != JBTokens.ETH) { if (msg.value &gt; 0) revert NO_MSG_VALUE_ALLOWED(); // Transfer tokens to this terminal from the msg sender. _transferFrom(msg.sender, payable(address(this)), _amount); } // If this terminal's token is ETH, override _amount with msg.value. else _amount = msg.value; Library references: JBTokens .ETH Virtual references: _transferFrom Forward the call to the internal version of the function that is also used by other operations. return _pay( _amount, msg.sender, _projectId, _beneficiary, _minReturnedTokens, _preferClaimedTokens, _memo, _metadata ); Internal references: _pay","keywords":""},{"title":"supportsInterface","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbsingletokenpaymentterminal/read/supportsinterface","content":"supportsInterface Contract: JBSingleTokenPaymentTerminal​‌ Interface: IERC165 Step by stepCodeBug bounty Indicates if this contract adheres to the specified interface. See {IERC165-supportsInterface}. Definition​ function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC165, IERC165) returns (bool) { ... } Arguments: _interfaceId is the ID of the interface to check for adherance to. The view function can be accessed externally by anyone, and internally within this contract.The view function does not alter state on the blockchain.The function overrides a function definition from the IERC165 interface.The function returns a flag indicating if this contract adheres to the specified interface. Body​ Return true if the provided interface ID is in the list of interfaces this contract adheres to. return _interfaceId == type(IJBPaymentTerminal).interfaceId || _interfaceId == type(IJBSingleTokenPaymentTerminal).interfaceId || super.supportsInterface(_interfaceId); ","keywords":""},{"title":"useAllowanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/useallowanceof","content":"useAllowanceOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Interface: IJBPayoutRedemptionPaymentTerminal Step by stepCodeBug bounty Allows a project to send funds from its overflow up to the preconfigured allowance. Only a project's owner or a designated operator can use its allowance. Incurs the protocol fee. Definition​ function useAllowanceOf( uint256 _projectId, uint256 _amount, uint256 _currency, address _token, uint256 _minReturnedTokens, address payable _beneficiary, string memory _memo ) external virtual override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.USE_ALLOWANCE) returns (uint256 netDistributedAmount) { ... } Arguments: _projectId is the ID of the project to use the allowance of._amount is the amount of terminal tokens to use from this project's current allowance, as a fixed point number with the same amount of decimals as this terminal._currency is the expected currency of the amount being distributed. Must match the project's current funding cycle's overflow allowance currency._token is the token being distributed. This terminal ignores this property since it only manages one token. _minReturnedTokens is the minimum number of tokens that the _amount should be valued at in terms of this terminal's currency, as a fixed point number with the same amount of decimals as this terminal._beneficiary is the address to send the funds to. Through the requirePermission modifier, the function is only accessible by the project's owner, or from an operator that has been given the JBOperations.USE_ALLOWANCE permission by the project owner for the provided _projectId.The function can be overriden by inheriting contracts.The resulting function overrides a function definition from the IJBPayoutRedemptionPaymentTerminal interface.The function returns the amount of tokens that was distributed to the beneficiary, as a fixed point number with the same amount of decimals as the terminal. Body​ Forward to the internal function. return _useAllowanceOf(_projectId, _amount, _currency, _minReturnedTokens, _beneficiary, _memo); Internal references: _useAllowanceOf","keywords":""},{"title":"SetDefaultValues","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/events/setdefaultvalues","content":"SetDefaultValues Emitted from: setDefaultValues Definition​ event SetDefaultValues( uint256 indexed projectId, address indexed beneficiary, bool preferClaimedTokens, string memo, bytes metadata, bool preferAddToBalance, address caller ); projectId is the ID of the project whose treasury should be forwarded this contract's received payments.defaultBeneficiary is the address that'll receive the project's tokens.defaultPreferClaimedTokens is a flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet.defaultMemo is the memo that'll be passed along to the emitted event.defaultMetadata are bytes to send along to the project's data source and delegate, if provided.preferAddToBalance is a flag indicating if received payments should be forwarded to the project's addToBalance function or pay function. caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"currencyForToken","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbsingletokenpaymentterminal/read/currencyfortoken","content":"currencyForToken Contract: JBSingleTokenPaymentTerminal​‌ Interface: IJBPaymentTerminal Step by stepCodeBug bounty The currency that should be used for the specified token. Definition​ function currencyForToken(address _token) external view override returns (uint256) { ... } Arguments: _token is the token to check for the currency of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The resulting function overrides a function definition from the IJBPaymentTerminal interface.The function returns the currency index. Body​ This terminal only uses one currency. return currency; ","keywords":""},{"title":"defaultMemo","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/defaultmemo","content":"defaultMemo Contract: JBETHERC20ProjectPayer Interface: IJBProjectPayer The memo that should be used in the payment made when this contract receives payments. Definition​ /** @notice The memo that should be used in the payment made when this contract receives payments. */ string public override defaultMemo; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjectPayer interface.","keywords":""},{"title":"defaultPreferAddToBalance","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/defaultpreferaddtobalance","content":"defaultPreferAddToBalance Contract: JBETHERC20ProjectPayer Interface: IJBProjectPayer A flag indicating if received payments should call the pay function or the addToBalance function of a project. Definition​ /** @notice A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project. */ bool public override defaultPreferAddToBalance; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjectPayer interface.","keywords":""},{"title":"defaultMetadata","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/defaultmetadata","content":"defaultMetadata Contract: JBETHERC20ProjectPayer Interface: IJBProjectPayer The metadata that should be used in the payment made when this contract receives payments. Definition​ /** @notice The metadata that should be used in the payment made when this contract receives payments. */ bytes public override defaultMetadata; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjectPayer interface.","keywords":""},{"title":"directory","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/directory","content":"directory Contract: JBETHERC20ProjectPayer Interface: IJBProjectPayer A contract storing directories of terminals and controllers for each project. Definition​ /** @notice A contract storing directories of terminals and controllers for each project. */ IJBDirectory public immutable override directory; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjectPayer interface.","keywords":""},{"title":"_pay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_pay","content":"_pay Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeErrorsEventsBug bounty Contribute tokens to a project. Definition​ function _pay( uint256 _amount, address _payer, uint256 _projectId, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string memory _memo, bytes memory _metadata ) private returns (uint256 beneficiaryTokenCount) { ... } Arguments: _amount is the amount of terminal tokens being received, as a fixed point number with the same amount of decimals as this terminal. If this terminal's token is ETH, this is ignored and msg.value is used in its place._payer is the address making the payment._projectId is the ID of the project being paid._beneficiary is the address to mint tokens for and pass along to the funding cycle's data source and delegate._minReturnedTokens is the minimum number of project tokens expected in return, as a fixed point number with the same amount of decimals as this terminal._preferClaimedTokens is a flag indicating whether the request prefers to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas._memo is memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate. A data source can alter the memo before emitting in the event and forwarding to the delegate._metadata are bytes to send along to the data source, delegate, and emitted event, if provided. The function is private to this contract.The function returns the number of tokens minted for the beneficiary, as a fixed point number with 18 decimals. Body​ Make sure the provided beneficiary isn't the zero address. // Cant send tokens to the zero address. if (_beneficiary == address(0)) revert PAY_TO_ZERO_ADDRESS(); The following scoped block is a bit of a hack to prevent a &quot;Stack too deep&quot; error. Define a few variables outside of the scope that'll be set within the scope but later referenced again outside. // Define variables that will be needed outside the scoped section below. // Keep a reference to the funding cycle during which the payment is being made. JBFundingCycle memory _fundingCycle; // Scoped section prevents stack too deep. `_delegate` and `_tokenCount` only used within scope. { ... } Keep references to the delegate and token count that'll be returned from the subsequent function. IJBPayDelegate _delegate; uint256 _tokenCount; Keep a reference to the JBTokenAmount structure with info about what's being paid. // Bundle the amount info into a JBTokenAmount struct. JBTokenAmount memory _bundledAmount = JBTokenAmount(token, _amount, decimals, currency); Record the payment, and get a reference to the funding cycle during which the payment was made, the number of project tokens that should be minted as a result, a delegate to callback to, and an updated memo. // Record the payment. (_fundingCycle, _tokenCount, _delegate, _memo) = store.recordPaymentFrom( _payer, _bundledAmount, _projectId, baseWeightCurrency, _beneficiary, _memo, _metadata ); Internal references: store External references: recordPaymentFrom Mint tokens if needed. Get a reference to the number of tokens sent to the specified beneificiary as opposed to reserved to be distributed to the project's reserved token splits. // Mint the tokens if needed. if (_tokenCount &gt; 0) // Set token count to be the number of tokens minted for the beneficiary instead of the total amount. beneficiaryTokenCount = IJBController(directory.controllerOf(_projectId)).mintTokensOf( _projectId, _tokenCount, _beneficiary, '', _preferClaimedTokens, true ); Internal references: directory External references: controllerOfmintTokensOf Make sure the beneficiary is receiving at least as much tokens as the minimum specied. // The token count for the beneficiary must be greater than or equal to the minimum expected. if (beneficiaryTokenCount &lt; _minReturnedTokens) revert INADEQUATE_TOKEN_COUNT(); If a delegate was provided, callback to its didPay function, and emit an event with the relevant parameters.. // If a delegate was returned by the data source, issue a callback to it. if (_delegate != IJBPayDelegate(address(0))) { JBDidPayData memory _data = JBDidPayData( _payer, _projectId, _fundingCycle.configuration, _bundledAmount, beneficiaryTokenCount, _beneficiary, _preferClaimedTokens, _memo, _metadata ); _delegate.didPay(_data); emit DelegateDidPay(_delegate, _data, msg.sender); } External references: didPay Event references: DelegateDidPay Emit a Pay event with the relevant parameters. emit Pay( _fundingCycle.configuration, _fundingCycle.number, _projectId, _beneficiary, _amount, beneficiaryTokenCount, _memo, _metadata, msg.sender ); Event references: Pay","keywords":""},{"title":"defaultPreferClaimedTokens","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/defaultpreferclaimedtokens","content":"defaultPreferClaimedTokens Contract: JBETHERC20ProjectPayer Interface: IJBProjectPayer A flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet. Leaving tokens unclaimed saves gas. Definition​ /** @notice A flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet. Leaving tokens unclaimed saves gas. */ bool public override defaultPreferClaimedTokens; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjectPayer interface.","keywords":""},{"title":"JBETHERC20ProjectPayerDeployer","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayerdeployer/","content":"","keywords":""},{"title":"Addresses​","type":1,"pageTitle":"JBETHERC20ProjectPayerDeployer","url":"dev/api/contracts/or-utilities/jbetherc20projectpayerdeployer/#addresses","content":"Ethereum mainnet: 0x9E84bEcA3E4d3cfE5C3b5E1b534363E8D7468ABc Ethereum rinkeby: 0x3247df1bdC849f69Ba7dA4faf71d1e5850A6Fbb8 Interfaces​ Name\tDescriptionIJBETHERC20ProjectPayerDeployer\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Events​ Name\tDataDeployProjectPayer IJBProjectPayer indexed projectPayeruint256 defaultProjectIdaddress defaultBeneficiarybool defaultPreferClaimedTokensstring defaultMemobytes defaultMetadatabool preferAddToBalanceIJBDirectory directoryaddress caller Write​ Function\tDefinitiondeployProjectPayer Params uint256 _defaultProjectIdaddress _defaultBeneficiarybool _defaultPreferClaimedTokensstring _defaultMemobytes _defaultMetadatabool _preferAddToBalanceIJBDirectory _directoryaddress _owner Returns IJBProjectPayer projectPayer "},{"title":"defaultProjectId","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/defaultprojectid","content":"defaultProjectId Contract: JBETHERC20ProjectPayer Interface: IJBProjectPayer The ID of the project that should be used to forward this contract's received payments. Definition​ /** @notice The ID of the project that should be used to forward this contract's received payments. */ uint256 public override defaultProjectId; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjectPayer interface.","keywords":""},{"title":"receive","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/write/receive","content":"receive Contract: JBETHERC20ProjectPayer Interface: IJBProjectPayer Step by stepCodeBug bounty Received funds are paid to the default project ID using the stored default properties. Use the addToBalance function if there's a preference to do so. Otherwise use pay. This function is called automatically when the contract receives an ETH payment. Definition​ receive() external payable virtual override { ... } The function is triggered when the contract receives ETH.The function can be accessed externally by anyone.The function doesn't return anything. Body​ Pay the ETH received to the default project ID using the default parameters. Use the addToBalance function if there's a preference to do so. if (defaultPreferAddToBalance) _addToBalanceOf( defaultProjectId, JBTokens.ETH, address(this).balance, 18, // balance is a fixed point number with 18 decimals. defaultMemo, defaultMetadata ); else _pay( defaultProjectId, JBTokens.ETH, address(this).balance, 18, // balance is a fixed point number with 18 decimals. defaultBeneficiary == address(0) ? msg.sender : defaultBeneficiary, 0, // Can't determine expectation of returned tokens ahead of time. defaultPreferClaimedTokens, defaultMemo, defaultMetadata ); Library references: JBTokens .ETH Internal references: defaultPreferClaimedTokensdefaultBeneficiarydefaultProjectId_addToBalanceOf_pay","keywords":""},{"title":"DistributeToSplit","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/events/distributetosplit","content":"DistributeToSplit Emitted from: _payTo Definition​ event DistributeToSplit( JBSplit split, uint256 amount, address defaultBeneficiary, address caller ); split is the JBSplit to which the distribution was made.amount is the total token amount that was distributed to the split.defaultBeneficiary is the address that'll be sent tokens if the split doesn't specify a recipient.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"AddToBalance","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/events/addtobalance","content":"AddToBalance Emitted from: [addToBalance](/dev/api/contracts/or-uti lities/jbetherc20splitspayer/write/addtobalanceof.md) Definition​ event AddToBalance( uint256 indexed projectId, address beneficiary, address token, uint256 amount, uint256 decimals, uint256 leftoverAmount, string memo, address caller ); projectId is the ID of the project who received any leftover funds after splits were paid out.beneficiary is the address that received the project's tokens, or recieved the leftover funds if there was no project ID. token is the token that was paid.amount is the amount that was paid, as a fixed point number.decimals is the amount of decimals in the amount.leftoverAmount is the amount leftover after all splits were paid. memo is the memo that was forwarded with the payment.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"DistributeToSplitGroup","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/events/distributetosplitgroup","content":"DistributeToSplitGroup Emitted from: _payToSplits Definition​ event DistributeToSplitGroup( uint256 indexed projectId, uint256 indexed domain, uint256 indexed group, address caller ); projectId is the ID of the project to which the split belongs.domain is the namespace that differentiates different split groups for the projectId.group is the property that joins multiple splits into one full group.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"DeployProjectPayer","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayerdeployer/events/deployprojectpayer","content":"DeployProjectPayer Emitted from: deployProjectPayer Definition​ event DeployProjectPayer( IJBProjectPayer indexed projectPayer, uint256 defaultProjectId, address defaultBeneficiary, bool defaultPreferClaimedTokens, string defaultMemo, bytes defaultMetadata, bool preferAddToBalance, IJBDirectory directory, address owner, address caller ); projectPayer is the address of the project payer contract that was deployed. defaultProjectId is the ID of the project whose treasury should be forwarded the project payer contract's received payments.defaultBeneficiary is the address that'll receive the project's tokens.defaultPreferClaimedTokens is a flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet.defaultMemo is the memo that'll be passed along to the emitted event.defaultMetadata are bytes to send along to the project's data source and delegate, if provided.preferAddToBalance is a flag indicating if received payments should be forwarded to the project's addToBalance function or pay function. directory is the IJBDirectory contract storing directories of terminals and controllers for each project._owner is the address that owns the project payer contract.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"JBETHERC20ProjectPayer","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/","content":"JBETHERC20ProjectPayer Sends ETH or ERC20's to a project treasury as it receives direct payments or has it's functions called. Inherit from this contract or borrow from its logic to forward ETH or ERC20's to project treasuries from within other contracts. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBETHERC20ProjectPayer.sol Addresses​ There can be several instances of this contract deployed. Interfaces​ Name\tDescriptionIJBProjectPayer\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionOwnable\tIncludes convenience functionality for specifying an address that owns the contract, with modifiers that only allow access by the owner. ERC165\tIntrospection on interface adherance. Constructor​ /** @param _defaultProjectId The ID of the project whose treasury should be forwarded this contract's received payments. @param _defaultBeneficiary The address that'll receive the project's tokens. @param _defaultPreferClaimedTokens A flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet. @param _defaultMemo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate. A data source can alter the memo before emitting in the event and forwarding to the delegate. @param _defaultMetadata Bytes to send along to the project's data source and delegate, if provided. @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project. @param _directory A contract storing directories of terminals and controllers for each project. @param _owner The address that will own the contract. */ constructor( uint256 _defaultProjectId, address payable _defaultBeneficiary, bool _defaultPreferClaimedTokens, string memory _defaultMemo, bytes memory _defaultMetadata, bool _defaultPreferAddToBalance, IJBDirectory _directory, address _owner ) { defaultProjectId = _defaultProjectId; defaultBeneficiary = _defaultBeneficiary; defaultPreferClaimedTokens = _defaultPreferClaimedTokens; defaultMemo = _defaultMemo; defaultMetadata = _defaultMetadata; defaultPreferAddToBalance = _defaultPreferAddToBalance; directory = _directory; _transferOwnership(_owner); } _defaultProjectId is the ID of the project whose treasury should be forwarded this contract's received payments._defaultBeneficiary is the address that'll receive the project's tokens._defaultPreferClaimedTokens is a flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet._defaultMemo is the memo that'll be passed along to the emitted event.._defaultMetadata are bytes to send along to the project's data source and delegate, if provided._defaultPreferAddToBalance is a flag indicating if received payments should call the pay function or the addToBalance function of a project._directory is a contract storing directories of terminals and controllers for each project._owner is the address that will own the contract. Events​ Name\tDataSetDefaultValues uint256 indexed projectIdaddress indexed beneficiarybool preferClaimedTokensstring memobytes metadatabool preferAddToBalanceaddress caller Properties​ Name\tDefinitiondirectory Returns JBDirectory defaultProjectId Returns uint256 defaultBeneficiary Returns address defaultPreferClaimedTokens Returns bool defaultMemo Returns string defaultMetadata Returns bytes defaultPreferAddToBalance Returns bool Read​ Function\tDefinitionsupportsInterface Params uint256 _interfaceId Returns bool Write​ Function\tDefinitionreceive Traits payablevirtual setDefaultValues Traits onlyOwnervirtual Params uint256 _projectIdaddress payable _beneficiarybool _preferClaimedTokensstring _memobytes _metadata pay Traits payablevirtual Params uint256 _projectIdaddress _tokenuint256 _amountuint256 _decimalsaddress _beneficiaryuint256 _minReturnedTokensbool _preferClaimedTokensstring _memobytes _metadata addToBalanceOf Traits payablevirtual Params uint256 _projectIdaddress _tokenuint256 _amountuint256 _decimalsstring _memobytes _metadata _pay Traits internalvirtual Params uint256 _projectIdaddress _tokenuint256 _amountuint256 _decimalsaddress _beneficiaryuint256 _minReturnedTokensbool _preferClaimedTokensstring _memobytes _metadata _addToBalanceOf Traits internalvirtual Params uint256 _projectIdaddress _tokenuint256 _amountuint256 _decimalsstring _memo","keywords":""},{"title":"Pay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/events/pay","content":"Pay Emitted from: pay Definition​ event Pay( uint256 indexed projectId, address beneficiary, address token, uint256 amount, uint256 decimals, uint256 leftoverAmount, uint256 minReturnedTokens, bool preferClaimedTokens, string memo, bytes metadata, address caller ); projectId is the ID of the project who received any leftover funds after splits were paid out.beneficiary is the address that received the project's tokens, or recieved the leftover funds if there was no project ID. token is the token that was paid.amount is the amount that was paid, as a fixed point number.decimals is the amount of decimals in the amount.leftoverAmount is the amount leftover after all splits were paid. minReturnedTokens is the minimum amount of project tokens expected when paying the project any leftover amount. preferClaimedTokens is a flag indicating if the project tokens resulting from paying the project with leftover funds should be claimed into the beneficiary's wallet.memo is the memo that was forwarded with the payment.metadata is the metadata that was forwarded with the payment.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"pay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/write/pay","content":"pay Contract: JBETHERC20ProjectPayer Interface: IJBProjectPayer Step by stepCodeErrorsBug bounty Make a payment to the specified project. Definition​ function pay( uint256 _projectId, address _token, uint256 _amount, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string calldata _memo, bytes calldata _metadata ) public payable virtual { ... } Arguments: _projectId is the ID of the project that is being paid._token is the token being paid in._amount is the amount of tokens being paid, as a fixed point number. If the token is ETH, this is ignored and msg.value is used in its place._decimals is the number of decimals in the _amount fixed point number. If the token is ETH, this is ignored and 18 is used in its place, which corresponds to the amount of decimals expected in msg.value._beneficiary is the address who will receive tokens from the payment._minReturnedTokens is the minimum number of project tokens expected in return, as a fixed point number with 18 decimals._preferClaimedTokens is a flag indicating whether the request prefers to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas._memo is a memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate. A data source can alter the memo before emitting in the event and forwarding to the delegate._metadata are bytes to send along to the data source, delegate, and emitted event, if provided. The function can be accessed externally by anyone, or internally from this contract or one that inherits it.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBProjectPayer interface.The function doesn't return anything. Body​ If the token isn't ETH, make sure ETH wasn't sent to the function, then transfer the amount of tokens from the message sender to this contract. If the token is ETH, override the specified amount and decimals values with with amount of ETH sent to the function, which is denoted as a fixed point number with 18 decimals. // ETH shouldn't be sent if the token isn't ETH. if (address(_token) != JBTokens.ETH) { if (msg.value &gt; 0) revert NO_MSG_VALUE_ALLOWED(); // Transfer tokens to this contract from the msg sender. IERC20(_token).transferFrom(msg.sender, address(this), _amount); } else { // If ETH is being paid, set the amount to the message value, and decimals to 18. _amount = msg.value; _decimals = 18; } Library references: JBTokens .ETH External references: transferFrom Make the payment. _pay( _projectId, _token, _amount, _decimals, _beneficiary, _minReturnedTokens, _preferClaimedTokens, _memo, _metadata ); Internal references: _pay","keywords":""},{"title":"SetDefaultSplits","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/events/setdefaultsplits","content":"SetDefaultSplits Emitted from: setDefaultSplits Definition​ event SetDefaultSplits( uint256 indexed projectId, uint256 indexed domain, uint256 indexed group, address caller ); projectId is the ID of the project to which the split belongs.domain is the namespace that differentiates different split groups for the projectId.group is the property that joins multiple splits into one full group.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"supportsInterface","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/read/supportsinterface","content":"supportsInterface Contract: JBETHERC20ProjectPayer Interface: IERC165 Step by stepCodeBug bounty Indicates if this contract adheres to the specified interface. See {IERC165-supportsInterface}. Definition​ function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC165, IERC165) returns (bool) { ... } Arguments: _interfaceId is the ID of the interface to check for adherance to. The view function can be accessed externally by anyone, and internally within this contract.The view function does not alter state on the blockchain.The function overrides a function definition from the IERC165 interface.The function returns a flag indicating if this contract adheres to the specified interface. Body​ Return true if the provided interface ID is in the list of interfaces this contract adheres to. return _interfaceId == type(IJBProjectPayer).interfaceId || super.supportsInterface(_interfaceId); ","keywords":""},{"title":"_addToBalanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/write/-_addtobalanceof","content":"_addToBalanceOf Contract: JBETHERC20ProjectPayer Step by stepCodeErrorsBug bounty Add to the balance of the specified project. Definition​ function _addToBalanceOf( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, string memory _memo, bytes memory _metadata ) internal virtual { ... } Arguments: _projectId is the ID of the project that is being paid._token is the token being paid in._amount is the amount of tokens being paid, as a fixed point number. If the token is ETH, this is ignored and msg.value is used in its place._decimals is the number of decimals in the _amount fixed point number. If the token is ETH, this is ignored and 18 is used in its place, which corresponds to the amount of decimals expected in msg.value._memo is a memo to pass along to the emitted event._metadata is extra data to pass along to the terminal. The function is private to this contract.The function doesn't return anything. Body​ Get a reference to the terminal that should be sent the payment by checking for the project's stored primary terminal for the token being paid. // Find the terminal for the specified project. IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_projectId, _token); Internal references: directory External references: primaryTerminalOf Make sure there is a terminal to make a payment towards. // There must be a terminal. if (_terminal == IJBPaymentTerminal(address(0))) revert TERMINAL_NOT_FOUND(); Make sure the number of decimals in the amount being paid matches the number of decimals expected by the terminal. // The amount's decimals must match the terminal's expected decimals. if (_terminal.decimalsForToken(_token) != _decimals) revert INCORRECT_DECIMAL_AMOUNT(); External references: decimalsForToken If the token being paid is an ERC20, approve the terminal to spend the amount of tokens from this terminal. // Approve the `_amount` of tokens from the destination terminal to transfer tokens from this contract. if (_token != JBTokens.ETH) IERC20(_token).approve(address(_terminal), _amount); Library references: JBTokens .ETH External references: approve Keep a reference to the amount to send in the transaction. If the token being paid is ETH, send the value along with the tx. // If the token is ETH, send it in msg.value. uint256 _payableValue = _token == JBTokens.ETH ? _amount : 0; Library references: JBTokens .ETH Add to the project's balance with the provided properties. // Add to balance so tokens don't get issued. _terminal.addToBalanceOf{value: _payableValue}(_projectId, _amount, _token, _memo); External references: addToBalanceOf","keywords":""},{"title":"deployProjectPayer","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayerdeployer/write/deployprojectpayer","content":"deployProjectPayer Contract: JBETHERC20ProjectPayerDeployer Interface: IJBETHERC20ProjectPayerDeployer Step by stepCodeEventsBug bounty Allows anyone to deploy a new project payer contract. Definition​ function deployProjectPayer( uint256 _defaultProjectId, address payable _defaultBeneficiary, bool _defaultPreferClaimedTokens, string memory _defaultMemo, bytes memory _defaultMetadata, bool _defaultPreferAddToBalance, IJBDirectory _directory, address _owner ) external override returns (IJBProjectPayer projectPayer) { ... } Arguments: _defaultProjectId is the ID of the project whose treasury should be forwarded the project payer contract's received payments._defaultBeneficiary is the address that'll receive the project's tokens when the project payer receives payments. _defaultPreferClaimedTokens is a flag indicating whether issued tokens from the project payer's received payments should be automatically claimed into the beneficiary's wallet. _defaultMemo is the memo that'll be forwarded with the project payer's received payments. _defaultMetadata is the metadata that'll be forwarded with the project payer's received payments. _defaultPreferAddToBalance is a flag indicating if received payments should call the pay function or the addToBalance function of a project._directory is a contract storing directories of terminals and controllers for each project._owner is the address that will own the project payer. The function can be accessed externally by anyone.The function overrides a function definition from theIJBETHERC20ProjectPayerDeployer interface.The function returns the project payer contract. Body​ Deploy the project payer contract. // Deploy the project payer. projectPayer = new JBETHERC20ProjectPayer( _defaultProjectId, _defaultBeneficiary, _defaultPreferClaimedTokens, _defaultMemo, _defaultMetadata, _defaultPreferAddToBalance, _directory, _owner ); External references: JBETHERC20ProjectPayer Emit a DeployProjectPayer event with all relevant parameters. emit DeployProjectPayer( projectPayer, _defaultProjectId, _defaultBeneficiary, _defaultPreferClaimedTokens, _defaultMemo, _defaultMetadata, _defaultPreferAddToBalance, _directory, _owner, msg.sender ); Event references: DeployProjectPayer","keywords":""},{"title":"addToBalanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/write/addtobalanceof","content":"addToBalanceOf Contract: JBETHERC20ProjectPayer Interface: IJBProjectPayer Step by stepCodeErrorsBug bounty Add to the balance of the specified project. Definition​ function addToBalanceOf( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, string calldata _memo, bytes calldata _metadata ) public payable virtual override { ... } Arguments: _projectId is the ID of the project that is being paid._token is the token being paid in._amount is the amount of tokens being paid, as a fixed point number. If the token is ETH, this is ignored and msg.value is used in its place._decimals is the number of decimals in the _amount fixed point number. If the token is ETH, this is ignored and 18 is used in its place, which corresponds to the amount of decimals expected in msg.value._memo is a memo to pass along to the emitted event._metadata is extra data to pass along to the terminal. The function can be accessed externally by anyone, or internally from this contract or one that inherits it.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBProjectPayer interface.The function doesn't return anything. Body​ If the token isn't ETH, make sure ETH wasn't sent to the function, then transfer the amount of tokens from the message sender to this contract. If the token is ETH, override the specified amount and decimals values with with amount of ETH sent to the function, which is denoted as a fixed point number with 18 decimals. // ETH shouldn't be sent if the token isn't ETH. if (address(_token) != JBTokens.ETH) { if (msg.value &gt; 0) revert NO_MSG_VALUE_ALLOWED(); // Transfer tokens to this contract from the msg sender. IERC20(_token).transferFrom(msg.sender, address(this), _amount); } else { // If ETH is being paid, set the amount to the message value, and decimals to 18. _amount = msg.value; _decimals = 18; } Library references: JBTokens .ETH External references: transferFrom Add to the project's balance. _addToBalanceOf(_projectId, _token, _amount, _decimals, _memo, _metadata); Internal references: _addToBalanceOf","keywords":""},{"title":"defaultSplitsDomain","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/properties/defaultsplitsdomain","content":"defaultSplitsDomain Contract: JBETHERC20SplitsPayer Interface: IJBSplitsPayer The domain within which the default splits are stored. Definition​ /** @notice The domain within which the default splits are stored. */ uint256 public override defaultSplitsDomain; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBSplitsPayer interface.","keywords":""},{"title":"_distributePayoutsOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_distributepayoutsof","content":"_distributePayoutsOf Contract: JBSingleTokenPaymentTerminalStore​‌ Step by stepCodeErrorsEventsBug bounty Distributes payouts for a project with the distribution limit of its current funding cycle. Payouts are sent to the preprogrammed splits. Any leftover is sent to the project's owner. Anyone can distribute payouts on a project's behalf. The project can preconfigure a wildcard split that is used to send funds to msg.sender. This can be used to incentivize calling this function. All funds distributed outside of this contract or any feeless terminals incure the protocol fee. Definition​ function _distributePayoutsOf( uint256 _projectId, uint256 _amount, uint256 _currency, uint256 _minReturnedTokens, string calldata _memo ) private returns (uint256 netLeftoverDistributionAmount) { ... } Arguments: _projectId is the ID of the project having its payouts distributed._amount is the amount of terminal tokens to distribute, as a fixed point number with same number of decimals as this terminal._currency is the expected currency of the amount being distributed. Must match the project's current funding cycle's distribution limit currency._minReturnedTokens is the minimum number of terminal tokens that the _amount should be valued at in terms of this terminal's currency, as a fixed point number with the same number of decimals as this terminal._memo is a memo to pass along to the emitted event. The function is private to this contract.The function returns the amount that was sent to the project owner, as a fixed point number with the same amount of decimals as this terminal. Body​ Record the distribution. // Record the distribution. (JBFundingCycle memory _fundingCycle, uint256 _distributedAmount) = store.recordDistributionFor( _projectId, _amount, _currency ); Internal references: store External references: recordDistributionFor Make sure the distributed amount is at least as much as the minimum expected amount. // The amount being distributed must be at least as much as was expected. if (_distributedAmount &lt; _minReturnedTokens) revert INADEQUATE_DISTRIBUTION_AMOUNT(); Get a reference to the project's owner. The owner will be allocated any funds leftover once splits are settled. // Get a reference to the project owner, which will receive tokens from paying the platform fee // and receive any extra distributable funds not allocated to payout splits. address payable _projectOwner = payable(projects.ownerOf(_projectId)); External references: ownerOf The following scoped block is a bit of a hack to prevent a &quot;Stack too deep&quot; error. Define a few variables outside of the scope that'll be set within the scope but later referenced again outside. // Define variables that will be needed outside the scoped section below. // Keep a reference to the fee amount that was paid. uint256 _fee; // Scoped section prevents stack too deep. `_feeDiscount`, `_feeEligibleDistributionAmount`, and `_leftoverDistributionAmount` only used within scope. { ... } Get a reference to the discount that'll be used when applying the fee. If the fee is 0, set the discount to be 100% to simplify subsequent calculations. No fee is the same as a full discount. // Get the amount of discount that should be applied to any fees taken. // If the fee is zero or if the fee is being used by an address that doesn't incur fees, set the discount to 100% for convinience. uint256 _feeDiscount = fee == 0 || isFeelessAddress[msg.sender] ? JBConstants.MAX_FEE_DISCOUNT : _currentFeeDiscount(_projectId); Library references: JBConstants .MAX_FEE_DISCOUNT(...) Internal references: isFeelessAddress_currentFeeDiscount Get a reference to the amount of distributed funds from which fees should be taken, and the amount leftover after distributing splits. // The amount distributed that is eligible for incurring fees. uint256 _feeEligibleDistributionAmount; // The amount leftover after distributing to the splits. uint256 _leftoverDistributionAmount;d Distribute the amount to all payout splits. Get a reference to any leftover amount, and all amounts sent to splits from which fees should be taken. // Payout to splits and get a reference to the leftover amount after all splits have been paid. // Also get a reference to the amount that was distributed to splits from which fees should be taken. (_leftoverDistributionAmount, _feeEligibleDistributionAmount) = _distributeToPayoutSplitsOf( _projectId, _fundingCycle.configuration, payoutSplitsGroup, _distributedAmount, _feeDiscount ); Internal references: payoutSplitsGroup_distributeToPayoutSplitsOf Add the leftover distribution amount to the amount from which fees should be taken since those funds will be leaving the ecosystem to the project owner's address. // Leftover distribution amount is also eligible for a fee since the funds are going out of the ecosystem to _beneficiary. unchecked { _feeEligibleDistributionAmount += _leftoverDistributionAmount; } Take the fee if needed. // Take the fee. _fee = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT || _feeEligibleDistributionAmount == 0 ? 0 : _takeFeeFrom( _projectId, _fundingCycle, _feeEligibleDistributionAmount, _projectOwner, _feeDiscount ); Library references: JBConstants .MAX_FEE_DISCOUNT(...) Internal references: _takeFeeFrom Calculate what the net value of the leftover distribution will be. // Get a reference to how much to distribute to the project owner, which is the leftover amount minus any fees. unchecked { netLeftoverDistributionAmount = _leftoverDistributionAmount == 0 ? 0 : _leftoverDistributionAmount - _feeAmount(_leftoverDistributionAmount, fee, _feeDiscount); } Internal references: fee_feeAmount Transfer any leftover amount to the project owner if needed. // Transfer any remaining balance to the project owner. if (netLeftoverDistributionAmount &gt; 0) _transferFrom(address(this), _projectOwner, netLeftoverDistributionAmount); Virtual references: _transferFrom Emit a DistributePayouts event with the relevant parameters. emit DistributePayouts( _fundingCycle.configuration, _fundingCycle.number, _projectId, _projectOwner, _amount, _distributedAmount, _fee, netLeftoverDistributionAmount, _memo, msg.sender ); Event references: DistributePayouts","keywords":""},{"title":"_distributeToPayoutSplitsOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-payment-terminals/or-abstract/jbpayoutredemptionpaymentterminal/write/-_distributetopayoutsplitsof","content":"_distributeToPayoutSplitsOf Contract: JBPayoutRedemptionPaymentTerminal​‌ Step by stepCodeErrorsEventsBug bounty Pays out splits for a project's funding cycle configuration. Definition​ function _distributeToPayoutSplitsOf( uint256 _projectId, uint256 _domain, uint256 _group, uint256 _amount, uint256 _feeDiscount ) private returns (uint256 leftoverAmount, uint256 feeEligibleDistributionAmount) { ... } Arguments: _projectId is the ID of the project for which payout splits are being distributed._domain is the domain of the splits to distribute the payout between._group is the group of the splits to distribute the payout between._amount is the total amount being distributed._feeDiscount is the amount of discount to apply to the fee, out of the MAX_FEE. The function is private to this contract.The function returns: the leftover amount if the splits don't add up to 100%The function returns: leftoverAmount is leftover amount if the splits don't add up to 100%.feeEligibleDistributionAmount is the amount distributed to splits from which fees can be taken. Body​ Save the passed in amount as the leftover amount that will be returned. The subsequent routine will decrement the leftover amount as splits are settled. // Set the leftover amount to the initial amount. leftoverAmount = _amount; Get a reference to payout splits for the current funding cycle configuration of the project. // Get a reference to the project's payout splits. JBSplit[] memory _splits = splitsStore.splitsOf(_projectId, _domain, _group); Internal references: splitsStore External references: splitsOf Loop through each split. // Transfer between all splits. for (uint256 _i = 0; _i &lt; _splits.length;) { ... } Get a reference to the current split being iterated on. // Get a reference to the mod being iterated on. JBSplit memory _split = _splits[_i]; Get a reference to the payout amount that should be sent to the current split. This amount is the total amount multiplied by the percentage of the split, which is a number out of 10000000. // The amount to send towards mods. uint256 _payoutAmount = PRBMath.mulDiv( _amount, _split.percent, JBConstants.SPLITS_TOTAL_PERCENT ); Library references: PRBMath .mulDiv(...) JBConstants .SPLITS_TOTAL_PERCENT If there's at least some funds to send to the payout, determine where they should go, making sure to only debit a fee if the funds are leaving this contract and not going to a feeless terminal. If the split has an allocator set, send the funds to its allocate function, passing along any relevant params. Otherwise if a projectId is specified in the split, send the payout to that project. Add to the project's balance if the split has a preference to do so, otherwise send a payment and use the split's beneficiary as the address that should receive the project's tokens in return, or use the message sender if a beneficiary wasn't provided. If no project was specified, send the funds directly to the beneficiary address from the split if one was provided. If the split didn't give any routing information, send the amount to the messag sender. Decrement the leftoverAmount once the split is settled. if (_payoutAmount &gt; 0) { // Transfer tokens to the split. // If there's an allocator set, transfer to its `allocate` function. if (_split.allocator != IJBSplitAllocator(address(0))) { // If the split allocator is set as feeless, this distribution is not eligible for a fee. if (isFeelessAddress[address(_split.allocator)]) _netPayoutAmount = _payoutAmount; // This distribution is eligible for a fee since the funds are leaving this contract and the allocator isn't listed as feeless. else { unchecked { _netPayoutAmount = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT ? _payoutAmount : _payoutAmount - _feeAmount(_payoutAmount, fee, _feeDiscount); } // This distribution is eligible for a fee since the funds are leaving the ecosystem. feeEligibleDistributionAmount += _payoutAmount; } // Trigger any inherited pre-transfer logic. _beforeTransferTo(address(_split.allocator), _netPayoutAmount); // If this terminal's token is ETH, send it in msg.value. uint256 _payableValue = token == JBTokens.ETH ? _netPayoutAmount : 0; // Create the data to send to the allocator. JBSplitAllocationData memory _data = JBSplitAllocationData( token, _netPayoutAmount, decimals, _projectId, _group, _split ); // Trigger the allocator's `allocate` function. _split.allocator.allocate{value: _payableValue}(_data); // Otherwise, if a project is specified, make a payment to it. } else if (_split.projectId != 0) { // Get a reference to the Juicebox terminal being used. IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_split.projectId, token); // The project must have a terminal to send funds to. if (_terminal == IJBPaymentTerminal(address(0))) revert TERMINAL_IN_SPLIT_ZERO_ADDRESS(); // Save gas if this contract is being used as the terminal. if (_terminal == this) { // This distribution does not incur a fee. _netPayoutAmount = _payoutAmount; // Send the projectId in the metadata. bytes memory _projectMetadata = new bytes(32); _projectMetadata = bytes(abi.encodePacked(_projectId)); // Add to balance if prefered. if (_split.preferAddToBalance) _addToBalanceOf(_split.projectId, _netPayoutAmount, false, '', _projectMetadata); else _pay( _netPayoutAmount, address(this), _split.projectId, (_split.beneficiary != address(0)) ? _split.beneficiary : msg.sender, 0, _split.preferClaimed, '', _projectMetadata ); } else { // If the terminal is set as feeless, this distribution is not eligible for a fee. if (isFeelessAddress[address(_terminal)]) _netPayoutAmount = _payoutAmount; // This distribution is eligible for a fee since the funds are leaving this contract and the terminal isn't listed as feeless. else { unchecked { _netPayoutAmount = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT ? _payoutAmount : _payoutAmount - _feeAmount(_payoutAmount, fee, _feeDiscount); } feeEligibleDistributionAmount += _payoutAmount; } // Trigger any inherited pre-transfer logic. _beforeTransferTo(address(_terminal), _netPayoutAmount); // If this terminal's token is ETH, send it in msg.value. uint256 _payableValue = token == JBTokens.ETH ? _netPayoutAmount : 0; // Send the projectId in the metadata. bytes memory _projectMetadata = new bytes(32); _projectMetadata = bytes(abi.encodePacked(_projectId)); // Add to balance if prefered. if (_split.preferAddToBalance) _terminal.addToBalanceOf{value: _payableValue}( _split.projectId, _netPayoutAmount, token, '', _projectMetadata ); else _terminal.pay{value: _payableValue}( _split.projectId, _netPayoutAmount, token, _split.beneficiary != address(0) ? _split.beneficiary : msg.sender, 0, _split.preferClaimed, '', _projectMetadata ); } } else { unchecked { _netPayoutAmount = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT ? _payoutAmount : _payoutAmount - _feeAmount(_payoutAmount, fee, _feeDiscount); } // This distribution is eligible for a fee since the funds are leaving the ecosystem. feeEligibleDistributionAmount += _payoutAmount; // If there's a beneficiary, send the funds directly to the beneficiary. Otherwise send to the msg.sender. _transferFrom( address(this), _split.beneficiary != address(0) ? _split.beneficiary : payable(msg.sender), _netPayoutAmount ); } unchecked { // Subtract from the amount to be sent to the beneficiary. leftoverAmount = leftoverAmount - _payoutAmount; } } Library references: JBConstants .MAX_FEE_DISCOUNT JBTokens .ETH Internal references: feedecimalsisFeelessAddresspay_pay_feeAmount_transferFrom_beforeTransferTo_addtobalanceof External references: allocateprimaryTerminalOf Emit a DistributeToPayoutSplit event for the split being iterated on with the relevant parameters. emit DistributeToPayoutSplit( _projectId, _domain, _group, _split, _netPayoutAmount, msg.sender ); Event references: DistributeToPayoutSplit Increment the loop counter in the most gas efficient way. unchecked { ++_i; } ","keywords":""},{"title":"defaultSplitsProjectId","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/properties/defaultsplitsprojectid","content":"defaultSplitsProjectId Contract: JBETHERC20SplitsPayer Interface: IJBSplitsPayer The ID of project for which the default splits are stored. Definition​ /** @notice The ID of project for which the default splits are stored. */ uint256 public override defaultSplitsProjectId; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBSplitsPayer interface.","keywords":""},{"title":"JBETHERC20SplitsPayer","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/","content":"JBETHERC20SplitsPayer Sends ETH or ERC20's to a group of splits as it receives direct payments or has its functions called. Inherit from this contract or borrow from its logic to forward ETH or ERC20's to a group of splits from within other contracts. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBETHERC20SplitsPayer.sol Addresses​ There can be several instances of this contract deployed. Interfaces​ Name\tDescriptionIJBSplitsPayer\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionJBETHERC20ProjectPayer\tSends ETH or ERC20's to a project treasury as it receives direct payments or has it's functions called. ReentrancyGuard\tContract module that helps prevent reentrant calls to a function. ERC165\tIntrospection on interface adherance. Constructor​ /** @param _defaultSplitsProjectId The ID of project for which the default splits are stored. @param _defaultSplitsDomain The splits domain to payout when this contract receives direct payments. @param _defaultSplitsGroup The splits group to payout when this contract receives direct payments. @param _splitsStore A contract that stores splits for each project. @param _defaultProjectId The ID of the project whose treasury should be forwarded the splits payer contract's received payment leftovers after distributing to the default splits group. @param _defaultBeneficiary The address that'll receive the project's tokens. @param _defaultPreferClaimedTokens A flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet. @param _defaultMemo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate. A data source can alter the memo before emitting in the event and forwarding to the delegate. @param _defaultMetadata Bytes to send along to the project's data source and delegate, if provided. @param _preferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project. @param _owner The address that will own the contract. */ constructor( uint256 _defaultSplitsProjectId, uint256 _defaultSplitsDomain, uint256 _defaultSplitsGroup, IJBSplitsStore _splitsStore, uint256 _defaultProjectId, address payable _defaultBeneficiary, bool _defaultPreferClaimedTokens, string memory _defaultMemo, bytes memory _defaultMetadata, bool _preferAddToBalance, address _owner ) JBETHERC20ProjectPayer( _defaultProjectId, _defaultBeneficiary, _defaultPreferClaimedTokens, _defaultMemo, _defaultMetadata, _preferAddToBalance, _splitsStore.directory(), _owner ) { defaultSplitsProjectId = _defaultSplitsProjectId; defaultSplitsDomain = _defaultSplitsDomain; defaultSplitsGroup = _defaultSplitsGroup; splitsStore = _splitsStore; } _defaultSplitsProjectId is the ID of project for which the default splits are stored._defaultSplitsDomain is the splits domain to payout when this contract receives direct payments._defaultSplitsGroup is the splits group to payout when this contract receives direct payments._splitsStore is a contract that stores splits for each project._defaultProjectId is the ID of the project whose treasury should be forwarded the splits payer contract's received payment leftovers after distributing to the default splits group._defaultBeneficiary is the address that'll receive the project's tokens. _defaultPreferClaimedTokens is a flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet. _defaultMemo is a memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate. A data source can alter the memo before emitting in the event and forwarding to the delegate._defaultMetadata are bytes to send along to the project's data source and delegate, if provided._defaultPreferAddToBalance is a flag indicating if received payments should call the pay function or the addToBalance function of a project._owner is the address that will own the contract. Events​ Name\tDataSetDefaultSplits uint256 indexed projectIduint256 indexed domainuint256 indexed groupaddress caller Pay uint256 indexed projectIdaddress beneficiaryaddress tokenuint256 amountuint256 decimalsuint256 leftoverAmountuint256 minReturnedTokensbool preferClaimedTokensstring memobytes metadataaddress caller AddToBalance uint256 indexed projectIdaddress beneficiaryaddress tokenuint256 amountuint256 decimalsuint256 leftoverAmountstring memobytes metadataaddress caller DistributeToSplitGroup uint256 indexed projectIduint256 indexed domainuint256 indexed groupaddress caller DistributeToSplit JBSplit splituint256 amountaddress caller Properties​ Name\tDefinitionsplitsStore Returns JBSplitsStore defaultSplitsProjectId Returns uint256 defaultSplitsDomain Returns uint256 defaultSplitsGroup Returns uint256 Read​ Function\tDefinitionsupportsInterface Params uint256 _interfaceId Returns bool Write​ Function\tDefinitionreceive Traits payablevirtual setDefaultSplits Traits onlyOwnervirtual Params uint256 _projectIduint256 _domainuint256 _group pay Traits payablevirtual Params uint256 _projectIdaddress _tokenuint256 _amountuint256 _decimalsaddress _beneficiaryuint256 _minReturnedTokensbool _preferClaimedTokensstring _memobytes _metadata addToBalanceOf Traits payablevirtual Params uint256 _projectIdaddress _tokenuint256 _amountuint256 _decimalsstring _memobytes _metadata _payToSplits Traits internalvirtual Params uint256 _splitsProjectIduint256 _splitsDomainuint256 _splitsGroupaddress _tokenuint256 _amountuint256 _decimals","keywords":""},{"title":"setDefaultValues","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/write/setdefaultvalues","content":"setDefaultValues Contract: JBETHERC20ProjectPayer Interface: IJBProjectPayer Step by stepCodeEventsBug bounty Sets the default values that determine how to interact with a protocol treasury when this contract receives ETH directly. Definition​ function setDefaultValues( uint256 _projectId, address payable _beneficiary, bool _preferClaimedTokens, string memory _memo, bytes memory _metadata, bool _defaultPreferAddToBalance ) external virtual override onlyOwner { ... } Arguments: _projectId is the ID of the project whose treasury should be forwarded this contract's received payments._beneficiary is the address that'll receive the project's tokens. _preferClaimedTokens is a flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet. _memo is the memo that'll be used. _metadata is the metadata that'll be sent. _defaultPreferAddToBalance is a flag indicating if received payments should call the pay function or the addToBalance function of a project. Through the onlyOwner modifier, this function can only be accessed by the address that owns this contract.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBProjectPayer interface.The function doesn't return anything. Body​ Set the default project ID if it has changed. // Set the default project ID if it has changed. if (_projectId != defaultProjectId) defaultProjectId = _projectId; Internal references: defaultProjectId Set the default beneficiary if it has changed. // Set the default beneficiary if it has changed. if (_beneficiary != defaultBeneficiary) defaultBeneficiary = _beneficiary; Internal references: defaultBeneficiary Set the default claimed token preference if it has changed. // Set the default claimed token preference if it has changed. if (_preferClaimedTokens != defaultPreferClaimedTokens) defaultPreferClaimedTokens = _preferClaimedTokens; Internal references: defaultPreferClaimedTokens Set the default memo if it has changed. // Set the default memo if it has changed. if (keccak256(abi.encodePacked(_memo)) != keccak256(abi.encodePacked(defaultMemo))) defaultMemo = _memo; Internal references: defaultMemo Set the default metadata if it has changed. // Set the default metadata if it has changed. if (keccak256(abi.encodePacked(_metadata)) != keccak256(abi.encodePacked(defaultMetadata))) defaultMetadata = _metadata; Internal references: defaultMetadata Set the default metadata if it has changed. // Set the add to balance preference if it has changed. if (_defaultPreferAddToBalance != defaultPreferAddToBalance) defaultPreferAddToBalance = _defaultPreferAddToBalance; Internal references: defaultPreferAddToBalance Emit a SetDefaultValues event with all relevant parameters. emit SetDefaultValues( _projectId, _beneficiary, _preferClaimedTokens, _memo, _metadata, _defaultPreferAddToBalance, msg.sender ); Event references: SetDefaultValues","keywords":""},{"title":"SetEnsNameParts","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbprojecthandles/events/setensnameparts","content":"SetEnsNameParts Emitted from: setEnsNamePartsFor Definition​ event SetEnsNameParts( uint256 indexed projectId, string indexed handle, string[] parts, address caller ); projectId is the ID of the project for which the ENS name parts were set. handle is the handle that the set ENS name parts resolves to. parts are the set ENS name parts. caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"splitStore","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/properties/splitsstore","content":"splitStore Contract: JBETHERC20SplitsPayer Interface: IJBSplitsPayer The contract that stores splits for each project. Definition​ /** @notice The contract that stores splits for each project. */ IJBSplitsStore public immutable override splitsStore; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBSplitsPayer interface.","keywords":""},{"title":"supportsInterface","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/read/supportsinterface","content":"supportsInterface Contract: JBETHERC20SplitsPayer Interface: IERC165 Step by stepCodeBug bounty Indicates if this contract adheres to the specified interface. See {IERC165-supportsInterface}. Definition​ function supportsInterface(bytes4 _interfaceId) public view virtual override(JBETHERC20ProjectPayer, IERC165) returns (bool) { ... } Arguments: _interfaceId is the ID of the interface to check for adherance to. The view function can be accessed externally by anyone, and internally within this contract.The view function does not alter state on the blockchain.The function overrides a function definition from the IERC165 interface.The function returns a flag indicating if this contract adheres to the specified interface. Body​ Return true if the provided interface ID is in the list of interfaces this contract adheres to. return _interfaceId == type(IJBSplitsPayer).interfaceId || super.supportsInterface(_interfaceId); ","keywords":""},{"title":"defaultSplitsDomain","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/properties/defaultsplitsgroup","content":"defaultSplitsDomain Contract: JBETHERC20SplitsPayer Interface: IJBSplitsPayer The group within which the default splits are stored. Definition​ /** @notice The group within which the default splits are stored. */ uint256 public override defaultSplitsGroup; The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBSplitsPayer interface.","keywords":""},{"title":"JBETHERC20SplitsPayerDeployer","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/","content":"JBETHERC20SplitsPayerDeployer Deploys JBETHERC20SplitsPayer contracts. Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/JBETHERC20SplitsPayerDeployer.sol Addresses​ Ethereum mainnet: 0x5c3b3a616ce33653AF9fCE1b97823790884aCc04 Ethereum rinkeby: 0x2d7E2f769C22f40e8c8EBFF16677A3f4f0c8bB09 Interfaces​ Name\tDescriptionIJBETHERC20SplitsPayerDeployer\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Events​ Name\tDataDeploySplitsPayer IJBSplitsPayer indexed splitsPayeruint256 indexed defaultSplitsProjectIduint256 defaultSplitsDomainuint256 defaultSplitsGroupIJBSplitStore splitStoreuint256 defaultProjectIdaddress defaultBeneficiarybool defaultPreferClaimedTokensstring defaultMemobytes defaultMetadatabool preferAddToBalanceaddress caller Write​ Function\tDefinitiondeploySplitsPayer Params uint256 defaultSplitsProjectIduint256 _defaultSplitsDomainuint256 _defaultSplitsGroupIJBSplitStore _splitsStoreuint256 _defaultProjectIdaddress _defaultBeneficiarybool _defaultPreferClaimedTokensstring _defaultMemobytes _defaultMetadatabool _preferAddToBalanceaddress _owner Returns IJBSplitsPayer splitsPayer ","keywords":""},{"title":"DeployProjectPayer","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/events/deploysplitspayer","content":"DeployProjectPayer Emitted from: deploySplitsPayer Definition​ event DeploySplitsPayer( IJBSplitsPayer indexed splitsPayer, uint256 defaultSplitsProjectId, uint256 defaultSplitsDomain, uint256 defaultSplitsGroup, IJBSplitsStore splitsStore, uint256 defaultProjectId, address defaultBeneficiary, bool defaultPreferClaimedTokens, string defaultMemo, bytes defaultMetadata, bool preferAddToBalance, address owner, address caller ); splitsPayer is the address of the splits payer contract that was deployed. defaultSplitsProjectId is the project ID to use when looking up splits to distribute between when receiving payments. defaultSplitsDomain is the domain to use when looking up splits to distribute between when receiving payments. defaultSplitsGroup is the group to use when looking up splits to distribute between when receiving payments. splitsStore is a contract that stores splits for each project.defaultProjectId is the ID of the project whose treasury should be forwarded the split payer contract's received payment leftovers after settling splits.defaultBeneficiary is the address that'll receive the project's tokens.defaultPreferClaimedTokens is a flag indicating whether issued tokens should be automatically claimed into the beneficiary's wallet.defaultMemo is the memo that'll be passed along to the emitted event.defaultMetadata are bytes to send along to the project's data source and delegate, if provided.preferAddToBalance is a flag indicating if received payments should be forwarded to the project's addToBalance function or pay function. _owner is the address that owns the project payer contract.caller is the address that issued the transaction within which the event was emitted.","keywords":""},{"title":"_payToSplits","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/write/-_paytosplits","content":"_payToSplits Contract: JBETHERC20SplitsPayer Step by stepCodeEventsBug bounty Split an amount between all splits. Definition​ function _payToSplits( uint256 _splitsProjectId, uint256 _splitsDomain, uint256 _splitsGroup, address _token, uint256 _amount, uint256 _decimals, address _defaultBeneficiary ) internal virtual returns (uint256 leftoverAmount) { ... } Arguments: _splitsProjectId is the ID of the project to which the splits belong._splitsDomain is the splits domain to which the group belongs._splitsGroup is the splits group to pay._token is the token the amonut being split is in._amount is the amount of tokens being split, as a fixed point number. If the _token is ETH, this is ignored and msg.value is used in its place._decimals is the number of decimals in the _amount fixed point number. _defaultBeneficiary is the address that will benefit from any non-specified beneficiaries in splits. The function is private to this contract.The function returns the amount leftover after all splits were paid. Body​ Pay the splits of the specified project, domain, and group. // Pay the splits. leftoverAmount = _payTo( splitsStore.splitsOf(_splitsProjectId, _splitsDomain, _splitsGroup), _token, _amount, _decimals, _defaultBeneficiary ); Internal references: _payTo External references: splitsStoresplitsOf Emit a DistributeToSplitGroup event with the relevant parameters. emit DistributeToSplitGroup(_splitsProjectId, _splitsDomain, _splitsGroup, msg.sender); Event references: DistributeToSplitGroup","keywords":""},{"title":"_pay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20projectpayer/write/-_pay","content":"_pay Contract: JBETHERC20ProjectPayer Step by stepCodeErrorsBug bounty Make a payment to the specified project. Definition​ function _pay( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string memory _memo, bytes memory _metadata ) internal virtual { ... } Arguments: _projectId is the ID of the project that is being paid._token is the token being paid in. Use JBTokens.ETH if paying in ETH._amount is the amount of tokens being paid, as a fixed point number. If the token is ETH, this is ignored and msg.value is used in its place._decimals is the number of decimals in the _amount fixed point number. If the token is ETH, this is ignored and 18 is used in its place, which corresponds to the amount of decimals expected in msg.value._beneficiary is the address who will receive tokens from the payment._minReturnedTokens is the minimum number of project tokens expected in return, as a fixed point number with 18 decimals._preferClaimedTokens is a flag indicating whether the request prefers to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas._memo is a memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate. A data source can alter the memo before emitting in the event and forwarding to the delegate._metadata are bytes to send along to the data source, delegate, and emitted event, if provided. The function is private to this contract.The function doesn't return anything. Body​ Get a reference to the terminal that should be sent the payment by checking for the project's stored primary terminal for the token being paid. // Find the terminal for the specified project. IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_projectId, _token); Internal references: directory External references: primaryTerminalOf Make sure there is a terminal to make a payment towards. // There must be a terminal. if (_terminal == IJBPaymentTerminal(address(0))) revert TERMINAL_NOT_FOUND(); Make sure the number of decimals in the amount being paid matches the number of decimals expected by the terminal. // The amount's decimals must match the terminal's expected decimals. if (_terminal.decimalsForToken(_token) != _decimals) revert INCORRECT_DECIMAL_AMOUNT(); External references: decimalsForToken If the token being paid is an ERC20, approve the terminal to spend the amount of tokens from this terminal. // Approve the `_amount` of tokens from the destination terminal to transfer tokens from this contract. if (_token != JBTokens.ETH) IERC20(_token).approve(address(_terminal), _amount); Library references: JBTokens .ETH External references: approve Keep a reference to the amount to send in the transaction. If the token being paid is ETH, send the value along with the tx. // If the token is ETH, send it in msg.value. uint256 _payableValue = _token == JBTokens.ETH ? _amount : 0; Library references: JBTokens .ETH Send the payment to the terminal with the provided properties. If no beneficiary was specified, set the message sender as the beneficiary. // Send funds to the terminal. // If the token is ETH, send it in msg.value. _terminal.pay{value: _payableValue}( _projectId, _amount, // ignored if the token is JBTokens.ETH. _token, _beneficiary != address(0) ? _beneficiary : msg.sender, _minReturnedTokens, _preferClaimedTokens, _memo, _metadata ); External references: pay","keywords":""},{"title":"JBProjectHandles","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbprojecthandles/","content":"JBProjectHandles Manages reverse records that point from JB project IDs to ENS nodes. If the reverse record of a project ID is pointed to an ENS node with a TXT record matching the ID of that project, then the ENS node will be considered the &quot;handle&quot; for that project. Code​ https://github.com/jbx-protocol/juice-project-handles/blob/main/contracts/JBProjectHandles.sol Addresses​ Ethereum mainnet: `` Ethereum rinkeby: `` Interfaces​ Name\tDescriptionIJBProjectHandles\tGeneral interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules. Inheritance​ Contract\tDescriptionJBOperatable\tIncludes convenience functionality for checking a message sender's permissions before executing certain transactions. Constructor​ /** @param _projects A contract which mints ERC-721's that represent project ownership and transfers. @param _operatorStore A contract storing operator assignments. @param _textResolver The ENS text resolver contract address. */ constructor( IJBProjects _projects, IJBOperatorStore _operatorStore, ITextResolver _textResolver ) JBOperatable(_jbOperatorStore) { projects = _projects; textResolver = _textResolver; } _projects is a contract which mints ERC-721's that represent project ownership and transfers._operatorStore is a contract storing operator assignments._textResolver is the ENS text resolver contract address. Events​ Name\tDataSetEnsNameParts uint256 indexed projectIdstring indexed handlestring[] partsaddress caller Properties​ Name\tDefinitionprojects Returns IJBProjects textResolver Returns ITextResolver TEXT_KEY Returns string Read​ Function\tDefinitionhandleOf Params uint256 _projectId Returns string memory ensNamePartsOf Params uint256 _projectId Returns string[] memory Write​ Function\tDefinitionsetEnsNamePartsFor Traits requirePermission Params uint256 _projectIdstring[] memory _parts","keywords":""},{"title":"_ensNamePartsOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbprojecthandles/properties/-_ensnamepartsof","content":"_ensNamePartsOf Contract: JBProjectHandles​‌ Mapping of project ID to an array of strings that make up an ENS name and its subdomains. [&quot;jbx&quot;, &quot;dao&quot;, &quot;foo&quot;] represents foo.dao.jbx.eth. Definition​ /** @notice Mapping of project ID to an array of strings that make up an ENS name and its subdomains. @dev [&quot;jbx&quot;, &quot;dao&quot;, &quot;foo&quot;] represents foo.dao.jbx.eth. _projectId The ID of the project to get an ENS name for. */ mapping(uint256 =&gt; string[]) internal _ensNamePartsOf; Arguments: _projectId is the ID of the project to get an ENS name for. The resulting function is internal to this contract and its inheriters.","keywords":""},{"title":"projects","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbprojecthandles/properties/projects","content":"projects Contract: JBProjectHandles​‌ Interface: IJBProjectHandles Mints ERC-721's that represent project ownership and transfers. Definition​ /** @notice Mints ERC-721's that represent project ownership and transfers. */ IJBProjects public immutable override projects; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjectHandles interface.","keywords":""},{"title":"TEXT_KEY","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbprojecthandles/properties/textkey","content":"TEXT_KEY Contract: JBProjectHandles​‌ Interface: IJBProjectHandles The key of the ENS text record. Definition​ /** @notice The key of the ENS text record. */ string public constant TEXT_KEY = 'juicebox_project_id'; This value must be hardcoded.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjectHandles interface.","keywords":""},{"title":"setDefaultSplits","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/write/setdefaultsplits","content":"setDefaultSplits Contract: JBETHERC20SplitsPayer Interface: IJBSplitsPayer Step by stepCodeEventsBug bounty Sets the location of the splits that payments this contract receives will be split between. Definition​ function setDefaultSplits( uint256 _projectId, uint256 _domain, uint256 _group ) external virtual override onlyOwner { ... } Arguments: _projectId is the ID of project for which the default splits are stored. _domain is the domain within which the default splits are stored. _group is the group within which the default splits are stored. Through the onlyOwner modifier, this function can only be accessed by the address that owns this contract.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBSplitsPayer interface.The function doesn't return anything. Body​ Set the default splits project ID if it has changed. // Set the default splits project ID if it's changing. if (_projectId != defaultSplitsProjectId) defaultSplitsProjectId = _projectId; Internal references: defaultSplitsProjectId Set the default splits domain if it has changed. // Set the default splits domain if it's changing. if (_domain != defaultSplitsDomain) defaultSplitsDomain = _domain; Internal references: defaultSplitsDomain Set the default splits group if it has changed. // Set the default splits group if it's changing. if (_group != defaultSplitsGroup) defaultSplitsGroup = _group; Internal references: defaultSplitsGroup Emit a SetDefaultSplits event with all relevant parameters. emit SetDefaultSplits(_projectId, _domain, _group, msg.sender); Event references: SetDefaultSplits","keywords":""},{"title":"deploySplitsPayer","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayerdeployer/write/deploysplitspayer","content":"deploySplitsPayer Contract: JBETHERC20SplitsPayerDeployer Interface: IJBETHERC20SplitsPayerDeployer Step by stepCodeEventsBug bounty Allows anyone to deploy a new splits payer contract. Definition​ function deploySplitsPayer( uint256 _defaultSplitsProjectId, uint256 _defaultSplitsDomain, uint256 _defaultSplitsGroup, IJBSplitsStore _splitsStore, uint256 _defaultProjectId, address payable _defaultBeneficiary, bool _defaultPreferClaimedTokens, string memory _defaultMemo, bytes memory _defaultMetadata, bool _defaultPreferAddToBalance, address _owner ) external override returns (IJBSplitsPayer splitsPayer) { ... } Arguments: _defaultSplitsProjectId is the ID of project for which the default splits are stored._defaultSplitsDomain is the splits domain to payout when this contract receives direct payments._defaultSplitsGroup is the splits group to payout when this contract receives direct payments._splitsStore is a contract that stores splits for each project._defaultProjectId is the ID of the project whose treasury should be forwarded the splits payer contract's received payment leftovers after distributing to the default splits group._defaultBeneficiary is the address that'll receive the project's tokens when the project payer receives payments. _defaultPreferClaimedTokens is a flag indicating whether issued tokens from the project payer's received payments should be automatically claimed into the beneficiary's wallet. _defaultMemo is the memo that'll be forwarded with the project payer's received payments. _defaultMetadata is the metadata that'll be forwarded with the project payer's received payments. _defaultPreferAddToBalance is a flag indicating if received payments should call the pay function or the addToBalance function of a project._owner is the address that will own the project payer. The function can be accessed externally by anyone.The function overrides a function definition from theIJBETHERC20SplitsPayerDeployer interface.The function returns the splits payer contract. Body​ Deploy the splits payer contract. // Deploy the splits payer. splitsPayer = new JBETHERC20SplitsPayer( _defaultSplitsProjectId, _defaultSplitsDomain, _defaultSplitsGroup, _splitsStore, _defaultProjectId, _defaultBeneficiary, _defaultPreferClaimedTokens, _defaultMemo, _defaultMetadata, _defaultPreferAddToBalance, _owner ); External references: JBETHERC20SplitsPayer Emit a DeploySplitsPayer event with all relevant parameters. emit DeploySplitsPayer( splitsPayer, _defaultSplitsProjectId, _defaultSplitsDomain, _defaultSplitsGroup, _splitsStore, _defaultProjectId, _defaultBeneficiary, _defaultPreferClaimedTokens, _defaultMemo, _defaultMetadata, _defaultPreferAddToBalance, _owner, msg.sender ); Event references: DeploySplitsPayer","keywords":""},{"title":"receive","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/write/receive","content":"receive Contract: JBETHERC20SplitsPayer Interface: IJBSplitsPayer Step by stepCodeBug bounty Received funds are paid to the default split group using the stored default properties. This function is called automatically when the contract receives an ETH payment. Definition​ receive() external payable virtual override { ... } The function is triggered when the contract receives ETH.The function can be accessed externally by anyone.The function doesn't return anything. Body​ Pay the splits and get a reference to the leftover amount. // Pay the splits and get a reference to the amount leftover. uint256 _leftoverAmount = _payToSplits( defaultSplitsProjectId, defaultSplitsDomain, defaultSplitsGroup, JBTokens.ETH, address(this).balance, 18, // decimals. defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender ); Internal references: defaultSplitsProjectIddefaultSplitsDomaindefaultSplitsGroupdefaultBeneficiary_payToSplits If there's no leftover amount, there's nothing left to do. // If there is no leftover amount, nothing left to pay. if (_leftoverAmount == 0) return; Pay the leftover ETH to the default project ID using the default parameters. Use the addToBalance function if there's a preference to do so. If there's no default project ID, send to the default beneficiary if there is one, otherwise send to the message sender. // If there's a default project ID, try to pay it. if (defaultProjectId != 0) if (defaultPreferAddToBalance) // Pay the project by adding to its balance if prefered. _addToBalanceOf( defaultProjectId, JBTokens.ETH, _leftoverAmount, 18, // decimals. defaultMemo, defaultMetadata ); // Otherwise, issue a payment to the project. else _pay( defaultProjectId, JBTokens.ETH, _leftoverAmount, 18, // decimals. defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender, 0, // min returned tokens. defaultPreferClaimedTokens, defaultMemo, defaultMetadata ); // If no project was specified, send the funds directly to the beneficiary or the msg.sender. else Address.sendValue( defaultBeneficiary != address(0) ? payable(defaultBeneficiary) : payable(msg.sender), _leftoverAmount ); Library references: Address .sendValue(...) JBTokens .ETH Internal references: * [`defaultProjectId`](/zh/dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/defaultprojectid) * [`defaultPreferClaimedTokens`](/zh/dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/defaultpreferclaimedtokens) * [`defaultMemo`](/zh/dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/defaultmemo) * [`defaultMetadata`](/zh/dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/defaultmetadata) * [`defaultBeneficiary`](/zh/dev/api/contracts/or-utilities/jbetherc20projectpayer/properties/defaultbeneficiary) * [`_addToBalanceOf`](/zh/dev/api/contracts/or-utilities/jbetherc20projectpayer/write/-_addtobalanceof) * [`_pay`](/zh/dev/api/contracts/or-utilities/jbetherc20projectpayer/write/-_pay) ","keywords":""},{"title":"textResolver","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbprojecthandles/properties/textresolver","content":"textResolver Contract: JBProjectHandles​‌ Interface: IJBProjectHandles The ENS text resolver contract address. Definition​ /** @notice The ENS text resolver contract address. */ ITextResolver public immutable override textResolver; Once set the value cannot be changed.The resulting view function can be accessed externally by anyone.The resulting function overrides a function definition from the IJBProjectHandles interface.","keywords":""},{"title":"addToBalanceOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/write/addtobalanceof","content":"addToBalanceOf Contract: JBETHERC20SplitsPayer Interface: IJBSplitsPayer Step by stepCodeErrorsEventsBug bounty Add to the balance of the specified project. Definition​ function addToBalanceOf( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, string calldata _memo, bytes calldata _metadata ) public payable virtual override nonReentrant { ... } Arguments: _projectId is the ID of the project that is being paid after._token is the token being paid in._amount is the amount of tokens being paid, as a fixed point number. If the token is ETH, this is ignored and msg.value is used in its place._decimals is the number of decimals in the _amount fixed point number. If the token is ETH, this is ignored and 18 is used in its place, which corresponds to the amount of decimals expected in msg.value._memo is a memo to pass along to the emitted event._metadata is @param extra data to pass along to the terminal. The function can be accessed externally by anyone, or internally from this contract or one that inherits it.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBSplitsPayer interface.The function doesn't return anything. Body​ If the token isn't ETH, make sure ETH wasn't sent to the function, then transfer the amount of tokens from the message sender to this contract. If the token is ETH, override the specified amount and decimals values with with amount of ETH sent to the function, which is denoted as a fixed point number with 18 decimals. // ETH shouldn't be sent if the token isn't ETH. if (address(_token) != JBTokens.ETH) { if (msg.value &gt; 0) revert NO_MSG_VALUE_ALLOWED(); // Transfer tokens to this contract from the msg sender. IERC20(_token).transferFrom(msg.sender, address(this), _amount); } else { // If ETH is being paid, set the amount to the message value, and decimals to 18. _amount = msg.value; _decimals = 18; } Library references: JBTokens .ETH External references: transferFrom Send the funds to the splits and get a reference to the leftover amount. // Pay the splits and get a reference to the amount leftover. uint256 _leftoverAmount = _payToSplits( defaultSplitsProjectId, defaultSplitsDomain, defaultSplitsGroup, _token, _amount, _decimals, defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender ); Internal references: defaultSplitsProjectIddefaultSplitsDomaindefaultSplitsGroupdefaultBeneficiary_payToSplits If there's any leftover amount, add to balance of the specified project. If no project is specified, send the leftover funds to the beneficiary or the msg.sender. // Distribute any leftover amount. if (_leftoverAmount &gt; 0) { // If there's a default project ID, try to add to its balance. if (_projectId != 0) // Add to the project's balance. _addToBalanceOf(_projectId, _token, _leftoverAmount, _decimals, _memo, _metadata); // Otherwise, send a payment to the beneficiary. else { // Transfer the ETH. if (_token == JBTokens.ETH) Address.sendValue( // If there's a default beneficiary, send the funds directly to the beneficiary. Otherwise send to the msg.sender. defaultBeneficiary != address(0) ? defaultBeneficiary : payable(msg.sender), _leftoverAmount ); // Or, transfer the ERC20. else IERC20(_token).transfer( // If there's a default beneficiary, send the funds directly to the beneficiary. Otherwise send to the msg.sender. defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender, _leftoverAmount ); } } Library references: JBTokens .ETH Address .sendValue(...) Internal references: defaultBeneficiary_addToBalanceOf External references: transfer Emit a AddToBalance event with the relevant parameters. emit AddToBalance( _projectId, defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender, _token, _amount, _decimals, _leftoverAmount, _memo, msg.sender ); Event references: AddToBalance","keywords":""},{"title":"JBFee","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbfee","content":"JBFee Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBFee.sol Definition​ /** @member amount The total amount the fee was taken from, as a fixed point number with the same number of decimals as the terminal in which this struct was created. @member fee The percent of the fee, out of MAX_FEE. @member feeDiscount The discount of the fee. @member beneficiary The address that will receive the tokens that are minted as a result of the fee payment. */ struct JBFee { uint256 amount; uint32 fee; uint32 feeDiscount; address beneficiary; } amount is the total amount the fee was taken from, as a fixed point number with the same number of decimals as the terminal in which this struct was created.fee is the percent of the fee, out of JBConstants.MAX_FEE.feeDiscount is the discount of the fee.beneficiary is the address that will receive the tokens that are minted as a result of the fee payment.","keywords":""},{"title":"JBDidPayData","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbdidpaydata","content":"JBDidPayData Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBDidPayData.sol Definition​ /** @member payer The address from which the payment originated. @member projectId The ID of the project for which the payment was made. @member currentFundingCycleConfiguration The configuration of the funding cycle during which the payment is being made. @member amount The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount. @member projectTokenCount The number of project tokens minted for the beneficiary. @member beneficiary The address to which the tokens were minted. @member preferClaimedTokens A flag indicating whether the request prefered to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. @member memo The memo that is being emitted alongside the payment. @member metadata Extra data to send to the delegate. */ struct JBDidPayData { address payer; uint256 projectId; uint256 currentFundingCycleConfiguration; JBTokenAmount amount; uint256 projectTokenCount; address beneficiary; bool preferClaimedTokens; string memo; bytes metadata; } payer is the address from which the payment originated.projectId is the ID of the project for which the payment was made.currentFundingCycleConfiguration is the configuration of the funding cycle during which the payment is being made.amount is the amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.projectTokenCount is the number of project tokens minted for the beneficiary.beneficiary is the address to which the tokens were minted.preferClaimedTokens is a flag indicating whether the request prefered to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract.memo is the memo that is being emitted alongside the payment.metadata is extra data to send to the delegate.","keywords":""},{"title":"JBDidRedeemData","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbdidredeemdata","content":"JBDidRedeemData Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBDidRedeemData.sol Definition​ /** @member holder The holder of the tokens being redeemed. @member projectId The ID of the project with which the redeemed tokens are associated. @member currentFundingCycleConfiguration The configuration of the funding cycle during which the redemption is being made. @member projectTokenCount The number of project tokens being redeemed. @member reclaimedAmount The amount reclaimed from the treasury. Includes the token being reclaimed, the value, the number of decimals included, and the currency of the amount. @member beneficiary The address to which the reclaimed amount will be sent. @member memo The memo that is being emitted alongside the redemption. @member metadata Extra data to send to the delegate. */ struct JBDidRedeemData { address holder; uint256 projectId; uint256 currentFundingCycleConfiguration; uint256 projectTokenCount; JBTokenAmount reclaimedAmount; address payable beneficiary; string memo; bytes metadata; } holder is the holder of the tokens being redeemed.projectId is the ID of the project with which the redeemed tokens are associated.currentFundingCycleConfiguration is the configuration of the funding cycle during which the redemption is being made.projectTokenCount is the number of project tokens being redeemed.reclaimedAmount is the JBTokenAmount reclaimed from the treasury. Includes the token being reclaimed, the value, the number of decimals included, and the currency of the amount.beneficiary is the address to which the reclaimed amount will be sent.memo is the memo that is being emitted alongside the redemption.metadata is extra data to send to the delegate.","keywords":""},{"title":"JBOperatorData","type":0,"sectionRef":"#","url":"dev/api/data-structures/jboperatordata","content":"JBOperatorData Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBGroupedSplits.sol Definition​ /** @member operator The address of the operator. @member domain The domain within which the operator is being given permissions. A domain of 0 is a wildcard domain, which gives an operator access to all domains. @member permissionIndexes The indexes of the permissions the operator is being given. */ struct JBOperatorData { address operator; uint256 domain; uint256[] permissionIndexes; } operator is the address of the operator.domain is the domain within which the operator is being given permissions. A domain of 0 is a wildcard domain, which gives an operator access to all domains.permissionIndexes are the indexes of the permissions the operator is being given.","keywords":""},{"title":"JBGlobalFundingCycleMetadata","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbglobalfundingcyclemetadata","content":"JBGlobalFundingCycleMetadata Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBGlobalFundingCycleMetadata.sol Definition​ /** @member allowSetTerminals A flag indicating if setting terminals should be allowed during this funding cycle. @member allowSetController A flag indicating if setting a new controller should be allowed during this funding cycle. */ struct JBGlobalFundingCycleMetadata { bool allowSetTerminals; bool allowSetController; } allowSetTerminals is a flag indicating if setting terminals should be allowed during this funding cycle.allowSetController is a flag indicating if setting a new controller should be allowed during this funding cycle.","keywords":""},{"title":"JBProjectMetadata","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbprojectmetadata","content":"JBProjectMetadata Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBPayParamsData.sol Definition​ /** @member content The metadata content. @member domain The domain within which the metadata applies. */ struct JBProjectMetadata { string content; uint256 domain; } content is the metadata content.domain is the domain within which the metadata applies.","keywords":""},{"title":"_formatHandle","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbprojecthandles/read/-_formathandle","content":"_formatHandle Contract: JBProjectHandles​‌ Step by stepCodeBug bounty Formats ENS name parts into a handle. Requires a TXT record for the TEXT_KEY that matches the _projectId. Definition​ function _formatHandle(string[] memory _ensNameParts) internal pure returns (string memory _handle) { ... } Arguments: _ensNameParts is the ENS name parts to format into a handle. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function returns the formatted ENS handle. Body​ Get the number of parts there are to iterate over. // Get a reference to the number of parts are in the ENS name. uint256 _partsLength = _ensNameParts.length; Loop through each part, adding the the part first so subdomains show up in order. Add a dot to seperate each subdomain. // Concatenate each name part. for (uint256 _i = 1; _i &lt;= _partsLength; ) { _handle = string(abi.encodePacked(_handle, _ensNameParts[_partsLength - _i])); // Add a dot if this part isn't the last. if (_i &lt; _partsLength) _handle = string(abi.encodePacked(_handle, '.')); unchecked { ++_i; } } ","keywords":""},{"title":"ensNamePartsOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbprojecthandles/read/ensnamepartsof","content":"ensNamePartsOf Contract: JBProjectHandles​‌ Interface: IJBProjectHandles Step by stepCodeBug bounty The parts of the stored ENS name of a project. Definition​ function ensNamePartsOf(uint256 _projectId) external view override returns (string[] memory) { ... } Arguments: _projectId is the ID of the project to get the ENS name of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBProjectHandles interface.The function returns the ENS name parts of a project. Body​ Return the contents of the stored internal variable. return _ensNamePartsOf[_projectId]; Internal references: _ensNamePartsOf","keywords":""},{"title":"JBGroupedSplits","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbgroupedsplits","content":"JBGroupedSplits Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBGroupedSplits.sol Definition​ /** @member group The group indentifier. @member splits The splits to associate with the group. */ struct JBGroupedSplits { uint256 group; JBSplit[] splits; } group is the group indentifier.splits are the splits to associate with the group.","keywords":""},{"title":"_payTo","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/write/-_payto","content":"_payTo Contract: JBETHERC20SplitsPayer Step by stepCodeEventsBug bounty Split an amount between all splits. Definition​ function _payTo( JBSplit[] memory _splits, address _token, uint256 _amount, uint256 _decimals, address _defaultBeneficiary ) internal virtual returns (uint256 leftoverAmount) { ... } Arguments: _splits are the splits._token is the token the amonut being split is in._amount is the amount of tokens being split, as a fixed point number. If the _token is ETH, this is ignored and msg.value is used in its place._decimals is the number of decimals in the _amount fixed point number. _defaultBeneficiary is the address that will benefit from any non-specified beneficiaries in splits. The function is private to this contract.The function returns the amount leftover after all splits were paid. Body​ At first the leftover amount is the full amount. This will be decremented as the splits are iterated on. // Set the leftover amount to the initial balance. leftoverAmount = _amount; Distribute to each split. f there's at least some funds to send to the split, determine where they should go. If the split has an allocator set, send the funds to its allocate function, passing along any relevant params. Otherwise if a projectId is specified in the split, send the payout to that project. Add to the project's balance if the split has a preference to do so, otherwise send a payment and use the split's beneficiary as the address that should receive the project's tokens in return, or use the message sender if a beneficiary wasn't provided. If no project was specified, send the funds directly to the beneficiary address from the split if one was provided. If the split didn't give any routing information, send the amount to the messag sender. Decrement the leftoverAmount once the split is settled. Emit a DistributeToSplit event with the relevant parameters. // Settle between all splits. for (uint256 i = 0; i &lt; _splits.length; i++) { // Get a reference to the split being iterated on. JBSplit memory _split = _splits[i]; // The amount to send towards the split. uint256 _splitAmount = PRBMath.mulDiv( _amount, _split.percent, JBConstants.SPLITS_TOTAL_PERCENT ); if (_splitAmount &gt; 0) { // Transfer tokens to the split. // If there's an allocator set, transfer to its `allocate` function. if (_split.allocator != IJBSplitAllocator(address(0))) { // Create the data to send to the allocator. JBSplitAllocationData memory _data = JBSplitAllocationData( _token, _splitAmount, _decimals, defaultProjectId, 0, _split ); // Approve the `_amount` of tokens for the split allocator to transfer tokens from this contract. if (_token != JBTokens.ETH) IERC20(_token).approve(address(_split.allocator), _splitAmount); // If the token is ETH, send it in msg.value. uint256 _payableValue = _token == JBTokens.ETH ? _splitAmount : 0; // Trigger the allocator's `allocate` function. _split.allocator.allocate{value: _payableValue}(_data); // Otherwise, if a project is specified, make a payment to it. } else if (_split.projectId != 0) { if (_split.preferAddToBalance) _addToBalanceOf( _split.projectId, _token, _splitAmount, _decimals, defaultMemo, defaultMetadata ); else _pay( _split.projectId, _token, _splitAmount, _decimals, _split.beneficiary != address(0) ? _split.beneficiary : _defaultBeneficiary, 0, _split.preferClaimed, defaultMemo, defaultMetadata ); } else { // Transfer the ETH. if (_token == JBTokens.ETH) Address.sendValue( // Get a reference to the address receiving the tokens. If there's a beneficiary, send the funds directly to the beneficiary. Otherwise send to the `_defaultBeneficiary`. _split.beneficiary != address(0) ? _split.beneficiary : payable(_defaultBeneficiary), _splitAmount ); // Or, transfer the ERC20. else { IERC20(_token).transfer( // Get a reference to the address receiving the tokens. If there's a beneficiary, send the funds directly to the beneficiary. Otherwise send to the `_defaultBeneficiary`. _split.beneficiary != address(0) ? _split.beneficiary : _defaultBeneficiary, _splitAmount ); } } // Subtract from the amount to be sent to the beneficiary. leftoverAmount = leftoverAmount - _splitAmount; } emit DistributeToSplit( _splitsProjectId, _splitsDomain, _splitsGroup, _split, _splitAmount, _defaultBeneficiary, msg.sender ); } Library references: JBTokens .ETH Address .sendValue(...) Internal references: _pay_addToBalanceOf External references: approvetransferallocate Event references: DistributeToSplit","keywords":""},{"title":"JBOverflowAllowance","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbfundaccessconstraints","content":"JBOverflowAllowance Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBFundAccessConstraints.sol Definition​ /** @member terminal The terminal within which the distribution limit and the overflow allowance applies. @member token The token for which the fund access constraints apply. @member distributionLimit The amount of the distribution limit, as a fixed point number with the same number of decimals as the terminal within which the limit applies. @member distributionLimitCurrency The currency of the distribution limit. @member overflowAllowance The amount of the allowance, as a fixed point number with the same number of decimals as the terminal within which the allowance applies. @member overflowAllowanceCurrency The currency of the overflow allowance. */ struct JBFundAccessConstraints { IJBPaymentTerminal terminal; address token; uint256 distributionLimit; uint256 distributionLimitCurrency; uint256 overflowAllowance; uint256 overflowAllowanceCurrency; } terminal is the terminal within which the distribution limit and the overflow allowance applies.token is the token for which the fund access constraints apply.distributionLimit is the amount of the distribution limit, as a fixed point number with the same number of decimals as the terminal within which the limit applies.distributionLimitCurrency is the currency of the distribution limit.overflowAllowance is the amount of the allowance, as a fixed point number with the same number of decimals as the terminal within which the allowance applies.overflowAllowanceCurrency is the currency of the overflow allowance.","keywords":""},{"title":"JBFundingCycleData","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbfundingcycledata","content":"JBFundingCycleData Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBFundingCycleData.sol Definition​ /** @member duration The number of seconds the funding cycle lasts for, after which a new funding cycle will start. A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties. If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active – any proposed changes will apply to the subsequent cycle. If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`. @member weight A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on. For example, payment terminals can use this to determine how many tokens should be minted when a payment is received. @member discountRate A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`. If it's 0, each funding cycle will have equal weight. If the number is 90%, the next funding cycle will have a 10% smaller weight. This weight is out of `JBConstants.MAX_DISCOUNT_RATE`. @member ballot An address of a contract that says whether a proposed reconfiguration should be accepted or rejected. It can be used to create rules around how a project owner can change funding cycle parameters over time. */ struct JBFundingCycleData { uint256 duration; uint256 weight; uint256 discountRate; IJBFundingCycleBallot ballot; } duration is the number of seconds the funding cycle lasts for, after which a new funding cycle will start. A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties. If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active – any proposed changes will apply to the subsequent cycle. If no changes are proposed, a funding cycle rolls over to another one with the same properties but new start timestamp and a discounted weight.weight is a fixed point number with 18 decimals that contracts can use to base arbitrary calculations on. For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.discountRate is a percent by how much the weight of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit weight. If it's 0, each funding cycle will have equal weight. If the number is 90%, the next funding cycle will have a 10% smaller weight. This weight is out of JBConstants.MAX_DISCOUNT_RATE.ballot is an address of a contract that says whether a proposed reconfiguration should be accepted or rejected. It can be used to create rules around how a project owner can change funding cycle parameters over time.","keywords":""},{"title":"JBFundingCycleMetadata","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbfundingcyclemetadata","content":"JBFundingCycleMetadata Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBFundingCycleMetadata.sol Definition​ /** @member global Data used globally in non-migratable ecosystem contracts. @member reservedRate The reserved rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_RESERVED_RATE`. @member redemptionRate The redemption rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`. @member ballotRedemptionRate The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`. @member pausePay A flag indicating if the pay functionality should be paused during the funding cycle. @member pauseDistributions A flag indicating if the distribute functionality should be paused during the funding cycle. @member pauseRedeem A flag indicating if the redeem functionality should be paused during the funding cycle. @member pauseBurn A flag indicating if the burn functionality should be paused during the funding cycle. @member allowMinting A flag indicating if the mint functionality should be allowed during the funding cycle. @member allowChangeToken A flag indicating if changing tokens should be allowed during this funding cycle. @member allowTerminalMigration A flag indicating if migrating terminals should be allowed during this funding cycle. @member allowControllerMigration A flag indicating if migrating controllers should be allowed during this funding cycle. @member holdFees A flag indicating if fees should be held during this funding cycle. @member useTotalOverflowForRedemptions A flag indicating if redemptions should use the project's balance held in all terminals instead of the project's local terminal balance from which the redemption is being fulfilled. @member useDataSourceForPay A flag indicating if the data source should be used for pay transactions during this funding cycle. @member useDataSourceForRedeem A flag indicating if the data source should be used for redeem transactions during this funding cycle. @member dataSource The data source to use during this funding cycle. */ struct JBFundingCycleMetadata { JBGlobalFundingCycleMetadata global; uint256 reservedRate; uint256 redemptionRate; uint256 ballotRedemptionRate; bool pausePay; bool pauseDistributions; bool pauseRedeem; bool pauseBurn; bool allowMinting; bool allowChangeToken; bool allowTerminalMigration; bool allowControllerMigration; bool holdFees; bool useTotalOverflowForRedemptions; bool useDataSourceForPay; bool useDataSourceForRedeem; address dataSource; } global is JBGlobalFundingCycleMetadata used globally in non-migratable ecosystem contracts.reservedRate is the reserved rate of the funding cycle. This number is a percentage calculated out of JBConstants.MAX_RESERVED_RATE.redemptionRate is the redemption rate of the funding cycle. This number is a percentage calculated out of JBConstants.MAX_REDEMPTION_RATE.ballotRedemptionRate is the redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of JBConstants.MAX_REDEMPTION_RATE.pausePay is a flag indicating if the pay functionality should be paused during the funding cycle.pauseDistributions is a flag indicating if the distribute functionality should be paused during the funding cycle.pauseRedeem is a flag indicating if the redeem functionality should be paused during the funding cycle.pauseBurn is a flag indicating if the burn functionality should be paused during the funding cycle.allowMinting is a flag indicating if the mint functionality should be allowed during the funding cycle.allowChangeToken is a flag indicating if changing tokens should be allowed during this funding cycle.allowTerminalMigration is a flag indicating if migrating terminals should be allowed during this funding cycle.allowControllerMigration is a flag indicating if migrating controllers should be allowed during this funding cycle.holdFees is a flag indicating if fees should be held during this funding cycle.useTotalOverflowForRedemptions is a flag indicating if redemptions should use the project's balance held in all terminals instead of the project's local terminal balance from which the redemption is being fulfilled.useDataSourceForPay is a flag indicating if the data source should be used for pay transactions during this funding cycle.useDataSourceForRedeem is a flag indicating if the data source should be used for redeem transactions during this funding cycle.dataSource is the data source to use during this funding cycle.","keywords":""},{"title":"pay","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbetherc20splitspayer/write/pay","content":"pay Contract: JBETHERC20SplitsPayer Interface: IJBSplitsPayer Step by stepCodeErrorsEventsBug bounty Make a payment to the specified project after first splitting the amount among the stored default splits. Definition​ function pay( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string calldata _memo, bytes calldata _metadata ) public payable virtual override nonReentrant { ... } Arguments: _projectId is the ID of the project that is being paid after._token is the token being paid in._amount is the amount of tokens being paid, as a fixed point number. If the token is ETH, this is ignored and msg.value is used in its place._decimals is the number of decimals in the _amount fixed point number. If the token is ETH, this is ignored and 18 is used in its place, which corresponds to the amount of decimals expected in msg.value._beneficiary is the address who will receive tokens from the payment._minReturnedTokens is the minimum number of project tokens expected in return, as a fixed point number with 18 decimals._preferClaimedTokens is a flag indicating whether the request prefers to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas._memo is a memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate. A data source can alter the memo before emitting in the event and forwarding to the delegate._metadata are bytes to send along to the data source, delegate, and emitted event, if provided. The function can be accessed externally by anyone, or internally from this contract or one that inherits it.The function can be overriden by inheriting contracts.The function overrides a function definition from the IJBProjectPayer interface.The function doesn't return anything. Body​ If the token isn't ETH, make sure ETH wasn't sent to the function, then transfer the amount of tokens from the message sender to this contract. If the token is ETH, override the specified amount and decimals values with with amount of ETH sent to the function, which is denoted as a fixed point number with 18 decimals. // ETH shouldn't be sent if the token isn't ETH. if (address(_token) != JBTokens.ETH) { if (msg.value &gt; 0) revert NO_MSG_VALUE_ALLOWED(); // Transfer tokens to this contract from the msg sender. IERC20(_token).transferFrom(msg.sender, address(this), _amount); } else { // If ETH is being paid, set the amount to the message value, and decimals to 18. _amount = msg.value; _decimals = 18; } Library references: JBTokens .ETH External references: transferFrom Send the funds to the splits and get a reference to the leftover amount. // Pay the splits and get a reference to the amount leftover. uint256 _leftoverAmount = _payToSplits( defaultSplitsProjectId, defaultSplitsDomain, defaultSplitsGroup, _token, _amount, _decimals, defaultBeneficiary != address(0) ? defaultBeneficiary : msg.sender ); Internal references: defaultSplitsProjectIddefaultSplitsDomaindefaultSplitsGroupdefaultBeneficiary_payToSplits If there's any leftover amount, pay the specified project. If no project is specified, send the leftover funds to the beneficiary or the msg.sender. // Pay any leftover amount. if (_leftoverAmount &gt; 0) { // If there's a default project ID, try to pay it. if (_projectId != 0) { _pay( _projectId, _token, _leftoverAmount, _decimals, _beneficiary != address(0) ? _beneficiary : msg.sender, _minReturnedTokens, _preferClaimedTokens, _memo, _metadata ); } // If no project was specified, send the funds directly to the beneficiary or the msg.sender. else { // Transfer the ETH. if (_token == JBTokens.ETH) Address.sendValue( // If there's a beneficiary, send the funds directly to the beneficiary. Otherwise send to the msg.sender. _beneficiary != address(0) ? payable(_beneficiary) : payable(msg.sender), _leftoverAmount ); // Or, transfer the ERC20. else IERC20(_token).transfer( // If there's a beneficiary, send the funds directly to the beneficiary. Otherwise send to the msg.sender. _beneficiary != address(0) ? _beneficiary : msg.sender, _leftoverAmount ); } } Library references: JBTokens .ETH Address .sendValue(...) Internal references: _pay External references: transfer Emit a Pay event with the relevant parameters. emit Pay( _projectId, _beneficiary != address(0) ? defaultBeneficiary : msg.sender, _token, _amount, _decimals, _leftoverAmount, _minReturnedTokens, _preferClaimedTokens, _memo, _metadata, msg.sender ); Event references: Pay","keywords":""},{"title":"JBPayParamsData","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbpayparamsdata","content":"JBPayParamsData Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBPayParamsData.sol Definition​ /** @member terminal The terminal that is facilitating the payment. @member payer The address from which the payment originated. @member amount The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount. @member projectId The ID of the project being paid. @member currentFundingCycleConfiguration The configuration of the funding cycle during which the payment is being made. @member beneficiary The specified address that should be the beneficiary of anything that results from the payment. @member weight The weight of the funding cycle during which the payment is being made. @member reservedRate The reserved rate of the funding cycle during which the payment is being made. @member memo The memo that was sent alongside the payment. @member metadata Extra data provided by the payer. */ struct JBPayParamsData { IJBPaymentTerminal terminal; address payer; JBTokenAmount amount; uint256 projectId; uint256 currentFundingCycleConfiguration; address beneficiary; uint256 weight; uint256 reservedRate; string memo; bytes metadata; } terminal is the terminal that is facilitating the payment.payer is the address from which the payment originated.amount is the amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.projectId is the ID of the project being paid.currentFundingCycleConfiguration is the configuration of the funding cycle during which the payment is being made.beneficiary is the specified address that should be the beneficiary of anything that results from the payment.weight is the weight of the funding cycle during which the payment is being made.reservedRate is the reserved rate of the funding cycle during which the payment is being made.memo is the memo that was sent alongside the payment.metadata is extra data provided by the payer.","keywords":""},{"title":"Interfaces","type":0,"sectionRef":"#","url":"dev/api/interfaces/","content":"Interfaces","keywords":""},{"title":"IJBAllowanceTerminal","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijballowanceterminal","content":"IJBAllowanceTerminal Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBAllowanceTerminal.sol Definition​ interface IJBAllowanceTerminal { function useAllowanceOf( uint256 _projectId, uint256 _amount, uint256 _currency, address _token, uint256 _minReturnedTokens, address payable _beneficiary, string calldata _memo ) external returns (uint256 netDistributedAmount); } ","keywords":""},{"title":"_namehash","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbprojecthandles/read/-_namehash","content":"_namehash Contract: JBProjectHandles​‌ Step by stepCodeBug bounty Returns a namehash for an ENS name. See https://eips.ethereum.org/EIPS/eip-137. Definition​ function _namehash(string[] memory _ensNameParts) internal pure returns (bytes32 namehash) { ... } Arguments: _ensNameParts is the parts of an ENS name to hash. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function returns the namehash for an ENS name parts. Body​ Encode the trailing &quot;eth&quot; into the hash. // Hash the trailing &quot;eth&quot; suffix. namehash = keccak256(abi.encodePacked(namehash, keccak256(abi.encodePacked('eth')))); Get the number of parts there are to iterate over. // Get a reference to the number of parts are in the ENS name. uint256 _nameLength = _ensNameParts.length; Loop through each part, encoding them each into the hash in sequential order from the base name through each subdomain. // Hash each part. for (uint256 _i = 0; _i &lt; _nameLength; ) { namehash = keccak256( abi.encodePacked(namehash, keccak256(abi.encodePacked(_ensNameParts[_i]))) ); unchecked { ++_i; } } ","keywords":""},{"title":"IJBControllerUtility","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbcontrollerutility","content":"IJBControllerUtility Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBControllerUtility.sol Definition​ interface IJBControllerUtility { function directory() external view returns (IJBDirectory); } ","keywords":""},{"title":"handleOf","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbprojecthandles/read/handleof","content":"handleOf Contract: JBProjectHandles​‌ Interface: IJBProjectHandles Step by stepCodeBug bounty Returns the handle for a project. Requires a TXT record for the TEXT_KEY that matches the _projectId. Definition​ function handleOf(uint256 _projectId) external view override returns (string memory) { ... } Arguments: _projectId is the ID of the project to get the handle of. The view function can be accessed externally by anyone.The view function does not alter state on the blockchain.The function overrides a function definition from the IJBProjectHandles interface.The function returns the project's handle. Body​ Get the project's ENS name parts. // Get a reference to the project's ENS name parts. string[] memory _ensNameParts = _ensNamePartsOf[_projectId]; Internal references: _ensNamePartsOf If there are no name parts, there's no handle. // Return empty string if ENS isn't set. if (_ensNameParts.length == 0) return ''; Get the projectId stored in the TEXT record of the ENS node of the stored ENS name. // Find the projectId that the text record of the ENS name is mapped to. string memory textRecordProjectId = textResolver.text(_namehash(_ensNameParts), TEXT_KEY); Internal references: textResolverTEXT_KEY_namehash External references: text If the project's ID doesn't match the text record, the project has no handle. // Return empty string if text record from ENS name doesn't match projectId. if (keccak256(bytes(textRecordProjectId)) != keccak256(bytes(Strings.toString(_projectId)))) return ''; Library references: Strings .toString(...) Return a handle formatted from the stored ENS name parts. // Format the handle from the name parts. return _formatHandle(_ensNameParts); Internal references: _formatHandle","keywords":""},{"title":"setEnsNamePartsFor","type":0,"sectionRef":"#","url":"dev/api/contracts/or-utilities/jbprojecthandles/write/setensnamepartsfor","content":"setEnsNamePartsFor Contract: JBProjectHandles​‌ Interface: IJBProjectHandles Step by stepCodeErrorsBug bounty Associate an ENS name with a project. [&quot;jbx&quot;, &quot;dao&quot;, &quot;foo&quot;] represents foo.dao.jbx.eth. Only a project's owner or a designated operator can set its ENS name parts. Definition​ function setEnsNamePartsFor(uint256 _projectId, string[] memory _parts) external override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations2.SET_ENS_NAME_FOR) { ... } Arguments: _projectId is the ID of the project to set an ENS handle for._parts is t The function can be accessed externally by anyone.Through the requirePermission modifier, the function is only accessible by the token holder, or from an operator that has been given the JBOperations2.SET_ENS_NAME_FOR permission by the token holder.The resulting function overrides a function definition from the IJBProjectHandles interface.The function doesn't return anything. Body​ Get a reference to the number of parts there are in the name. // Get a reference to the number of parts are in the ENS name. uint256 _partsLength = _parts.length; Make sure there are at least some parts that make up the ENS name. // Make sure there are ens name parts. if (_parts.length == 0) revert NO_PARTS(); Make sure there aren't any empty name parts by looping through each and checking if any of them is an empty string. // Make sure no provided parts are empty. for (uint256 _i = 0; _i &lt; _partsLength; ) { if (bytes(_parts[_i]).length == 0) revert EMPTY_NAME_PART(); unchecked { ++_i; } } Store the name parts. // Store the parts. _ensNamePartsOf[_projectId] = _parts; Internal references: _ensNamePartsOf Emit a SetEnsNameParts event with the relevant parameters. emit SetEnsNameParts(_projectId, _formatHandle(_parts), _parts, msg.sender); Event references: SetEnsNameParts","keywords":""},{"title":"IJBETHERC20ProjectPayerDeployer","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbetherc20projectpayerdeployer","content":"IJBETHERC20ProjectPayerDeployer Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBETHERC20ProjectPayerDeployer.sol Definition​ interface IJBETHERC20ProjectPayerDeployer { event DeployProjectPayer( IJBProjectPayer indexed projectPayer, uint256 defaultProjectId, address defaultBeneficiary, bool defaultPreferClaimedTokens, string defaultMemo, bytes defaultMetadata, bool preferAddToBalance, IJBDirectory directory, address owner, address caller ); function deployProjectPayer( uint256 _defaultProjectId, address payable _defaultBeneficiary, bool _defaultPreferClaimedTokens, string memory _defaultMemo, bytes memory _defaultMetadata, bool _preferAddToBalance, IJBDirectory _directory, address _owner ) external returns (IJBProjectPayer projectPayer); } ","keywords":""},{"title":"JBSplitAllocationData","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbsplitallocationdata","content":"JBSplitAllocationData Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBSplitAllocationData.sol Definition​ /** @member token The token being sent to the split allocator. @member amount The amount being sent to the split allocator, as a fixed point number. @member decimals The number of decimals in the amount. @member projectId The project to which the split belongs. @member group The group to which the split belongs. @member split The split that caused the allocation. */ struct JBSplitAllocationData { address token; uint256 amount; uint256 decimals; uint256 projectId; uint256 group; JBSplit split; } token is the token being sent to the split allocator.amount is the amount being sent to the split allocator, as a fixed point number.decimals is the number of decimals in the amount.projectId is the project to which the split belongs.group is the group to which the split belongs.split is the split that caused the allocation.","keywords":""},{"title":"JBTokenAmount","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbtokenamount","content":"JBTokenAmount Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBTokenAmount.sol Definition​ /* @member token The token the payment was made in. @member value The amount of tokens that was paid, as a fixed point number. @member decimals The number of decimals included in the value fixed point number. @member currency The expected currency of the value. **/ struct JBTokenAmount { address token; uint256 value; uint256 decimals; uint256 currency; } token is the token the payment was made in.value is the amount of tokens that was paid, as a fixed point number.decimals is the number of decimals included in the value fixed point number.currency is the expected currency of the value.","keywords":""},{"title":"JBSplit","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbsplit","content":"JBSplit Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBSplit.sol Definition​ /** @member preferClaimed A flag that only has effect if a projectId is also specified, and the project has a token contract attached. If so, this flag indicates if the tokens that result from making a payment to the project should be delivered claimed into the beneficiary's wallet, or unclaimed to save gas. @member preferAddToBalance A flag indicating if a distribution to a project should prefer triggering it's addToBalance function instead of its pay function. @member percent The percent of the whole group that this split occupies. This number is out of `JBConstants.SPLITS_TOTAL_PERCENT`. @member projectId The ID of a project. If an allocator is not set but a projectId is set, funds will be sent to the protocol treasury belonging to the project who's ID is specified. Resulting tokens will be routed to the beneficiary with the claimed token preference respected. @member beneficiary An address. The role the of the beneficary depends on whether or not projectId is specified, and whether or not an allocator is specified. If allocator is set, the beneficiary will be forwarded to the allocator for it to use. If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it. If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent. @member lockedUntil Specifies if the split should be unchangeable until the specified time, with the exception of extending the locked period. @member allocator If an allocator is specified, funds will be sent to the allocator contract along with all properties of this split. */ struct JBSplit { bool preferClaimed; bool preferAddToBalance; uint256 percent; uint256 projectId; address payable beneficiary; uint256 lockedUntil; IJBSplitAllocator allocator; } preferClaimed Is a flag that only has effect if a projectId is also specified, and the project has a token contract attached. If so, this flag indicates if the tokens that result from making a payment to the project should be delivered claimed into the beneficiary's wallet, or unclaimed to save gas.preferAddToBalance is a flag indicating if a distribution to a project should prefer triggering it's addToBalance function instead of its pay function.percent is the percent of the whole group that this split occupies. This number is out of JBConstants.SPLITS_TOTAL_PERCENT.projectId the ID of a project. If an allocator is not set but a projectId is set, funds will be sent to the protocol treasury belonging to the project who's ID is specified. Resulting tokens will be routed to the beneficiary with the claimed token preference respected.beneficiary is an address. The role the of the beneficary depends on whether or not projectId is specified, and whether or not an allocator is specified. If allocator is set, the beneficiary will be forwarded to the allocator for it to use. If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it. If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.lockedUntil specifies if the split should be unchangeable until the specified time, with the exception of extending the locked period.allocator is if an allocator is specified, funds will be sent to the allocator contract along with all properties of this split.","keywords":""},{"title":"JBBallotState","type":0,"sectionRef":"#","url":"dev/api/enums/jbballotstate","content":"JBBallotState Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/enums/JBBallotState.sol Definition​ enum JBBallotState { Active, Approved, Failed } ","keywords":""},{"title":"IJBETHERC20SplitsPayerDeployer","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbetherc20splitspayerdeployer","content":"IJBETHERC20SplitsPayerDeployer Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBETHERC20SplitsPayerDeployer.sol Definition​ interface IJBETHERC20SplitsPayerDeployer { event DeploySplitsPayer( IJBSplitsPayer indexed splitsPayer, uint256 defaultSplitsProjectId, uint256 defaultSplitsDomain, uint256 defaultSplitsGroup, IJBSplitsStore splitsStore, uint256 defaultProjectId, address defaultBeneficiary, bool defaultPreferClaimedTokens, string defaultMemo, bytes defaultMetadata, bool preferAddToBalance, address owner, address caller ); function deploySplitsPayer( uint256 _defaultSplitsProjectId, uint256 _defaultSplitsDomain, uint256 _defaultSplitsGroup, IJBSplitsStore _splitsStore, uint256 _defaultProjectId, address payable _defaultBeneficiary, bool _defaultPreferClaimedTokens, string calldata _defaultMemo, bytes calldata _defaultMetadata, bool _preferAddToBalance, address _owner ) external returns (IJBSplitsPayer splitsPayer); } ","keywords":""},{"title":"JBFundingCycle","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbfundingcycle","content":"JBFundingCycle Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBFundingCycle.sol Definition​ /** @member number The funding cycle number for the cycle's project. Each funding cycle has a number that is an increment of the cycle that directly preceded it. Each project's first funding cycle has a number of 1. @member configuration The timestamp when the parameters for this funding cycle were configured. This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle. @member basedOn The `configuration` of the funding cycle that was active when this cycle was created. @member start The timestamp marking the moment from which the funding cycle is considered active. It is a unix timestamp measured in seconds. @member duration The number of seconds the funding cycle lasts for, after which a new funding cycle will start. A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties. If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active – any proposed changes will apply to the subsequent cycle. If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`. @member weight A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on. For example, payment terminals can use this to determine how many tokens should be minted when a payment is received. @member discountRate A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`. If it's 0, each funding cycle will have equal weight. If the number is 90%, the next funding cycle will have a 10% smaller weight. This weight is out of `JBConstants.MAX_DISCOUNT_RATE`. @member ballot An address of a contract that says whether a proposed reconfiguration should be accepted or rejected. It can be used to create rules around how a project owner can change funding cycle parameters over time. @member metadata Extra data that can be associated with a funding cycle. */ struct JBFundingCycle { uint256 number; uint256 configuration; uint256 basedOn; uint256 start; uint256 duration; uint256 weight; uint256 discountRate; IJBFundingCycleBallot ballot; uint256 metadata; } number is the funding cycle number for the cycle's project. Each funding cycle has a number that is an increment of the cycle that directly preceded it. Each project's first funding cycle has a number of 1.configuration is the timestamp when the parameters for this funding cycle were configured. This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.basedOn is the configuration of the funding cycle that was active when this cycle was created.start is the timestamp marking the moment from which the funding cycle is considered active. It is a unix timestamp measured in seconds.duration is the number of seconds the funding cycle lasts for, after which a new funding cycle will start. A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties. If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active – any proposed changes will apply to the subsequent cycle. If no changes are proposed, a funding cycle rolls over to another one with the same properties but new start timestamp and a discounted weight.weight is a fixed point number with 18 decimals that contracts can use to base arbitrary calculations on. For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.discountRate is a percent by how much the weight of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit weight. If it's 0, each funding cycle will have equal weight. If the number is 90%, the next funding cycle will have a 10% smaller weight. This weight is out of JBConstants.MAX_DISCOUNT_RATE.ballot is an address of a contract that says whether a proposed reconfiguration should be accepted or rejected. It can be used to create rules around how a project owner can change funding cycle parameters over time.metadata is extra data that can be associated with a funding cycle.","keywords":""},{"title":"IJBFeeGauge","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbfeegauge","content":"IJBFeeGauge Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBFeeGauge.sol Definition​ interface IJBFeeGauge { function currentDiscountFor(uint256 _projectId) external view returns (uint256); } ","keywords":""},{"title":"JBRedeemParamsData","type":0,"sectionRef":"#","url":"dev/api/data-structures/jbredeemparamsdata","content":"JBRedeemParamsData Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/structs/JBRedeemParamsData.sol Definition​ /** @member terminal The terminal that is facilitating the redemption. @member holder The holder of the tokens being redeemed. @member projectId The ID of the project whos tokens are being redeemed. @member currentFundingCycleConfiguration The configuration of the funding cycle during which the redemption is being made. @member tokenCount The proposed number of tokens being redeemed, as a fixed point number with 18 decimals. @member totalSupply The total supply of tokens used in the calculation, as a fixed point number with 18 decimals. @member overflow The amount of overflow used in the reclaim amount calculation. @member reclaimAmount The amount that should be reclaimed by the redeemer using the protocol's standard bonding curve redemption formula. Includes the token being reclaimed, the reclaim value, the number of decimals included, and the currency of the reclaim amount. @member useTotalOverflow If overflow across all of a project's terminals is being used when making redemptions. @member redemptionRate The redemption rate of the funding cycle during which the redemption is being made. @member ballotRedemptionRate The ballot redemption rate of the funding cycle during which the redemption is being made. @member memo The proposed memo that is being emitted alongside the redemption. @member metadata Arbitrary metadata provided by the redeemer. */ struct JBRedeemParamsData { IJBPaymentTerminal terminal; address holder; uint256 projectId; uint256 currentFundingCycleConfiguration; uint256 tokenCount; uint256 totalSupply; uint256 overflow; JBTokenAmount reclaimAmount; bool useTotalOverflow; uint256 redemptionRate; uint256 ballotRedemptionRate; string memo; bytes metadata; } terminal is the terminal that is facilitating the redemption.holder is the holder of the tokens being redeemed.projectId is the ID of the project whos tokens are being redeemed.currentFundingCycleConfiguration is the configuration of the funding cycle during which the payment is being made.tokenCount is the proposed number of tokens being redeemed, as a fixed point number with 18 decimals.totalSupply is the total supply of tokens used in the calculation, as a fixed point number with 18 decimals.overflow is the amount of overflow used in the reclaim amount calculation.reclaimAmount is the amount that should be reclaimed by the redeemer using the protocol's standard bonding curve redemption formula. Includes the token being reclaimed, the reclaim value, the number of decimals included, and the currency of the reclaim amount.useTotalOverflow is if overflow across all of a project's terminals is being used when making redemptions.redemptionRate is the redemption rate of the funding cycle during which the redemption is being made.ballotRedemptionRate is the ballot redemption rate of the funding cycle during which the redemption is being made.memo is the proposed memo that is being emitted alongside the redemption.metadata is extra data provided by the redeemer.","keywords":""},{"title":"IJBFundingCycleBallot","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbfundingcycleballot","content":"IJBFundingCycleBallot Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBFundingCycleBallot.sol Definition​ interface IJBFundingCycleBallot is IERC165 { function duration() external view returns (uint256); function stateOf( uint256 _projectId, uint256 _configuration, uint256 _start ) external view returns (JBBallotState); } ","keywords":""},{"title":"IJBFundingCycleDataSource","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbfundingcycledatasource","content":"IJBFundingCycleDataSource Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBFundingCycleDataSource.sol Definition​ interface IJBFundingCycleDataSource is IERC165 { function payParams(JBPayParamsData calldata _data) external returns ( uint256 weight, string memory memo, IJBPayDelegate delegate ); function redeemParams(JBRedeemParamsData calldata _data) external returns ( uint256 reclaimAmount, string memory memo, IJBRedemptionDelegate delegate ); } ","keywords":""},{"title":"IJBFundingCycleStore","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbfundingcyclestore","content":"IJBFundingCycleStore Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBFundingCycleStore.sol Definition​ interface IJBFundingCycleStore { event Configure( uint256 indexed configuration, uint256 indexed projectId, JBFundingCycleData data, uint256 metadata, uint256 mustStartAtOrAfter, address caller ); event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn); function latestConfigurationOf(uint256 _projectId) external view returns (uint256); function get(uint256 _projectId, uint256 _configuration) external view returns (JBFundingCycle memory); function latestConfiguredOf(uint256 _projectId) external view returns (JBFundingCycle memory fundingCycle, JBBallotState ballotState); function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory fundingCycle); function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory fundingCycle); function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState); function configureFor( uint256 _projectId, JBFundingCycleData calldata _data, uint256 _metadata, uint256 _mustStartAtOrAfter ) external returns (JBFundingCycle memory fundingCycle); } ","keywords":""},{"title":"IJBOperatable","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbmigratable","content":"IJBOperatable Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBOperatable.sol Definition​ interface IJBMigratable { function prepForMigrationOf(uint256 _projectId, address _from) external; } ","keywords":""},{"title":"IJBOperatable","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijboperatable","content":"IJBOperatable Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBOperatable.sol Definition​ interface IJBOperatable { function operatorStore() external view returns (IJBOperatorStore); } ","keywords":""},{"title":"IJBDirectory","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbdirectory","content":"IJBDirectory Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBDirectory.sol Definition​ interface IJBDirectory { event SetController(uint256 indexed projectId, address indexed controller, address caller); event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller); event SetTerminals(uint256 indexed projectId, IJBPaymentTerminal[] terminals, address caller); event SetPrimaryTerminal( uint256 indexed projectId, address indexed token, IJBPaymentTerminal indexed terminal, address caller ); event SetIsAllowedToSetFirstController(address indexed addr, bool indexed flag, address caller); function projects() external view returns (IJBProjects); function fundingCycleStore() external view returns (IJBFundingCycleStore); function controllerOf(uint256 _projectId) external view returns (address); function isAllowedToSetFirstController(address _address) external view returns (bool); function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory); function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external view returns (bool); function primaryTerminalOf(uint256 _projectId, address _token) external view returns (IJBPaymentTerminal); function setControllerOf(uint256 _projectId, address _controller) external; function setTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external; function setPrimaryTerminalOf( uint256 _projectId, address _token, IJBPaymentTerminal _terminal ) external; function setIsAllowedToSetFirstController(address _address, bool _flag) external; } ","keywords":""},{"title":"IJBNFTRewardDelegate","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbnftrewarddelegate","content":"IJBNFTRewardDelegate Code​ https://github.com/jbx-protocol/juice-nft-rewards/blob/main/contracts/interfaces/IJBNFTRewardDelegate.sol Definition​ interface IJBNFTRewardDelegate is ITokenSupplyDetails { event SetContractUri(string indexed contractUri, address caller); event SetBaseUri(string indexed baseUri, address caller); event SetTokenUriResolver(IJBTokenUriResolver indexed newResolver, address caller); function projectId() external view returns (uint256); function directory() external view returns (IJBDirectory); function baseUri() external view returns (string memory); function contractUri() external view returns (string memory); function tokenUriResolver() external view returns (IJBTokenUriResolver); function setContractUri(string calldata _contractMetadataUri) external; function setTokenUriResolver(IJBTokenUriResolver _tokenUriResolverAddress) external; function setBaseUri(string calldata _baseUri) external; } ","keywords":""},{"title":"IJBOperatorStore","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijboperatorstore","content":"IJBOperatorStore Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBOperatorStore.sol Definition​ interface IJBOperatorStore { event SetOperator( address indexed operator, address indexed account, uint256 indexed domain, uint256[] permissionIndexes, uint256 packed ); function permissionsOf( address _operator, address _account, uint256 _domain ) external view returns (uint256); function hasPermission( address _operator, address _account, uint256 _domain, uint256 _permissionIndex ) external view returns (bool); function hasPermissions( address _operator, address _account, uint256 _domain, uint256[] calldata _permissionIndexes ) external view returns (bool); function setOperator(JBOperatorData calldata _operatorData) external; function setOperators(JBOperatorData[] calldata _operatorData) external; } ","keywords":""},{"title":"IJBPayDelegate","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbpaydelegate","content":"IJBPayDelegate Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBPayDelegate.sol Definition​ interface IJBPayDelegate is IERC165 { function didPay(JBDidPayData calldata _data) external; } ","keywords":""},{"title":"IJBPaymentTerminal","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbpaymentterminal","content":"IJBPaymentTerminal Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBPaymentTerminal.sol Definition​ interface IJBPaymentTerminal is IERC165 { function acceptsToken(address _token, uint256 _projectId) external view returns (bool); function currencyForToken(address _token) external view returns (uint256); function decimalsForToken(address _token) external view returns (uint256); // Return value must be a fixed point number with 18 decimals. function currentEthOverflowOf(uint256 _projectId) external view returns (uint256); function pay( uint256 _projectId, uint256 _amount, address _token, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string calldata _memo, bytes calldata _metadata ) external payable returns (uint256 beneficiaryTokenCount); function addToBalanceOf( uint256 _projectId, uint256 _amount, address _token, string calldata _memo, bytes calldata _metadata ) external payable; } ","keywords":""},{"title":"IJBPayoutTerminal","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbpayoutterminal","content":"IJBPayoutTerminal Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBPayoutTerminal.sol Definition​ interface IJBPayoutTerminal { function distributePayoutsOf( uint256 _projectId, uint256 _amount, uint256 _currency, address _token, uint256 _minReturnedTokens, string calldata _memo ) external returns (uint256 netLeftoverDistributionAmount); } ","keywords":""},{"title":"IJBPriceFeed","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbpricefeed","content":"IJBPriceFeed Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBPriceFeed.sol Definition​ interface IJBPriceFeed { function currentPrice(uint256 _targetDecimals) external view returns (uint256); } ","keywords":""},{"title":"IJBPrices","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbprices","content":"IJBPrices Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBPrices.sol Definition​ interface IJBPrices { event AddFeed(uint256 indexed currency, uint256 indexed base, IJBPriceFeed feed); function feedFor(uint256 _currency, uint256 _base) external view returns (IJBPriceFeed); function priceFor( uint256 _currency, uint256 _base, uint256 _decimals ) external view returns (uint256); function addFeedFor( uint256 _currency, uint256 _base, IJBPriceFeed _priceFeed ) external; } ","keywords":""},{"title":"IJBSplitAllocator","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbsplitallocator","content":"IJBSplitAllocator Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBSplitAllocator.sol Definition​ interface IJBSplitAllocator is IERC165 { function allocate(JBSplitAllocationData calldata _data) external payable; } ","keywords":""},{"title":"IJBProjectHandles","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbprojecthandles","content":"IJBProjectHandles Code​ https://github.com/jbx-protocol/juice-project-handles/blob/main/contracts/interfaces/IJBProjectHandles.sol Definition​ interface IJBProjectHandles { event SetEnsNameParts( uint256 indexed projectId, string indexed handle, string[] parts, address caller ); function setEnsNamePartsFor(uint256 _projectId, string[] memory _parts) external; function ensNamePartsOf(uint256 _projectId) external view returns (string[] memory); function TEXT_KEY() external view returns (string memory); function projects() external view returns (IJBProjects); function textResolver() external view returns (ITextResolver); function handleOf(uint256 _projectId) external view returns (string memory); } ","keywords":""},{"title":"IJBProjectPayer","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbprojectpayer","content":"IJBProjectPayer Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBProjectPayer.sol Definition​ interface IJBProjectPayer is IERC165 { event SetDefaultValues( uint256 indexed projectId, address indexed beneficiary, bool preferClaimedTokens, string memo, bytes metadata, bool preferAddToBalance, address caller ); function directory() external view returns (IJBDirectory); function defaultProjectId() external view returns (uint256); function defaultBeneficiary() external view returns (address payable); function defaultPreferClaimedTokens() external view returns (bool); function defaultMemo() external view returns (string memory); function defaultMetadata() external view returns (bytes memory); function defaultPreferAddToBalance() external view returns (bool); function setDefaultValues( uint256 _projectId, address payable _beneficiary, bool _preferClaimedTokens, string memory _memo, bytes memory _metadata, bool _defaultPreferAddToBalance ) external; function pay( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string memory _memo, bytes memory _metadata ) external payable; function addToBalanceOf( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, string memory _memo, bytes memory _metadata ) external payable; receive() external payable; } ","keywords":""},{"title":"IJBProjects","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbprojects","content":"IJBProjects Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBProjects.sol Definition​ interface IJBProjects is IERC721 { event Create( uint256 indexed projectId, address indexed owner, JBProjectMetadata metadata, address caller ); event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller); event SetTokenUriResolver(IJBTokenUriResolver indexed resolver, address caller); function count() external view returns (uint256); function metadataContentOf(uint256 _projectId, uint256 _domain) external view returns (string memory); function tokenUriResolver() external view returns (IJBTokenUriResolver); function createFor(address _owner, JBProjectMetadata calldata _metadata) external returns (uint256 projectId); function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external; function setTokenUriResolver(IJBTokenUriResolver _newResolver) external; } ","keywords":""},{"title":"IJBReconfigurationBufferBallot","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbreconfigurationbufferballot","content":"IJBReconfigurationBufferBallot Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBReconfigurationBufferBallot.sol Definition​ interface IJBReconfigurationBufferBallot is IJBFundingCycleBallot { event Finalize( uint256 indexed projectId, uint256 indexed configuration, JBBallotState indexed ballotState, address caller ); function finalState(uint256 _projectId, uint256 _configuration) external view returns (JBBallotState); function fundingCycleStore() external view returns (IJBFundingCycleStore); function finalize(uint256 _projectId, uint256 _configured) external returns (JBBallotState); } ","keywords":""},{"title":"IJBRedemptionDelegate","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbredemptiondelegate","content":"IJBRedemptionDelegate Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBRedemptionDelegate.sol Definition​ interface IJBRedemptionDelegate is IERC165 { function didRedeem(JBDidRedeemData calldata _data) external; } ","keywords":""},{"title":"IJBTerminalUtility","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbterminalutility","content":"IJBTerminalUtility Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBPaymentTerminalUtility.sol Definition​ interface IJBPaymentTerminalUtility { function directory() external view returns (IJBDirectory); } ","keywords":""},{"title":"IJBRedemptionTerminal","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbredemptionterminal","content":"IJBRedemptionTerminal Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBRedemptionTerminal.sol Definition​ interface IJBRedemptionTerminal { function redeemTokensOf( address _holder, uint256 _projectId, uint256 _count, address _token, uint256 _minReturnedTokens, address payable _beneficiary, string calldata _memo, bytes calldata _metadata ) external returns (uint256 reclaimAmount); } ","keywords":""},{"title":"IJBSingleTokenPaymentTerminal","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbsingletokenpaymentterminal","content":"IJBSingleTokenPaymentTerminal Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBSingleTokenPaymentTerminal.sol Definition​ interface IJBSingleTokenPaymentTerminal is IJBPaymentTerminal { function token() external view returns (address); function currency() external view returns (uint256); function decimals() external view returns (uint256); } ","keywords":""},{"title":"IJBSplitsPayer","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbsplitspayer","content":"IJBSplitsPayer Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBSplitsPayer.sol Definition​ interface IJBSplitsPayer is IERC165 { event SetDefaultSplits( uint256 indexed projectId, uint256 indexed domain, uint256 indexed group, address caller ); event Pay( uint256 indexed projectId, address beneficiary, address token, uint256 amount, uint256 decimals, uint256 leftoverAmount, uint256 minReturnedTokens, bool preferClaimedTokens, string memo, bytes metadata, address caller ); event AddToBalance( uint256 indexed projectId, address beneficiary, address token, uint256 amount, uint256 decimals, uint256 leftoverAmount, string memo, bytes metadata, address caller ); event DistributeToSplitGroup( uint256 indexed projectId, uint256 indexed domain, uint256 indexed group, address caller ); event DistributeToSplit( JBSplit split, uint256 amount, address defaultBeneficiary, address caller ); function defaultSplitsProjectId() external view returns (uint256); function defaultSplitsDomain() external view returns (uint256); function defaultSplitsGroup() external view returns (uint256); function splitsStore() external view returns (IJBSplitsStore); function setDefaultSplits( uint256 _projectId, uint256 _domain, uint256 _group ) external; } ","keywords":""},{"title":"IJBSplitsStore","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbsplitsstore","content":"IJBSplitsStore Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBSplitsStore.sol Definition​ interface IJBSplitsStore { event SetSplit( uint256 indexed projectId, uint256 indexed domain, uint256 indexed group, JBSplit split, address caller ); function projects() external view returns (IJBProjects); function directory() external view returns (IJBDirectory); function splitsOf( uint256 _projectId, uint256 _domain, uint256 _group ) external view returns (JBSplit[] memory); function set( uint256 _projectId, uint256 _domain, JBGroupedSplits[] memory _groupedSplits ) external; } ","keywords":""},{"title":"IJBTokenUriResolver","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbtokenuriresolver","content":"IJBTokenUriResolver Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBTokenUriResolver.sol Definition​ interface IJBTokenUriResolver { function getUri(uint256 _projectId) external view returns (string memory tokenUri); } ","keywords":""},{"title":"IJBController","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbcontroller","content":"IJBController Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBController.sol Definition​ interface IJBController is IERC165 { event LaunchProject(uint256 configuration, uint256 projectId, string memo, address caller); event LaunchFundingCycles(uint256 configuration, uint256 projectId, string memo, address caller); event ReconfigureFundingCycles( uint256 configuration, uint256 projectId, string memo, address caller ); event SetFundAccessConstraints( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, JBFundAccessConstraints constraints, address caller ); event DistributeReservedTokens( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, address beneficiary, uint256 tokenCount, uint256 beneficiaryTokenCount, string memo, address caller ); event DistributeToReservedTokenSplit( uint256 indexed projectId, uint256 indexed domain, uint256 indexed group, JBSplit split, uint256 tokenCount, address caller ); event MintTokens( address indexed beneficiary, uint256 indexed projectId, uint256 tokenCount, uint256 beneficiaryTokenCount, string memo, uint256 reservedRate, address caller ); event BurnTokens( address indexed holder, uint256 indexed projectId, uint256 tokenCount, string memo, address caller ); event Migrate(uint256 indexed projectId, IJBMigratable to, address caller); event PrepMigration(uint256 indexed projectId, address from, address caller); function projects() external view returns (IJBProjects); function fundingCycleStore() external view returns (IJBFundingCycleStore); function tokenStore() external view returns (IJBTokenStore); function splitsStore() external view returns (IJBSplitsStore); function directory() external view returns (IJBDirectory); function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate) external view returns (uint256); function distributionLimitOf( uint256 _projectId, uint256 _configuration, IJBPaymentTerminal _terminal, address _token ) external view returns (uint256 distributionLimit, uint256 distributionLimitCurrency); function overflowAllowanceOf( uint256 _projectId, uint256 _configuration, IJBPaymentTerminal _terminal, address _token ) external view returns (uint256 overflowAllowance, uint256 overflowAllowanceCurrency); function totalOutstandingTokensOf(uint256 _projectId, uint256 _reservedRate) external view returns (uint256); function latestConfiguredFundingCycleOf(uint256 _projectId) external view returns ( JBFundingCycle memory, JBFundingCycleMetadata memory metadata, JBBallotState ); function currentFundingCycleOf(uint256 _projectId) external view returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata); function queuedFundingCycleOf(uint256 _projectId) external view returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata); function launchProjectFor( address _owner, JBProjectMetadata calldata _projectMetadata, JBFundingCycleData calldata _data, JBFundingCycleMetadata calldata _metadata, uint256 _mustStartAtOrAfter, JBGroupedSplits[] memory _groupedSplits, JBFundAccessConstraints[] memory _fundAccessConstraints, IJBPaymentTerminal[] memory _terminals, string calldata _memo ) external returns (uint256 projectId); function launchFundingCyclesFor( uint256 _projectId, JBFundingCycleData calldata _data, JBFundingCycleMetadata calldata _metadata, uint256 _mustStartAtOrAfter, JBGroupedSplits[] memory _groupedSplits, JBFundAccessConstraints[] memory _fundAccessConstraints, IJBPaymentTerminal[] memory _terminals, string calldata _memo ) external returns (uint256 configuration); function reconfigureFundingCyclesOf( uint256 _projectId, JBFundingCycleData calldata _data, JBFundingCycleMetadata calldata _metadata, uint256 _mustStartAtOrAfter, JBGroupedSplits[] memory _groupedSplits, JBFundAccessConstraints[] memory _fundAccessConstraints, string calldata _memo ) external returns (uint256); function issueTokenFor( uint256 _projectId, string calldata _name, string calldata _symbol ) external returns (IJBToken token); function changeTokenOf( uint256 _projectId, IJBToken _token, address _newOwner ) external; function mintTokensOf( uint256 _projectId, uint256 _tokenCount, address _beneficiary, string calldata _memo, bool _preferClaimedTokens, bool _useReservedRate ) external returns (uint256 beneficiaryTokenCount); function burnTokensOf( address _holder, uint256 _projectId, uint256 _tokenCount, string calldata _memo, bool _preferClaimedTokens ) external; function distributeReservedTokensOf(uint256 _projectId, string memory _memo) external returns (uint256); function migrate(uint256 _projectId, IJBMigratable _to) external; } ","keywords":""},{"title":"IJBV1TokenPaymentTerminal","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbv1tokenpaymentterminal","content":"IJBV1TokenPaymentTerminal Code​ https://github.com/jbx-protocol/juice-v1-token-payment-terminal/blob/main/contracts/interfaces/IJBV1TokenPaymentTerminal.sol Definition​ interface IJBV1TokenPaymentTerminal { event SetV1ProjectId(uint256 indexed _projectId, uint256 indexed _v1ProjectId, address caller); event Pay( uint256 indexed projectId, address payer, address beneficiary, uint256 amount, uint256 beneficiaryTokenCount, string memo, address caller ); event releaseV1TokensOf( uint256 indexed projectId, address indexed beneficiary, uint256 unclaimedBalance, uint256 claimedBalance, address caller ); function ticketBooth() external view returns (ITicketBooth); function directory() external view returns (IJBDirectory); function projects() external view returns (IJBProjects); function v1ProjectIdOf(uint256 _projectId) external view returns (uint256); function finalized(uint256 _projectId) external view returns (bool); function setV1ProjectId(uint256 _projectId, uint256 _v1ProjectId) external; function releaseV1TokensOf(uint256 _projectId, address _beneficiary) external; } ","keywords":""},{"title":"JBConstant","type":0,"sectionRef":"#","url":"dev/api/libraries/jbconstants","content":"JBConstant Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/libraries/JBConstants.sol Definition​ library JBConstants { uint256 public constant MAX_RESERVED_RATE = 10000; uint256 public constant MAX_REDEMPTION_RATE = 10000; uint256 public constant MAX_DISCOUNT_RATE = 1000000000; uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000; uint256 public constant MAX_FEE = 1000000000; uint256 public constant MAX_FEE_DISCOUNT = 1000000000; } ","keywords":""},{"title":"JBCurrencies","type":0,"sectionRef":"#","url":"dev/api/libraries/jbcurrencies","content":"JBCurrencies Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/libraries/JBCurrencies.sol Definition​ library JBCurrencies { uint256 public constant ETH = 1; uint256 public constant USD = 2; } ","keywords":""},{"title":"JBSplitsGroup","type":0,"sectionRef":"#","url":"dev/api/libraries/jbsplitsgroups","content":"JBSplitsGroup Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/libraries/JBSplitsGroups.sol Definition​ library JBSplitsGroups { uint256 public constant ETH_PAYOUT = 1; uint256 public constant RESERVED_TOKENS = 2; } ","keywords":""},{"title":"JBFixedPointNumber","type":0,"sectionRef":"#","url":"dev/api/libraries/jbfixedpointnumber","content":"JBFixedPointNumber Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/libraries/JBFixedPointNumber.sol Definition​ library JBFixedPointNumber { function adjustDecimals( uint256 _value, uint256 _decimals, uint256 _targetDecimals ) internal pure returns (uint256) { // If decimals need adjusting, multiply or divide the price by the decimal adjuster to get the normalized result. if (_targetDecimals == _decimals) return _value; else if (_targetDecimals &gt; _decimals) return _value * 10**(_targetDecimals - _decimals); else return _value / 10**(_decimals - _targetDecimals); } } ","keywords":""},{"title":"JBTokens","type":0,"sectionRef":"#","url":"dev/api/libraries/jbtokens","content":"JBTokens Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/libraries/JBTokens.sol Definition​ library JBTokens { /** @notice The ETH token address in Juicebox is represented by 0x000000000000000000000000000000000000EEEe. */ address public constant ETH = address(0x000000000000000000000000000000000000EEEe); } ","keywords":""},{"title":"IJBPayoutRedemptionPaymentTerminal","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbpayoutredemptionpaymentterminal","content":"IJBPayoutRedemptionPaymentTerminal Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBPayoutRedemptionPaymentTerminal.sol Definition​ interface IJBPayoutRedemptionPaymentTerminal is IJBPaymentTerminal, IJBPayoutTerminal, IJBAllowanceTerminal, IJBRedemptionTerminal { event AddToBalance( uint256 indexed projectId, uint256 amount, uint256 refundedFees, string memo, bytes metadata, address caller ); event Migrate( uint256 indexed projectId, IJBPaymentTerminal indexed to, uint256 amount, address caller ); event DistributePayouts( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, address beneficiary, uint256 amount, uint256 distributedAmount, uint256 fee, uint256 beneficiaryDistributionAmount, string memo, address caller ); event UseAllowance( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, address beneficiary, uint256 amount, uint256 distributedAmount, uint256 netDistributedamount, string memo, address caller ); event HoldFee( uint256 indexed projectId, uint256 indexed amount, uint256 indexed fee, uint256 feeDiscount, address beneficiary, address caller ); event ProcessFee( uint256 indexed projectId, uint256 indexed amount, address beneficiary, address caller ); event RefundHeldFees( uint256 indexed projectId, uint256 indexed amount, uint256 indexed refundedFees, uint256 leftoverAmount, address caller ); event Pay( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, address payer, address beneficiary, uint256 amount, uint256 beneficiaryTokenCount, string memo, bytes metadata, address caller ); event DelegateDidPay(IJBPayDelegate indexed delegate, JBDidPayData data, address caller); event RedeemTokens( uint256 indexed fundingCycleConfiguration, uint256 indexed fundingCycleNumber, uint256 indexed projectId, address holder, address beneficiary, uint256 tokenCount, uint256 reclaimedAmount, string memo, address caller ); event DelegateDidRedeem( IJBRedemptionDelegate indexed delegate, JBDidRedeemData data, address caller ); event DistributeToPayoutSplit( uint256 indexed projectId, uint256 indexed domain, uint256 indexed group, JBSplit split, uint256 amount, address caller ); event SetFee(uint256 fee, address caller); event SetFeeGauge(IJBFeeGauge indexed feeGauge, address caller); event SetFeelessAddress(address indexed addrs, bool indexed flag, address caller); function projects() external view returns (IJBProjects); function splitsStore() external view returns (IJBSplitsStore); function directory() external view returns (IJBDirectory); function prices() external view returns (IJBPrices); function store() external view returns (IJBSingleTokenPaymentTerminalStore); function baseWeightCurrency() external view returns (uint256); function payoutSplitsGroup() external view returns (uint256); function heldFeesOf(uint256 _projectId) external view returns (JBFee[] memory); function fee() external view returns (uint256); function feeGauge() external view returns (IJBFeeGauge); function isFeelessTerminal(IJBPaymentTerminal _terminal) external view returns (bool); function migrate(uint256 _projectId, IJBPaymentTerminal _to) external returns (uint256 balance); function processFees(uint256 _projectId) external; function setFee(uint256 _fee) external; function setFeeGauge(IJBFeeGauge _feeGauge) external; function setFeelessAddress(address _address, bool _flag) external; } ","keywords":""},{"title":"Treasury extensions","type":0,"sectionRef":"#","url":"dev/build/treasury-extensions/","content":"Treasury extensions Treasury extensions allow projects to override or extend the default Juicebox protocol functionality with custom contract logic. Data source\tProjects can attach a data source contract address to a funding cycle configuration to provide custom data to be used when processing a payment or a redemption. Build Pay delegate\tProjects can return a pay delegate contract address from its data source that will be called when it receives a payment. Build Redemption delegate\tProjects can return a redemption delegate contract address from its data source that will be called when its token holders redeem. Build Funding cycle ballot\tProjects can attach a ballot contract address to a funding cycle configuration to provide certain conditions which subsequent reconfigurations must adhere to in order to take effect. Build Split allocator\tProjects can route treasury payouts or reserved tokens to an allocator contract that will be called upon distribution. Build","keywords":""},{"title":"JBOperations","type":0,"sectionRef":"#","url":"dev/api/libraries/jboperations","content":"JBOperations Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/libraries/JBOperations.sol Definition​ library JBOperations { uint256 public constant RECONFIGURE = 1; uint256 public constant REDEEM = 2; uint256 public constant MIGRATE_CONTROLLER = 3; uint256 public constant MIGRATE_TERMINAL = 4; uint256 public constant PROCESS_FEES = 5; uint256 public constant SET_METADATA = 6; uint256 public constant ISSUE = 7; uint256 public constant CHANGE_TOKEN = 8; uint256 public constant MINT = 9; uint256 public constant BURN = 10; uint256 public constant CLAIM = 11; uint256 public constant TRANSFER = 12; uint256 public constant REQUIRE_CLAIM = 13; uint256 public constant SET_CONTROLLER = 14; uint256 public constant SET_TERMINALS = 15; uint256 public constant SET_PRIMARY_TERMINAL = 16; uint256 public constant USE_ALLOWANCE = 17; uint256 public constant SET_SPLITS = 18; } ","keywords":""},{"title":"Ballot","type":0,"sectionRef":"#","url":"dev/build/treasury-extensions/ballot","content":"Ballot Before implementing, learn about ballots here. Specs​ A contract can become a funding cycle ballot by adhering to IJBFundingCycleBallot: interface IJBFundingCycleBallot { function duration() external view returns (uint256); function stateOf( uint256 _projectId, uint256 _configuration, uint256 _start ) external view returns (JBBallotState); } There are two functions that must be implemented: duration(...) and stateOf(...). The result of duration(...) is the number of seconds the ballot lasts for from the moment the reconfiguration is proposed. During this time, the protocol automatically interprets the ballot's state as JBBallotState.Active. The result of stateOf(...) returns the JBBallotState. If a configuration is approved and the duration has expired, the JBFundingCycleStore will use it as the project's current funding cycle when it becomes active. Otherwise, it will make a copy of the latest approved cycle to use. When extending the pay functionality with a delegate, the protocol will pass a projectId, a configuration, and a start to the stateOf(...) function. configuration is the identifier of the funding cycle being evaluated, and also the unix timestamp in seconds of when the reconfiguration was proposed. start is the unix timestamp the reconfiguration is scheduled to start at if that reconfiguration is approved. Once the duration(...) has expired, the returned value of stateOf(...) should no longer change. Attaching​ New ballot contracts should be deployed independently. Once deployed, its address can be configured into a project's funding cycle. The ballot will take effect while that funding cycle is active, and will be used for evaluating subsequent reconfigurations.","keywords":""},{"title":"IJBTokenStore","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbtokenstore","content":"IJBTokenStore Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBTokenStore.sol Definition​ interface IJBTokenStore { event Issue( uint256 indexed projectId, IJBToken indexed token, string name, string symbol, address caller ); event Mint( address indexed holder, uint256 indexed projectId, uint256 amount, bool tokensWereClaimed, bool preferClaimedTokens, address caller ); event Burn( address indexed holder, uint256 indexed projectId, uint256 amount, uint256 initialUnclaimedBalance, uint256 initialClaimedBalance, bool preferClaimedTokens, address caller ); event Claim( address indexed holder, uint256 indexed projectId, uint256 initialUnclaimedBalance, uint256 amount, address caller ); event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller); event Change( uint256 indexed projectId, IJBToken indexed newToken, IJBToken indexed oldToken, address owner, address caller ); event Transfer( address indexed holder, uint256 indexed projectId, address indexed recipient, uint256 amount, address caller ); function tokenOf(uint256 _projectId) external view returns (IJBToken); function projectOf(IJBToken _token) external view returns (uint256); function projects() external view returns (IJBProjects); function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256); function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256); function totalSupplyOf(uint256 _projectId) external view returns (uint256); function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result); function requireClaimFor(uint256 _projectId) external view returns (bool); function issueFor( uint256 _projectId, string calldata _name, string calldata _symbol ) external returns (IJBToken token); function changeFor( uint256 _projectId, IJBToken _token, address _newOwner ) external returns (IJBToken oldToken); function burnFrom( address _holder, uint256 _projectId, uint256 _amount, bool _preferClaimedTokens ) external; function mintFor( address _holder, uint256 _projectId, uint256 _amount, bool _preferClaimedTokens ) external; function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external; function claimFor( address _holder, uint256 _projectId, uint256 _amount ) external; function transferFrom( address _holder, uint256 _projectId, address _recipient, uint256 _amount ) external; } ","keywords":""},{"title":"Redemption delegate","type":0,"sectionRef":"#","url":"dev/build/treasury-extensions/redemption-delegate","content":"Redemption delegate Before implementing, learn about delegates here. Specs​ A contract can become a treasury redemption delegate by adhering to IJBRedemptionDelegate: interface IJBRedemptionDelegate { function didRedeem(JBDidRedeemData calldata _data) external; } When extending the redemption functionality with a delegate, the protocol will pass a JBDidRedeemData to the didRedeem(...) function: struct JBDidRedeemData { address holder; uint256 projectId; uint256 currentFundingCycleConfiguration; uint256 projectTokenCount; JBTokenAmount reclaimedAmount; address payable beneficiary; string memo; bytes metadata; } struct JBTokenAmount { address token; uint256 value; uint256 decimals; uint256 currency; } The msg.sender to the delegate will be the payment terminal that facilitated the redemption. In payment terminals based on the JBPayoutRedemptionPaymentTerminal, such as JBETHPaymentTerminal's and JBERC20PaymentTerminal's, the redemption delegate hook gets called before the reclaimed amount is sent to the redemption beneficiary, but after all internal accounting has been updated. View the docs. Make sure to only allow trusted contracts to access the didPay(...) transaction. Attaching​ New delegate contracts should be deployed independently. Once deployed, its address can be returned from a data source hook. See how to build a data source for more.","keywords":""},{"title":"JBGlobalFundingCycleMetadataResolver","type":0,"sectionRef":"#","url":"dev/api/libraries/jbglobalfundingcyclemetadataresolver","content":"JBGlobalFundingCycleMetadataResolver Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/libraries/JBGlobalFundingCycleMetadataResolver.sol Definition​ library JBGlobalFundingCycleMetadataResolver { function setTerminalsAllowed(uint8 _data) internal pure returns (bool) { return (_data &amp; 1) == 1; } function setControllerAllowed(uint8 _data) internal pure returns (bool) { return ((_data &gt;&gt; 1) &amp; 1) == 1; } /** @notice Pack the global funding cycle metadata. @param _metadata The metadata to validate and pack. @return packed The packed uint256 of all global metadata params. The first 8 bits specify the version. */ function packFundingCycleGlobalMetadata(JBGlobalFundingCycleMetadata memory _metadata) internal pure returns (uint256 packed) { // allow set terminals in bit 0. if (_metadata.allowSetTerminals) packed |= 1; // allow set controller in bit 1. if (_metadata.allowSetController) packed |= 1 &lt;&lt; 1; } /** @notice Expand the global funding cycle metadata. @param _packedMetadata The packed metadata to expand. @return metadata The global metadata object. */ function expandMetadata(uint8 _packedMetadata) internal pure returns (JBGlobalFundingCycleMetadata memory metadata) { return JBGlobalFundingCycleMetadata( setTerminalsAllowed(_packedMetadata), setControllerAllowed(_packedMetadata) ); } } ","keywords":""},{"title":"JBOperations2","type":0,"sectionRef":"#","url":"dev/api/libraries/jboperations2","content":"JBOperations2 Code​ https://github.com/jbx-protocol/juice-project-handles/blob/main/contracts/libraries/JBOperations2.sol Definition​ library JBOperations2 { uint256 public constant SET_ENS_NAME_FOR = 19; } ","keywords":""},{"title":"IJBToken","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbtoken","content":"IJBToken Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBToken.sol Definition​ interface IJBToken { function decimals() external view returns (uint8); function totalSupply(uint256 _projectId) external view returns (uint256); function balanceOf(address _account, uint256 _projectId) external view returns (uint256); function mint( uint256 _projectId, address _account, uint256 _amount ) external; function burn( uint256 _projectId, address _account, uint256 _amount ) external; function approve( uint256, address _spender, uint256 _amount ) external; function transfer( uint256 _projectId, address _to, uint256 _amount ) external; function transferFrom( uint256 _projectId, address _from, address _to, uint256 _amount ) external; function transferOwnership(uint256 _projectId, address _newOwner) external; } ","keywords":""},{"title":"Ballot","type":0,"sectionRef":"#","url":"dev/learn/glossary/ballot","content":"Ballot What everyone needs to know​ A project's funding cycle reconfigurations can vary widely. Custom ballots can be useful to keep changes in check.A ballot contract must implement a function that tells the world if the state of a proposed reconfiguration is active, approved, or failed, as defined in JBBallotState.If a reconfiguration fails to be approved by a ballot, it will not be used. Instead, a copy of the current funding cycle will be used. What you'll want to know if you're building​ A ballot is a custom contract that adheres to the IJBFundingCycleBallot interface, which can be attached to a project's funding cycles to create restrictive conditions according to which proposed funding cycle reconfigurations must follow in order to take effect.A ballot can be specified in a funding cycle through the JBController.launchProjectFor(...) or JBController.reconfigureFundingCyclesOf(...) transactions.If a ballot is active, the funding cycle's ballot redemption rate will be used instead of its standard redemption rate. Get started building ballots.","keywords":""},{"title":"Project NFT","type":0,"sectionRef":"#","url":"dev/build/project-nft","content":"Project NFT Anyone can build on the JBProjects NFT contract. This allows developers to write new contracts which use JBProjects NFTs to manage permissions in a standardized way, and allows any project using Juicebox payment terminals to access your contracts, and vice versa. Create a project​ Instead of calling JBController.launchProjectFor(...) to create a project, configure its first funding cycle, and attach payment terminals and a juicebox controller contract to it in the same transaction, JBProjects can be minted independently to represent ownership over projects with subsequent capabilities attached later on. To create a project, call JBProjects.createFor(...). The JBProjectMetadata structure allows arbitrary metadata to be mapped to any namespace domain. juicebox.money metadata uses a domain of 0 to store its formatted metadata. function createFor(address _owner, JBProjectMetadata calldata _metadata) external override returns (uint256 projectId) { ... } struct JBProjectMetadata { string content; uint256 domain; } View project info Launching a project will mint a new NFT in the JBProjects contract. The owner can be found using JBProjects.ownerOf(...). function ownerOf(uint256 _projectId) external returns (address owner) { ... } The project's metadata can be found using JBProjects.metadataContentOf(...). function metadataContentOf(uint256 _projectId, uint256 _domain) external view returns (string memory) { ... } Once a project has been created, new metadata can be added by calling JBProjects.metadataContentOf(...). function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external override requirePermission(ownerOf(_projectId), _projectId, JBOperations.SET_METADATA) { ... } The project can set a new token URI by calling JBProjects.setTokenUriResolver(...). function setTokenUriResolver(IJBTokenUriResolver _newResolver) external override onlyOwner { ... } Attaching application-specific functionality​ Project owners can configure their first funding cycle for their JBProject, attach payment terminals, and set all other standard juicebox project properties by calling JBController.launchFundingCyclesFor(...). Most Juicebox protocol contracts are generic utilities for any JBProject owner, meaning stored data tends to me mapped from project IDs, and functionality that affects a project tends to be exposed only to the project's owner or a operator address specified by the project's owner. function launchFundingCyclesFor( uint256 _projectId, JBFundingCycleData calldata _data, JBFundingCycleMetadata calldata _metadata, uint256 _mustStartAtOrAfter, JBGroupedSplits[] calldata _groupedSplits, JBFundAccessConstraints[] memory _fundAccessConstraints, IJBPaymentTerminal[] memory _terminals, string calldata _memo ) external virtual override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE) returns (uint256 configuration) { ... } ","keywords":""},{"title":"Administration","type":0,"sectionRef":"#","url":"dev/learn/administration","content":"Administration The protocol has very minimal global governance. The following are the only global functions that can be accessed by a privileged administrating address, initially the JuiceboxDAO multisig, a 9 of 14 multisig voted in by JBX members: JBProjects.setTokenUriResolver(...) Allows the owner of the JBProjects contract to provide and change the IJBTokenUriResolver used to resolve metadata for project NFTs in its tokenURI(...) function. JBPrices.addFeedFor(...) Allows the owner of the JBPrices contract to add new price feeds used to convert amounts denoted in one currency to another. Once added, a price feed cannot be removed. JBDirectory.setIsAllowedToSetFirstController(...) Allows the owner of the JBDirectory contract to add/remove addresses that can set a project's first controller on its behalf. JBETHPaymentTerminal.setFee(...) Allows the owner of the JBETHPaymentTerminal (or any other terminal inheriting from JBPayoutRedemptionPaymentTerminal) to change the protocol fee incurred when projects distribute their treasury funds outside of the protocol ecosystem. The max fee is 5%. JBETHPaymentTerminal.setFeeGauge(...) Allows the owner of the JBETHPaymentTerminal (or any other terminal inheriting from JBPayoutRedemptionPaymentTerminal) to change the fee gauge used to provide fee discounts on a per-project basis. JBETHPaymentTerminal.setFeelessAddress(...) Allows the owner of the JBETHPaymentTerminal (or any other terminal inheriting from JBPayoutRedemptionPaymentTerminal) to add/remove any other address used by other projects to/from a list of address to which distributed funds can be sent without incurring protocol fees, and from which funds can be added back to the project's balance without refunding held fees. Ownership for each contract is managed independently and can be transferred to a new owner by the current owner.","keywords":""},{"title":"Scaffold JB Hackathon","type":0,"sectionRef":"#","url":"dev/hackathon","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Scaffold JB Hackathon","url":"dev/hackathon#overview","content":"Hackathon starts 12:00 EDT, July 1st.Submissions close at 18:00 EDT, July 14th. Submit here.Over $10,000 in rewards, distributed based on a JokeDAO token vote.Collaboration between Juicebox DAO, Buidl Guidl, and JokeDAO. "},{"title":"Criteria​","type":1,"pageTitle":"Scaffold JB Hackathon","url":"dev/hackathon#criteria","content":"Make an interesting project! Criteria is subjective and up to token recipients. Our wish list: A scaffold-eth starter kit for buidling a Juicebox project frontend.A Juicebox protocol extension starter kit. See this repo.A scaffold-eth NFT branch that sends funds to a Juicebox treasury. See tiles.artA Nouns clone: A sequential tokenID nft auction every x hours that pipes funds into a Juicebox treasury.An all-in-one multisig.lol + Juicebox interface, with full read/write.A buidl-guidl-centric dapp for managing the group's Juicebox treasury.A nifty.ink fork which sends funds to a Juicebox treasury. See what others are building in the Team Finder spreadsheet. "},{"title":"Rules​","type":1,"pageTitle":"Scaffold JB Hackathon","url":"dev/hackathon#rules","content":"All projects must use scaffold-eth, Juicebox v2, and an open source license. "},{"title":"Timeline​","type":1,"pageTitle":"Scaffold JB Hackathon","url":"dev/hackathon#timeline","content":"12:00 EDT, July 1st: the hackathon begins! 12:00 EDT, July 5th: Hackathon Twitter spaces with @nnnnicholas and @austingriffith. 13:00 EDT, July 6th: live build on YouTube with @nnnnicholas and @austingriffith. 18:00 EDT, July 14th: hackathon submissions close, and the showcase livestream starts. 19:00 EDT, July 14th: a JokeDAO vote will open. Voting tokens will be airdropped to anybody who has donated to Buidl Guidl's Juicebox project. Voting tokens will also be distributed to active Buidl Guidl, JuiceboxDAO, and JokeDAO contributors. 19:00 EDT, July 15th: voting closes. Half of the ETH in Buidl Guidl's Juicebox treasury will be distributed to hackathon entrants—an entrant which receives 10% of votes will receive 10% of the funds! "},{"title":"Helpful Links​","type":1,"pageTitle":"Scaffold JB Hackathon","url":"dev/hackathon#helpful-links","content":"Looking for teammates? Join the Telegram and visit the Team Finder spreadsheet. Also check the 🏰-hackathon channel in the Juicebox Discord server.Scaffold ETH DocsJuicebox Docs. The Learn and Build sections are great starting places.Juice SDK, a JavaScript SDK for the Juicebox Protocol.buidlguidl.com and juicebox.money.Buidl Guidl Juicebox Project!@buidlguidl and @juiceboxETH on Twitter. "},{"title":"About​","type":1,"pageTitle":"Scaffold JB Hackathon","url":"dev/hackathon#about","content":"scaffold-eth provides an off-the-shelf stack for rapid prototyping on Ethereum, giving developers access to state-of-the-art tools to quickly learn and ship an Ethereum-based dApp. Juicebox helps people confidently run programmable and community funded treasuries from startup to scale, openly on Ethereum. "},{"title":"Data source","type":0,"sectionRef":"#","url":"dev/build/treasury-extensions/data-source","content":"Data source Before implementing, learn about data sources here. Specs​ A contract can become a treasury data source by adhering to IJBFundingCycleDataSource: interface IJBFundingCycleDataSource { function payParams(JBPayParamsData calldata _data) external view returns ( uint256 weight, string memory memo, IJBPayDelegate delegate ); function redeemParams(JBRedeemParamsData calldata _data) external view returns ( uint256 reclaimAmount, string memory memo, IJBRedemptionDelegate delegate ); } There are two functions that must be implemented, payParams(...) and redeemParams(...). Either one can be left empty if the intent is to only extend the treasury's pay functionality or redeem functionality. Pay​ When extending the pay functionality with a data source, the protocol will pass a JBPayParamsData to the payParams(...) function: struct JBPayParamsData { IJBPaymentTerminal terminal; address payer; JBTokenAmount amount; uint256 projectId; uint256 currentFundingCycleConfiguration; address beneficiary; uint256 weight; uint256 reservedRate; string memo; bytes metadata; } struct JBTokenAmount { address token; uint256 value; uint256 decimals; uint256 currency; } Using these params, the data source's payParams(...) function is responsible for either reverting or returning a few bits of information: weight is a fixed point number with 18 decimals that the protocol can use to base arbitrary calculations on. For example, payment terminals based on the JBPayoutRedemptionPaymentTerminal, such as JBETHPaymentTerminal's and JBERC20PaymentTerminal's, use the weight to determine how many project tokens to mint when a project receives a payment (see the calculation). By default, the protocol will use the weight of the project's current funding cycle, which is provided to the data source function in JBPayParamsData.weight. Increasing the weight will mint more tokens and decreasing the weight will mint fewer tokens, both as a function of the amount paid. Return the JBPayParamsData.weight value if no altered functionality is desired.memo is a string emitted within the Pay event and sent along to any delegate that this function also returns. By default, the protocol will use the memo directly passed in by the payer, which is provided to this data source function in JBPayParamsData.memo. Return the JBPayParamsData.memo value if no altered functionality is desired.delegate is the address of a contract that adheres to IJBPayDelegate whose didPay(...) function will be called once the protocol finishes its standard payment routine. Check out how to build a pay delegate for more details. If the same contract is being used as the data source and the pay delegate, return address(this). Return the zero address if no additional functionality is desired. The payParams(...) function can also revert if it's presented with any conditions it does not want to accept payments under. The payParams(...) function has implicit permission to JBController.mintTokensOf(...) for the project. Redeem​ When extending redeem functionality with a data source, the protocol will pass a JBRedeemParamsData to the redeemParams(...) function: struct JBRedeemParamsData { IJBPaymentTerminal terminal; address holder; uint256 projectId; uint256 currentFundingCycleConfiguration; uint256 tokenCount; uint256 totalSupply; uint256 overflow; JBTokenAmount reclaimAmount; bool useTotalOverflow; uint256 redemptionRate; uint256 ballotRedemptionRate; string memo; bytes metadata; } Using these params, the data source's redeemParams(...) function is responsible for either reverting or returning a few bits of information: reclaimAmount is the amount of tokens in the treasury that the terminal should send out to the redemption beneficiary as a result of burning the amount of project tokens tokens specified in JBRedeemParamsData.tokenCount, as a fixed point number with the same amount of decimals as JBRedeemParamsData.decimals. By default, the protocol will use a reclaim amount determined by the standard protocol bonding curve based on the redemption rate the project has configured into its current funding cycle, which is provided to the data source function in JBRedeemParamsData.reclaimAmount. Return the JBRedeemParamsData.reclaimAmount value if no altered functionality is desired.memo is a string emitted within the RedeemTokens event and sent along to any delegate that this function also returns. By default, the protocol will use the memo passed in directly by the redeemer, which is provided to this data source function in JBRedeemParamsData.memo. Return the JBRedeemParamsData.memo value if no altered functionality is desired.delegate is the address of a contract that adheres to IJBRedemptionDelegate whose didRedeem(...) function will be called once the protocol finishes its standard redemption routine (but before the reclaimed amount is sent to the beneficiary). Check out how to build a redemption delegate for more details. If the same contract is being used as the data source and the redemption delegate, return address(this). Return the zero address if no additional functionality is desired. The redeemParams(...) function can also revert if it's presented with any conditions it does not want to accept redemptions under. Attaching​ New data source contracts should be deployed independently. Once deployed, its address can be configured into a project's funding cycle metadata to take effect while that funding cycle is active. Additionally, the metadata's useDataSourceForPay and/or useDataSourceForRedeem should be set to true if the respective data source hook should be referenced by the protocol. Examples​ import '@openzeppelin/contracts/token/ERC721/ERC721.sol'; import '@jbx-protocol/contracts-v2/contracts/interfaces/IJBFundingCycleDataSource.sol'; contract AllowlistDataSource is IJBFundingCycleDataSource { error NOT_ALLOWED(); mapping(address =&gt; bool) allowed; function payParams(JBPayParamsData calldata _data) external view override returns ( uint256 weight, string memory memo, IJBPayDelegate delegate ) { if (!allowed[_data.payer]) revert NOT_ALLOWED(); // Forward the recieved weight and memo, and use no delegate. return (_data.weight, _data.memo, IJBPayDelegate(address(0))); } // This is unused but needs to be included to fulfill IJBFundingCycleDataSource. function redeemParams(JBRedeemParamsData calldata _data) external pure override returns ( uint256 reclaimAmount, string memory memo, IJBRedemptionDelegate delegate ) { // Return the default values. return (_data.reclaimAmount.value, _data.memo, IJBRedemptionDelegate(address(0))); } } ","keywords":""},{"title":"Pay delegate","type":0,"sectionRef":"#","url":"dev/build/treasury-extensions/pay-delegate","content":"Pay delegate Before implementing, learn about delegates here. Specs​ A contract can become a treasury pay delegate by adhering to IJBPayDelegate: interface IJBPayDelegate { function didPay(JBDidPayData calldata _data) external; } When extending pay functionality with a delegate, the protocol will pass a JBDidPayData to the didPay(...) function: struct JBDidPayData { address payer; uint256 projectId; uint256 currentFundingCycleConfiguration; JBTokenAmount amount; uint256 projectTokenCount; address beneficiary; bool preferClaimedTokens; string memo; bytes metadata; } struct JBTokenAmount { address token; uint256 value; uint256 decimals; uint256 currency; } The msg.sender to the delegate will be the payment terminal that facilitated the payment. In payment terminals based on the JBPayoutRedemptionPaymentTerminal, such as JBETHPaymentTerminal's and JBERC20PaymentTerminal's, the pay delegate hook gets called after the project's tokens have been minted and distributed. View the docs. Make sure to only allow trusted contracts to access the didPay(...) transaction. Attaching​ New delegate contracts should be deployed independently. Once deployed, its address can be returned from a data source hook. See how to build a data source for more. Examples​ import '@openzeppelin/contracts/token/ERC721/ERC721.sol'; import '@jbx-protocol/contracts-v2/contracts/interfaces/IJBFundingCycleDataSource.sol'; import '@jbx-protocol/contracts-v2/contracts/interfaces/IJBPayDelegate.sol'; import '@jbx-protocol/contracts-v2/contracts/structs/JBTokenAmount.sol'; contract NFTPayDelegate is ERC721, IJBFundingCycleDataSource, IJBPayDelegate { error INVALID_PAYMENT_EVENT(); IJBDirectory directory; uint256 projectId; JBTokenAmount contributionThreshold; uint256 supply; // This contract can be used as a funding cycle data source to ensure its didPay function is called once the payment has gone through. function payParams(JBPayParamsData calldata _data) external view override returns ( uint256 weight, string memory memo, IJBPayDelegate delegate ) { // Forward the recieved weight and memo, and use this contract as a pay delegate. return (_data.weight, _data.memo, IJBPayDelegate(address(this))); } // This is unused but needs to be included to fulfill IJBFundingCycleDataSource. function redeemParams(JBRedeemParamsData calldata _data) external pure override returns ( uint256 reclaimAmount, string memory memo, IJBRedemptionDelegate delegate ) { // Return the default values. return (_data.reclaimAmount.value, _data.memo, IJBRedemptionDelegate(address(0))); } constructor(IJBDirectory _directory, uint256 _projectId, JBTokenAmount _contributionThreshold, string calldata _name, string calldata _symbol) ERC721(_name, _symbol) { directory = _directory; projectId = _projectId; }, // Called once the payment has gone through if the project's current funding cycle is using a data source that returns this delegate. function didPay(JBDidPayData calldata _data) external override { // Make sure the caller is a terminal of the project, and the call is being made on behalf of an interaction with the correct project. if ( !directory.isTerminalOf(projectId, IJBPaymentTerminal(msg.sender)) || _data.projectId != projectId ) revert INVALID_PAYMENT_EVENT(); // Make the contribution is being made in the expected token. if (_data.amount.token != contributionThreshold.token) return; // Make sure the values use the same number of decimals. if (_data.amount.decimals &lt; contributionThreshold.decimals) return; // Make sure the threshold is met. if (_data.amount.value &lt; contributionThreshold.value) return; uint256 _tokenId = ++supply; _mint(_data.beneficiary, _tokenId); } } ","keywords":""},{"title":"Data source","type":0,"sectionRef":"#","url":"dev/learn/glossary/data-source","content":"Data source What everyone needs to know​ A data source contract is a way of providing extensions to a treasury that either override or augment the default JBPayoutRedemptionPaymentTerminal functionality.A data source contract can be used to provide custom data to the JBPayoutRedemptionPaymentTerminal.pay(...) transaction and/or the JBPayoutRedemptionPaymentTerminal.redeemTokensOf(...) transaction.A data source is passed contextual information from the transactions, from which it can derive custom data for the protocol to use to affect subsequent behaviors in the pay and redeem transactions. Contextual information from the pay transaction is passed to the data source in the form of JBPayParamsData , and contextual information from the redeem transaction is passed to the data source in the form of JBRedeemParamsData.Data sources can revert under custom circumstances, which can be used to create a gated treasury, max token supply, min contribution amount, etc.A data source is responsible for specifying any delegate hooks that should be triggered after the core functionality of a pay(...) or redeemTokensOf(...) transaction executes successfully.Each IJBPaymentTerminal fork can leverage data sources in unique ways. What you'll want to know if you're building​ A data source must adhere to the IJBFundingCycleDataSource interface.A data source contract can be specified in a funding cycle, along with flags that indicate if the funding cycle should useDataSourceForPay and/or useDataSourceForRedeem. These are set either in JBController.launchProjectFor(...) or JBController.reconfigureFundingCyclesOf(...).A funding cycle's data source is called upon in JBSingleTokenPaymentTerminalStore.recordPaymentFrom(...) and in JBSingleTokenPaymentTerminalStore.recordRedemptionFor(...).A data source has implicit permisions to JBController.mintTokensFor(...) on a project's behalf. If a data source is not specified in a funding cycle, or if flags aren't explicitly set, default protocol data will be used. Get started building data sources.","keywords":""},{"title":"JBFundingCycleMetadataResolver","type":0,"sectionRef":"#","url":"dev/api/libraries/jbfundingcyclemetadataresolver","content":"JBFundingCycleMetadataResolver Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/libraries/JBFundingCycleMetadataResolver.sol Definition​ library JBFundingCycleMetadataResolver { function global(JBFundingCycle memory _fundingCycle) internal pure returns (JBGlobalFundingCycleMetadata memory metadata) { return JBGlobalFundingCycleMetadataResolver.expandMetadata(uint8(_fundingCycle.metadata &gt;&gt; 8)); } function reservedRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) { return uint256(uint16(_fundingCycle.metadata &gt;&gt; 24)); } function redemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) { // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs. return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata &gt;&gt; 40)); } function ballotRedemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) { // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs. return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata &gt;&gt; 56)); } function payPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return ((_fundingCycle.metadata &gt;&gt; 72) &amp; 1) == 1; } function distributionsPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return ((_fundingCycle.metadata &gt;&gt; 73) &amp; 1) == 1; } function redeemPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return ((_fundingCycle.metadata &gt;&gt; 74) &amp; 1) == 1; } function burnPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return ((_fundingCycle.metadata &gt;&gt; 75) &amp; 1) == 1; } function mintingAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return ((_fundingCycle.metadata &gt;&gt; 76) &amp; 1) == 1; } function changeTokenAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return ((_fundingCycle.metadata &gt;&gt; 77) &amp; 1) == 1; } function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return ((_fundingCycle.metadata &gt;&gt; 78) &amp; 1) == 1; } function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return ((_fundingCycle.metadata &gt;&gt; 79) &amp; 1) == 1; } function shouldHoldFees(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return ((_fundingCycle.metadata &gt;&gt; 80) &amp; 1) == 1; } function useTotalOverflowForRedemptions(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return ((_fundingCycle.metadata &gt;&gt; 81) &amp; 1) == 1; } function useDataSourceForPay(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return (_fundingCycle.metadata &gt;&gt; 82) &amp; 1 == 1; } function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle) internal pure returns (bool) { return (_fundingCycle.metadata &gt;&gt; 83) &amp; 1 == 1; } function dataSource(JBFundingCycle memory _fundingCycle) internal pure returns (address) { return address(uint160(_fundingCycle.metadata &gt;&gt; 84)); } /** @notice Pack the funding cycle metadata. @param _metadata The metadata to validate and pack. @return packed The packed uint256 of all metadata params. The first 8 bits specify the version. */ function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata) internal pure returns (uint256 packed) { // version 1 in the bits 0-7 (8 bits). packed = 1; // global metadta in bits 8-23 (16 bits). packed |= JBGlobalFundingCycleMetadataResolver.packFundingCycleGlobalMetadata(_metadata.global) &lt;&lt; 8; // reserved rate in bits 24-39 (16 bits). packed |= _metadata.reservedRate &lt;&lt; 24; // redemption rate in bits 40-55 (16 bits). // redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs. packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.redemptionRate) &lt;&lt; 40; // ballot redemption rate rate in bits 56-71 (16 bits). // ballot redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs. packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.ballotRedemptionRate) &lt;&lt; 56; // pause pay in bit 72. if (_metadata.pausePay) packed |= 1 &lt;&lt; 72; // pause tap in bit 73. if (_metadata.pauseDistributions) packed |= 1 &lt;&lt; 73; // pause redeem in bit 74. if (_metadata.pauseRedeem) packed |= 1 &lt;&lt; 74; // pause burn in bit 75. if (_metadata.pauseBurn) packed |= 1 &lt;&lt; 75; // allow minting in bit 76. if (_metadata.allowMinting) packed |= 1 &lt;&lt; 76; // allow change token in bit 77. if (_metadata.allowChangeToken) packed |= 1 &lt;&lt; 77; // allow terminal migration in bit 78. if (_metadata.allowTerminalMigration) packed |= 1 &lt;&lt; 78; // allow controller migration in bit 79. if (_metadata.allowControllerMigration) packed |= 1 &lt;&lt; 79; // hold fees in bit 80. if (_metadata.holdFees) packed |= 1 &lt;&lt; 80; // useTotalOverflowForRedemptions in bit 81. if (_metadata.useTotalOverflowForRedemptions) packed |= 1 &lt;&lt; 81; // use pay data source in bit 82. if (_metadata.useDataSourceForPay) packed |= 1 &lt;&lt; 82; // use redeem data source in bit 83. if (_metadata.useDataSourceForRedeem) packed |= 1 &lt;&lt; 83; // data source address in bits 84-243. packed |= uint256(uint160(address(_metadata.dataSource))) &lt;&lt; 84; } /** @notice Expand the funding cycle metadata. @param _fundingCycle The funding cycle having its metadata expanded. @return metadata The metadata object. */ function expandMetadata(JBFundingCycle memory _fundingCycle) internal pure returns (JBFundingCycleMetadata memory metadata) { return JBFundingCycleMetadata( global(_fundingCycle), reservedRate(_fundingCycle), redemptionRate(_fundingCycle), ballotRedemptionRate(_fundingCycle), payPaused(_fundingCycle), distributionsPaused(_fundingCycle), redeemPaused(_fundingCycle), burnPaused(_fundingCycle), mintingAllowed(_fundingCycle), changeTokenAllowed(_fundingCycle), terminalMigrationAllowed(_fundingCycle), controllerMigrationAllowed(_fundingCycle), shouldHoldFees(_fundingCycle), useTotalOverflowForRedemptions(_fundingCycle), useDataSourceForPay(_fundingCycle), useDataSourceForRedeem(_fundingCycle), dataSource(_fundingCycle) ); } } ","keywords":""},{"title":"Delegate","type":0,"sectionRef":"#","url":"dev/learn/glossary/delegate","content":"Delegate What everyone needs to know​ A delegate contract is a way of providing extensions to a treasury that augments the default JBPayoutRedemptionPaymentTerminal behavior.Pay delegates include a custom didPay(...) hook that will execute after all of the default protocol pay logic has successfully executed in the terminal contract. The hook is passed a bunch of contextual information via a JBDidPayData data structure.Redemption delegates include a custom didRedeem(...) hook that will execute after all of the default protocol redeem logic has successfully executed in the terminal contract. The hook is passed a bunch of contextual information via a JBDidRedeemData data structure. The didRedeem(...) hook gets called before any reclaimed tokens are transferred out of the terminal contract.Each IJBPaymentTerminal fork can leverage delegates in unique ways. What you'll want to know if you're building​ There are two types of delegates: IJBPayDelegates and IJBRedemptionDelegates. Any contract that adheres to these interfaces can be used as a delegate in a project's funding cycles.Delegate contracts to use should be specified by the funding cycle's dataSource.The IJBPayDelegate's didPay(...) hook is triggered in JBPayoutRedemptionPaymentTerminal._pay(...), and the IJBRedemptionDelegate's didRedeem(...) hook is triggered in JBPayoutRedemptionPaymentTerminal.redeemTokensOf(...).The redemption delegate hook is called before funds are dispersed. Get started building pay delegates. Get started building redemption delegates.","keywords":""},{"title":"Architecture","type":0,"sectionRef":"#","url":"dev/learn/architecture","content":"Architecture The protocol is made up of 7 core contracts and 3 surface contracts. Core contracts store all the independent components that make the protocol work.Surface contracts glue core contracts together and manage funds. Anyone can write new surface contracts for projects to use. Core contracts​ The first two core contracts are self explanatory. They store the core opinionated components of the protocol. JBTokenStore manages token minting and burning for all projects.JBFundingCycleStore manages funding cycle configurations and scheduling. Funding cycles are represented as a JBFundingCycle data structure. The next few are a little more generic. They don't know anything specific to the ecosystem, and are open for use by other protocols or future extensions. JBProjects manages and tracks ownership over projects, which are represented as ERC-721 tokens. The protocol uses this to enforce permissions needed to access several project-oriented transactions. JBSplitsStore stores information about how arbitrary distributions should be split. The information is represented as a JBSplit data structure. The surface contracts currently use these to split up payout distributions and reserved token distributions. JBPrices manages and normalizes price feeds of various currencies. The protocol uses this to allow projects to do their accounting in any number of currencies, but manage all funds in ETH or other assets regardless of accounting denomination. JBOperatorStore stores operator permissions for all addresses. Addresses can give permissions to any other address to take specific indexed actions on their behalf, while confining the permissions to an arbitrary number of domain namespaces. The protocol uses this to allow project owners and token holders to give other EOAs or contracts permission to take certain administrative actions on their behalf. This is useful for encouraging a composable ecosystem where proxy contracts can perform actions on an address's behalf as a lego block. JBDirectory keeps a reference of which terminal contracts each project is currently accepting funds through, and which controller contract is managing each project's tokens and funding cycles. Surface contracts​ There are currently 3 surface contracts that manage how projects manage funds and define how all core contracts should be used together. Anyone can write new surface contracts for projects to use. JBController stitches together funding cycles and project tokens, allowing for restricted control, accounting, and token management.JBPayoutRedemptionPaymentTerminal manages all inflows (pay, addToBalanceOf) and outflows (distributePayoutsOf, useAllowanceOf, redeemTokensOf) of funds. This is an abstract implementation that can be used by any number of payment terminals, such as JBETHPaymentTerminal's and JBERC20PaymentTerminal's.JBSingleTokenPaymentTerminalStore manages accounting data on behalf of payment terminals that manage balances of only one token type. The abstract JBPayoutRedemptionPaymentTerminal implements the IJBPaymentTerminal interface to provide outflow mechanics, and JBETHPaymentTerminal and JBERC20PaymentTerminal in-turn extend the JBPayoutRedemptionPaymentTerminal to provide scoped inflow/outflow environments for specific tokens. Projects are welcome to roll their own IJBPaymentTerminal implementations to accept funds through. This can be useful to accept other tokens as payment, bypass protocol fees, or attempt some other funky design. A project can add/remove terminals from the core JBDirectory contract using JBDirectory.setTerminalsOf(...) if its current funding cycle is configured to allow doing so. Likewise, a project can bring its own contract to serve as its controller. A project's controller is the only contract that has direct access to manipulate its tokens and funding cycles. A project can set its controller from the core JBDirectory contract using JBDirectory.setControllerOf(...) if its current funding cycle is configured to allow doing so. Bonus utility contracts​ JBETHERC20ProjectPayer provides utilities to pay a project. Inheriting this contract is useful for contracts that wish to route funds to a treasury while specifying the token beneficiary, memo, and other contextual information alongside. Instances of this contract can also be deployed as stand-alone addresses that will forward funds received directly to a project's treasury.JBETHERC20ProjectPayerDeployer provides a function to deploy new stand-alone JBETHERC20ProjectPayers. JBETHERC20SplitsPayer provides utilities to pay a group of splits. Inheriting this contract is useful for contracts that wish to route funds to a group of splits while specifying contextual information alongside. Instances of this contract can also be deployed as stand-alone addresses that will forward funds received directly to a group of splits.JBETHERC20SplitsPayerDeployer provides a function to deploy new stand-alone JBETHERC20SplitsPayers. JBProjectHandles lets project owners attach an ENS name as a project handle. Front ends can use a project's handle in place of its project ID, and indexers can use events to make the Juicebox project directory searchable and filterable. ","keywords":""},{"title":"Discount rate","type":0,"sectionRef":"#","url":"dev/learn/glossary/discount-rate","content":"Discount rate What everyone needs to know​ A discount rate is a percentage configured on each funding cycle that determines by how much the subsequent cycle's weight (i.e. exchange rate) should decrease compared to the funding cycle for which the discount rate is set.A discount rate is only applied if a new weight isn't explicitly set in an upcoming funding cycle reconfiguration.A discount rate can be used to automatically decrease token issuance over time. Funding cycles with higher discountRates and/or shorter durations will have token issuance decrease faster than those with smaller discountRates and/or longer durations. What you'll want to know if you're building​ A discount rate can be specified in a funding cycle through the JBController.launchProjectFor(...) or JBController.reconfigureFundingCyclesOf(...) transactions.","keywords":""},{"title":"Split allocator","type":0,"sectionRef":"#","url":"dev/build/treasury-extensions/split-allocator","content":"Split allocator Before implementing, learn about allocators here, and splits here. Specs​ A contract can become a split allocator by adhering to IJBSplitAllocator: interface IJBSplitAllocator { function allocate(JBSplitAllocationData calldata _data) external payable; } When extending payout distribution or reserved token distribution functionality with an allocator, the protocol will pass a JBSplitAllocationData to the allocate(...) function: struct JBSplitAllocationData { address token; uint256 amount; uint256 decimals; uint256 projectId; uint256 group; JBSplit split; } struct JBSplit { bool preferClaimed; bool preferAddToBalance; uint256 percent; uint256 projectId; address payable beneficiary; uint256 lockedUntil; IJBSplitAllocator allocator; } The msg.sender to the allocator will either be the payment terminal that facilitated the payout distribution, or the controller that facilitated the reserved tokens distribution. In payment terminals based on the JBPayoutRedemptionPaymentTerminal, such as JBETHPaymentTerminal's and JBERC20PaymentTerminal's, the allocator hook gets called while the payouts are being distributed to splits. View the docs. If the allocation is coming from an ETH payment terminal such as JBETHPaymentTerminal, the ETH will be included in the call to allocate(...). If the allocation is coming from an ERC20 payment terminal such as JBERC20PaymentTerminal, the tokens will be pre-approved for the allocator contract to transfer them to it. Make sure to initiate the transfer, and make sure to not leave allocated tokens stuck in the allocator contract.If the allocation is coming from a controller such as JBController distributing reserved tokens, the tokens will be minted pre-distributed to the allocator's address. If the split's preferClaimed property is true and the project has a token a contract attached, the tokens will be minted directly to the allocator contract. Otherwise, they will be allocated in the JBTokenStore as unclaimed tokens from which the allocator can then claimFor(...) itself or transferFrom(...) itself to another address. Make sure to not leave allocated tokens stuck in the allocator contract or unclaimed in the JBTokenStore contract. Attaching​ New allocator contracts should be deployed independently. Once deployed, its address can be configured into a project's payout splits or reserved token splits so that any distribution triggered while the funding cycle is active sends the relevant token to the allocator contract's allocate(...) hook.","keywords":""},{"title":"Getting started","type":0,"sectionRef":"#","url":"dev/build/getting-started","content":"Getting started Import​ Add the protocol files to the project. # command line npm install @jbx-protocol/contracts-v2 If referencing from typescript: const contract = require(`@jbx-protocol/contracts-v2/deployments/${network}/${contractName}.json`) If referencing from a contract: import '@jbx-protocol/contracts-v2/contracts/[file-path].sol' Now what​ From here, you can build the following: Basics - Interact with the protocol's basic functionality. Useful for building front-ends. Pay a project - Deploy or inherit from a contract that makes it easy to forward funds to Juicebox projects. Split payments - Deploy or inherit from a contract that makes it easy to forward funds to groups of splits whose members are either addresses, Juicebox projects, or arbitrary contracts that inherit from IJBSplitAllocator. Program a treasury - Get familiar with the configurable properties available when launching a project. Program project permissions - Build custom Juicebox Project NFT logic to create your own project access controls. Program treasury extensions - Create custom contractual rules defining what happens when a project receives funds, and under what conditions funds can leave the treasury during a funding cycle.","keywords":""},{"title":"IJBPaymentTerminal","type":0,"sectionRef":"#","url":"dev/api/interfaces/ijbsingletokenpaymentterminalstore","content":"IJBPaymentTerminal Code​ https://github.com/jbx-protocol/juice-contracts-v2/blob/main/contracts/interfaces/IJBSingleTokenPaymentTerminalStore.sol Definition​ interface IJBSingleTokenPaymentTerminalStore { function fundingCycleStore() external view returns (IJBFundingCycleStore); function directory() external view returns (IJBDirectory); function prices() external view returns (IJBPrices); function balanceOf(IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId) external view returns (uint256); function usedDistributionLimitOf( IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId, uint256 _fundingCycleNumber ) external view returns (uint256); function usedOverflowAllowanceOf( IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId, uint256 _fundingCycleConfiguration ) external view returns (uint256); function currentOverflowOf(IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId) external view returns (uint256); function currentTotalOverflowOf( uint256 _projectId, uint256 _decimals, uint256 _currency ) external view returns (uint256); function currentReclaimableOverflowOf( IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId, uint256 _tokenCount, bool _useTotalOverflow ) external view returns (uint256); function currentReclaimableOverflowOf( uint256 _projectId, uint256 _tokenCount, uint256 _totalSupply, uint256 _overflow ) external view returns (uint256); function recordPaymentFrom( address _payer, JBTokenAmount memory _amount, uint256 _projectId, uint256 _baseWeightCurrency, address _beneficiary, string calldata _memo, bytes memory _metadata ) external returns ( JBFundingCycle memory fundingCycle, uint256 tokenCount, IJBPayDelegate delegate, string memory memo ); function recordRedemptionFor( address _holder, uint256 _projectId, uint256 _tokenCount, string calldata _memo, bytes calldata _metadata ) external returns ( JBFundingCycle memory fundingCycle, uint256 reclaimAmount, IJBRedemptionDelegate delegate, string memory memo ); function recordDistributionFor( uint256 _projectId, uint256 _amount, uint256 _currency, ) external returns (JBFundingCycle memory fundingCycle, uint256 distributedAmount); function recordUsedAllowanceOf( uint256 _projectId, uint256 _amount, uint256 _currency, ) external returns (JBFundingCycle memory fundingCycle, uint256 withdrawnAmount); function recordAddedBalanceFor(uint256 _projectId, uint256 _amount) external; function recordMigration(uint256 _projectId) external returns (uint256 balance); } ","keywords":""},{"title":"Project payer","type":0,"sectionRef":"#","url":"dev/build/utilities/project-payer","content":"Project payer JBETHERC20ProjectPayer contracts make it easy to route funds to projects' treasuries from other contracts or within inheriting contracts. This is useful for routing funds to a Juicebox treasury within other contracts such as an NFT's minting function, or creating contracts that will automatically route any received funds to a project's treasury with preconfigured parameters to send along with the payment. The JBETHERC20ProjectPayer can be inherited from any contract to facilitate internal transactions to Juicebox treasuries in ETH or any ERC-20, assuming the project is using a payment terminal that accepts the tokens. They can also be deployed as standalone project payer copies using JBProjectPayerDeployer. Inheriting JBProjectPayer​ Inheriting from JBETHERC20ProjectPayer will give a contract access to a public JBProjectPayer.pay(...) function, a public JBProjectPayer.addToBalanceOf(...) function, an internal JBProjectPayer._pay(...) function, and an internal JBProjectPayer._addToBalanceOf(...) function. These can be used from within the contract to route funds to a Juicebox treasury while specifying all relevant parameters to contextualize the payment. Use the internal versions if the inheriting contract has already handled receiving the funds being forwarded. Follow instructions in Getting started to import the JBProjectPayer files into a project. function pay( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string calldata _memo, bytes calldata _metadata ) public payable virtual override {} function addToBalanceOf( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, string calldata _memo bytes calldata _metadata ) public payable virtual override {} function _pay( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string memory _memo, bytes memory _metadata ) internal virtual {} function _addToBalanceOf( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, string memory _memo, string memory _metadata ) internal virtual {} If your contract does not wish to route payments received via the native receive interaction to a Juicebox treasury, all default constructor arguments can be left as null values. The contract will revert any payment received. Deploying project payers​ Instances of the JBETHERC20ProjectPayer contract can also be deployed as stand-alone forwarders of payments to Juicebox treasuries. A new project payer can be deployed using JBProjectPayerDeployer.deployProjectPayer(...). function deployProjectPayer( uint256 _defaultProjectId, address payable _defaultBeneficiary, bool _defaultPreferClaimedTokens, string memory _defaultMemo, bytes memory _defaultMetadata, bool _defaultPreferAddToBalance, IJBDirectory _directory, address _owner ) external override returns (IJBProjectPayer projectPayer) { ... } Examples​ import '@openzeppelin/contracts/token/ERC721/ERC721.sol'; import '@jbx-protocol/contracts-v2/contracts/JBETHERC20ProjectPayer.sol'; contract NFTProjectPayer is ERC721, JBETHERC20ProjectPayer { uint256 projectId; constructor(uint256 _projectId, IJBDirectory _directory, address _owner) JBETHERC20ProjectPayer(0, address(0), false, &quot;&quot;, bytes(0), false, _directory, _owner) { projectId = _projectId; }, // Minting an NFT routes funds to the juicebox treasury and mints project tokens for msg.sender. Use addToBalance if you don't want tokens minted. function mint(uint256 _tokenId) external payable override { _mint(msg.sender, _tokenId); _pay(_projectId, JBTokens.ETH, msg.value, 18, msg.sender, 0, false, &quot;I love buffalos&quot;, bytes('')); // _addToBalance(_projectId, JBTokens.ETH, msg.value, 18, &quot;I love buffalos&quot;, bytes(0)); } } ","keywords":""},{"title":"Splits payer","type":0,"sectionRef":"#","url":"dev/build/utilities/splits-payer","content":"Splits payer JBETHERC20SplitsPayer contracts make it easy to route funds to a group of splits from other contracts or within inheriting contracts. This is useful for routing funds to a number of Juicebox project treasuries and other addresses within other contracts such as an NFT marketplaces. The JBETHERC20SplitsPayer can be inherited from any contract to facilitate internal transactions to split groups in ETH or any ERC-20, assuming the projects in the split group are using a payment terminal that accepts the tokens. They can also be deployed as standalone splits payer copies using JBSplitsPayerDeployer. Inheriting JBSplitsPayer​ Inheriting from JBETHERC20SplitsPayer will give a contract access to a public JBSplitsPayer.pay(...) function, a public JBSplitsPayer.addToBalanceOf(...) function, and two functions JBSplitsPayer._payToSplits(...) and JBSplitsPayer._payTo(...). These can be used from within the contract to route funds to a group of splits while specifying where leftover funds should go. Use the internal function if the inheriting contract has already handled receiving the funds being forwarded. Follow instructions in Getting started to import the JBSplitsPayer files into a project. function pay( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string calldata _memo, bytes calldata _metadata ) public payable virtual override nonReentrant {} function addToBalanceOf( uint256 _projectId, address _token, uint256 _amount, uint256 _decimals, string calldata _memo, bytes calldata _metadata ) public payable virtual override nonReentrant {} function _payToSplits( uint256 _splitsProjectId, uint256 _splitsDomain, uint256 _splitsGroup, address _token, uint256 _amount, uint256 _decimals ) internal virtual returns (uint256 leftoverAmount) {} function _payTo( JBSplit[] memory _splits, address _token, uint256 _amount, uint256 _decimals, address _defaultBeneficiary ) internal virtual returns (uint256 leftoverAmount) { ... } If your contract does not wish to route payments received via the native receive interaction to a group of splits, all default constructor arguments can be left as null values. The contract will revert any payment received. Deploying splits payers​ Instances of the JBETHERC20SplitsPayer contract can also be deployed as standalone forwarders of payments to split groups. A new splits payer can be deployed using JBSplitsPayerDeployer.deploySplitsPayer(...). function deploySplitsPayer( uint256 _defaultSplitsProjectId, uint256 _defaultSplitsDomain, uint256 _defaultSplitsGroup, IJBSplitsStore _splitsStore, uint256 _defaultProjectId, address payable _defaultBeneficiary, bool _defaultPreferClaimedTokens, string memory _defaultMemo, bytes memory _defaultMetadata, bool _defaultPreferAddToBalance, address _owner ) external override returns (IJBSplitsPayer splitsPayer) { ... } Examples​ import '@openzeppelin/contracts/token/ERC721/ERC721.sol'; import '@jbx-protocol/contracts-v2/contracts/JBETHERC20SplitsPayer.sol'; contract NFTSplitsPayer is ERC721, JBETHERC20SplitsPayer { JBSplits[] splits; constructor(JBSplits[] memory _splits, IJBDirectory _directory, address _owner) JBETHERC20ProjectPayer(0, address(0), false, &quot;&quot;, bytes(0), false, _directory, _owner) { splits = _splits; }, // Minting an NFT routes funds to a group of splits, and mints project tokens for msg.sender for splits that route to project treasuries. function mint(uint256 _tokenId,) external payable override { _mint(msg.sender, _tokenId); uint256 _numSplits = splits.length; JBSplits[] memory _splitsWithBeneficiary; // Set the msg.sender to be the beneficiary of all project tokens resulting from splits that route to project treasuries. for (uint256 _i; _i &lt; _numSplits; _i++) { JBSplit _split = _splits[_i]; if (_split.projectId != 0) _split.beneficiary = msg.sender; _splitsWithBeneficiary.push(_split); } _payTo(_splitsWithBeneficiary, JBTokens.ETH, msg.value, 18, msg.sender); } } ","keywords":""},{"title":"Glossary","type":0,"sectionRef":"#","url":"dev/learn/glossary/","content":"Glossary Term\tPreviewProject Each Juicebox project is represented as an NFT (ERC-721), managed in the JBProjects contract. The owner of this NFT is specified when the project is being created. Ownership over this NFT is used to enforce permissions needed to access several project-oriented transactions. Like any other NFT, ownership can be transferred from the original owner to any other address, such as a multi-sig wallet, voting contract, or burn address. Learn more Funding cycle A project is expressed in terms of funding cycles. A funding cycle outlines the time-locked rules according to which a project wishes to operate. It is represented as a JBFundingCycle data structure, and managed by the JBFundingCycleStore contract. Learn more Tokens The Juicebox protocol keeps track of tokens for each project. When a payment is made to a project, the protocol mints tokens for a specified beneficiary according to the rules of the project's current funding cycle. Tokens are managed in the JBTokenStore contract. Projects can optionally call its issueFor(...) transaction to issue an ERC-20 to represent their token. Once issued, anyone with a project's tokens can claim them from the protocol's internal accounting mechanism into their wallet to use around Web3. Projects can also bring their own token, so long as it adheres to the IJBToken interface and uses 18 decimal fixed point accounting. Learn more Overflow The JBController contract has a distributionLimitOf(...) property which denotes how much funds a project can pull from its treasury to distribute to its preprogrammed payout splits during each funding cycle. Any funds in the treasury in excess of the current distribution limit is considered overflow. A project's overlflow can be reclaimed by its community by redeeming tokens. A project can specify treasury funds or assets held outside of Juicebox contracts by attaching a IFundingCycleDataSource to its funding cycles. Learn more Discount rate JBFundingCycle data structures have a weight property that is automatically derived from multiplying the weight of the previous funding cycle by the discountRate of the previous cycle. The weight property can then be used to determine how many project tokens are distributed per unit of payment received during the funding cycle, or for any other functionality implement through a funding cycle's data source and delegates. A project can also customize its funding cycle's weight manually. Learn more Redemption rate JBFundingCycle data structures configured through the JBController contract have a redemptionRate metadata property that can be used to determine how much overflowed funds can be reclaimed by redeeming project tokens, or for any other functionality implemented in a funding cycle's data source and delegates. Learn more Reserved tokens JBFundingCycle data structures configured through the JBController contract have a reservedRate metadata property which specifies the percentage of tokens minted as a result of newly received payments that should be reserved for distribution to preprogrammed reserved token splits. Learn more Splits A Split is used to send a percent of a total amount to a preprogrammed address, Juicebox project, contract that inherits from ISplitAllocator, or sender of the transaction causing the distribution to splits. Splits are represented with JBSplit data structures, and managed by the JBSplitsStore. A split does not hold information about what is being split, it's simply a structure organizable into groups that maps a receiver to a percentage. Learn more Split allocator A project can preconfigure splits to be directed to any contract that aheres to IJBSplitAllocator whose allocate(...) transaction will be called when tokens are distributed. Learn more Ballot JBFundingCycle data structures have a ballot property which is the address of a contract that adheres to the IFundingCycleBallot interface. This contract specifies the conditions that must be met for any proposed funding cycle reconfiguration to take effect. A ballot contract can be written to incorporate strict community voting requirements in order to make funding cycle changes, or to simply add a required buffer period between when a change is proposed and when it can take effect. Learn more Payment terminal A project can be configured to use any contract that adheres to IJBPaymentTerminal to manage its inflows and outflows of token funds. It can set its terminals using JBDirectory.setTerminalsOf(...), and if it uses multiple tokens to manage funds for the same token, it can set the primary one where other Web3 contracts should send funds to using JBDirectory.setPrimaryTerminalOf(...). Learn more Data source JBFundingCycle data structures configured through the JBController contract have a dataSource metadata property which is the address of a contract that adheres to the IFundingCycleDataSource interface. Including a data source allows projects to customize what happens when a payment is attempted to the project during a funding cycle, and what happens when a token is attempted to be redeemed during a funding cycle. Learn more Delegate When a project receives a payment, its funding cycle's data source can specify the address of a contract that adheres to the IJBPayDelegate whose didPay(...) transaction will be called once JBPayoutRedemptionPaymentTerminal.pay(...) has been executed. Similarly, when a project's tokens are being redeemed, its funding cycle's data source can specify the address of a contract that adheres to the IJBRedemptionDelegate whose didRedeem(...) transaction will be called once JBPayoutRedemptionPaymentTerminal.redeemTokensOf(...) has been executed. These can be used by projects to customize what happens when it receives payments and when someone redeems its tokens. Learn more Operator Addresses can give permissions to any other address to take specific actions throughout the Juicebox ecosystem on their behalf. These addresses are called Operators, and are managed through the JBOperatorStore contract. Learn more","keywords":""},{"title":"Programmable treasury","type":0,"sectionRef":"#","url":"dev/build/programmable-treasury","content":"Programmable treasury In order to understand what Juicebox can do for your project, all you have to do is understand how one transaction works: JBController.launchProjectFor(...), which creates a project, configures its first funding cycle, and specifies where it can begin receiving and managing funds from. function launchProjectFor( address _owner, JBProjectMetadata calldata _projectMetadata, JBFundingCycleData calldata _data, JBFundingCycleMetadata calldata _metadata, uint256 _mustStartAtOrAfter, JBGroupedSplits[] calldata _groupedSplits, JBFundAccessConstraints[] calldata _fundAccessConstraints, IJBPaymentTerminal[] memory _terminals, string memory _memo ) external virtual override returns (uint256 projectId) { ... } This transaction launches a project. It does so by: Minting a project in the JBProjects ERC-721 contract by calling JBProjects.createFor(...).Then giving the JBController contract that is currently handling the launchProjectFor transaction authority to write to the JBFundingCycleStore and the JBTokenStore on the project's behalf by calling JBDirectory.setControllerOf(...).Then creating the project's first funding cycle using the provided _data, _metadata, and _mustStartAtOrAfter parameters by calling JBFundingCycleStore.configureFor(...).Then storing splits for any provided split groups by calling JBSplitStore.set(...).Then storing any provided constraints on how the project will be able to access funds within any specified payment terminals by storing values in JBController._packedDistributionLimitDataOf(...), JBController._packedOverflowAllowanceDataOf(...).Then giving the provided _terminals access to the JBController contract that is handling the launchProjectFor(...) transaction that is currently being executed, and also allowing anyone or any other contract in Web3 to know that the project is currently accepting funds through them by calling JBDirectory.setTerminalsOf(...). Basics​ Here are some examples, starting with the simplest version: For _projectMetadata send the following JBProjectMetadata values: { content: &quot;QmbH96jj8RTJgC9526RdsFs5dPvcsRfiRuD9797JXzcvbw&quot;, domain: 0 } For _data send the following JBFundingCycleData values: { duration: 0, weight: 1000000000000000000000000, discountRate: 0, ballot: 0x0000000000000000000000000000000000000000 } For _metadata send the following JBFundingCycleMetadata values: { global: { allowSetTerminals: false, allowSetController: false, }, reservedRate: 0, redemptionRate: 0, ballotRedemptionRate: 0, pausePay: false, pauseDistributions: false, pauseRedeem: false, pauseBurn: false, allowMinting: false, allowTerminalMigration: false, allowControllerMigration: false, holdFees: false, useTotalOverflowForRedemptions: false, useDataSourceForPay: false, useDataSourceForRedeem: false, dataSource: 0x0000000000000000000000000000000000000000, } For _mustStartAtOrAfter send current timestamp. For _groupedSplits send an empty array. For _fundAccessConstraints send an empty array. For _terminals send an array only including the contract address of the JBETHPaymentTerminal. This is the most vanilla project you can launch, which also makes it cheapest to launch gas-wise. Relatively little needs to get saved into storage. Under these conditions: Your project can begin receiving funds through the JBETHPaymentTerminal.1,000,000 of your project's tokens will be minted per ETH received since the configured _data.weight is 1000000000000000000000000. (The raw value sent has 18 decimal places).All tokens minted as a result of received ETH will go to the beneficiary address specified by the payer of the ETH since the configured _metadata.reservedRate is 0.Nothing fancy will happen outside of the default token minting behavior since the configured _metadata.useDataSourceForPay is false.Nothing fancy will happen outside of the default token redemption behavior since the configured _metadata.useDataSourceForRedeem is false.None of the funds in the treasury can be distributed to the project owner since no _fundAccessConstraints were specified. This means all funds in the treasury are considered overflow. Since the configured _metadata.redemptionRate sent is 0 (which represents 100%), all outstanding tokens can be redeemed/burned to claim a proportional part of the overflow. This lets everyone who contributed funds reclaim their ETH if desired.A new funding cycle with an updated configuration can be triggered at any time by the project owner since the configured _data.duration of 0 and _data.ballot of 0x0000000000000000000000000000000000000000. This lets the project owner capture an arbitrary amount of what is in the treasury at any given point by sending a reconfiguration transaction with _fundAccessConstraints specified.Your project will have basic project info with the IPFS file on ipfs://QmbH96jj8RTJgC9526RdsFs5dPvcsRfiRuD9797JXzcvbw (Juicebox Frontend use domain 0 to locate project metadata through IPFS, such as project name, logo, description, twitter handle and discord link) Fund access constraints​ Here's what happens when basic _fundAccessConstraints are specified by sending the following JBFundAccessContraints values: [ { terminal: &lt;address of JBETHPaymentTerminal&gt;, token: 0x000000000000000000000000000000000000EEEe, // Address representing ETH in JBTokens. distributionLimit: 4200000000000000000, overflowAllowance: 0, distributionLimitCurrency: 1, overflowAllowanceCurrency: 0 } ] During each funding cycle with this configuration, the project can receive up to 4.2 ETH worth of tokens from the JBETHPaymentTerminal, since the configured distributionLimitCurrency is 1 (which represents ETH) and the distributionLimit is 4200000000000000000. (The raw value sent has 18 decimal places).Anyone can call the JBPayoutRedemptionPaymentTerminal.distributePayoutsOf(...) transaction to send up to 4.2 ETH per funding cycle to the preconfigured splits. Since no splits were specified, all distributed funds go to the project owner.With each new funding cycle, another 4.2 ETH can be distributed.The project cannot distribute any funds in excess of the distribution limit since there is no overflowAllowance. Here's what happens when using an overflow allowance instead: [ { terminal: &lt;address of JBETHPaymentTerminal&gt;, token: 0x000000000000000000000000000000000000EEEe, // Address representing ETH in JBTokens. distributionLimit: 0, overflowAllowance: 690000000000000000000, distributionLimitCurrency: 0, overflowAllowanceCurrency: 2 } ] Until a new reconfiguration transaction is sent, the project owner can send up to 690 USD worth of ETH tokens from the JBETHPaymentTerminal to any address it chooses since the configured overflowAllowanceCurrency is 2 (which represents USD) and the overflowAllowance is 690000000000000000000 (the raw value sent has 18 decimal places).Meanwhile, all of the project's funds in the JBPayoutRedemptionPaymentTerminal are considered overflow since there is no distribution limit.Rolled-over funding cycles (i.e. cycles with the same configuration) do not refresh the allowance.An overflow allowance is a free allowance the project can use without additional pre-programmed stipulations. The _distributionLimit and _overflowAllowance parameters must fit in a uint232. Grouped splits​ If you wish to automatically split treasury payouts or reserved token distributions between various destinations (addresses, other Juicebox projects, or split allocator contracts), add some grouped splits to the launchProjectFor transaction. { group: 1, splits: [ { preferClaimed: false, preferAddToBalance: false, percent: 50000000, // 5%, out of 1000000000 projectId: 0, beneficiary: 0x0123456789012345678901234567890123456789, lockedUntil: 0, allocator: 0x0000000000000000000000000000000000000000 }, { preferClaimed: false, preferAddToBalance: false, percent: 60000000, // 6%, out of 1000000000 projectId: 420, beneficiary: 0x0123456789012345678901234567890123456789, lockedUntil: 0, allocator: 0x0000000000000000000000000000000000000000 }, { preferClaimed: true, preferAddToBalance: false, percent: 60000000, // 6%, out of 1000000000 projectId: 421, beneficiary: 0x0123456789012345678901234567890123456789, lockedUntil: 0, allocator: 0x0000000000000000000000000000000000000000 }, { preferClaimed: false, preferAddToBalance: false, percent: 70000000, // 7%, out of 1000000000 projectId: 0, beneficiary: 0x0000000000000000000000000000000000000000, lockedUntil: 1644543173, allocator: 0x6969696969696969696969696969696969696969 }, { preferClaimed: false, preferAddToBalance: false, percent: 10000000, // 1%, out of 1000000000 projectId: 0, beneficiary: 0x0000000000000000000000000000000000000000, lockedUntil: 0, allocator: 0x0000000000000000000000000000000000000000 }, ] } If an allocator is provided, the split will try to send the split funds to it. Otherwise, if a projectId is provided the split will try to send funds to that projectId's Juicebox treasury by calling pay(...) or addToBalanceOf(...), sending the project's tokens to the beneficiary if using pay(...). Otherwise, if a beneficiary is provided the split funds will be sent directly to it. Otherwise, the split will not have a destination defined within it and so applications can treat it as a wild card. In this case, payouts send the split amount to the msg.sender of the transaction.There are 5 splits in this group. The first will send 5% of the total directly to address 0x0123456789012345678901234567890123456789.The second will send 6% to the treasury of the Juicebox project with ID 420. Since preferAddToBalance is false, the payment will be made through the pay(...) function of the project's current primary terminal for the token being distributed. Project 420's tokens will be sent to address 0x0123456789012345678901234567890123456789..The third will send 6% to the Juicebox treasury of project with ID 421. This project's tokens will be sent to address 0x0123456789012345678901234567890123456789., and they will be automatically claimed as ERC-20s in the beneficiary's wallet if the project has issued them due to the preferClaimed flag being true.The fourth will send 7% to the allocate function in contract with address 0x6969696969696969696969696969696969696969 which must adhere to IJBSplitAllocator. This function will also receive all contextual information regarding the split for it to do custom things with. This split will not be editable or removable from the group during this funding cycle configuration while the lockedUntil date has yet to passed.The last will send 1% of the total directly to msg.sender address since no destination was specified within the split.All of the remaining funds (100% - 5% - 6% - 6% - 7% - 1% = 75%) will be sent to the project owner's address. Since the configured split group is 1 (which represents ETH payouts), the protocol will use this group of splits when distributing funds from the ETH terminal.This splits will only apply to the funding cycle configuration during which they were set. Splits will have to be set again for future configurations.The same group split behavior applies to reserved tokens (represented by group namespace 2), although those routed to a projectId will be sent to the project's owner, and those routed to an allocator will be sent to the contract before having the contract's allocate function called.","keywords":""},{"title":"Funding cycle","type":0,"sectionRef":"#","url":"dev/learn/glossary/funding-cycle","content":"Funding cycle What everyone needs to know​ Projects can configure funding cycles to create rules to follow over set amounts of time.A funding cycle's parameters can't be changed while it is in progress, but the project owner can propose reconfigurations to an upcoming cycle at any time.Funding cycles roll over automatically. If there is a reconfiguration in place and it has been approved by the current cycle's ballot, it will be used. Otherwise, a copy of the current funding cycle will be used with an updated start time and discounted weight.The mechanics of each project can vary dramatically depending on how its funding cycles are configured over time. Become familiar with how projects work to get a better understanding of how these decisions can be made. What you'll want to know if you're building​ A funding cycle is represented as a JBFundingCycle data structure.It is possible to create funding cycles that allow for total flexibility, total rigidity, or anything in between. Flexibility can be useful for rapid experimentation and evolution, whereas rigidity can be useful for dependability and trust. Anyone can configure a project's first funding cycle alongside creating the project with a call to JBController.launchProjectFor(...), and the project's owner can issue a reconfiguration to subsequent funding cycles with a call to JBController.reconfigureFundingCyclesOf(...).If a project has a current funding cycle, it can be found by reading from JBFundingCycleStore.currentOf(...). A project's upcoming funding cycle can be found by reading from JBFundingCycleStore.queuedOf(...). The funding cycles that carry each original configuration can be found by reading from JBFundingCycleStore.get(...). JBController.currentFundingCycleOf(...) and JBController.queueFundingCycleOf(...) can also be used to get a reference to the funding cycle's metadata alongside.A funding cycle's ballot property is useful for setting rules by which any proposed reconfiguration to subsequent cycles must adhere. This is useful for community oriented projects as it can prevent a project owner from maliciously updating an upcoming cycle's configuration moments before it begins without the broader community's consent. A funding cycle's ballot status, which is a JBBallotState enumeration, can be found by reading from JBFundingCycleStore.currentBallotStateOf(...).Look through the JBFundingCycleStore contract for a complete list of relevant read functions, write functions, and emitted events. Several properties of JBController and JBSingleTokenPaymentTerminalStore also store information relative to funding cycle configurations.","keywords":""},{"title":"Operator","type":0,"sectionRef":"#","url":"dev/learn/glossary/operator","content":"Operator What everyone needs to know​ An operator is an address that has been given permission to take one or more actions on another address's behalf.Several functions are only available to a project's owner, or to an operator address that the project's owner has set.Operator permissions are stored and managed in the JBOperatorStore, where they can be added or revoked at any time by the address being operated on behalf of.Operator permissions are expressed in terms of indexes defined in JBOperations.Operator permissions apply to a specific domain namespace, which is used in the Juicebox ecosystem to allow addresses to give permissions that only apply to a specific project (where the domain is the project's ID). A domain of 0 is a wildcard domain, giving an operator access to an action across all domains. What you'll want to know if you're building​ All permission indexes can be found in JBOperations.Any address can give an operator permissions to take one or more actions on its behalf by sending a transaction to JBOperatorStore.setOperator(...). To set multiple operators in the same transaction, use JBOperatorStore.setOperators(...).Access can be revoked from an operator through the same operations as above by sending an array of permissions that does not include those you wish to revoke.Permission for each operation is stored in a bit within an uint256. If the bit is 1, the permission is enabled for the particular operator within the particular domain. Otherwise it is disabled.JBOperatorStore.hasPermission(...) and JBOperatorStore.hasPermissions(...) can be used to check if an operator has a particular permission. Operatable functionality​ For each project, the following functions can only be accessed by either the address that owns the project's NFT or by operator addresses explicitly allowed by the address that owns the project's NFT. Operators are only valid in the context of a particular owner – if the NFT changes hands, the operators for the project must be set again by the new owner. An address can set operators for its project with JBOperatorStore.setOperator(...), using the indexes from the JBOperations library. An Operator's permissions depend on the specific parameters the admin allows them. Each of the following functions can be called by the admin, and also by any operator that has been granted permission to call the function by the admin. JBController.launchFundingCyclesFor(...)JBController.reconfigureFundingCyclesOf(...)JBController.mintTokensOf(...)JBController.issueTokenFor(...)JBController.changeTokenOf(...)JBController.migrate(...)JBPayoutRedemptionPaymentTerminal.useAllowanceOf(...)JBPayoutRedemptionPaymentTerminal.migrate(...)JBPayoutRedemptionPaymentTerminal.processFees(...)JBProjects.setMetadataOf(...)JBSplitsStore.set(...)JBTokenStore.shouldRequireClaimingFor(...)JBDirectory.setControllerOf(...)JBDirectory.setTerminalsOf(...)JBDirectory.setPrimaryTerminalOf(...) The following transactions can be used by token holders or operator addresses explicitly allowed by the address that owns the tokens. If the tokens change hands, the operators must be set again by the new holder. JBController.burnTokensOf(...)JBPayoutRedemptionPaymentTerminal.redeemTokensOf(...)JBTokenStore.claimFor(...)JBTokenStore.transferFrom(...)","keywords":""},{"title":"Overflow","type":0,"sectionRef":"#","url":"dev/learn/glossary/overflow","content":"Overflow What everyone needs to know​ A project can set distribution limits from its treasury on a per funding cycle basis using JBController.launchProjectFor(...) and JBController.reconfigureFundingCyclesOf(...). These limits are stored in JBController.distributionLimitOf(...). Any funds that are in the project's Juicebox treasury that it hasn't specified as distributable are considered overflow.Overflow serves as a project's runway since future funding cycles can tap into it within the bounds of the preconfigured distribution limits. Overflow can also serve as a refund or rebate mechanism, where everyone's net contribution price is pushed towards zero as volume outpaces what the project needs. By default, overflow also serves a means for allowing community members to exit with a portion of the treasury's funds in hand. Any funds in overflow are reclaimable by the project's community by redeeming community tokens along a bonding curve defined by the project's current redemption rate. Projects can override or extend this functionality using a custom data source.Projects can manage how much money is in overflow (and therefore how much each member can exit with) either by adjusting its distribution limits or by using a custom redemption extension.A project can set overflow allowances from its treasury on a per-funding-cycle-configuration basis within the JBController.launchProjectFor(...) and JBController.reconfigureFundingCyclesOf(...) transactions. These allowances are stored in JBController.overflowAllowancesOf(...). A project's owner can distribute the project's funds from its overflow on-demand up until the preconfigured allowance. Overflow allowances do not reset each funding cycle, they last until a new funding cycle reconfiguration takes effect.","keywords":""},{"title":"Payment terminal","type":0,"sectionRef":"#","url":"dev/learn/glossary/payment-terminal","content":"Payment terminal What everyone needs to know​ A project can be configured to use any contract that adheres to IJBPaymentTerminal to manage its inflows and outflows of token funds.Each payment terminal can have a unique distribution limit and overflow allowance.Each payment terminal can behave differently when it receives payments. What you'll want to know if you're building​ A project can set its terminals using JBDirectory.setTerminalsOf(...).If a project uses multiple terminals to manage funds for the same token, it can set the primary one (where other Web3 contracts should send funds to) using JBDirectory.setPrimaryTerminalOf(...).To pay a project with a certain token, get its prefered payment terminal using JBDirectory.primaryTerminalOf(...). If no terminal is returned, the project is not currently accepting the specified token.","keywords":""},{"title":"Project","type":0,"sectionRef":"#","url":"dev/learn/glossary/project","content":"Project What everyone needs to know​ Each project within the Juicebox protocol is represented as an ERC-721 NFT.Whoever is the owner of a project's NFT has access to admin functionality for that project within the protocol, which ultimately gives it control over the project's funds. What you'll want to know if you're building​ Projects can be created either within the context of Juicebox with a call to JBController.launchProjectFor(...) which also configures its funding cycle properties and sets it up to receive payments, or by itself with a call to JBProjects.createFor(...). The launchProjectFor(...) transaction calls createFor(...) as part of its routine.A project can accomodate arbitrary metadata for any number of domains that can be updated by the project owner at any time using the JBProject.setMetadataOf(...) transaction. This can be used by clients to store a reference to metadata stored on IPFS (or anywhere else). The protocol does not define standards for this metadata. A project's current metadata for any particular domain can be found by reading from JBProject.metadataContentOf(...).Look through the JBProjects contract for a complete list of relevant read functions, write functions, and emitted events.","keywords":""},{"title":"Redemption rate","type":0,"sectionRef":"#","url":"dev/learn/glossary/redemption-rate","content":"Redemption rate What everyone needs to know​ The redemption rate determines what proportion of treasury assets can be reclaimed by a token holder by redeeming their tokens.By default, all treasury assets that are considered overflow can be reclaimed by token holders. This can be modified using data source extensions.A project's redemption rate and extensions can be reconfigured each funding cycle.A redemption rate of 100% is linear, meaning a holder with 1% of the token supply can redeem all of their tokens for 1% of available treasury assets.A redemption rate of x% where x &lt; 100% will leave some assets in the treasury to share between those who wait longer to redeem. The smaller the x, the fewer assets can be reclaimed.A project can set a different redemption rate that takes effect only when the project's current funding cycle has an active ballot. What you'll want to know if you're building​ A redemption rate can be specified in a funding cycle through the JBController.launchProjectFor(...) or JBController.reconfigureFundingCyclesOf(...) transactions.A ballot redemption rate can be specified in a funding cycle through the JBController.launchProjectFor(...) or JBController.reconfigureFundingCyclesOf(...) transactions, which will override the standard redemption rate if there is currently a reconfiguration ballot active.","keywords":""},{"title":"Reserved tokens","type":0,"sectionRef":"#","url":"dev/learn/glossary/reserved-tokens","content":"Reserved tokens What everyone needs to know​ Reserved tokens allow a project to guarantee that a percentage of all newly minted tokens from payments will be reserved to a preprogrammed list of JBSplits. This percentage is referred to as the reserved rate.A project's reserved rate and reserved token splits can be reconfigured each funding cycle.Reserved token splits can be routed to addresses, the owners of other Juicebox projects, to contracts that adhere to the IJBSplitAllocator interface, or to the address that sent the JBController.distributeReservedTokensOf(...) transaction.Reserved tokens do not get minted automatically when a new payment is received. Instead, they must be explicitly distributed during the funding cycle which contains the reserved rate and splits that should be applied. If a funding cycle's reserved rate or splits change before the allocation is distributed, the new values will apply. What you'll want to know if you're building​ A reserved rate can be specified in a funding cycle through the JBController.launchProjectFor(...) or JBController.reconfigureFundingCyclesOf(...) transactions.Distributing currently allocated reserved tokens is done by calling JBController.distributeReservedTokensOf(...). Doing so will distribute the allocation according to the current funding cycle's reserved rate.","keywords":""},{"title":"Split allocator","type":0,"sectionRef":"#","url":"dev/learn/glossary/split-allocator","content":"Split allocator What everyone needs to know​ A project's payout distribution splits or its reserved token distribution splits can be directed at custom allocator contracts.An allocator can be attached to a project's split during any funding cycle configuration to automate the routing of treasury funds and reserved project tokens. An allocator's allocate(...) transaction is triggered automatically when the split is receiving funds. What you'll want to know if you're building​ An allocator contract must adhere to the IJBSplitsAllocator interface. An allocator can be specified in a split through the JBController.launchProjectFor(...), JBController.reconfigureFundingCyclesOf(...), or JBSplitStore.set(...). Get started building split allocators.","keywords":""},{"title":"Splits","type":0,"sectionRef":"#","url":"dev/learn/glossary/splits","content":"Splits What everyone needs to know​ A project can store splits for an arbitrary number of groups, such as for payout distributions or for reserved token distributions.A split can specify an address, a Juicebox project, a contract that adheres to the IJBSplitAllocator interface, or the address that calls the transaction to distribute payouts or reserved tokens as its recipient.By default, splits can be changed at any time for any funding cycle configuration. A project's owner can also independently lock a split to a funding cycle configuration for a customizable duration. What you'll want to know if you're building​ Splits can be set for a funding cycle configuration during the JBController.launchProjectFor(...) or JBController.reconfigureFundingCyclesOf(...) transactions, or separately using JBSplitStore.set(...).","keywords":""},{"title":"Tokens","type":0,"sectionRef":"#","url":"dev/learn/glossary/tokens","content":"Tokens What everyone needs to know​ By default, all payments that come in to a Juicebox project mint tokens. These tokens are distributed to a beneficiary specified by the payer, and to any addresses specified in the project's reserved token list. The amount of tokens minted depends on the amount paid and the weight (i.e. exchange rate) of the project's current funding cycle. Projects can override or extended this default behavior using data sources.By default, the protocol allocates tokens to recipients using an internal accounting mechanism in JBTokenStore. These are fungible but do not conform to the ERC-20 standard, and as such cannot be composed with ecosystem ERC-20/ERC-721 marketplaces like AMMs and Opensea. Their balances can be used for voting on various platforms.Projects can issue their own ERC-20 token directly from the protocol to use as its token. Projects can also bring their own token as long as it conforms to the IJBToken interface and uses 18 decimal fixed point accounting. This makes it possible to use ERC-1155's or custom tokens.Once a project has issued a token, token holders can export tokens from the protocol's internal accounting mechanism in JBTokenStore to their wallet to use across Web3. A project's owner can also force project tokens to be issued directly to the exported version. This bypasses the internal accounting mechanism, but slightly increases gas costs for transactions that requires tokens to be minted.By default, tokens can be redeemed by holders to reclaim a portion of what's in the project's overflow. The amount of overflow claimable is determined by the redemptionRate of the project's current funding cycle. Projects can override or extend this default behavior. Redeeming tokens burns them, shrinking the total supply.A project owner can mint and distribute more of the project's tokens on demand. This behavior must be explicitly allowed on a per-funding cycle basis.A project can use its tokens however it wishes. It can be purely ceremonial, used for governance, used for airdrops, or whatever. What you'll want to know if you're building​ Tokens can be minted on-demand by project owners or their operators by calling JBController.mintTokensOf(...). The ability to do so must be explicitly turned on via a funding cycle configuration metadata parameter.Tokens can be burned on-demand by holders by calling JBController.burnTokensOf(...). The ability to do so can be turned off via a funding cycle configuration metadata parameter.","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"dev/learn/overview","content":"Overview The Juicebox protocol is a framework for funding and operating projects openly on Ethereum. It lets you: Deploy an NFT that represents ownership over a project​ Whichever address owns this NFT has administrative privileges to configure treasury parameters within the Juicebox ecosystem. Learn more about projects Configure funding cycles for a project​ Funding cycles define contractual constraints according to which the project will operate. Learn more about funding cycles The following properties can be configured into a funding cycle: Funding cycle properties Start timestamp​ The timestamp at which the funding cycle is considered active. Projects can configure the start time of their first funding cycle to be in the future, and can ensure reconfigurations don't take effect before a specified timestamp. Once a funding cycle ends, a new one automatically starts right away. If there's an approved reconfiguration queued to start at this time, it will be used. Otherwise, a copy of the rolled over funding cycle will be used. Duration​ How long each funding cycle lasts (specified in seconds). All funding cycle properties are unchangeable while the cycle is in progress. In other words, any proposed reconfigurations can only take effect during the subsequent cycle. If no reconfigurations were submitted by the project owner, or if proposed changes fail the current cycle's ballot, a copy of the latest funding cycle will automatically start once the current one ends. A cycle with no duration lasts indefinitely, and reconfigurations can start a new funding cycle with the proposed changes right away. Distribution limit​ The amount of funds that can be distributed out from the project's treasury during a funding cycle. The project owner can pre-program a list of addresses, other Juicebox projects, and contracts that adhere to IJBSplitsAllocator to split distributions between. Treasury funds in excess of the distribution limit is considered overflow, which can serve as runway or be reclaimed by token holders who redeem their tokens. Distributing is a public transaction that anyone can call on a project's behalf. The project owner can also include a split that sends a percentage of the distributed funds to the address who executes this transaction. The protocol charges a JBX membership fee on funds withdrawn from the network. There are no fees for distributions to other Juicebox projects. Distribution limits can be specified in any currency that the JBPrices contract has a price feed for. Overflow allowance​ The amount of treasury funds that the project owner can distribute on-demand. This allowance does not reset per-funding cycle. Instead, it lasts until the project owner explicitly proposes a reconfiguration with a new allowance. The protocol charges a JBX membership fee on funds withdrawn from the network. Overflow allowances can be specified in any currency that the JBPrices contract has a price feed for. Weight​ A number used to determine how many project tokens should be minted and transferred when payments are received during the funding cycle. In other words, weight is the exchange rate between the project token and a currency (defined by a JBPayoutRedemptionPaymentTerminal) during that funding cycle. Project owners can configure this directly, or allow it to be derived automatically from the previous funding cycle's weight and discount rate. Discount rate​ The percent to automatically decrease the subsequent cycle's weight from the current cycle's weight. The discount rate is not applied during funding cycles where the weight is explicitly reconfigured. Learn more about discount rates Ballot​ The address of a contract that adheres to IJBFundingCycleBallot, which can provide custom criteria that prevents funding cycle reconfigurations from taking effect. A common implementation is to force reconfigurations to be submitted at least X days before the end of the current funding cycle, giving the community foresight into any misconfigurations or abuses of power before they take effect. A more complex implementation might include on-chain governance. Learn more ballots Reserved rate​ The percentage of newly minted tokens that a project wishes to withhold for custom distributions. The project owner can pre-program a list of addresses, other Juicebox project owners, and contracts that adhere to IJBSplitsAllocator to split reserved tokens between. Learn more about reserved rate Redemption rate​ The percentage of a project's treasury funds that can be reclaimed by community members by redeeming the project's tokens during the funding cycle. A rate of 100% suggests a linear proportion, meaning X% of treasury overflow can be reclaimed by redeeming X% of the token supply. Learn more about redemption rates Ballot redemption rate​ A project can specify a custom redemption rate that only applies when a proposed reconfiguration is waiting to take effect. This can be used to automatically allow for more favorable redemption rates during times of potential change. Pause payments, pause distributions, pause redemptions, pause burn​ Projects can pause various bits of its treasury's functionality on a per-funding cycle basis. These functions are unpaused by default. Allow minting tokens, allow changing tokens, allow setting terminals, allow setting the controller, allow terminal migrations, allow controller migration​ Projects can allow various bits of treasury functionality on a per-funding cycle basis. These functions are disabled by default. Hold fees​ By default, JBX membership fees are paid automatically when funds are distributed out of the ecosystem from a project's treasury. During funding cycles configured to hold fees, this fee amount is set aside instead of being immediately processed. Projects can get their held fees returned by adding the same amount of withdrawn funds back to their treasury. Otherwise, JuiceboxDAO or the project can process these held fees at any point to get JBX at the current rate. This allows a project to withdraw funds and later add them back into their Juicebox treasury without incurring fees. This applies to both distributions from the distribution limit and from the overflow allowance. Data source​ The address of a contract that adheres to IJBFundingCycleDataSource, which can be used to extend or override what happens when the treasury receives funds, and what happens when someone tries to redeem their project tokens. Learn more about data sources Mint tokens​ By default, a project starts with 0 tokens and mints them when its treasury receives contributions. A project can mint and distribute tokens on demand if its current funding cycle is configured to allow minting. By default, project tokens are not ERC-20s and thus not compatible with standard market protocols like Uniswap. At any time, you can issue ERC-20s that your token holders can claim. This is optional. Burn tokens​ Anyone can burn a project's tokens if the project's current funding cycle isn't configured to paused burning. Bring-your-own token​ A project can bring its own token, as long as it adheres to IJBToken and uses fixed point accounting with 18 decimals. This allows a project to use ERC-721's, ERC-1155's, or any other custom contract that'll be called upon when the protocol asks to mint or burn tokens. A project can change its token during any of its funding cycles that are explicitly configured to allow changes. By default, the protocol provides a transaction for projects to deploy JBToken ERC-20 tokens. Splits​ A project can pre-program token distributions to splits. The destination of a split can be an Ethereum address, the project ID of another project's Juicebox treasury (the split will allow you to configure the beneficiary of that project's tokens that get minted in response to the contribution), to the allocate(...) function of any contract that adheres to IJBSplitAllocator, or to the address that initiated the transaction that distributes tokens to the splits. Learn more about splits Learn more about allocators JBX membership fee​ All funds distributed by projects from their treasuries to destinations outside of the Juicebox ecosystem (i.e. distributions that do not go to other Juicebox treasuries) will incure a protocol fee. This fee is sent to the JuiceboxDAO treasury which runs on the Juicebox protocol itself (project ID of 1), triggering the same functionality as a payment directly to JuiceboxDAO (by default, minting JBX for the fee payer according to JuiceboxDAO's current funding cycle configuration) from an external source. This fee is adjustable by JuiceboxDAO, with a max value of 5%. Any funds sent from one juicebox treasury to another via splits do not incur fees. Custom treasury strategies​ Funding cycles can be configured to use an IJBFundingCycleDataSource, IJBPayDelegate, and IJBRedemptionDelegate to extend or override the default protocol's behavior that defines what happens when an address tries to make a payment to the project's treasury, and what happens when someone tries to redeem the project tokens during any particular funding cycle. Learn more about data sources Learn more about delegates Accept multiple tokens​ A project can specify any number of payment terminal contracts where it can receive funds denominated in various tokens. This allows projects to create distinct rules for accepting ETH, any ERC-20, or any asset in general. Anyone can roll their own contract that adheres to IJBPaymentTerminal for projects to use, and a project can migrate funds between terminals that use the same token as it wishes. Forkability and migratability​ A project can migrate its treasury's controller to any other contract that adheres to IJBController. This allows a project to evolve into updated or custom treasury dynamics over time as it wishes. Operators​ Addresses can specify other addresses that are allowed to operate certain administrative treasury transactions on its behalf. Learn more about operators","keywords":""},{"title":"Risks","type":0,"sectionRef":"#","url":"dev/learn/risks","content":"Risks The following are risks that everyone should be aware of before interacting with the protocol. The protocol's design exposes these risks in consequence to its normal operating procedures. Smart contract risk​ The protocol runs entirely on public smart contracts explained in detail throughout these docs. The Juicebox protocol is public infrastructure running well-known code, all consequences from interacting with networks running the protocol are borne by the entities who sign each transaction. The protocol works according to the specifications outlined in these docs to the extent the code is written and deployed correctly, which is a collective responsibility and not guaranteed. There is a major risk that this is not the case. Please do your own research. Project owner risk​ Ownership of each project on the Juicebox protocol belongs to the address possessing a JBProjects NFT with a unique token ID, which also serves as the project's ID. The address that owns this token can reconfigure a project's funding cycles, which empower it to manipulate a project's finances both productively and maliciously. The following values can be reconfigured by a project's owner on a per-funding cycle basis: Setting a distribution limit and payout splits​ With a distribution limit of zero, all treasury funds belong to the community. Token holders can redeem their tokens to reclaim their share of the treasury at any time, according to the current funding cycle's redemption bonding curve rate. A non-zero distribution limit allocates a portion of the treasury for distribution to payout splits. A project owner can also change the split allocations that are bound by the funding cycle's distribution limit at any time, unless the split was explicitly locked until a specified date during its creation. 🟢 Used productively this can be used to withdraw funds to a community safe, distribute funds to contributors, channel funds to other projects operating treasuries on the protocol, and more. 🔴 Used maliciously this can be used to rug the entire treasury into an arbitrary wallet. Setting an overflow allowance​ With an overflow allowance of zero, all treasury funds belonging to the community – funds in excess of the distribution limit – cannot be accessed by the project owner. The only way funds can leave the treasury is through token redemptions. A non-zero overflow allowance gives the project owner access to a portion of the community's funds for on-demand distribution to arbitrary addresses. 🟢 Used productively this can be used to manage discretionary spending. 🔴 Used maliciously this can be used to rug the entire treasury into an arbitrary wallet. Allowing token minting​ While token minting is not allowed, the only way for new project tokens to be minted and distributed is for the project to receive new funds into its treasury. Tokens will get minted in accordance to the current funding cycle's values. If token minting is allowed, an arbitrary number of tokens can be minted and distributed by the project owner, diluting the redemption value of all outstanding tokens. 🟢 Used productively this can be used to premint tokens to members, or satisfy other agreed upon inflationary treasury strategies. 🔴 Used maliciously this can be used to mint extra tokens and redeem them to reclaim treasury funds into an arbitrary wallet, rugging the entire treasury. Setting the funding cycle's weight​ A funding cycle's weight determines how many tokens will be minted and distributed when a treasury receives funds. By default, a funding cycle has the same weight as the cycle that preceded it after applying the preceding cycle's discount rate. 🟢 Used productively this can be used to manage how tokens are issued over time. 🔴 Used maliciously this can be used to manipulate token issuance, and rug the entire treasury into an arbitrary wallet. Allowing changing of project tokens​ While changing tokens isn't allowed, the current project token will be used to satisfy redemptions and new issuance for the duration of the funding cycle. If changing tokens is allowed, a new token can replace the role of a previous token for new issuance and redemptions. 🟢 Used productively this can be used to allow projects to augment a previous token strategy with a Juicebox treasury, detach a token from a Juicebox treasury, or create custom token mechanisms associated with its Juicebox treasury. 🔴 Used maliciously this can be used to cut off a community of token holders from their treasury while using the redemption of a new token to reclaim treasury funds into an arbitrary wallet. Pause payments, pause distributions, pause redemptions, pause burn​ While each functionality isn't paused, the standard functionality will be accessible. If payments are paused to a project, the protocol will reject any inbound payments. If disitributions are paused for a project, the protocol will reject any request to distribute funds from the treasury. If redemptions are paused, the protocol will reject any request to redeem tokens. If burning is paused, the protocol will reject any request by token holders to burn their tokens. 🟢 Used productively this can be used to allow projects to creatively tune how its treasury can be accessed. 🔴 Used maliciously this can be used to cut off a community of token holders from standard treasury functionality. Custom treasury extensions​ If a project's funding cycles have no data source, delegate, split allocator, or ballot contracts attached, the consequences of each interaction with the protocol are predictable, consistent, and specified within these docs. If a project has attached a data source, delegate, split allocator, or ballot contract to a funding cycle, the protocol will access information from them and call functionality within them at specific moments during the execution of various transactions within the regular operation of the protocol. 🟢 Used productively this can be used to customize what happens when a treasury receives funds, under what conditions funds can leave a treasury, and under what conditions reconfigurations can take effect. 🔴 Used maliciously this can be used to mint excess tokens, rug the entire treasury into an arbitrary wallet, trick users into compromising their individual wallets, create arbitrary unwanted and extractive behavior, or introduce smart contract bugs into otherwise productive extension designs. Do not interact with a project that is using an untrusted extension. Add and remove payment terminals​ While setting payment terminals isn't allowed, a project can only receive funds and offer token redemptions from within the payment terminals it has already attached. If setting payment terminals is allowed, projects can begin managing inflows and outflows of funds from new contracts, or remove current contracts where they are doing so. 🟢 Used productively this can be used to begin accepting new tokens into a treasury, or creating totally custom treasury behavior. 🔴 Used maliciously this can be used to cut off a community of token holders from their treasury, create arbitrary unwanted and extractive behavior, or introduce smart contract bugs. Do not interact with a projects using untrusted payment terminals. Setting the controller​ While setting the controller isn't allowed, a project can only operate according to the rules of its currently set controller. If setting the controller is allowed, projects can bring new rules according to which it'll operate. 🟢 Used productively this can be used to create totally custom treasury behavior. 🔴 Used maliciously this can be used to cut off a community of token holders from their treasury, create arbitrary unwanted and extractive behavior, or introduce smart contract bugs. Do not interact with a projects using an untrusted controller. Migrating funds between terminals​ While migrating funds between terminals isn't allowed, a project's funds in a terminal cannot be migrated to another terminal which may have alternate constraints. If migrating funds between terminals is allowed, a project can move its funds from one terminal to another. 🟢 Used productively this can be used to move a treasury into a totally custom environment, or to trusted upgraded versions of the protocol. 🔴 Used maliciously this can be used to cut off a community of token holders from their treasury, create arbitrary unwanted and extractive behavior, or introduce smart contract bugs. Undistributed reserved rate risk​ If a project enters a funding cycle with a different reserved rate than the preceding cycle while still having outstanding reserved tokens to distribute, the quantity of distributable tokens will change to reflect the new reserved rate. For example, if in FC#1 a project has a reserved rate of 10% and 9,000 tokens are minted, 1,000 tokens (10% of the total) are reserved to be distributed to the configured reserved token receivers. If FC#2 with a reserved rate of 50% begins without the reserved tokens having been distributed, there will now be 9,000 tokens (50% of the total) reserved to be distributed to the configured reserved token receivers. Distributing reserved tokens is a public action – anyone can send a transaction to do this. Price oracle risk​ The protocol uses price oracles to normalize prices throughout the its standard operations. These oracles are smart contract mechanisms external to the core Juicebox protocol. Projects using multiple currencies for certain functionality bare the risk of these external oracle systems misreporting price values. Large number risk​ Under certain circumstances, token holders attempting to burn token amounts greater than (2^256 / 2) - 1, or 57896044618658097711785492504343953926634992332820282019728792003956564819968, will have their transactions reverted due to an arithmetic underflow.","keywords":""},{"title":"Protocol v1","type":0,"sectionRef":"#","url":"dev/protocol-v1/","content":"Protocol v1 警告 Juicebox v1 is not formally audited. All projects built on it may be vulnerable to bugs or exploits. The documentation in this section is about Juicebox v1. Sections may be depricated or otherwise outdated. If you have any questions, ask in the Juicebox Discord server Deployed contract addresses and Etherscan links are on the Contract Addresses page.Learn how to create dapps that draw on JB protocol data with the Integration Guide and Subgraph pages.For a thorough visual walkthrough of Juicebox Protocol V1, please visit the Figma Fluid Dynamics document.","keywords":""},{"title":"Basics","type":0,"sectionRef":"#","url":"dev/build/basics","content":"Basics Workflows​ The first transaction to call when getting started is JBController.launchProjectFor(...). function launchProjectFor( address _owner, JBProjectMetadata calldata _projectMetadata, JBFundingCycleData calldata _data, JBFundingCycleMetadata calldata _metadata, uint256 _mustStartAtOrAfter, JBGroupedSplits[] calldata _groupedSplits, JBFundAccessConstraints[] calldata _fundAccessConstraints, IJBPaymentTerminal[] calldata _terminals, string memory _memo ) external override returns (uint256 projectId) { ... } Check out the Treasury design page for more info on how to build projects treasuries to various specifications. View project info Launching a project will mint a new NFT in the JBProjects contract. The owner can be found using JBProjects.ownerOf(...). function ownerOf(uint256 _projectId) external returns (address owner) { ... } The project's metadata can be found using JBProjects.metadataContentOf(...). function metadataContentOf(uint256 _projectId, uint256 _domain) external view returns (string memory) { ... } View funding cycles Funding cycle data can be found in the JBFundingCycleStore contract. A funding cycle configuration can be found using JBFundingCycleStore.get(...), where _configuration is the block timestamp when the funding cycle was configured, or using JBController.getFundingCycleOf(...) if the funding cycle's metadata is needed alongside. function get(uint256 _projectId, uint256 _configuration) external view override returns (JBFundingCycle memory fundingCycle) { ... } function getFundingCycleOf(uint256 _projectId, uint256 _configuration) external view override returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata) { ... } The project's current funding cycle can be found using JBFundingCycleStore.currentOf(...), or using JBController.currentFundingCycleOf(...) if the funding cycle's metadata is needed alongside. function currentOf(uint256 _projectId) external view override returns (JBFundingCycle memory fundingCycle) { ... } function currentFundingCycleOf(uint256 _projectId) external view override returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata) { ... } The project's queued funding cycle can be found using JBFundingCycleStore.queuedOf(...), or using JBController.queuedFundingCycleOf(...) if the funding cycle's metadata is needed alongside. By default, the queued cycle is a copy of the current one that starts immediately afterwards, using a discounted weight. If the project has proposed a reconfiguration, the queued cycle will reflect the changes once they are approved by the current cycle's ballot. Reconfigurations during a funding cycle with no ballot are automatically queued. The project has no queued cycle if the current cycle has no duration. function queuedOf(uint256 _projectId) external view override returns (JBFundingCycle memory fundingCycle) { ... } function queuedFundingCycleOf(uint256 _projectId) external view override returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata) { ... } The project's latest configured funding cycle can be found using JBFundingCycleStore.latestConfiguredOf(...), or using JBController.latestConfiguredFundingCycleOf(...) if the funding cycle's metadata is needed alongside. These calls also return the current ballot status for the configuration. If the latest configured funding cycle's ballot is Approved, the configuration should also be queued or current. function latestConfiguredOf(uint256 _projectId) external view override returns (JBFundingCycle memory fundingCycle, JBBallotState ballotState) { ... } function latestConfiguredFundingCycleOf(uint256 _projectId) external view override returns ( JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata, JBBallotState ballotState ) { ... } View splits A project's splits data can be found in the JBSplitStore contract. A group of splits belonging to any particular group during any particular funding cycle configuration can be found using JBSplitStore.splitsOf(...). The funding cycle's configuration is used as the _domain within which the splits apply. function splitsOf( uint256 _projectId, uint256 _domain, uint256 _group ) external view override returns (JBSplit[] memory) { ... } View fund access constraints Constraints on accessing a project's funds can found in the JBController contract used to launch the project. The distribution limit of any payment terminal during any funding cycle configuration can be found using JBController.distributionLimitOf(...). The currency being used for this distribution limit is returned alongside. function distributionLimitOf( uint256 _projectId, uint256 _configuration, IJBPaymentTerminal _terminal, address _token ) external view override returns (uint256 distributionLimit, uint256 distributionLimitCurrency) { ... } The overflow allowance from any payment terminal during any funding cycle configuration can be found using JBController.overflowAllowanceOf(...). The currency being used for this overflow allowance is returned alongside. function overflowAllowanceOf( uint256 _projectId, uint256 _configuration, IJBPaymentTerminal _terminal, address _token ) external view override returns (uint256 overflowAllowance, uint256 overflowAllowanceCurrency) { ... } View terminals and controller The JBDirectory contract stores addresses of payment terminals that a project is currently accepting funds through. A project's currently set terminals can be found using JBDirectory.terminalsOf(...). function terminalsOf(uint256 _projectId) external view override returns (IJBPaymentTerminal[] memory) { ... } If a project has multiple terminals for the same token, the primary terminal that it wishes to accept that token type through can be found using JBDirectory.primaryTerminalOf(...). function primaryTerminalOf(uint256 _projectId, address _token) public view override returns (IJBPaymentTerminal) { ... } The JBDirectory contract also stores the address of the controller that is managing a project's funding cycles and tokens. A projects current terminal can be found using JBDirectory.controllerOf(...). function controllerOf(uint256 _projectId) external view override returns (IJBController) { ... } Once a project has been created, it can begin accepting funds from anyone through any terminal it has added. For example, if the project has added the JBETHPaymentTerminal, ETH can be sent to the project by calling its JBETHPaymentTerminal.pay(...) transaction. function pay( uint256 _projectId, uint256 _amount, address, address _beneficiary, uint256 _minReturnedTokens, bool _preferClaimedTokens, string calldata _memo, bytes calldata _metadata ) external payable virtual override isTerminalOf(_projectId) returns (uint256) { ... } View treasury balance In payment terminals based on the JBPayoutRedemptionPaymentTerminal, such as JBETHPaymentTerminal's and JBERC20PaymentTerminal's, a project's treasury balance can be found in its store contract. For example, in the JBSingleTokenPaymentTerminalStore, the balance can be found using JBSingleTokenPaymentTerminalStore.balanceOf(...). function balanceOf(IJBPaymentTerminal _terminal, uint256 _projectId) external view override returns (uint256) { ... } The project's current overflow for a terminal can also be found in the store contracts. For example, in the JBSingleTokenPaymentTerminalStore, the terminal's overflow can be found using JBSingleTokenPaymentTerminalStore.currentOverflowOf(...). function currentOverflowOf(IJBSingleTokenPaymentTerminal _terminal, uint256 _projectId) external view override returns (uint256) { ... } A terminal store can also resolve the total amount of overflow in all of a project's terminals. For example, in the JBSingleTokenPaymentTerminalStore, the project's overall overflow can be found using JBSingleTokenPaymentTerminalStore.currentTotalOverflowOf(...). You will need to send the number of decimals you're expecting the returned fixed point number to include, and the currency it is in terms of. function currentTotalOverflowOf( uint256 _projectId, uint256 _decimals, uint256 _currency ) external view override returns (uint256) { ... } View project token distribution Each holder's balance of a project's token can be found in the JBTokenStore contract. The balance can be found using JBTokenStore.balanceOf(...). function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result) { ... } The project token's total supply can also be found in the JBTokenStore contract using JBTokenStore.totalSupplyOf(...) function totalSupplyOf(uint256 _projectId) external view returns (uint256) { ... } View reserved token balance A project's undistributed reserved token balance can be found in the project's current controller. For example in the JBController, this balance can be found using JBController.reservedTokenBalanceOf(...). function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate) external view returns (uint256) { ... } For projects using JBController, the project token's total supply including any allocated reserved tokens that have yet to be distributed can be found in using JBController.totalOutstandingTokensOf(...). function totalOutstandingTokensOf(uint256 _projectId, uint256 _reservedRate) external view override returns (uint256) { ... } Anyone can distribute a project's funds from a terminal up to its current funding cycle's distribution limit to its preprogrammed payout splits at any time. For example, if the project has added the JBETHPaymentTerminal, funds can be distributed by calling JBETHPaymentTerminal.distributePayoutsOf(...). function distributePayoutsOf( uint256 _projectId, uint256 _amount, uint256 _currency, uint256 _minReturnedTokens, string calldata _memo ) external virtual override returns (uint256 netLeftoverDistributionAmount) { ... } View used distribution limit Any distribution limit used by a project can be found in the terminal store contract for each terminal. For example, in the JBSingleTokenPaymentTerminalStore, the distribution limit used during a funding cycle can be found by calling JBSingleTokenPaymentTerminalStore.usedDistributionLimitOf(...). function usedDistributionLimitOf( IJBPaymentTerminal _terminal, uint256 _projectId, uint256 _fundingCycleNumber ) external view override returns (uint256) { ... } A project's owner can distribute additional funds from its treasury's overflow for each of its terminals up until its preconfigured allowance. For example, if the project has added the JBETHPaymentTerminal, funds can be distributed by calling its JBETHPaymentTerminal.useAllowanceOf(...) transaction. function useAllowanceOf( uint256 _projectId, uint256 _amount, uint256 _currency, uint256 _minReturnedTokens, address payable _beneficiary, string memory _memo ) external virtual override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.USE_ALLOWANCE) returns (uint256 netDistributedAmount) { ... } View used overflow allowance Any overflow allowance used can also be found in the terminal store contracts for each terminal. For example, in the JBSingleTokenPaymentTerminalStore, the overflow allowance used during a funding cycle can be found using JBSingleTokenPaymentTerminalStore.usedOverflowAllowanceOf(...). function usedOverflowAllowanceOf( IJBPaymentTerminal _terminal, uint256 _projectId, uint256 _fundingCycleNumber ) external view override returns (uint256) { ... } The protocol uses price feeds to convert values from one currency to another when distributing payouts, using overflow allowances, issuing project tokens when payments are received in various currencies, and more. Current currency indexes can be found in JBCurrencies. New currencies and price feeds can be added in the future. View price conversions The same price feeds the protocol uses internally can be accessed externally through the JBPrices contract using JBPrices.priceFor(...). This will revert if a feed is not found for the currency pair provided. function priceFor( uint256 _currency, uint256 _base, uint256 _decimals ) external view override returns (uint256) { ... } A project's owner can mint more of the project's token by calling JBController.mintTokensOf(...). Anyone can burn their tokens by calling JBController.burnFrom(...). function mintTokensOf( uint256 _projectId, uint256 _tokenCount, address _beneficiary, string calldata _memo, bool _preferClaimedTokens, bool _useReservedRate ) external override requirePermissionAllowingOverride( projects.ownerOf(_projectId), _projectId, JBOperations.MINT, directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender)) ) { ... } function burnTokensOf( address _holder, uint256 _projectId, uint256 _tokenCount, string calldata _memo, bool _preferClaimedTokens ) external override nonReentrant requirePermissionAllowingOverride( _holder, _projectId, JBOperations.BURN, directory.isTerminalDelegateOf(_projectId, msg.sender) ) { ... } At any point, anyone can distribute a project's reserved tokens to the project's preprogrammed reserved token splits by calling JBController.distributeReservedTokensOf(...). function distributeReservedTokensOf(uint256 _projectId, string memory _memo) external nonReentrant returns (uint256) { ... } Anyone who holds a project's tokens can redeem them at one of the project's terminals for a proportional share of the project's overflow. For example, if the project has added the JBETHPaymentTerminal, ETH can be reclaimed by redeeming project tokens in its JBETHPaymentTerminal.redeemTokensOf(...) transaction. The overflow amount is the terminal's balance minus the current funding cycle's distribution limit, and can be set to include the project's balance across all terminals. Redeeming tokens allows a project's token holders to exit the community at any time with their share of the funds. function redeemTokensOf( address _holder, uint256 _projectId, uint256 _tokenCount, uint256 _minReturnedTokens, address payable _beneficiary, string memory _memo, bytes memory _metadata ) external virtual override requirePermission(_holder, _projectId, JBOperations.REDEEM) returns (uint256 reclaimAmount) { ... } A project's owner can reconfigure the project's funding cycle at any time by calling JBController.reconfigureFundingCyclesOf(...). If the project is in the middle of a funding cycle with a duration, the update will be queued to take effect next cycle. If the current funding cycle has an attached ballot contract, the reconfiguration must be approved by it before taking effect. function reconfigureFundingCyclesOf( uint256 _projectId, JBFundingCycleData calldata _data, JBFundingCycleMetadata calldata _metadata, uint256 _mustStartAtOrAfter, JBGroupedSplits[] calldata _groupedSplits, JBFundAccessConstraints[] calldata _fundAccessConstraints, string calldata _memo ) external virtual override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE) returns (uint256 configuration){ ... } View reconfiguration ballot status Reconfigurations are subject to the approval of the ballot contract included in the current funding cycle. The current ballot state can be found using JBFundingCycleStore.ballotStateOf(...). function currentBallotStateOf(uint256 _projectId) external view override returns (JBBallotState) { ... } At any point, anyone can inject funds into a project's treasury via one of its terminals. For example, if the project has added the JBETHPaymentTerminal, someone can add ETH to a treasury by calling the terminal's JBETHPaymentTerminal.addToBalanceOf(...) transaction. function addToBalanceOf( uint256 _projectId, uint256 _amount, address, string calldata _memo, bytes calldata _metadata ) external payable virtual override isTerminalOf(_projectId) { ... } By default the protocol uses an internal accounting mechanism to account for projects' tokens. At any time after the project has been created, its owner can issue ERC-20 tokens for the protocol to use as its community token by calling JBController.issueTokenFor(...). A project can instead bring their own token, so long as the token adheres to the IJBToken interface, uses 18 decimals fixed point accounting, and isn't already being used by another project. They can do so by calling JBController.changeTokenFor(...) This makes it easy to use ERC-1155s or custom contracts, or to change tokens over time to achieve a more creative design. function issueTokenFor( uint256 _projectId, string calldata _name, string calldata _symbol ) external override requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.ISSUE) returns (IJBToken token) { ... } function changeTokenOf( uint256 _projectId, IJBToken _token, address _newOwner ) external nonReentrant requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.CHANGE_TOKEN) { ... } View the project's token The token currently being used by a project can be found in the JBTokensStore contract by using JBTokenStore.tokenOf(...). This will return a zero address if the project hasn't yet issued tokens or changed into a custom token. function tokenOf(uint256 _projectId) external view override returns (IJBToken) { ... } The project a token is currently being used for can be found by calling JBTokenStore.projectOf(...). function projectOf(IJBToken _token) external view override returns (uint256) { ... } If a project has issued an ERC-20s or is using a custom IJBToken, a holder can claim tokens that are being represented via the internal accounting mechanism into the ERC-20 or custom IJBToken by calling JBTokenStore.claimFor(...). function claimFor( address _holder, uint256 _projectId, uint256 _amount ) external override requirePermission(_holder, _projectId, JBOperations.CLAIM) { ... } View a holder's unclaimed project token balance Each project token holder's unclaimed balance can be found in the JBTokensStore contract using JBTokenStore.unclaimedBalanceOf(...). function unclaimedBalanceOf(address _holder, uint256 _projectId) external view override returns (uint256) { ... } A project's total unclaimed token supply can be found using JBTokenStore.unclaimedTotalSupplyOf(...) function unclaimedTotalSupplyOf(uint256 _projectId) external view override returns (uint256) { ... } ","keywords":""},{"title":"Integration Guide","type":0,"sectionRef":"#","url":"dev/protocol-v1/developers/integration-guide","content":"","keywords":""},{"title":"Hooking up your contract to a Juicebox project​","type":1,"pageTitle":"Integration Guide","url":"dev/protocol-v1/developers/integration-guide#hooking-up-your-contract-to-a-juicebox-project","content":"This guide is for users who would like to hook up their contract to a pre-existing Juicebox project. Right now, the primary use case for this is to route funds to a Juicebox project when certain events occur (e.g., minting an ERC721 token). Add the Juicebox contract dependency to your project: $ yarn add @jbox/sol  Inherit from JuiceboxProject in your contract. You will need to provide a Project ID and Terminal Directory address to the JuiceboxProject constructor. // SPDX-License-Identifier: MIT pragma solidity 0.8.6; import &quot;@jbox/sol/contracts/abstract/JuiceboxProject.sol&quot;; contract HelloWorldContract is JuiceboxProject { ... constructor( uint256 _projectID, ITerminalDirectory _terminalDirectory ) JuiceboxProject(_projectID, _terminalDirectory) {} ... }  "},{"title":"Example Projects​","type":1,"pageTitle":"Integration Guide","url":"dev/protocol-v1/developers/integration-guide#example-projects","content":"TileDAOWikiTokenAdd yours here! "},{"title":"Subgraph","type":0,"sectionRef":"#","url":"dev/protocol-v1/developers/subgraph","content":"Subgraph https://thegraph.com/explorer/subgraph?id=0x63a2368f4b509438ca90186cb1c15156713d5834-0&amp;view=Overview","keywords":""},{"title":"Mods","type":0,"sectionRef":"#","url":"dev/protocol-v1/mods","content":"","keywords":""},{"title":"payoutModsOf(uint256 _projectId, uint256 _configuration) → struct PayoutMod[] (external)​","type":1,"pageTitle":"Mods","url":"dev/protocol-v1/mods#payoutmodsofuint256-_projectid-uint256-_configuration--struct-payoutmod-external","content":" Get all payout mods for the specified project ID. @param _projectId The ID of the project to get mods for. @param _configuration The configuration to get mods for. @return An array of all mods for the project.  "},{"title":"ticketModsOf(uint256 _projectId, uint256 _configuration) → struct TicketMod[] (external)​","type":1,"pageTitle":"Mods","url":"dev/protocol-v1/mods#ticketmodsofuint256-_projectid-uint256-_configuration--struct-ticketmod-external","content":" Get all ticket mods for the specified project ID. @param _projectId The ID of the project to get mods for. @param _configuration The configuration to get mods for. @return An array of all mods for the project.  "},{"title":"constructor(contract IProjects _projects, contract IOperatorStore _operatorStore, contract ITerminalDirectory _terminalDirectory) (public)​","type":1,"pageTitle":"Mods","url":"dev/protocol-v1/mods#constructorcontract-iprojects-_projects-contract-ioperatorstore-_operatorstore-contract-iterminaldirectory-_terminaldirectory-public","content":""},{"title":"setPayoutMods(uint256 _projectId, uint256 _configuration, struct PayoutMod[] _mods) (external)​","type":1,"pageTitle":"Mods","url":"dev/protocol-v1/mods#setpayoutmodsuint256-_projectid-uint256-_configuration-struct-payoutmod-_mods-external","content":" Adds a mod to the payout mods list. @dev Only the owner or operator of a project can make this call, or the current terminal of the project. @param _projectId The project to add a mod to. @param _configuration The configuration to set the mods to be active during. @param _mods The payout mods to set.  "},{"title":"setTicketMods(uint256 _projectId, uint256 _configuration, struct TicketMod[] _mods) (external)​","type":1,"pageTitle":"Mods","url":"dev/protocol-v1/mods#setticketmodsuint256-_projectid-uint256-_configuration-struct-ticketmod-_mods-external","content":" Adds a mod to the ticket mods list. @dev Only the owner or operator of a project can make this call, or the current terminal of the project. @param _projectId The project to add a mod to. @param _configuration The configuration to set the mods to be active during. @param _mods The ticket mods to set.  "},{"title":"Contract Addresses","type":0,"sectionRef":"#","url":"dev/protocol-v1/resources/contract-addresses","content":"","keywords":""},{"title":"Juicebox Protocol V1​","type":1,"pageTitle":"Contract Addresses","url":"dev/protocol-v1/resources/contract-addresses#juicebox-protocol-v1","content":""},{"title":"Ethereum Mainnet​","type":1,"pageTitle":"Contract Addresses","url":"dev/protocol-v1/resources/contract-addresses#ethereum-mainnet","content":"TerminalDirectory: 0x46C9999A2EDCD5aA177ed7E8af90c68b7d75Ba46 TerminalV1: 0xd569D3CCE55b71a8a3f3C418c329A66e5f714431 Projects: 0x9b5a4053FfBB11cA9cd858AAEE43cc95ab435418`` TicketBooth: 0xee2eBCcB7CDb34a8A822b589F9E8427C24351bfc ModStore: 0xB9E4B658298C7A36BdF4C2832042A5D6700c3Ab8 OperatorStore: 0xab47304D987390E27Ce3BC0fA4Fe31E3A98B0db2 FundingCycles: 0xf507B2A1dD7439201eb07F11E1d62AfB29216e2E Active7DaysFundingCycleBallot: 0xEf7480b6E7CEd228fFB0854fe49A428F562a8982 Active3DaysFundingCycleBallot: 0x6d6da471703647Fd8b84FFB1A29e037686dBd8b2 Active1DayFundingCycleBallot: N/A Governance: 0xAc43e14c018490D045a774008648c701cda8C6b3 Prices: 0xa9537Cc42555564206D4E57c0eb6943d56E83A30`` "},{"title":"Rinkeby​","type":1,"pageTitle":"Contract Addresses","url":"dev/protocol-v1/resources/contract-addresses#rinkeby","content":"https://github.com/jbx-protocol/juice-contracts/tree/main/deployments/rinkeby "},{"title":"Kovan​","type":1,"pageTitle":"Contract Addresses","url":"dev/protocol-v1/resources/contract-addresses#kovan","content":"TerminalDirectory Kovan: 0x71BA69044CbD951AC87124cBEdbC0334AB21F26D "},{"title":"Juicebox DAO​","type":1,"pageTitle":"Contract Addresses","url":"dev/protocol-v1/resources/contract-addresses#juicebox-dao","content":""},{"title":"$JBX​","type":1,"pageTitle":"Contract Addresses","url":"dev/protocol-v1/resources/contract-addresses#jbx","content":"Mainnet ERC-20 Token: 0x3abf2a4f8452ccc2cf7b4c1e4663147600646f66 备注 To reduce gas fees, newly issued $JBX tokens are stored in the Juicebox TicketBooth contract by default (&quot;staked&quot;). $JBX holders can call the unstake function on the TicketBooth contract to mint $JBX ERC-20 tokens to their wallets. In the frontend, this is called Claim and can be found under the Manage button. The above ERC-20 contract reflects the total supply of minted ERC-20 $JBX tokens. To ascertain the total supply of claimed (ERC-20) and unclaimed (&quot;staked&quot;) $JBX tokens, call the totalSupplyOf() function on the TicketBooth contract above, passing project id 1 as the argument. "},{"title":"Gnosis Multisig​","type":1,"pageTitle":"Contract Addresses","url":"dev/protocol-v1/resources/contract-addresses#gnosis-multisig","content":"Mainnet​ Etherscan: https://etherscan.io/address/0xaf28bcb48c40dbc86f52d459a6562f658fc94b1e Gnosis Safe: https://gnosis-safe.io/app/eth:0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e/balances Rinkeby​ Etherscan: https://rinkeby.etherscan.io/address/0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e Gnosis Safe: https://gnosis-safe.io/app/rin:0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e/balances "},{"title":"Juicebox Protocol V2​","type":1,"pageTitle":"Contract Addresses","url":"dev/protocol-v1/resources/contract-addresses#juicebox-protocol-v2","content":""},{"title":"Rinkeby​","type":1,"pageTitle":"Contract Addresses","url":"dev/protocol-v1/resources/contract-addresses#rinkeby-2","content":"JBOperatorStore: 0x55d4dfb578daA4d60380995ffF7a706471d7c719 JBPrices: 0x47C6072ccDb899C016ED07ae8aEb7b2cfFe3C82e JBProjects: 0x2B0b6BD05a2F1f2a399F73528a99a495555C4c52 JBDirectory: 0xF77Cc21F7Ffdb0700D6d01FCF32EBE654f1A389b JBFundingCycleStore: 0xF77Cc21F7Ffdb0700D6d01FCF32EBE654f1A389b JBTokenStore: 0x29431d36f382f50878399C1D529b20582573AAb6 JBSplitsStore: 0xAa818525455C52061455a87C4Fb6F3a5E6f91090 JBController: 0xd2eEEdB22f075eBFf0a2A7D38781AA320CBc357E JBSingleTokenPaymentTerminalStore: 0x92239434A7d0D17c4d8F876C7DB75E54680Bc85e JBPayoutRedemptionPaymentTerminal: 0x9d5687A9A175308773Bb289159Aa61D326E3aDB5 "},{"title":"Understanding Funding Cycles","type":0,"sectionRef":"#","url":"dev/protocol-v1/resources/understanding-funding-cycles","content":"Understanding Funding Cycles Every Juicebox project has Funding Cycles, which can be used to synchronize governance, payouts, and project reconfiguration. Juicebox projects have the option to set a Funding cycle duration. If a funding cycle duration is set, project parameters can not be changed during a funding cycle. Instead, reconfigurations are queued to be executed at the start of the next funding cycle. 提示 Projects with no funding cycle duration can make project reconfigurations at any time, which will trigger a new funding cycle. Projects can also set a Funding cycle target in ETH or USD, which determines how much funding can be distributed each funding cycle. Contributor payouts and fixed monthly costs should be considered when setting this target. Overflow is created if a project exceeds this target. Token holders can then redeem their tokens to claim overflow, burning their tokens in the process.","keywords":""},{"title":"Understanding Overflow","type":0,"sectionRef":"#","url":"dev/protocol-v1/resources/understanding-overflow","content":"Understanding Overflow Each Juicebox project can set a funding target, in ETH or USD. This amount can be a one-time goal, or a recurring goal that takes place every funding cycle. Payments do not close once a funding target is reached—instead, any additional payments create overflow. Once a funding cycle ends, any overflow can be used to meet the next cycle's funding target. When contributors pay a Juicebox project, they receive tokens. Tokens can be redeemed to claim a proportional amount of the overflow. For example, a wallet with 1% of the total token supply can redeem those tokens to claim 1% of the overflow.","keywords":""},{"title":"Understanding Tokens","type":0,"sectionRef":"#","url":"dev/protocol-v1/resources/understanding-tokens","content":"","keywords":""},{"title":"Reserved Tokens​","type":1,"pageTitle":"Understanding Tokens","url":"dev/protocol-v1/resources/understanding-tokens#reserved-tokens","content":"The Reserved Tokens section determines what percentage of tokens goes to the payer and what percentage of tokens goes to a designated list of Ethereum wallets and Juicebox projects. Reserved tokens determines what percentage of token issuance is reserved.Allocate reserved tokens determines how reserved tokens will be distributed. By default, reserved tokens go to the project owner. "},{"title":"Incentives​","type":1,"pageTitle":"Understanding Tokens","url":"dev/protocol-v1/resources/understanding-tokens#incentives","content":"Juicebox projects can enable a Discount rate and Bonding curve rate. Discount rate is a percentage that changes the cost of issuing tokens over time. Each funding cycle, the amount of tokens issued per ETH will decrease by the discount rate. Generally, this will reward people who fund your project earlier.Bonding curve rate changes the amount of overflow that each token can be redeemed for. A Bonding curve rate of 60% means that tokens can be redeemed for 60% of the value they correspond to. The other 40% remains in the treasury, increasing the value of other tokens and rewarding long-term token holders.  "},{"title":"TerminalDirectory","type":0,"sectionRef":"#","url":"dev/protocol-v1/terminal-directory","content":"","keywords":""},{"title":"Address​","type":1,"pageTitle":"TerminalDirectory","url":"dev/protocol-v1/terminal-directory#address","content":"Mainnet: 0x46C9999A2EDCD5aA177ed7E8af90c68b7d75Ba46 Kovan: 0x71BA69044CbD951AC87124cBEdbC0334AB21F26D "},{"title":"Contract​","type":1,"pageTitle":"TerminalDirectory","url":"dev/protocol-v1/terminal-directory#contract","content":"contracts/TerminalDirectory.sol "},{"title":"Purpose​","type":1,"pageTitle":"TerminalDirectory","url":"dev/protocol-v1/terminal-directory#purpose","content":"Stores the active Terminal for each project. Projects can deploy contracts that will forward a direct payment to the Terminal. Projects can deploy contracts that will forward a direct payment to the Terminal. "},{"title":"Events​","type":1,"pageTitle":"TerminalDirectory","url":"dev/protocol-v1/terminal-directory#events","content":"event DeployAddress( uint256 indexed projectId, string memo, address indexed caller )  event SetTerminal( uint256 indexed projectId, ITerminal indexed terminal, address caller )  event SetPayerPreferences( address indexed account, address beneficiary, bool preferUnstakedTickets )  "},{"title":"Constructor​","type":1,"pageTitle":"TerminalDirectory","url":"dev/protocol-v1/terminal-directory#constructor","content":"/** @param _projects A Projects contract which mints ERC-721's that represent project ownership and transfers. @param _operatorStore A contract storing operator assignments. */ constructor(IProjects _projects, IOperatorStore _operatorStore) Operatable(_operatorStore)  "},{"title":"Read​","type":1,"pageTitle":"TerminalDirectory","url":"dev/protocol-v1/terminal-directory#read","content":"/// @notice Mints ERC-721's that represent project ownership and transfers. function projects() external view returns (IProjects)  /// @notice For each project ID, the juicebox terminal that the direct payment addresses are proxies for. function terminalOf(uint256 _projectId) external view returns (ITerminal)  /// @notice For each address, the address that will be used as the beneficiary of direct payments made. function beneficiaryOf(address _account) external returns (address)  /// @notice For each address, the preference of whether ticket will be auto claimed as ERC20s when a payment is made. function unstakedTicketsPreferenceOf(address _account) external returns (bool)  /** @notice A list of all direct payment addresses for the specified project ID. @param _projectId The ID of the project to get direct payment addresses for. @return A list of direct payment addresses for the specified project ID. */ function addressesOf(uint256 _projectId) external view override returns (IDirectPaymentAddress[] memory) { return _addressesOf[_projectId]; }  "},{"title":"Write​","type":1,"pageTitle":"TerminalDirectory","url":"dev/protocol-v1/terminal-directory#write","content":"/** @notice Allows anyone to deploy a new direct payment address for a project. @param _projectId The ID of the project to deploy a direct payment address for. @param _memo The note to use for payments made through the new direct payment address. */ function deployAddress(uint256 _projectId, string calldata _memo) external  /** @notice Update the juicebox terminal that payments to direct payment addresses will be forwarded for the specified project ID. @param _projectId The ID of the project to set a new terminal for. @param _terminal The new terminal to set. */ function setTerminal(uint256 _projectId, ITerminal _terminal) external  /** @notice Allows any address to pre set the beneficiary of their payments to any direct payment address, and to pre set whether to prefer to unstake tickets into ERC20's when making a payment. @param _beneficiary The beneficiary to set. @param _preferUnstakedTickets The preference to set. */ function setPayerPreferences( address _beneficiary, bool _preferUnstakedTickets ) external  "},{"title":"TerminalV1","type":0,"sectionRef":"#","url":"dev/protocol-v1/terminalv1/","content":"","keywords":""},{"title":"Content​","type":1,"pageTitle":"TerminalV1","url":"dev/protocol-v1/terminalv1/#content","content":"On this page you'll find the documentation for the constructor and the events, for the read and write functions of the terminal follow the links: read.md write.md "},{"title":"Constructor​","type":1,"pageTitle":"TerminalV1","url":"dev/protocol-v1/terminalv1/#constructor","content":"Params: _projects: A Projects contract which mints ERC-721's that represent project ownership and transfers**.**_fundingCycles: A funding cycle configuration store._ticketBooth: A contract that manages Ticket printing and redeeming._operatorStore: A contract storing operator assignments._modStore: A storage for a project's mods._prices: A price feed contract to use._terminalDirectory: A directory of a project's current Juicebox terminal to receive payments in. constructor( IProjects _projects, IFundingCycles _fundingCycles, ITicketBooth _ticketBooth, IOperatorStore _operatorStore, IModStore _modStore, IPrices _prices, ITerminalDirectory _terminalDirectory, address payable _governance )  "},{"title":"Events​","type":1,"pageTitle":"TerminalV1","url":"dev/protocol-v1/terminalv1/#events","content":""},{"title":"Read","type":0,"sectionRef":"#","url":"dev/protocol-v1/terminalv1/read","content":"","keywords":""},{"title":"canPrintPreminedTickets​","type":1,"pageTitle":"Read","url":"dev/protocol-v1/terminalv1/read#canprintpreminedtickets","content":"Whether or not a project can still print premined tickets. Params: _projectId:The ID of the project to get the status of. Returns: Boolean flag. function canPrintPreminedTickets(uint256 _projectId) external view returns (bool);  "},{"title":"claimableOverflowOf​","type":1,"pageTitle":"Read","url":"dev/protocol-v1/terminalv1/read#claimableoverflowof","content":"The amount of tokens that can be claimed by the given address. The _account must have at least _count tickets for the specified project.\\ If there is a funding cycle reconfiguration ballot open for the project, the project's current bonding curve is bypassed. Params: _account: The address to get an amount for. _projectId: The ID of the project to get a claimable amount for. _count: The number of Tickets that would be redeemed to get the resulting amount. Returns: The amount of tokens that can be claimed function claimableOverflowOf( address _account, uint256 _projectId, uint256 _count ) external view returns (uint256)  "},{"title":"currentOverflowOf​","type":1,"pageTitle":"Read","url":"dev/protocol-v1/terminalv1/read#currentoverflowof","content":"Gets the current overflowed amount for a specified project. Params: _projectId: The ID of the project to get overflow for. Returns The current overflow of funds for the project. function currentOverflowOf(uint256 _projectId) external view returns (uint256 overflow)  "},{"title":"governance​","type":1,"pageTitle":"Read","url":"dev/protocol-v1/terminalv1/read#governance","content":"Returns The address of the current governance function governance() external view returns (address payable);  "},{"title":"reservedTicketBalanceOf​","type":1,"pageTitle":"Read","url":"dev/protocol-v1/terminalv1/read#reservedticketbalanceof","content":"Gets the amount of reserved tickets that a project has. Params: _projectId: The ID of the project to get overflow for._reservedRate: The reserved rate to use to make the calculation. Returns: amount overflow The current overflow of funds for the project. function reservedTicketBalanceOf(uint256 _projectId, uint256 _reservedRate) external view returns (uint256);  "},{"title":"","type":1,"pageTitle":"Read","url":"dev/protocol-v1/terminalv1/read##","content":""},{"title":"TO-DO​","type":1,"pageTitle":"Read","url":"dev/protocol-v1/terminalv1/read#to-do","content":"Read functions yet to be documented function pendingGovernance() external view returns (address payable); function projects() external view returns (IProjects); function fundingCycles() external view returns (IFundingCycles); function ticketBooth() external view returns (ITicketBooth); function prices() external view returns (IPrices); function modStore() external view returns (IModStore); function balanceOf(uint256 _projectId) external view returns (uint256); function fee() external view returns (uint256); function terminalDirectory() external view returns (ITerminalDirectory); function migrationIsAllowed(ITerminal _terminal) external view returns (bool);  "},{"title":"Write","type":0,"sectionRef":"#","url":"dev/protocol-v1/terminalv1/write","content":"","keywords":""},{"title":"acceptGovernance​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#acceptgovernance","content":"Allows contract to accept its appointment as the new governance.\\ Only the pending governance can accept. function acceptGovernance() external;  "},{"title":"addToBalance​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#addtobalance","content":"Receives and allocates funds belonging to the specified project. Params: _projectId: The ID of the project to which the funds received belong. function addToBalance(uint256 _projectId) external payable;  "},{"title":"allowMigration​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#allowmigration","content":"Adds to the contract addresses that projects can migrate their Tickets to. Only governance can add a contract to the migration allow list. Params: _contract: The contract to allow. function allowMigration(ITerminal _contract) external;  "},{"title":"configure​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#configure","content":"Configures the properties of the current funding cycle if the project hasn't distributed tickets yet, or sets the properties of the proposed funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot. Only a project's owner or a designated operator can configure its funding cycles. Params: _projectId: The ID of the project being reconfigured._properties: The funding cycle configuration. _properties.target: The amount that the project wants to receive in this funding stage. Sent as a wad._properties.currency: The currency of the `target`. Send 0 for ETH or 1 for USD._properties.duration: The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time._properties.cycleLimit: The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle._properties.discountRate: A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage. If it's 200, each funding stage will have equal weight.If the number is 180, a contribution to the next funding stage will only give you 90% of tickets given to a contribution of the same amount during the current funding stage.If the number is 0, an non-all transactions except the constructor are write functions recurring funding stage will get made. _properties.ballot: The new ballot that will be used to approve subsequent reconfigurations. _metadata: A struct specifying the TerminalV1 specific params _bondingCurveRate, and _reservedRate. _metadata.reservedRate: A number from 0-200 indicating the percentage of each contribution's tickets that will be reserved for the project owner._metadata.bondingCurveRate: The rate from 0-200 at which a project's Tickets can be redeemed for surplus. The bonding curve formula can be found here, where x is _count, o is _currentOverflow, s is _totalSupply, and r is _bondingCurveRate._metadata.reconfigurationBondingCurveRate: The bonding curve rate to apply when there is an active ballot. Returns: The ID of the funding cycle that was successfully configured.  function configure( uint256 _projectId, FundingCycleProperties calldata _properties, FundingCycleMetadata calldata _metadata, PayoutMod[] memory _payoutMods, TicketMod[] memory _ticketMods ) external returns (uint256);  "},{"title":"deploy​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#deploy","content":"Deploys a project. This will mint an ERC-721 into the _owner's account, configure a first funding cycle, and set up any mods. Each operation within this transaction can be done in sequence separately\\ Anyone can deploy a project on an owner's behalf. Params: _owner: The address that will own the project. _handle: The project's unique handle. _uri: A link to information about the project and this funding cycle. _properties: The funding cycle configuration. _properties.target: The amount that the project wants to receive in this funding cycle. Sent as a wad._properties.currency: The currency of the `target`. Send 0 for ETH or 1 for USD._properties.duration: The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time._properties.cycleLimit: The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle._properties.discountRate: A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage.If it's 200, each funding stage will have equal weight.If the number is 180, a contribution to the next funding stage will only give you 90% of tickets given to a contribution of the same amount during the current funding stage.If the number is 0, an non-recurring funding stage will get made._properties.ballot: The new ballot that will be used to approve subsequent reconfigurations. _metadata: A struct specifying the TerminalV1 specific params _bondingCurveRate, and _reservedRate. _metadata.reservedRate: A number from 0-200 indicating the percentage of each contribution's tickets that will be reserved for the project owner. _metadata.bondingCurveRate: The rate from 0-200 at which a project's Tickets can be redeemed for surplus. The bonding curve formula can be found here. where x is _count, o is _currentOverflow, s is _totalSupply, and r is _bondingCurveRate. _metadata.reconfigurationBondingCurveRate: The bonding curve rate to apply when there is an active ballot. _payoutMods: Any payout mods to set. _ticketMods: Any ticket mods to set.  function deploy( address _owner, bytes32 _handle, string calldata _uri, FundingCycleProperties calldata _properties, FundingCycleMetadata calldata _metadata, PayoutMod[] memory _payoutMods, TicketMod[] memory _ticketMods ) external;  "},{"title":"migrate​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#migrate","content":"Allows a project owner to migrate its funds and operations to a new contract. Only a project's owner or a designated operator can migrate it. Params: _projectId: The ID of the project being migrated._to: The contract that will gain the project's funds. function migrate(uint256 _projectId, ITerminal _to) external;  "},{"title":"onlyGov​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#onlygov","content":"Allows governance to transfer its privileges to another contract. Only the current governance can appoint a new governance. Params: _pendingGovernance: The governance to transition power to. This address will have to accept the responsibility in a subsequent transaction. function appointGovernance(address payable _pendingGovernance) external;  "},{"title":"","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write##","content":""},{"title":"pay​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#pay","content":"Contribute ETH to a project. Print's the project's tickets proportional to the amount of the contribution.\\ The msg.value is the amount of the contribution in wei. Params: _projectId: The ID of the project being contribute to._beneficiary: The address to print Tickets for. _memo A memo that will be included in the published event._preferUnstakedTickets: Whether ERC20's should be unstaked automatically if they have been issued. Returns: The ID of the funding cycle that the payment was made durin function pay( uint256 _projectId, address _beneficiary, string calldata _memo, bool _preferUnstakedTickets ) external payable returns (uint256 fundingCycleId);  "},{"title":"printPreminedTickets​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#printpreminedtickets","content":"Allows a project to print tickets for a specified beneficiary before payments have been received. @dev This can only be done if the project hasn't yet received a payment after configuring a funding cycle.\\ Only a project's owner or a designated operator can print premined tickets. _projectId: The ID of the project to premine tickets for._amount: The amount to base the ticket premine off of._currency: The currency of the amount to base the ticket premine off of._beneficiary: The address to send the printed tickets to._memo: A memo to leave with the printing._preferUnstakedTickets: If there is a preference to unstake the printed tickets. function printPreminedTickets( uint256 _projectId, uint256 _amount, uint256 _currency, address _beneficiary, string memory _memo, bool _preferUnstakedTickets ) external;  "},{"title":"printReservedTickets​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#printreservedtickets","content":"Prints all reserved tickets for a project. Params: _projectId: The ID of the project to which the reserved tickets belong. Returns: The amount of tickets that are being printed function printReservedTickets(uint256 _projectId) external returns (uint256 reservedTicketsToPrint);  "},{"title":"redeem​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#redeem","content":"Addresses can redeem their Tickets to claim the project's overflowed ETH. Only a ticket's holder or a designated operator can redeem it. Params: _account: The account to redeem tickets for._projectId: The ID of the project to which the Tickets being redeemed belong._count: The number of Tickets to redeem._minReturnedWei: The minimum amount of Wei expected in return._beneficiary: The address to send the ETH to._preferUnstaked: If the preference is to redeem tickets that have been converted to ERC-20s. Returns: The amount of ETH that the tickets were redeemed for.  function redeem( address _account, uint256 _projectId, uint256 _amount, uint256 _minReturnedWei, address payable _beneficiary, bool _preferUnstaked ) external returns (uint256 returnAmount);  "},{"title":"setFee​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#setfee","content":"Allow the admin to change the fee. Only funding cycle reconfigurations after the new fee is set will use the new fee. All future funding cycles based on configurations made in the past will use the fee that was set at the time of the configuration.\\ Only governance can set a new fee. Params: _fee: The new fee percent. Out of 200. function setFee(uint256 _fee) external;  "},{"title":"​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#-1","content":""},{"title":"tap​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#tap","content":"Tap into funds that have been contributed to a project's current funding cycle. Anyone can tap funds on a project's behalf. Params: _projectId: The ID of the project to which the funding cycle being tapped belongs._amount: The amount being tapped, in the funding cycle's currency._currency: The expected currency being tapped._minReturnedWei: The minimum number of wei that the amount should be valued at. Returns: The ID of the funding cycle that was tapped. function tap( uint256 _projectId, uint256 _amount, uint256 _currency, uint256 _minReturnedWei ) external returns (uint256);  "},{"title":"TO-DO​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/terminalv1/write#to-do","content":"Write functions yet to be documented. function allowMigration(ITerminal _contract) external; function appointGovernance(address payable _pendingGovernance) external;  "},{"title":"TicketBooth","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/","content":"","keywords":""},{"title":"Constructor​","type":1,"pageTitle":"TicketBooth","url":"dev/protocol-v1/ticketbooth/#constructor","content":"Params: _projects: A Projects contract which mints ERC-721's that represent project ownership and transfers._operatorStore: A contract storing operator assignments._terminalDirectory: A directory of a project's current Juicebox terminal to receive payments in. constructor( IProjects _projects, IOperatorStore _operatorStore, ITerminalDirectory _terminalDirectory );  "},{"title":"DirectPaymentAddress","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/directpaymentaddress","content":"","keywords":""},{"title":"Constructor​","type":1,"pageTitle":"DirectPaymentAddress","url":"dev/protocol-v1/ticketbooth/directpaymentaddress#constructor","content":"/** @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in. @param _projectId The ID of the project to pay when this contract receives funds. @param _memo The memo to use when this contract forwards a payment to a terminal. */ constructor( ITerminalDirectory _terminalDirectory, uint256 _projectId, string memory _memo )  "},{"title":"Funding Cycles","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/funding-cycles","content":"","keywords":""},{"title":"Constructor​","type":1,"pageTitle":"Funding Cycles","url":"dev/protocol-v1/ticketbooth/funding-cycles#constructor","content":"/** @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in. */ constructor(ITerminalDirectory _terminalDirectory) TerminalUtility(_terminalDirectory)  "},{"title":"Read​","type":1,"pageTitle":"Funding Cycles","url":"dev/protocol-v1/ticketbooth/funding-cycles#read","content":"/** @notice Get the funding cycle with the given ID. @param _fundingCycleId The ID of the funding cycle to get. @return _fundingCycle The funding cycle. */ function get(uint256 _fundingCycleId) external view override returns (FundingCycle memory)  /** @notice The funding cycle that's next up for a project, and therefor not currently accepting payments. @dev This runs roughly similar logic to `_configurable`. @param _projectId The ID of the project being looked through. @return _fundingCycle The queued funding cycle. */ function queuedOf(uint256 _projectId) external view override returns (FundingCycle memory)  /** @notice The funding cycle that is currently active for the specified project. @dev This runs very similar logic to `_tappable`. @param _projectId The ID of the project being looked through. @return fundingCycle The current funding cycle. */ function currentOf(uint256 _projectId) external view override returns (FundingCycle memory fundingCycle)  /** @notice The current ballot state of the project. @param _projectId The ID of the project to check for a pending reconfiguration. @return The current ballot's state. */ function currentBallotStateOf(uint256 _projectId) external view override returns (BallotState)  "},{"title":"Write​","type":1,"pageTitle":"Funding Cycles","url":"dev/protocol-v1/ticketbooth/funding-cycles#write","content":"/** @notice Configures the next eligible funding cycle for the specified project. @dev Only a project's current terminal can configure its funding cycles. @param _projectId The ID of the project being reconfigured. @param _properties The funding cycle configuration. @dev _properties.target The amount that the project wants to receive in each funding cycle. 18 decimals. @dev _properties.currency The currency of the `_target`. Send 0 for ETH or 1 for USD. @dev _properties.duration The duration of the funding cycle for which the `_target` amount is needed. Measured in days. Set to 0 for no expiry and to be able to reconfigure anytime. @dev _cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This does nothing for a project's first funding cycle. @dev _properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles. If it's 0, each funding cycle will have equal weight. If the number is 100, a contribution to the next funding cycle will only give you 90% of tickets given to a contribution of the same amount during the current funding cycle. If the number is 200, a contribution to the next funding cycle will only give you 80% of tickets given to a contribution of the same amoutn during the current funding cycle. If the number is 201, an non-recurring funding cycle will get made. @dev _ballot The new ballot that will be used to approve subsequent reconfigurations. @param _metadata Data to associate with this funding cycle configuration. @param _fee The fee that this configuration will incure when tapping. @param _configureActiveFundingCycle If a funding cycle that has already started should be configurable. @return fundingCycle The funding cycle that the configuration will take effect during. */ function configure( uint256 _projectId, FundingCycleProperties calldata _properties, uint256 _metadata, uint256 _fee, bool _configureActiveFundingCycle ) external override onlyTerminal(_projectId) returns (FundingCycle memory fundingCycle)  /** @notice Tap funds from a project's currently tappable funding cycle. @dev Only a project's current terminal can tap funds for its funding cycles. @param _projectId The ID of the project being tapped. @param _amount The amount being tapped. @return fundingCycle The tapped funding cycle. */ function tap(uint256 _projectId, uint256 _amount) external override onlyTerminal(_projectId) returns (FundingCycle memory fundingCycle)  "},{"title":"Governance","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/governance","content":"","keywords":""},{"title":"Constructor​","type":1,"pageTitle":"Governance","url":"dev/protocol-v1/ticketbooth/governance#constructor","content":"/** @param _projectId The ID of the Juicebox project being governed. @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in. */ constructor(uint256 _projectId, ITerminalDirectory _terminalDirectory)  "},{"title":"Write​","type":1,"pageTitle":"Governance","url":"dev/protocol-v1/ticketbooth/governance#write","content":"/** @notice Gives projects using one Terminal access to migrate to another Terminal. @param _from The terminal to allow a new migration from. @param _to The terminal to allow migration to. */ function allowMigration(ITerminal _from, ITerminal _to) external onlyOwner  /** @notice Adds a price feed. @param _prices The prices contract to add a feed to. @param _feed The price feed to add. @param _currency The currency the price feed is for. */ function addPriceFeed( IPrices _prices, AggregatorV3Interface _feed, uint256 _currency ) external onlyOwner  /** @notice Sets the fee of the TerminalV1. @param _terminalV1 The terminalV1 to change the fee of. @param _fee The new fee. */ function setFee(ITerminalV1 _terminalV1, uint256 _fee) external onlyOwner  /** @notice Appoints a new governance for the specified terminalV1. @param _terminalV1 The terminalV1 to change the governance of. @param _newGovernance The address to appoint as governance. */ function appointGovernance( ITerminalV1 _terminalV1, address payable _newGovernance ) external onlyOwner  /** @notice Accepts the offer to be the governance of a new terminalV1. @param _terminalV1 The terminalV1 to change the governance of. */ function acceptGovernance(ITerminalV1 _terminalV1) external onlyOwner  "},{"title":"ModStore","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/modstore","content":"","keywords":""},{"title":"Constructor​","type":1,"pageTitle":"ModStore","url":"dev/protocol-v1/ticketbooth/modstore#constructor","content":"/** @param _projects The contract storing project information @param _operatorStore A contract storing operator assignments. @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in. */ constructor( IProjects _projects, IOperatorStore _operatorStore, ITerminalDirectory _terminalDirectory ) Operatable(_operatorStore) TerminalUtility(_terminalDirectory)  "},{"title":"Read​","type":1,"pageTitle":"ModStore","url":"dev/protocol-v1/ticketbooth/modstore#read","content":"/** @notice Get all payout mods for the specified project ID. @param _projectId The ID of the project to get mods for. @param _configuration The configuration to get mods for. @return An array of all mods for the project. */ function payoutModsOf(uint256 _projectId, uint256 _configuration) external view override returns (PayoutMod[] memory)  /** @notice Get all ticket mods for the specified project ID. @param _projectId The ID of the project to get mods for. @param _configuration The configuration to get mods for. @return An array of all mods for the project. */ function ticketModsOf(uint256 _projectId, uint256 _configuration) external view override returns (TicketMod[] memory)  "},{"title":"Write​","type":1,"pageTitle":"ModStore","url":"dev/protocol-v1/ticketbooth/modstore#write","content":"/** @notice Adds a mod to the payout mods list. @dev Only the owner or operator of a project can make this call, or the current terminal of the project. @param _projectId The project to add a mod to. @param _configuration The configuration to set the mods to be active during. @param _mods The payout mods to set. */ function setPayoutMods( uint256 _projectId, uint256 _configuration, PayoutMod[] memory _mods ) external override requirePermissionAcceptingAlternateAddress( projects.ownerOf(_projectId), _projectId, Operations.SetPayoutMods, address(terminalDirectory.terminalOf(_projectId)) )  /** @notice Adds a mod to the ticket mods list. @dev Only the owner or operator of a project can make this call, or the current terminal of the project. @param _projectId The project to add a mod to. @param _configuration The configuration to set the mods to be active during. @param _mods The ticket mods to set. */ function setTicketMods( uint256 _projectId, uint256 _configuration, TicketMod[] memory _mods ) external override requirePermissionAcceptingAlternateAddress( projects.ownerOf(_projectId), _projectId, Operations.SetTicketMods, address(terminalDirectory.terminalOf(_projectId)) )  "},{"title":"OperatorStore","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/operatorstore","content":"","keywords":""},{"title":"Constructor​","type":1,"pageTitle":"OperatorStore","url":"dev/protocol-v1/ticketbooth/operatorstore#constructor","content":""},{"title":"Read​","type":1,"pageTitle":"OperatorStore","url":"dev/protocol-v1/ticketbooth/operatorstore#read","content":"/** @notice Whether or not an operator has the permission to take a certain action pertaining to the specified domain. @param _operator The operator to check. @param _account The account that has given out permission to the operator. @param _domain The domain that the operator has been given permissions to operate. @param _permissionIndex the permission to check for. @return Whether the operator has the specified permission. */ function hasPermission( address _operator, address _account, uint256 _domain, uint256 _permissionIndex ) external view override returns (bool)  /** @notice Whether or not an operator has the permission to take certain actions pertaining to the specified domain. @param _operator The operator to check. @param _account The account that has given out permissions to the operator. @param _domain The domain that the operator has been given permissions to operate. @param _permissionIndexes An array of permission indexes to check for. @return Whether the operator has all specified permissions. */ function hasPermissions( address _operator, address _account, uint256 _domain, uint256[] calldata _permissionIndexes ) external view override returns (bool)  "},{"title":"Write​","type":1,"pageTitle":"OperatorStore","url":"dev/protocol-v1/ticketbooth/operatorstore#write","content":"/** @notice Sets permissions for an operator. @param _operator The operator to give permission to. @param _domain The domain that the operator is being given permissions to operate. @param _permissionIndexes An array of indexes of permissions to set. */ function setOperator( address _operator, uint256 _domain, uint256[] calldata _permissionIndexes ) external override  /** @notice Sets permissions for many operators. @param _operators The operators to give permission to. @param _domains The domains that can be operated. Set to 0 to allow operation of account level actions. @param _permissionIndexes The level of power each operator should have. */ function setOperators( address[] calldata _operators, uint256[] calldata _domains, uint256[][] calldata _permissionIndexes ) external override  "},{"title":"Prices","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/prices","content":"","keywords":""},{"title":"Read​","type":1,"pageTitle":"Prices","url":"dev/protocol-v1/ticketbooth/prices#read","content":"/** @notice Gets the current price of ETH for the provided currency. @param _currency The currency to get a price for. @return price The price of ETH with 18 decimals. */ function getETHPriceFor(uint256 _currency) external view override returns (uint256)  "},{"title":"Write​","type":1,"pageTitle":"Prices","url":"dev/protocol-v1/ticketbooth/prices#write","content":"/** @notice Add a price feed for the price of ETH. @dev Current feeds can't be modified. @param _feed The price feed being added. @param _currency The currency that the price feed is for. */ function addFeed(AggregatorV3Interface _feed, uint256 _currency) external override onlyOwner  "},{"title":"Projects","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/projects","content":"","keywords":""},{"title":"Constructor​","type":1,"pageTitle":"Projects","url":"dev/protocol-v1/ticketbooth/projects#constructor","content":"/** @param _operatorStore A contract storing operator assignments. */ constructor(IOperatorStore _operatorStore) ERC721(&quot;Juicebox project&quot;, &quot;JUICEBOX PROJECT&quot;) Operatable(_operatorStore)  "},{"title":"Read​","type":1,"pageTitle":"Projects","url":"dev/protocol-v1/ticketbooth/projects#read","content":"/** @notice Whether the specified project exists. @param _projectId The project to check the existence of. @return A flag indicating if the project exists. */ function exists(uint256 _projectId) external view override returns (bool)  "},{"title":"Write​","type":1,"pageTitle":"Projects","url":"dev/protocol-v1/ticketbooth/projects#write","content":"/** @notice Create a new project. @dev Anyone can create a project on an owner's behalf. @param _owner The owner of the project. @param _handle A unique handle for the project. @param _uri An ipfs CID to more info about the project. @param _terminal The terminal to set for this project so that it can start receiving payments. @return The new project's ID. */ function create( address _owner, bytes32 _handle, string calldata _uri, ITerminal _terminal ) external override returns (uint256)  /** @notice Allows a project owner to set the project's handle. @dev Only a project's owner or operator can set its handle. @param _projectId The ID of the project. @param _handle The new unique handle for the project. */ function setHandle(uint256 _projectId, bytes32 _handle) external override requirePermission(ownerOf(_projectId), _projectId, Operations.SetHandle)  /** @notice Allows a project owner to set the project's uri. @dev Only a project's owner or operator can set its uri. @param _projectId The ID of the project. @param _uri An ipfs CDN to more info about the project. Don't include the leading ipfs:// */ function setUri(uint256 _projectId, string calldata _uri) external override requirePermission(ownerOf(_projectId), _projectId, Operations.SetUri)  /** @notice Allows a project owner to transfer its handle to another address. @dev Only a project's owner or operator can transfer its handle. @param _projectId The ID of the project to transfer the handle from. @param _to The address that can now reallocate the handle. @param _newHandle The new unique handle for the project that will replace the transferred one. */ function transferHandle( uint256 _projectId, address _to, bytes32 _newHandle ) external override requirePermission(ownerOf(_projectId), _projectId, Operations.SetHandle) returns (bytes32 _handle)  /** @notice Allows an address to claim and handle that has been transferred to them and apply it to a project of theirs. @dev Only a project's owner or operator can claim a handle onto it. @param _handle The handle being claimed. @param _for The address that the handle has been transferred to. @param _projectId The ID of the project to use the claimed handle. */ function claimHandle( bytes32 _handle, address _for, uint256 _projectId ) external override requirePermissionAllowingWildcardDomain( _for, _projectId, Operations.ClaimHandle ) requirePermission( ownerOf(_projectId), _projectId, Operations.ClaimHandle )  /** @notice Allows anyone to challenge a project's handle. After one year, the handle can be claimed by the public if the challenge isn't answered by the handle's project. This can be used to make sure a handle belonging to an unattended to project isn't lost forever. @param _handle The handle to challenge. */ function challengeHandle(bytes32 _handle) external  /** @notice Allows a project to renew its handle so it can't be claimed until a year after its challenged again. @dev Only a project's owner or operator can renew its handle. @param _projectId The ID of the project that current has the handle being renewed. */ function renewHandle(uint256 _projectId) external requirePermission( ownerOf(_projectId), _projectId, Operations.RenewHandle )  "},{"title":"Read","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/read","content":"","keywords":""},{"title":"","type":1,"pageTitle":"Read","url":"dev/protocol-v1/ticketbooth/read##","content":""},{"title":"balanceOf​","type":1,"pageTitle":"Read","url":"dev/protocol-v1/ticketbooth/read#balanceof","content":"The total balance of tickets a holder has for a specified project, including staked and unstaked tickets. Params: holder: The ticket holder to get a balance for._projectId: The project to get the `_hodler`s balance of. Returns: The balance. function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);  "},{"title":"​","type":1,"pageTitle":"Read","url":"dev/protocol-v1/ticketbooth/read#-1","content":""},{"title":"totalSupplyOf​","type":1,"pageTitle":"Read","url":"dev/protocol-v1/ticketbooth/read#totalsupplyof","content":"The total supply of tickets for each project, including staked and unstaked tickets. Params: projectId: The ID of the project to get the total supply of. Returns: The total supply. function totalSupplyOf(uint256 _projectId) external view returns (uint256);  "},{"title":"Tickets","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/tickets","content":"","keywords":""},{"title":"Constructor​","type":1,"pageTitle":"Tickets","url":"dev/protocol-v1/ticketbooth/tickets#constructor","content":"constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) ERC20Permit(_name)  "},{"title":"Write​","type":1,"pageTitle":"Tickets","url":"dev/protocol-v1/ticketbooth/tickets#write","content":"function print(address _account, uint256 _amount) external override onlyOwner { return _mint(_account, _amount); }  function redeem(address _account, uint256 _amount) external override onlyOwner { return _burn(_account, _amount); }  "},{"title":"Write","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/write","content":"","keywords":""},{"title":"issue​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/ticketbooth/write#issue","content":"Issues an owner's ERC-20 Tickets that'll be used when unstaking tickets.\\ Deploys an owner's Ticket ERC-20 token contract. Params: _projectId: The ID of the project being issued tickets._name: The ERC-20's name. &quot; Juicebox ticket&quot; will be appended._symbol: The ERC-20's symbol. &quot;j&quot; will be prepended. function issue( uint256 _projectId, string calldata _name, string calldata _symbol ) external;  "},{"title":"lock​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/ticketbooth/write#lock","content":"Lock a project's tickets, preventing them from being redeemed and from converting to ERC20s.\\ Only a ticket holder or an operator can lock its tickets. Params: _holder: The holder to lock tickets from._projectId: The ID of the project whos tickets are being locked._amount: The amount of tickets to lock. function lock( address _holder, uint256 _projectId, uint256 _amount ) external;  "},{"title":"unlock​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/ticketbooth/write#unlock","content":"Unlock a project's tickets.\\ The address that locked the tickets must be the address that unlocks the tickets. Params: _holder: The holder to unlock tickets from._projectId: The ID of the project whos tickets are being unlocked._amount: The amount of tickets to unlock. function unlock( address _holder, uint256 _projectId, uint256 _amount ) external;  "},{"title":"print​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/ticketbooth/write#print","content":"Print new tickets.\\ Only a project's current terminal can print its tickets. Params: _holder: The address receiving the new tickets._projectId: The project to which the tickets belong._amount: The amount to print._preferUnstakedTickets: Whether ERC20's should be converted automatically if they have been issued. function print( address _holder, uint256 _projectId, uint256 _amount, bool _preferUnstakedTickets ) external;  "},{"title":"redeem​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/ticketbooth/write#redeem","content":"Redeems tickets.\\ Only a project's current terminal can redeem its tickets. Params: _holder: The address that owns the tickets being redeemed._projectId: The ID of the project of the tickets being redeemed._amount: The amount of tickets being redeemed._preferUnstaked: If the preference is to redeem tickets that have been converted to ERC-20s. function redeem( address _holder, uint256 _projectId, uint256 _amount, bool _preferUnstaked ) external;  "},{"title":"stake​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/ticketbooth/write#stake","content":"Stakes ERC20 tickets by burning their supply and creating an internal staked version.\\ Only a ticket holder or an operator can stake its tickets. Params: _holder: The owner of the tickets to stake._projectId: The ID of the project whos tickets are being staked._amount: The amount of tickets to stake. function stake( address _holder, uint256 _projectId, uint256 _amount ) external;  "},{"title":"unstake​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/ticketbooth/write#unstake","content":"Unstakes internal tickets by creating and distributing ERC20 tickets.\\ Only a ticket holder or an operator can unstake its tickets. Params: _holder: The owner of the tickets to unstake._projectId: The ID of the project whos tickets are being unstaked._amount: The amount of tickets to unstake. function unstake( address _holder, uint256 _projectId, uint256 _amount ) external;  "},{"title":"transfer​","type":1,"pageTitle":"Write","url":"dev/protocol-v1/ticketbooth/write#transfer","content":"Allows a ticket holder to transfer its tickets to another account, without unstaking to ERC-20s.\\ Only a ticket holder or an operator can transfer its tickets. Params: _holder: The holder to transfer tickets from._projectId: The ID of the project whos tickets are being transferred._amount: The amount of tickets to transfer._recipient: The recipient of the tickets. function transfer( address _holder, uint256 _projectId, uint256 _amount, address _recipient ) external;  "},{"title":"Contract Addresses","type":0,"sectionRef":"#","url":"dev/resources/contract-addresses","content":"","keywords":""},{"title":"Juicebox Protocol V2​","type":1,"pageTitle":"Contract Addresses","url":"dev/resources/contract-addresses#juicebox-protocol-v2","content":""},{"title":"Ethereum Mainnet​","type":1,"pageTitle":"Contract Addresses","url":"dev/resources/contract-addresses#ethereum-mainnet","content":"JBChainlinkV3PriceFeed: 0x729eE70bfdF65bEc7A530Fd49F644d07D0b2c087 JBController: 0x4e3ef8AFCC2B52E4e704f4c8d9B7E7948F651351 JBCurrencies: 0x7F6f2bb90256eAD1189a16A86efCdC0122141c01 JBDirectory: 0xCc8f7a89d89c2AB3559f484E0C656423E979ac9C JBETHERC20ProjectPayerDeployer: 0x9E84bEcA3E4d3cfE5C3b5E1b534363E8D7468ABc JBETHERC20SplitsPayerDeployer: 0xf7A3D47be5AB412A469924B458113c769F675fcE JBETHPaymentTerminal: 0x7Ae63FBa045Fec7CaE1a75cF7Aa14183483b8397 JBFundingCycleStore: 0x6B8e01DAA8A61b544F96d2738893E05D04BF1D12 JBOperatorStore: 0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb JBPrices: 0xCDE93bdA2a706Fc652F7e75241bA949aCB9f4Fe5 JBProjects: 0xD8B4359143eda5B2d763E127Ed27c77addBc47d3 JB3DayReconfigurationBufferBallot: 0x4b9f876c7Fc5f6DEF8991fDe639b2C812a85Fb12 JB7DayReconfigurationBufferBallot: 0x642EFF5259624FD09D021AB764a4b47d1DbD5770 JBSingleTokenPaymentTerminalStore: 0x96a594ABE6B910E05E486b63B32fFe29DA5d33f7 JBSplitsStore: 0xFBE1075826B7FFd898cf8D944885ba6a8D714A7F JBTokenStore: 0xCBB8e16d998161AdB20465830107ca298995f371 "},{"title":"Rinkeby​","type":1,"pageTitle":"Contract Addresses","url":"dev/resources/contract-addresses#rinkeby","content":"JBChainlinkV3PriceFeed: 0x59F6aEE20d746708539B4f2E75CA50F9dDCFdC70 JBController: 0xd96ecf0E07eB197587Ad4A897933f78A00B21c9a JBCurrencies: 0x1bA7138f8bb6D59A74A883a0E3104D1b1B698aD4 JBDirectory: 0x1A9b04A9617ba5C9b7EBfF9668C30F41db6fC21a JBETHERC20ProjectPayerDeployer: 0x3247df1bdC849f69Ba7dA4faf71d1e5850A6Fbb8 JBETHERC20SplitsPayerDeployer: 0xE337D14A547a63D5f800A2de0e4F8B2F5B2f1b5D JBETHPaymentTerminal: 0x765A8b9a23F58Db6c8849315C04ACf32b2D55cF8 JBFundingCycleStore: 0x8b3e0af1f7ee6C5a3fab969b5cAdD9347B009F1a JBOperatorStore: 0xEDB2db4b82A4D4956C3B4aA474F7ddf3Ac73c5AB JBPrices: 0xFF1D73AB28140b574Bb7A90e9fBCeD1eDAFce5c1 JBProjects: 0x2d8e361f8F1B5daF33fDb2C99971b33503E60EEE JB3DayReconfigurationBufferBallot: 0xC3890c4Dac5D06C4DAA2eE3Fdc95eC1686A4718e JB7DayReconfigurationBufferBallot: 0x69f9aAC8e68cBa3685b84A1990a0F29F131Ca791 JBSingleTokenPaymentTerminalStore: 0x5d4eb71749DD9984118EBdF96aaF3CF6EAE1A745 JBSplitsStore: 0x767e488155030589c1833592E60876bbE64c1C74 JBTokenStore: 0x220468762c6cE4C05E8fda5cc68Ffaf0CC0B2A85 "},{"title":"Juicebox DAO​","type":1,"pageTitle":"Contract Addresses","url":"dev/resources/contract-addresses#juicebox-dao","content":""},{"title":"$JBX​","type":1,"pageTitle":"Contract Addresses","url":"dev/resources/contract-addresses#jbx","content":"Mainnet ERC-20 Token: 0x3abf2a4f8452ccc2cf7b4c1e4663147600646f66 备注 To reduce gas fees, newly issued $JBX tokens are stored in the Juicebox TicketBooth contract by default (&quot;staked&quot;). $JBX holders can call the unstake function on the TicketBooth contract to mint $JBX ERC-20 tokens to their wallets. In the frontend, this is called Claim and can be found under the Manage button. The above ERC-20 contract reflects the total supply of minted ERC-20 $JBX tokens. To ascertain the total supply of claimed (ERC-20) and unclaimed (&quot;staked&quot;) $JBX tokens, call the totalSupplyOf() function on the TicketBooth contract above, passing project id 1 as the argument. "},{"title":"Gnosis Multisig​","type":1,"pageTitle":"Contract Addresses","url":"dev/resources/contract-addresses#gnosis-multisig","content":"Mainnet​ Etherscan: https://etherscan.io/address/0xaf28bcb48c40dbc86f52d459a6562f658fc94b1e Gnosis Safe: https://gnosis-safe.io/app/eth:0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e/balances Rinkeby​ Etherscan: https://rinkeby.etherscan.io/address/0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e Gnosis Safe: https://gnosis-safe.io/app/rin:0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e/balances "},{"title":"Contribute","type":0,"sectionRef":"#","url":"dev/resources/contribute","content":"Contribute const Home = () =&gt; { return ; };","keywords":""},{"title":"Security & Audits","type":0,"sectionRef":"#","url":"dev/resources/security-and-audits","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Security & Audits","url":"dev/resources/security-and-audits#overview","content":"The protocol runs entirely on public smart contracts explained in detail throughout these docs. The Juicebox protocol is public infrastructure running well-known code; all consequences from interacting with networks running the protocol are borne by the entities who sign each transaction. The protocol works according to the specifications outlined in these docs to the extent the code is written and deployed correctly, which is a collective responsibility and not guaranteed. There is a major risk that this is not the case. Please do your own research. See risks for more. "},{"title":"Juicebox v2 Audits​","type":1,"pageTitle":"Security & Audits","url":"dev/resources/security-and-audits#juicebox-v2-audits","content":"Audit report from CertiK on 2022-03-29Audit report from PeckShield on 2022-04-08Code4rena contest in 2022-07 "},{"title":"Juicebox v1 Audits​","type":1,"pageTitle":"Security & Audits","url":"dev/resources/security-and-audits#juicebox-v1-audits","content":"Audit report from Hacken on 2022-06-01 "},{"title":"Postmortems​","type":1,"pageTitle":"Security & Audits","url":"dev/resources/security-and-audits#postmortems","content":"Low severity bug discovered 8/18/2021Postmortem for medium severity bug identified on May 24, 2022 "},{"title":"Intro","type":0,"sectionRef":"#","url":"user/","content":"Intro Juicebox helps people confidently run programmable and community funded treasuries from startup to scale, openly on Ethereum.​ The Juicebox protocol is a framework for funding and operating projects openly on Ethereum. Its contracts allow communities to receive funds, issue tokens for community membership, and configure funding cycles to transparently utilize those funds—all in powerful, customizable ways. Juicebox treasuries can evolve over time, allowing people to launch open-ended projects and to adjust constraints, extensions, and incentives over time as needed. The protocol is light enough for a group of friends, yet powerful enough for a global network of anons sharing thousands of ETH, ERC-20s, or other assets. If you are interested in building a project on Juicebox, visit juicebox.money. To learn how you can configure your project, read the Project Creation Guide. If you have questions, join the Juicebox Discord. We have Discord Town Halls every Tuesday at 22:00 UTC. Stop by and say hello! The Juicebox protocol is built and maintained by Juicebox DAO.","keywords":""},{"title":"Multisig Transaction Guide","type":0,"sectionRef":"#","url":"user/guides/multisig-transaction-guide","content":"","keywords":""},{"title":"Multisig Process​","type":1,"pageTitle":"Multisig Transaction Guide","url":"user/guides/multisig-transaction-guide#multisig-process","content":"The Multisig Process was ratified by JBX holders in JBP - 98 Ratify Multisig Process. Multisig members should be aware of the following stipulations: The Juicebox multisig and Juicebox multisig owner accounts must agree to execute the will of JBX token holders, as expressed through the Juicebox Governance Process.Existing multisig members must agree to these principles, and prospective multisig members must agree to these principles before being added to the multisig.These principles are intended as general guidelines that formalize existing processes while being flexible enough to adapt as Juicebox changes over time. "},{"title":"Routine​","type":1,"pageTitle":"Multisig Transaction Guide","url":"user/guides/multisig-transaction-guide#routine","content":"Check the transaction queue to see pending transactions. Double check the transaction data and relevant proposals before signing.Keep an eye on #multisig in the JuiceboxDAO Discord server to coordinate with other multisig membersThe latest payouts and reserved JBX recipients can be found in #bookkeeping. Queue the reconfiguration and notify others in #multisig.Request gas reimbursements in #bookkeeping. "},{"title":"Juicebox v1.0 Multisig Actions​","type":1,"pageTitle":"Multisig Transaction Guide","url":"user/guides/multisig-transaction-guide#juicebox-v10-multisig-actions","content":"For more information about v1 transactions, look at the Juicebox Docs. "},{"title":"Treasury and Tickets​","type":1,"pageTitle":"Multisig Transaction Guide","url":"user/guides/multisig-transaction-guide#treasury-and-tickets","content":"Transaction\tDescriptionTerminalV1.configure\tConfigure funding cycle properties including funding target, funding distribution, reserved tokens, etc. TerminalV1.printPreminedTickets\tPrint tickets to any address. Only works before payments have been received (no longer possible for JuiceboxDAO). TerminalV1.migrate\tMigrate funds and operations to a new contract. TicketBooth.issue\tIssues an owner's ERC-20 Tickets that'll be used when unstaking tickets and deploys an owner's Ticket ERC-20 token contract. TerminalV1_1.printTickets\tPrint tickets to any address (Only available on V1.1 projects—Allow minting tokens must be enabled). "},{"title":"Project Details​","type":1,"pageTitle":"Multisig Transaction Guide","url":"user/guides/multisig-transaction-guide#project-details","content":"Transaction\tDescriptionProjects.setHandle\tSet the project's handle. Projects.setUri\tSet the project's URI (IPFS CDN with project info). Projects.transferHandle\tTransfer handle to another address. Projects.claimHandle\tClaim and apply a transferred handle. Projects.renewHandle\tRenew a handle to prevent claiming for a year after it is challenged. "},{"title":"Project Control​","type":1,"pageTitle":"Multisig Transaction Guide","url":"user/guides/multisig-transaction-guide#project-control","content":"Transaction\tDescriptionOperatorStore.setOperator\tGive an address permission to take actions (full operation list) pertaining to a specified domain Projects.transfer\tTransfer the ERC-721 that confers ownership in a Juicebox project to a new address. "},{"title":"Gnosis​","type":1,"pageTitle":"Multisig Transaction Guide","url":"user/guides/multisig-transaction-guide#gnosis","content":"All Gnosis actions are available on their app, use them for better UX. Transaction\tDescriptionOwnerManager.addOwnerWithThreshold\tAdd a new owner to the Safe and update the threshold at the same time (check txn here) OwnerManager.removeOwner\tRemove an owner from the Safe and update the threshold at the same time (check txn here) OwnerManager.changeThreshold\tUpdate the number of owner accounts needed to confirm a Gnosis Safe transaction.  "},{"title":"Add Juicebox Safe​","type":1,"pageTitle":"Multisig Transaction Guide","url":"user/guides/multisig-transaction-guide#add-juicebox-safe","content":"Go to https://gnosis-safe.io/app/  Click “Add existing Safe”, input address “0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e”  Label the owners if you’d like  Finish the procedure, and next time you could find JuiceboxDAO on your Gnosis App. "},{"title":"How to write a “configure” transaction:​","type":1,"pageTitle":"Multisig Transaction Guide","url":"user/guides/multisig-transaction-guide#how-to-write-a-configure-transaction","content":" First, add the Juicebox app to Gnosis Safe: navigate to Gnosis AppsAdd custom app -&gt; https://juicebox.money/check &quot;This app is not a Gnosis product and I agree to use this app at my own risk.&quot;click “Add” You can access the Juicebox website with multisig wallet connected. Navigate to the JuiceboxDAO project and find the “Reconfigure upcoming” button:  Click on it to reconfigure. You will be able to see the preview before submit transaction. If you submit the txn, call other members to sign it on Gnosis App.  "},{"title":"How to read a “configure” transaction:​","type":1,"pageTitle":"Multisig Transaction Guide","url":"user/guides/multisig-transaction-guide#how-to-read-a-configure-transaction","content":"Here are the interface definitions: /** @notice Configures the properties of the current funding cycle if the project hasn't distributed tickets yet, or sets the properties of the proposed funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot. @dev Only a project's owner or a designated operator can configure its funding cycles. @param _projectId The ID of the project being reconfigured. @param _properties The funding cycle configuration. @dev _properties.target The amount that the project wants to receive in this funding stage. Sent as a wad. @dev _properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD. @dev _properties.duration The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time. @dev _properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle. @dev _properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage. If it's 200, each funding stage will have equal weight. If the number is 180, a contribution to the next funding stage will only give you 90% of tickets given to a contribution of the same amount during the current funding stage. If the number is 0, an non-recurring funding stage will get made. @dev _properties.ballot The new ballot that will be used to approve subsequent reconfigurations. @param _metadata A struct specifying the TerminalV1 specific params _bondingCurveRate, and _reservedRate. @dev _metadata.reservedRate A number from 0-200 indicating the percentage of each contribution's tickets that will be reserved for the project owner. @dev _metadata.bondingCurveRate The rate from 0-200 at which a project's Tickets can be redeemed for surplus. The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk where x is _count, o is _currentOverflow, s is _totalSupply, and r is _bondingCurveRate. @dev _metadata.reconfigurationBondingCurveRate The bonding curve rate to apply when there is an active ballot. @return The ID of the funding cycle that was successfully configured. */ function configure( uint256 _projectId, FundingCycleProperties calldata _properties, FundingCycleMetadata calldata _metadata, PayoutMod[] memory _payoutMods, TicketMod[] memory _ticketMods ) struct PayoutMod { bool preferUnstaked; uint16 percent; uint48 lockedUntil; address payable beneficiary; IModAllocator allocator; uint56 projectId; } struct TicketMod { bool preferUnstaked; uint16 percent; uint48 lockedUntil; address payable beneficiary; }  "},{"title":"Real transaction as example to explain​","type":1,"pageTitle":"Multisig Transaction Guide","url":"user/guides/multisig-transaction-guide#real-transaction-as-example-to-explain","content":"Check Gnosis safe tx detail here.  What does this tx mean? _projectId: 1 we are configuring the JuiceboxDAO project_properties:  [ // it's 117453.82 based on 18 decimals 117453820000000000000000 // 0 for ETH, 1 for USD // funding target: $117,453.82 1 // funding duration: 14 days 14 // cycle limit: 0 0 // discount rate: 10% (based on 1000) 100 // contract address https://etherscan.io/address/0x6d6da471703647Fd8b84FFB1A29e037686dBd8b2 // ballot: 3-day delay 0x6d6da471703647Fd8b84FFB1A29e037686dBd8b2 ]  _metadata: [ // reserve rate: 50% (based on 200) 100 // bonding curve: 95% (based on 200) 190 // reconfiguration bonding curve: 95% 190 ]  _payoutMod: [ [ // preferUnstaked: false False // percent: 13.4 1340 // lockedUntil: 0 0 // beneficiary: 0x823b...ADAD (jango.eth) 0x823b92d6a4b2AED4b15675c7917c9f922ea8ADAD // allocator: zero address 0x0000000000000000000000000000000000000000 // only set this if you are paying other projects on Juicebox // projectId: 0 (not project but address outside Juicebox ecosystem) 0 ] // other payout mod // ... ]  _ticketMods: [ [ // preferUnstaked: false False // percent: 1.92% 192 // lockedUtil: 0 0 // beneficiary: 0x823b...ADAD (jango.eth) 0x823b92d6a4b2AED4b15675c7917c9f922ea8ADAD ] // other ticket mod // ... ]  "},{"title":"What's New in v2?","type":0,"sectionRef":"#","url":"user/guides/new-in-v2","content":"What's New in v2? 提示 See Notion for more.","keywords":""},{"title":"Airdrop Guide: Rewarding Your Community","type":0,"sectionRef":"#","url":"user/guides/rewarding-your-community","content":"","keywords":""},{"title":"Building a Merkle Tree​","type":1,"pageTitle":"Airdrop Guide: Rewarding Your Community","url":"user/guides/rewarding-your-community#building-a-merkle-tree","content":"To get a basic understanding of what Merkle Trees are, I suggest starting with the Wikipedia entry. Now that we have a list of wallets as a JavaScript Array we can process that array into a Merkle Tree and generate a rootHash — this is basically the “public key” for the tree, any proof can be validated with knowledge of the rootHash — once this is generated we use the value within our Solidity smart contract. We leverage two open source projects to achieve this: keccak256 and merkletreejs — here is a NodeJS code snip to generate the rootHash: const wallets = require('./wallets.json'); const keccak256 = require('keccak256') const { MerkleTree } = require('merkletreejs') const leafNodes = wallets.map(addr =&gt; keccak256(addr)) const merkleTree = new MerkleTree(leafNodes, keccak256, {sortPairs: true}) const rootHash = merkleTree.getRoot() console.log('rootHash', rootHash.toString('hex'))  "},{"title":"Setting up a Webservice to Generate Merkle Proofs​","type":1,"pageTitle":"Airdrop Guide: Rewarding Your Community","url":"user/guides/rewarding-your-community#setting-up-a-webservice-to-generate-merkle-proofs","content":"To verify if a wallet is a contributor we will need to generate a proof for that wallet and send that proof into the smart contract function the wallet wishes to transact on. In the case of the CFRAC project, we’re allowing a contributor to mint an NFT for free…. On our mint website, the user is prompted to connect their wallet, once connected we verify if they are a contributing address, if so we generate the proof and allow them to run the daoMint function on our smart contract. Here a code snip of the simple webservice (built with expressjs) to generate the proof: const wallets = require('./util/wallets.json'); const keccak256 = require('keccak256') const { MerkleTree } = require('merkletreejs') const leafNodes = wallets.map(addr =&gt; keccak256(addr)) const merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true }) app.get(&quot;/proof/:address&quot;, (req, res) =&gt; { let addrs = req.params.address.toLowerCase(); let hexProof = merkleTree.getHexProof(keccak256(addrs)) // send json of res res.json(hexProof); });  The address is simply the hex wallet address the user connected with passed in by the mint website frontend code. "},{"title":"Finally, verify the Merkle Proof in the Smart Contract​","type":1,"pageTitle":"Airdrop Guide: Rewarding Your Community","url":"user/guides/rewarding-your-community#finally-verify-the-merkle-proof-in-the-smart-contract","content":"Once the frontend code has the proof in hand, it is ready to be sent to the daoMint function on the smart contract. Luckily for us, OpenZeppeliln makes available a library that makes this task super easy. Here is a Solidity code snip of the smart contract: import &quot;@openzeppelin/contracts/utils/cryptography/MerkleProof.sol&quot;; ... function daoMint(bytes32[] calldata _merkleProof) public whenNotPaused { bytes32 leaf = keccak256(abi.encodePacked(msg.sender)); require(MerkleProof.verify(_merkleProof, MERKLE_ROOT, leaf), 'NOT_DAO_MEMBER'); _safeMint(msg.sender, _tokenIdCounter.current()); _tokenIdCounter.increment(); }  Note the MERKLE_ROOT is a constant variable with the value of the earlier generated rootHash. You can view our full smart contract on Etherscan: 0x0fB73942cdffd45ccC8517061ae7430cDdde6b50 "},{"title":"Conclusion​","type":1,"pageTitle":"Airdrop Guide: Rewarding Your Community","url":"user/guides/rewarding-your-community#conclusion","content":"Given the maturity of all the open source libraries available, this otherwise complex concept can be distilled into a simple and elegant implementation. Feel free to reach out to me on Twitter: twitter.com/Y_4_K — and be sure to check out the CFRAC NFT collection. "},{"title":"How to use Juicebox tokens in a Snapshot strategy","type":0,"sectionRef":"#","url":"user/guides/snapshot-strategy","content":"How to use Juicebox tokens in a Snapshot strategy This takes both claimed ERC-20s or unclaimed tokens into account when setting up Snapshot ballot strateies. Choose &quot;contract-call&quot;.Stick this in { &quot;args&quot;: [ &quot;%{address}&quot;, &quot;0x01&quot; // TODO: REPLACE WITH YOUR PROJECT ID HEX ENCODED. ], &quot;symbol&quot;: &quot;JBX&quot;, // TODO: REPLACE WITH YOUR TOKEN SYMBOL. &quot;address&quot;: &quot;0xee2eBCcB7CDb34a8A822b589F9E8427C24351bfc&quot;, &quot;decimals&quot;: 18, &quot;methodABI&quot;: { &quot;name&quot;: &quot;balanceOf&quot;, &quot;type&quot;: &quot;function&quot;, &quot;inputs&quot;: [ { &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;, &quot;internalType&quot;: &quot;address&quot; }, { &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;, &quot;internalType&quot;: &quot;uint256&quot; } ], &quot;outputs&quot;: [ { &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;, &quot;internalType&quot;: &quot;uint256&quot; } ], &quot;stateMutability&quot;: &quot;view&quot; } } ","keywords":""},{"title":"DAOs and Legal Entities","type":0,"sectionRef":"#","url":"user/legal/","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"DAOs and Legal Entities","url":"user/legal/#introduction","content":"Welcome to the Juicebox Legal Resources section. It is commonly referred to as &quot;wrapping&quot; a DAO when you create a legal entity to formally operate from, or along side of, if at all. This section will discuss a number approaches existing projects, and other DAOs have taken when considering formally incorporating a legal entity while operating a DAO. Ultimately, you will be the one responsible to make the right decision about your circumstances and how it relates to your project. Please read the above disclaimers carefully and repeatedly. While the information provided may sound authoritative, competent, even shockingly learned, ultimately, this is information on the internet and is provided to you for informational purposes only, you should not rely on this information. Likely you are interested in creating a Juicebox project and in doing so are generally concerned about the legal ramifications. The right answer differs based on your specific facts and circumstances, nonetheless, the information found here is organized in the following sub-sections: High-level overview of each type of Juicebox projects.Example legal entities which can be created alongside your Juicebox project.Examples reference documents for each legal entity, which you may download and modify.Examples of existing Juicebox project configurations.Examples of executed agreements and reference to their project.Large body of legal research around the subject of crypto in general.References to other online resources. Included in the above sections are additional facts intended to provide color or background. 危险 Juicebox seeks to be as diligent as possible in compiling and updating the information on its website. However, there is no guarantee of the correctness and completeness of the information provided here. Juicebox does not guarantee that this information is up to date and such information may be subject to change at any time and without notice. "},{"title":"Unincorporated and incorporated entities​","type":1,"pageTitle":"DAOs and Legal Entities","url":"user/legal/#unincorporated-and-incorporated-entities","content":""},{"title":"Terminology​","type":1,"pageTitle":"DAOs and Legal Entities","url":"user/legal/#terminology","content":"Throughout this Legal Reference section there will be a number of terms used to described the activity in which a Juicebox treasury is used. The inherent benefits of programmable money via the blockchain lend themselves to forming, immutable rules and processes for routing, retention, payouts as well as governing how contributors participate. The Juicebox treasury lifecycle is dynamic and scalable, that is to say, the Juicebox treasury easily can manage individual proceeds resulting from the sale of NFTs to sustaining and coordinating tens of thousands of individuals. At this point, it is assumed you generally understand that the Juicebox treasury is a tool which manages the inflow of Ethereum through a decentralized application (web page hosted on IPFS among other hosting providers) by which the persistent information is stored on Ethereum on smart contracts, both operate in concert to perform the following public good: enable anyone to easily set up a payment channel to receive paymentspublic, censorship resistent transparent treasury balance, governance, and spendingpayout scheduler, also referred to as a funding cycle, releases funds to a previously agreed upon schedulemechanism to issue tokens to project contributorsmechansim to offer redemption of said tokens against the treasury's overflow balance (the previous statements are in no way implying any profit or revenue) The distinction of what type of Ethereum the treasury receives will be discussed in following sections, however what is pertinent This mechanism of managing Ethereum and your project tokens is referred to as a Juicebox project but may also be called treasury, dao, shared wallet, for the purpose of this Legal Resources we will call this component of the DApp the Juicebox treasury or treasury for short. Additionally, in the reference legal documents, we call the entity Treasury for consistency. 危险 Juicebox seeks to be as diligent as possible in compiling and updating the information on its website. However, there is no guarantee of the correctness and completeness of the information provided here. Juicebox does not guarantee that this information is up to date and such information may be subject to change at any time and without notice. "},{"title":"Contracts","type":0,"sectionRef":"#","url":"user/legal/contracts","content":"","keywords":""},{"title":"Scenario 1:​","type":1,"pageTitle":"Contracts","url":"user/legal/contracts#scenario-1","content":"This section is intentionally blank. "},{"title":"Scenario 2:​","type":1,"pageTitle":"Contracts","url":"user/legal/contracts#scenario-2","content":"This section is intentionally blank. "},{"title":"Other types of agreements​","type":1,"pageTitle":"Contracts","url":"user/legal/contracts#other-types-of-agreements","content":"This section is intentionally blank. "},{"title":"Licensing Agreement​","type":1,"pageTitle":"Contracts","url":"user/legal/contracts#licensing-agreement","content":"This section is intentionally blank. "},{"title":"Disclaimers","type":0,"sectionRef":"#","url":"user/legal/disclaimer","content":"","keywords":""},{"title":"Regarding information​","type":1,"pageTitle":"Disclaimers","url":"user/legal/disclaimer#regarding-information","content":"This section is intentionally blank. "},{"title":"Regarding tokens​","type":1,"pageTitle":"Disclaimers","url":"user/legal/disclaimer#regarding-tokens","content":"危险 ANY GOVERNANCE TOKENS RECEIVED BY MEMBERS HAVE NOT BEEN APPROVED OR DISAPPROVED BY THE UNITED STATES SECURITIES AND EXCHANGE COMMISSION, ANY STATE SECURITIES COMMISSION, OR OTHER REGULATORY AUTHORITY, NOR HAVE ANY OF THE FOREGOING AUTHORITIES PASSED UPON THE MERITS OF THIS OFFERING OR UPON THE ACCURACY OR ADEQUACY OF THIS AGREEMENT. ANY REPRESENTATION TO THE CONTRARY IS A CRIMINAL OFFENSE. THIS DOCUMENT DOES NOT CONSTITUTE AN OFFER OR SOLICITATION TO ANYONE IN ANY JURISDICTION IN WHICH SUCH OFFER OR SOLICITATION IS NOT AUTHORIZED. ANY GOVERNANCE TOKENS THAT YOU MAY ACQUIRE HAVE NOT BEEN REGISTERED UNDER THE SECURITIES ACT, STATE SECURITIES LAWS, OR THE LAWS OF ANY COUNTRY OUTSIDE THE UNITED STATES. [YOUR TREASURY'S NAME]'S POSITION IS THAT THEY SHOULD NOT BE SINCE THE PURPOSE OF [YOUR TREASURY'S NAME] IS TO [YOUR TREASURY'S PURPOSE], PROVIDE NO RIGHTS TO ANY DISTRIBUTION OR PROFITS, AND ARE NON-TRANSFERRABLE EXCEPT DETAILED IN THE TERMS OF USE. "},{"title":"Regarding copyright​","type":1,"pageTitle":"Disclaimers","url":"user/legal/disclaimer#regarding-copyright","content":"This section is intentionally blank. "},{"title":"Regarding privacy​","type":1,"pageTitle":"Disclaimers","url":"user/legal/disclaimer#regarding-privacy","content":"This section is intentionally blank. "},{"title":"Glossary","type":0,"sectionRef":"#","url":"user/legal/glossary","content":"Glossary &quot;Act&quot; has the meaning ascribed to that term in Section 1(a). &quot;Affiliate&quot; means, with respect to any Person, any other Person controlling, controlled by, or under common control with such Person; in such context, &quot;control&quot; means the possession, directly or indirectly, of the power to direct the management or policies of another, whether through the ownership of voting securities, by contract, or otherwise. &quot;Agreement&quot; means this Guiding Principles Agreement of Treasury DAO. &quot;Conflict of Interest&quot; &quot;Corporate Governance&quot; &quot;DAO&quot; means Treasury DAO, a Nevada unincorporated nonprofit association. &quot;DAO Expenses&quot; has the meaning ascribed to that term in Section 7(b)(i). &quot;Dapp&quot; means an online portal or other interactive software used by the DAO to operate an Internet-native treasury of treasuries which facilitates the accounting and management of cryptocurrency, fungible tokens, and non-fungible tokens (&quot;NFTs&quot;), which are maintained by the DAO, its Members, or another Person. &quot;Duties&quot; &quot;Duty of Care&quot; &quot;Fiduciary Duty&quot; &quot;Governance Rights&quot; means the entire interest of a Member in the DAO, as measured by a Member's Tokens, including, without limitation, all rights and obligations contemplated or agreed to under this Agreement, and any right to vote on, consent to, or otherwise participate in any decision or action of or by the Members granted by this Agreement or the Act. &quot;Limited Liability Company&quot; &quot;Majority Vote&quot; means the approval of Members holding at least a majority-in-interest of all claimed Tokens. &quot;Member&quot; means each Person entering into this Agreement as a member or subsequently admitted as a member pursuant to the terms of this Agreement, but does not include any Person that has ceased to be a Member of the DAO. If at any time there is only one Member, then all references to &quot;Members&quot; shall be deemed to mean &quot;Member.&quot; &quot;Non-Fungible Tokens&quot; (&quot;NFT&quot; or &quot;NFTs&quot;) means a cryptographic token based on the Ethereum ERC 721, 1155, or similar standard or other blockchain based asset. &quot;Person&quot; means an individual, corporation, association, partnership, joint venture, limited liability company, estate, trust, or any other legal entity. &quot;Proceeding&quot; means any action, claim, suit, investigation, or proceeding by or before any court, arbitrator, governmental body, self-regulatory agency, or other agency. &quot;Representative&quot; means a member, manager, officer, director, partner, employee, or agent. &quot;Service Provider&quot; means the Person appointed by Treasury to perform administrative services, responsibilities, and duties to carry on the DAO's operations. &quot;Unincorporated Non-Profit&quot;","keywords":""},{"title":"DAO Wrappers","type":0,"sectionRef":"#","url":"user/legal/legal-entities","content":"","keywords":""},{"title":"DAO Framework Papers​","type":1,"pageTitle":"DAO Wrappers","url":"user/legal/legal-entities#dao-framework-papers","content":"DAO Legal Framework Part 1DAO Legal Framework Part 2Legal Wrappers and DAOsDAO Governance Dispute Resolution and Regulation "},{"title":"Legal Structures​","type":1,"pageTitle":"DAO Wrappers","url":"user/legal/legal-entities#legal-structures","content":"While not a structure in the layman's sense, a legal structure is a set of rules and procedures that define the legal relationship between a project and its members. The most common legal structure is a corporation. However, there are many other options, including a partnership, LLC, or S-Corp. A structure may also be a loan between one or many parties, below are a few structures which do not require any formal filings, which may suffice. "},{"title":"Promissory Note (Loan)​","type":1,"pageTitle":"DAO Wrappers","url":"user/legal/legal-entities#promissory-note-loan","content":"SimpleIOUSecured Promissory NoteUnsecured Promissory Note "},{"title":"Living Trust​","type":1,"pageTitle":"DAO Wrappers","url":"user/legal/legal-entities#living-trust","content":"Trust DocumentDeclaration of Trust "},{"title":"Unincorporated Non-Profit Association​","type":1,"pageTitle":"DAO Wrappers","url":"user/legal/legal-entities#unincorporated-non-profit-association","content":"Unicorporated Non-Profit Association Act of 2008 (the &quot;Act&quot;), Model ActNevada Guiding Principals "},{"title":"Partnership​","type":1,"pageTitle":"DAO Wrappers","url":"user/legal/legal-entities#partnership","content":"This sentence is intentionally left blanks. "},{"title":"Series, Master LLC​","type":1,"pageTitle":"DAO Wrappers","url":"user/legal/legal-entities#series-master-llc","content":"Delaware Division of Corporations How to form new business entity "},{"title":"S-Corp​","type":1,"pageTitle":"DAO Wrappers","url":"user/legal/legal-entities#s-corp","content":"This sentence is intentionally left blanks. "},{"title":"C-Corp​","type":1,"pageTitle":"DAO Wrappers","url":"user/legal/legal-entities#c-corp","content":"This sentence is intentionally left blanks. "},{"title":"Previous Juicebox Projects","type":0,"sectionRef":"#","url":"user/legal/past-jb-projects","content":"Previous Juicebox Projects Move the following into a concise table.Projects over 10 ETH raised.","keywords":""},{"title":"Your Project","type":0,"sectionRef":"#","url":"user/legal/planning-your-project","content":"","keywords":""},{"title":"Project planning details​","type":1,"pageTitle":"Your Project","url":"user/legal/planning-your-project#project-planning-details","content":"NameIndividual (if applicable)Service Provider (if applicable)Description or Purpose One sentence descriptionParagraph descriptionThree paragraph description WebsiteTwitterDiscordLogo 1000x1000px500x500px250x250px Token logo (if applicable) if applicable version with transparent backgroundSVG version of the logo "},{"title":"Online materials","type":0,"sectionRef":"#","url":"user/legal/references","content":"","keywords":""},{"title":"DAOs​","type":1,"pageTitle":"Online materials","url":"user/legal/references#daos","content":"DAO Legal Entity How to PickLegal Wrappers and DAOsDAO Governance Dispute Resolution and RegulationDAO Legal Framework Part 1DAO Legal Framework Part 2 "},{"title":"Trusts​","type":1,"pageTitle":"Online materials","url":"user/legal/references#trusts","content":"This section is intentionally blank. "},{"title":"Loans (Promissory Notes)​","type":1,"pageTitle":"Online materials","url":"user/legal/references#loans-promissory-notes","content":"This section is intentionally blank. "},{"title":"LLCs, Series LLC​","type":1,"pageTitle":"Online materials","url":"user/legal/references#llcs-series-llc","content":"This section is intentionally blank. "},{"title":"S-Corporations​","type":1,"pageTitle":"Online materials","url":"user/legal/references#s-corporations","content":"This section is intentionally blank. "},{"title":"C-Corporations​","type":1,"pageTitle":"Online materials","url":"user/legal/references#c-corporations","content":""},{"title":"Unincorporated Non-Profit​","type":1,"pageTitle":"Online materials","url":"user/legal/references#unincorporated-non-profit","content":"Revised Uniform Unincorporated Nonprofit Association Act of 2008 (the &quot;Act&quot;), NRS §§ 81.700 to 81.890Unicorporated Non-Profit Association Act of 2008 (the &quot;Act&quot;), Model ActSouth Carolina Uniform Non-Profit Association Act of 2008 (the &quot;Act&quot;), Model Act "},{"title":"Additional​","type":1,"pageTitle":"Online materials","url":"user/legal/references#additional","content":"Filing 2022 IRS Federal Tax ID Application "},{"title":"Reference Legal Agreements","type":0,"sectionRef":"#","url":"user/legal/Resources/","content":"","keywords":""},{"title":"Terms of Service (Use)​","type":1,"pageTitle":"Reference Legal Agreements","url":"user/legal/Resources/#terms-of-service-use","content":"This section is intentionally blank. Example "},{"title":"Privacy Policy​","type":1,"pageTitle":"Reference Legal Agreements","url":"user/legal/Resources/#privacy-policy","content":"Fathom Analytics "},{"title":"Loan Agreements​","type":1,"pageTitle":"Reference Legal Agreements","url":"user/legal/Resources/#loan-agreements","content":"Secured Promissory Note Template "},{"title":"Trust Agreements​","type":1,"pageTitle":"Reference Legal Agreements","url":"user/legal/Resources/#trust-agreements","content":"TrustTrust Declaration "},{"title":"Unincorporated Non-Profit​","type":1,"pageTitle":"Reference Legal Agreements","url":"user/legal/Resources/#unincorporated-non-profit","content":"Nevada State "},{"title":"Series LLC, Standalone​","type":1,"pageTitle":"Reference Legal Agreements","url":"user/legal/Resources/#series-llc-standalone","content":"Investment ClubDelaware Series LLCDelaware Standalone "},{"title":"S-Corporation​","type":1,"pageTitle":"Reference Legal Agreements","url":"user/legal/Resources/#s-corporation","content":"This section is intentionally blank. "},{"title":"C-Corporation​","type":1,"pageTitle":"Reference Legal Agreements","url":"user/legal/Resources/#c-corporation","content":"This section is intentionally blank. "},{"title":"Non-Profit Association​","type":1,"pageTitle":"Reference Legal Agreements","url":"user/legal/Resources/#non-profit-association","content":"This section is intentionally blank. Additional Agreements​ Simple Agreement for Future Equity (SAFE)SAFE Exhibit A "},{"title":"C-Corporations","type":0,"sectionRef":"#","url":"user/legal/Resources/ccorp/","content":"","keywords":""},{"title":"Formation Documents​","type":1,"pageTitle":"C-Corporations","url":"user/legal/Resources/ccorp/#formation-documents","content":"The following example TreasuryDAO uses the example amount of 20,000,000 shares to authorize, obviously you may choose 2 billion shares, this ultimately is up to you. Of the following documents, you may need 3 total parties in positions with the Corporation, an incorporator, registered agent, however the following documents are sufficient to form the corporation, and establish a process in which follow on decisions by the board are made, including amending any of the articles or by-laws. QuestionnaireCertificate of IncorporationAction by Sole IncorporatorBy Laws "},{"title":"Loans","type":0,"sectionRef":"#","url":"user/legal/Resources/loans/","content":"","keywords":""},{"title":"Scenarios​","type":1,"pageTitle":"Loans","url":"user/legal/Resources/loans/#scenarios","content":"This section is intentionally blank. "},{"title":"References​","type":1,"pageTitle":"Loans","url":"user/legal/Resources/loans/#references","content":"IOUNote TemplateSecured Promissory NoteUnsecured Promissory Note "},{"title":"IOU","type":0,"sectionRef":"#","url":"user/legal/Resources/loans/iou-template","content":"IOU IOU I OWE YOU (IOU) THE PARTIES. This I Owe You made on [DATE], is by and between: Borrower: [BORROWER'S NAME] with a mailing address of [MAILING ADDRESS] (“Borrower”), and Lender: [LENDER'S NAME] with a mailing address of [MAILING ADDRESS] (“Lender”). LOAN TERMS. The Lender agrees to lend the Borrower under the following terms: a. Principal Amount: $[AMOUNT BORROWED]b. Interest Rate: [INTEREST RATE]% compounded per: (check one) ☐ - Month ☐ - Annum ☐ - Other: [OTHER]c. Borrower to Receive the Borrowed Money on: [DATE] Hereinafter known as the “Borrowed Money.” PAYMENTS. The full balance of the Borrowed Money, including all accrued interest and any other fees or penalties, is due and payable in: (check one) ☐ - A LUMP SUM. The Borrower shall repay the Borrowed Money as a lump sum, in full, in the amount of $[AMOUNT] (principal and interest) by [DATE] (“Due Date”). ☐ - INSTALLMENTS. Borrower shall pay principal and interest installment amounts equal to $[AMOUNT] with the first (1st) payment due on [DATE] and the remaining payments to be paid: (check one) ☐ - Weekly with any remaining balance payable on [DATE] (“Due Date”). ☐ - Monthly with any remaining balance payable on [DATE] (“Due Date”). ☐ - Quarterly with any remaining balance payable on [DATE] (“Due Date”). Lender Signature: ********____******** Date: **____** Print Name: ********____******** Borrower Signature: ********____******** Date: **____** Print Name: ********____********","keywords":""},{"title":"Promissory Note","type":0,"sectionRef":"#","url":"user/legal/Resources/loans/note-template","content":"Promissory Note Standard Promissory Note STANDARD PROMISSORY NOTE THE PARTIES. This Standard Promissory Note (“Note”) made on [DATE], is by and between: Borrower: [BORROWER'S NAME] with a mailing address of [MAILING ADDRESS] (“Borrower”), and Lender: [LENDER'S NAME] with a mailing address of [MAILING ADDRESS] (“Lender”). LOAN TERMS. The Lender agrees to lend the Borrower under the following terms: a. Principal Amount: $[AMOUNT BORROWED]b. Interest Rate: [INTEREST RATE]% compounded per: (check one) ☐ - Month ☐ - Annum ☐ - Other: [OTHER]c. Borrower to Receive the Borrowed Money on: [DATE] Hereinafter known as the “Borrowed Money.” PAYMENTS. The full balance of the Borrowed Money, including all accrued interest and any other fees or penalties, is due and payable in: (check one) ☐ - A LUMP SUM. The Borrower shall repay the Borrowed Money as a lump sum, in full, in the amount of $[AMOUNT] (principal and interest) by [DATE] (“Due Date”). ☐ - INSTALLMENTS. Borrower shall pay principal and interest installment amounts equal to $[AMOUNT] with the first (1st) payment due on [DATE] and the remaining payments to be paid: (check one) ☐ - Weekly with any remaining balance payable on [DATE] (“Due Date”). ☐ - Monthly with any remaining balance payable on [DATE] (“Due Date”). ☐ - Quarterly with any remaining balance payable on [DATE] (“Due Date”). Hereinafter known as the “Repayment Period.” PAYMENT IS DUE. Any payment made by the Borrower is considered late if made more than [#] day(s) after any payment due date (“Payment Due Date”). This shall include, but not be limited to, any payment made related to the Repayment Period, the Due Date, or any other payment mentioned in this Note. LATE FEE. If the Borrower makes a late payment for any Payment Due Date, there shall be: (check one) ☐ - NO LATE FEE. ☐ - LATE FEE. The Borrower shall pay a late fee of $[AMOUNT] for each: (check one) ☐ - Occurrence payment is late. ☐ - Day payment is late. SECURITY. This Note shall be: (check one) ☐ - UNSECURED. There shall be no security provided in this Note. ☐ - SECURED. There shall be property to secure this Note described as: [SECURITY DESCRIPTION] (“Security”). The Security shall transfer to the possession and ownership of the Lender immediately pursuant to Section 11 of this Note. The Security may not be sold or transferred without the Lender’s consent until the Due Date. If Borrower breaches this provision, Lender may declare all sums due under this Note immediately due and payable, unless prohibited by applicable law. The Lender shall have the sole option to accept the Security as full payment for the Borrowed Money without further liabilities or obligations. If the market value of the Security does not exceed the Borrowed Money, the Borrower shall remain liable for the balance due while accruing interest at the maximum rate allowed by law. CO-SIGNER. (check one) ☐ - NO CO-SIGNER. This Note shall not have a Co-Signer. ☐ - CO-SIGNER. This Note shall have a Co-Signer known as [CO-SIGNER'S NAME] (&quot;Co-Signer”) who agrees to the liabilities and obligations on behalf of the Borrower under the terms of this Note. If the Borrower does not make payment, the Co-Signer shall be personally responsible and is guaranteeing the payment of the principal, late fees, and all accrued interest under the terms of this Note. PREPAYMENT PENALTY. The Borrower shall be charged: (check one) ☐ - NO PRE-PAYMENT PENALTY. The Borrower is eligible to pre-pay the Borrowed Money, at any time, with no pre-payment fee. ☐ - A PRE-PAYMENT PENALTY. If the Borrower pays any Borrowed Money to the Lender with the specific purpose of paying less interest, there shall be a pre-payment fee of: (check one) ☐ - $[AMOUNT]☐ - [PERCENT]% of the pre-paid amount. ☐ - Other. [OTHER] INTEREST DUE IN THE EVENT OF DEFAULT. In the event the Borrower fails to pay the Note in full on the Due Date, the unpaid principal shall accrue interest at the maximum rate allowed by law until the Borrower is no longer in default. ALLOCATION OF PAYMENTS. Payments shall be first (1st) credited to any late fees due, second (2nd) any to interest due, and any remainder will be credited to the principal. ACCELERATION. If the Borrower is in default under this Note or is in default under another provision of this Note, and such default is not cured within the minimum allotted time by law after written notice of such default, then Lender may, at its option, declare all outstanding sums owed on this Note to be immediately due and payable. This includes any rights of possession in relation to the Security described in Section 6. ATTORNEYS’ FEES AND COSTS. Borrower shall pay all costs incurred by Lender in collecting sums due under this Note after a default, including reasonable attorneys’ fees. If Lender or Borrower sues to enforce this Note or to obtain a declaration of its rights hereunder, the prevailing party in any such proceeding shall be entitled to recover its reasonable attorneys’ fees and costs incurred in the proceeding (including those incurred in any bankruptcy proceeding or appeal) from the non-prevailing party. WAIVER OF PRESENTMENTS. Borrower waives presentment for payment, a notice of dishonor, protest, and notice of protest. NON-WAIVER. No failure or delay by Lender in exercising Lender’s rights under this Note shall be considered a waiver of such rights. SEVERABILITY. In the event that any provision herein is determined to be void or unenforceable for any reason, such determination shall not affect the validity or enforceability of any other provision, all of which shall remain in full force and effect. INTEGRATION. There are no agreements, verbal or otherwise that modify or affect the terms of this Note. This Note may not be modified or amended except by a written agreement signed by Borrower and Lender. CONFLICTING TERMS. The terms of this Note shall control over any conflicting terms in any referenced agreement or document. NOTICE. Any notices required or permitted to be given hereunder shall be given in writing and shall be delivered (a) in person, (b) by certified mail, postage prepaid, return receipt requested, (c) by facsimile, or (d) by a commercial overnight courier that guarantees next day delivery and provides a receipt, and such notices shall be made to the parties at the addresses listed above. EXECUTION. The Borrower executes this Note as a principal and not as a surety. If there is a Co-Signer, the Borrower and Co-Signer shall be jointly and severally liable under this Note. GOVERNING LAW. This note shall be governed under the laws in the State of [GOVERNING LAW]. ADDITIONAL TERMS &amp; CONDITIONS. [ADDITIONAL TERMS &amp; CONDITIONS] ENTIRE AGREEMENT. This Note contains all the terms agreed to by the parties relating to its subject matter, including any attachments or addendums. This Note replaces all previous discussions, understandings, and oral agreements. The Borrower and Lender agree to the terms and conditions and shall be bound until the Borrower repays the Borrowed Money in full. Lender Signature: ********____******** Date: **____** Print Name: ********____******** Borrower Signature: ********____******** Date: **____** Print Name: ********____******** Co-Signer Signature (if any): ********____******** Date: **____** Print Name: ********____********","keywords":""},{"title":"Secured Promissory Note","type":0,"sectionRef":"#","url":"user/legal/Resources/loans/secured-note-template","content":"Secured Promissory Note Secured Promissory Note SECURED PROMISSORY NOTE THE PARTIES. This Secured Promissory Note (“Note”) made on [DATE], is by and between: Borrower: [BORROWER'S NAME] with a mailing address of [MAILING ADDRESS] (“Borrower”), and Lender: [LENDER'S NAME] with a mailing address of [MAILING ADDRESS] (“Lender”). LOAN TERMS. The Lender agrees to lend the Borrower under the following terms: a. Principal Amount: $[AMOUNT BORROWED]b. Interest Rate: [INTEREST RATE]% compounded per: (check one) ☐ - Month ☐ - Annum ☐ - Other: [OTHER]c. Borrower to Receive the Borrowed Money on: [DATE] Hereinafter known as the “Borrowed Money.” PAYMENTS. The full balance of the Borrowed Money, including all accrued interest and any other fees or penalties, is due and payable in: (check one) ☐ - A LUMP SUM. The Borrower shall repay the Borrowed Money as a lump sum, in full, in the amount of $[AMOUNT] (principal and interest) by [DATE] (“Due Date”). ☐ - INSTALLMENTS. Borrower shall pay principal and interest installment amounts equal to $[AMOUNT] with the first (1st) payment due on [DATE] and the remaining payments to be paid: (check one) ☐ - Weekly with any remaining balance payable on [DATE] (“Due Date”). ☐ - Monthly with any remaining balance payable on [DATE] (“Due Date”). ☐ - Quarterly with any remaining balance payable on [DATE] (“Due Date”). Hereinafter known as the “Repayment Period.” PAYMENT IS DUE. Any payment made by the Borrower is considered late if made more than [#] day(s) after any payment due date (“Payment Due Date”). This shall include, but not be limited to, any payment made related to the Repayment Period, the Due Date, or any other payment mentioned in this Note. LATE FEE. If the Borrower makes a late payment for any Payment Due Date, there shall be: (check one) ☐ - NO LATE FEE. ☐ - LATE FEE. The Borrower shall pay a late fee of $[AMOUNT] for each: (check one) ☐ - Occurrence payment is late. ☐ - Day payment is late. SECURITY. In the event of default by the Borrower, this Note shall be secured with the following property: [SECURITY DESCRIPTION] (“Security”). The Security shall transfer to the possession and ownership of the Lender immediately pursuant to Section 11 of this Note. The Security may not be sold or transferred without the Lender’s consent until the Due Date. If Borrower breaches this provision, Lender may declare all sums due under this Note immediately due and payable, unless prohibited by applicable law. The Lender shall have the sole option to accept the Security as full payment for the Borrowed Money without further liabilities or obligations. If the market value of the Security does not exceed the Borrowed Money, the Borrower shall remain liable for the balance due while accruing interest at the maximum rate allowed by law. CO-SIGNER. (check one) ☐ - NO CO-SIGNER. This Note shall not have a Co-Signer. ☐ - CO-SIGNER. This Note shall have a Co-Signer known as [CO-SIGNER'S NAME] (&quot;Co-Signer”) who agrees to the liabilities and obligations on behalf of the Borrower under the terms of this Note. If the Borrower does not make payment, the Co-Signer shall be personally responsible and is guaranteeing the payment of the principal, late fees, and all accrued interest under the terms of this Note. PREPAYMENT PENALTY. The Borrower shall be charged: (check one) ☐ - NO PRE-PAYMENT PENALTY. The Borrower is eligible to pre-pay the Borrowed Money, at any time, with no pre-payment fee. ☐ - A PRE-PAYMENT PENALTY. If the Borrower pays any Borrowed Money to the Lender with the specific purpose of paying less interest, there shall be a pre-payment fee of: (check one) ☐ - $[AMOUNT]☐ - [PERCENT]% of the pre-paid amount. ☐ - Other. [OTHER] INTEREST DUE IN THE EVENT OF DEFAULT. In the event the Borrower fails to pay the Note in full on the Due Date, the unpaid principal shall accrue interest at the maximum rate allowed by law until the Borrower is no longer in default. ALLOCATION OF PAYMENTS. Payments shall be first (1st) credited to any late fees due, second (2nd) any to interest due, and any remainder will be credited to the principal. ACCELERATION. If the Borrower is in default under this Note or is in default under another provision of this Note, and such default is not cured within the minimum allotted time by law after written notice of such default, then Lender may, at its option, declare all outstanding sums owed on this Note to be immediately due and payable. This includes any rights of possession in relation to the Security described in Section 6. ATTORNEYS’ FEES AND COSTS. Borrower shall pay all costs incurred by Lender in collecting sums due under this Note after a default, including reasonable attorneys’ fees. If Lender or Borrower sues to enforce this Note or to obtain a declaration of its rights hereunder, the prevailing party in any such proceeding shall be entitled to recover its reasonable attorneys’ fees and costs incurred in the proceeding (including those incurred in any bankruptcy proceeding or appeal) from the non-prevailing party. WAIVER OF PRESENTMENTS. Borrower waives presentment for payment, a notice of dishonor, protest, and notice of protest. NON-WAIVER. No failure or delay by Lender in exercising Lender’s rights under this Note shall be considered a waiver of such rights. SEVERABILITY. In the event that any provision herein is determined to be void or unenforceable for any reason, such determination shall not affect the validity or enforceability of any other provision, all of which shall remain in full force and effect. INTEGRATION. There are no agreements, verbal or otherwise that modify or affect the terms of this Note. This Note may not be modified or amended except by a written agreement signed by Borrower and Lender. CONFLICTING TERMS. The terms of this Note shall control over any conflicting terms in any referenced agreement or document. NOTICE. Any notices required or permitted to be given hereunder shall be given in writing and shall be delivered (a) in person, (b) by certified mail, postage prepaid, return receipt requested, (c) by facsimile, or (d) by a commercial overnight courier that guarantees next day delivery and provides a receipt, and such notices shall be made to the parties at the addresses listed above. EXECUTION. The Borrower executes this Note as a principal and not as a surety. If there is a Co-Signer, the Borrower and Co-Signer shall be jointly and severally liable under this Note. GOVERNING LAW. This Note shall be governed under the laws in the State of Florida. ADDITIONAL TERMS &amp; CONDITIONS. [ADDITIONAL TERMS &amp; CONDITIONS] ENTIRE AGREEMENT. This Note contains all the terms agreed to by the parties relating to its subject matter, including any attachments or addendums. This Note replaces all previous discussions, understandings, and oral agreements. The Borrower and Lender agree to the terms and conditions and shall be bound until the Borrower repays the Borrowed Money in full. Lender Signature: ********____******** Date: **____** Print Name: ********____******** Borrower Signature: ********____******** Date: **____** Print Name: ********____******** Co-Signer Signature (if any): ********____******** Date: **____** Print Name: ********____********","keywords":""},{"title":"Unsecured Promissory Note","type":0,"sectionRef":"#","url":"user/legal/Resources/loans/unsecured-note-template","content":"Unsecured Promissory Note Unsecured promissory note template UNSECURED PROMISSORY NOTE THE PARTIES. This Unsecured Promissory Note (“Note”) made on [DATE], is by and between: Borrower: [BORROWER'S NAME] with a mailing address of [MAILING ADDRESS] (“Borrower”), and Lender: [LENDER'S NAME] with a mailing address of [MAILING ADDRESS] (“Lender”). LOAN TERMS. The Lender agrees to lend the Borrower under the following terms: a. Principal Amount: $[AMOUNT BORROWED]b. Interest Rate: [INTEREST RATE]% compounded per: (check one) ☐ - Month ☐ - Annum ☐ - Other: [OTHER]c. Borrower to Receive the Borrowed Money on: [DATE] Hereinafter known as the “Borrowed Money.” PAYMENTS. The full balance of the Borrowed Money, including all accrued interest and any other fees or penalties, is due and payable in: (check one) ☐ - A LUMP SUM. The Borrower shall repay the Borrowed Money as a lump sum, in full, in the amount of $[AMOUNT] (principal and interest) by [DATE] (“Due Date”). ☐ - INSTALLMENTS. Borrower shall pay principal and interest installment amounts equal to $[AMOUNT] with the first (1st) payment due on [DATE] and the remaining payments to be paid: (check one) ☐ - Weekly with any remaining balance payable on [DATE] (“Due Date”). ☐ - Monthly with any remaining balance payable on [DATE] (“Due Date”). ☐ - Quarterly with any remaining balance payable on [DATE] (“Due Date”). Hereinafter known as the “Repayment Period.” PAYMENT IS DUE. Any payment made by the Borrower is considered late if made more than [#] day(s) after any payment due date (“Payment Due Date”). This shall include, but not be limited to, any payment made related to the Repayment Period, the Due Date, or any other payment mentioned in this Note. LATE FEE. If the Borrower makes a late payment for any Payment Due Date, there shall be: (check one) ☐ - NO LATE FEE. ☐ - LATE FEE. The Borrower shall pay a late fee of $[AMOUNT] for each: (check one) ☐ - Occurrence payment is late. ☐ - Day payment is late. SECURITY. This Note shall be unsecured; therefore, no security or collateral shall be provided as part of this note. CO-SIGNER. (check one) ☐ - NO CO-SIGNER. This Note shall not have a Co-Signer. ☐ - CO-SIGNER. This Note shall have a Co-Signer known as [CO-SIGNER'S NAME] (&quot;Co-Signer”) who agrees to the liabilities and obligations on behalf of the Borrower under the terms of this Note. If the Borrower does not make payment, the Co-Signer shall be personally responsible and is guaranteeing the payment of the principal, late fees, and all accrued interest under the terms of this Note. PREPAYMENT PENALTY. The Borrower shall be charged: (check one) ☐ - NO PRE-PAYMENT PENALTY. The Borrower is eligible to pre-pay the Borrowed Money, at any time, with no pre-payment fee. ☐ - A PRE-PAYMENT PENALTY. If the Borrower pays any Borrowed Money to the Lender with the specific purpose of paying less interest, there shall be a pre-payment fee of: (check one) ☐ - $[AMOUNT]☐ - [PERCENT]% of the pre-paid amount. ☐ - Other. [OTHER] INTEREST DUE IN THE EVENT OF DEFAULT. In the event the Borrower fails to pay the Note in full on the Due Date, the unpaid principal shall accrue interest at the maximum rate allowed by law until the Borrower is no longer in default. ALLOCATION OF PAYMENTS. Payments shall be first (1st) credited to any late fees due, second (2nd) any to interest due, and any remainder will be credited to the principal. ACCELERATION. If the Borrower is in default under this Note or is in default under another provision of this Note, and such default is not cured within the minimum allotted time by law after written notice of such default, then Lender may, at its option, declare all outstanding sums owed on this Note to be immediately due and payable. This includes any rights of possession in relation to the Security described in Section 6. ATTORNEYS’ FEES AND COSTS. Borrower shall pay all costs incurred by Lender in collecting sums due under this Note after a default, including reasonable attorneys’ fees. If Lender or Borrower sues to enforce this Note or to obtain a declaration of its rights hereunder, the prevailing party in any such proceeding shall be entitled to recover its reasonable attorneys’ fees and costs incurred in the proceeding (including those incurred in any bankruptcy proceeding or appeal) from the non-prevailing party. WAIVER OF PRESENTMENTS. Borrower waives presentment for payment, a notice of dishonor, protest, and notice of protest. NON-WAIVER. No failure or delay by Lender in exercising Lender’s rights under this Note shall be considered a waiver of such rights. SEVERABILITY. In the event that any provision herein is determined to be void or unenforceable for any reason, such determination shall not affect the validity or enforceability of any other provision, all of which shall remain in full force and effect. INTEGRATION. There are no agreements, verbal or otherwise that modify or affect the terms of this Note. This Note may not be modified or amended except by a written agreement signed by Borrower and Lender. CONFLICTING TERMS. The terms of this Note shall control over any conflicting terms in any referenced agreement or document. NOTICE. Any notices required or permitted to be given hereunder shall be given in writing and shall be delivered (a) in person, (b) by certified mail, postage prepaid, return receipt requested, (c) by facsimile, or (d) by a commercial overnight courier that guarantees next day delivery and provides a receipt, and such notices shall be made to the parties at the addresses listed above. EXECUTION. The Borrower executes this Note as a principal and not as a surety. If there is a Co-Signer, the Borrower and Co-Signer shall be jointly and severally liable under this Note. GOVERNING LAW. This Note shall be governed under the laws in the State of Florida. ADDITIONAL TERMS &amp; CONDITIONS. [ADDITIONAL TERMS &amp; CONDITIONS] ENTIRE AGREEMENT. This Note contains all the terms agreed to by the parties relating to its subject matter, including any attachments or addendums. This Note replaces all previous discussions, understandings, and oral agreements. The Borrower and Lender agree to the terms and conditions and shall be bound until the Borrower repays the Borrowed Money in full. Lender Signature: ********____******** Date: **____** Print Name: ********____******** Borrower Signature: ********____******** Date: **____** Print Name: ********____******** Co-Signer Signature (if any): ********____******** Date: **____** Print Name: ********____********","keywords":""},{"title":"Acceptable Use Policy (AUP)","type":0,"sectionRef":"#","url":"user/legal/Resources/others/acceptable-use","content":"","keywords":""},{"title":"User Obligations.​","type":1,"pageTitle":"Acceptable Use Policy (AUP)","url":"user/legal/Resources/others/acceptable-use#user-obligations","content":"You represent and warrant to TreasuryDAO that: Your content does not and shall not contain any content, materials, data, work, trade or service mark, trade name, link, advertising or services that actually or potentially violate any applicable law or regulation or infringe or misappropriate any proprietary, intellectual property, contract or tort right of any person and that You own Your account content and all proprietary or intellectual property rights therein, or have express written authorization from the owner to copy, use and display the content on and within Your Treasury account. You also represent and warrant that the server content being hosted by TreasuryDAO shall not be used in connection with any illegal activity. You expressly (i) grant to TreasuryDAO permission to cache the entirety of the content that is submitted, stored, distributed or disseminated by you via the Services and your website, including content supplied by third parties, hosted by TreasuryDAO under this agreement; and (ii) agree that such caching is not an infringement on any of your intellectual property rights or any third party’s intellectual property rights. "},{"title":"Prohibited Activities.​","type":1,"pageTitle":"Acceptable Use Policy (AUP)","url":"user/legal/Resources/others/acceptable-use#prohibited-activities","content":"By using any Services, provided by TreasuryDAO You agree: not to violate the laws, regulations, ordinances or other such requirements of any applicable Federal, State or local government. not to transmit any unsolicited commercial or bulk email, not to be engaged in any activity known or considered to be spamming or Mail Bombing. not to make any illegal communication to any Newsgroup, Mailing List, Chat Facility, or another Internet Forum. not to make, attempt or allow any unauthorized access to TreasuryDAO website, servers, your own hosting account or the account of any other users of TreasuryDAO. not to allow any remote code execution of malicious software through the hosting account provided by TreasuryDAO. not to cause denial of service attacks, port scans or other endangering and invasive procedures against TreasuryDAO servers and facilities or the servers and facilities of other network hosts or Internet users. not to forge the signature or other identifying mark or code of any other person or engage in any activity to attempt to deceive other persons regarding the true identity of the User. not to use TreasuryDAO services to host any website, other content, links or advertisements of websites that: infringe any copyright, trademark, patent, trade secret, or other proprietary rights of any third party information; contain nudity, pornography or other content deemed adult related; profess hatred for particular social, ethnical, religious or other group; contain viruses, Trojan horses, worms, time bombs, corrupted files, or any other similar software or programs that may damage the operation of a computer or a person's property; contain warez; contain any kind of proxy server or other traffic relaying programs; promote money making schemes, multi-level marketing or similar activities; contain lottery, gambling, casino; contain torrent trackers, torrent Portals or similar software; violent or encouraging violence. not to upload unacceptable material which includes: IRC bots, warez, image, file storage, mirror, or banner-ad services, topsites, streaming, Escrow, High-Yield Interest Programs (HYIP) or related sites, investment sites (FOREX, E-Gold Exchange, etc), cryptocurrency miners, sale of any controlled substances without providing proof of appropriate permit(s) in advance, AutoSurf sites, Bank Debentures, Bank Debenture Trading Programs, Prime Banks Programs, lottery sites, muds / rpg's, hate sites, hacking focused sites/archives/programs, or sites promoting illegal activities, IP Scanners, Brute Force Programs, Mail Bombers and Spam Scripts. not to engage in or to instigate actions that cause harm to TreasuryDAO or other users. Such actions include, but are not limited to, actions resulting in blacklisting any of Our IPs by the any online spam database, actions resulting in DDOS attacks for any servers, etc. TreasuryDAO reserves the right to refuse service to anyone upon Our discretion. Any material that in TreasuryDAO judgment, is either obscene or threatening is strictly prohibited and will be removed from TreasuryDAO servers immediately with or without prior notice and may lead to possible warning, suspension or immediate account termination with no refund. You agree that We have the sole right to decide what constitutes a violation of the acceptable policy use described above as well as what is the appropriate severity of any corrective action to be applied. In the event that a violation of Our Acceptable Use Policy is found, TreasuryDAO will take corrective action upon our own discretion and will notify You. TreasuryDAO decision in such case is binding and final, and cannot be a subject of a further change. TreasuryDAO cannot and shall not be liable for any loss or damage arising from Our measures against actions causing harm to TreasuryDAO or any other third party. We have the right to terminate each and any hosting account that has been suspended for any reason for more than 14 calendar days after the suspension date, unless You has taken corrective measures to remove the initial suspension threat or violation. Any backup copies of the hosting account will be permanently deleted upon termination and no refund will be due. TreasuryDAO will not be liable for any loss or damages in such cases. not to violate the Ryan Haight Online Pharmacy Consumer Protection Act of 2008 or similar legislation, or promote, encourage or engage in the sale or distribution of prescription medication without a valid prescription. At its discretion, TreasuryDAO reserves the right to investigate the use of its services for violations of its policies. This includes all hosting packages and services. TreasuryDAO further reserves the right to remove any content we determine to be prohibited by this agreement or our Terms and Conditions. No backups will be kept of removed content. "},{"title":"TreasuryDAO Reservation of Rights.​","type":1,"pageTitle":"Acceptable Use Policy (AUP)","url":"user/legal/Resources/others/acceptable-use#treasurydao-reservation-of-rights","content":"TreasuryDAO explicitly reserves the right and sole discretion to: (i) modify its pricing, if desired by TreasuryDAO; (ii) establish limits and guidelines concerning the use of TreasuryDAO services and/or products; (iii) terminate Your use of TreasuryDAO services and/or products for use of TreasuryDAO services and/or products to unnecessarily or illegally harass TreasuryDAO or third parties, non-payment of fees for TreasuryDAO services and/or products, activities designed to defame, embarrass, harm, abuse, threaten, slander or harass third parties, activities prohibited by the laws of the United States and/or foreign territories in which You conduct business, activities designed to encourage unlawful behavior by others, such as hate crimes, terrorism and child pornography, activities that are tortuous, vulgar, obscene, invasive of the privacy of a third party, racially, ethnically, or otherwise objectionable in the sole opinion of TreasuryDAO, activities designed to impersonate the identity of a third party, activities designed to harm minors in any way, and other activities whether lawful or unlawful that TreasuryDAO determines, in its sole discretion, to be harmful to its other users, operations, or reputation; (iv) terminate Your use of TreasuryDAO services and/or products if Your use of TreasuryDAO services and/or products may results in, results in, or is the subject of, legal action or threatened or proposed legal action, against TreasuryDAO or any of its affiliates or partners, without consideration for whether such legal action or threatened or proposed legal action is eventually determined to be with or without merit; and (v) terminate Your use of TreasuryDAO services and/or products at any time and for any reason if deemed reasonably necessary by TreasuryDAO. TreasuryDAO has no obligation to monitor Your use of TreasuryDAO services and/or products, but reserves the right in its sole discretion to do so. "},{"title":"Indemnification.​","type":1,"pageTitle":"Acceptable Use Policy (AUP)","url":"user/legal/Resources/others/acceptable-use#indemnification","content":"Accordingly, You for Yourself and all of Your heirs, personal representatives, predecessors, successors and assigns, hereby fully release, remise, and forever discharge TreasuryDAO and all affiliates of TreasuryDAO, and all officers, agents, employees, and representatives of TreasuryDAO, and all of their heirs, personal representatives, predecessors, successors and assigns, for, from and against any and all claims, liens, demands, causes of action, controversies, offsets, obligations, losses, damages and liabilities of every kind and character whatsoever, including, but not limited to, any action omission, misrepresentation or other basis of liability founded either in tort or contract and the duties arising thereunder, whether known or unknown, relating to or arising out of, or in any way connected with or resulting from, the Services and Your acquisition and use thereof, including, but not limited to, the provision of the TreasuryDAO products and/or services by TreasuryDAO and its agents and employees. Further, You agree to defend, indemnify and hold harmless TreasuryDAO and any of its contractors, agents, employees, officers, directors, shareholders, affiliates and assigns from any loss, liability, damages or expense, including reasonable attorneys' fees, arising out of (i) any breach of any representation or warranty provided in this Agreement, or as provided by TreasuryDAO’s AUP or any other agreement that has been incorporated by reference herein; (ii) the Services or your use of the Services, including without limitation infringement or dilution by You or by another using the Services from Your computer; (iii) any intellectual property or other proprietary right of any person or entity; (iv) any information or data You supplied to TreasuryDAO, including, without limitation, any misrepresentation in Your application, if applicable; (v) the inclusion of metatags or other elements in any website created for you or by you via the Services; (vi) any information, material, or services available on your TreasuryDAO hosted website; or (vii), any negligence or willful misconduct by You, or any allegation that Your account infringes a third person's copyright, trademark or proprietary or intellectual property right, or misappropriates a third person's trade secrets. This indemnification is in addition to any indemnification required of You elsewhere. Should TreasuryDAO be notified of a pending law suit, or receive notice of the filing of a law suit, TreasuryDAO may seek a written confirmation from You concerning Your obligation to defend, indemnify TreasuryDAO. Such written confirmation may include the posting of performance bonds or other guarantees. Your failure to provide such a confirmation may be considered a breach of this agreement. You agree that TreasuryDAO shall have the right to participate in the defense of any such claim through counsel of its own choosing. You agree to notify TreasuryDAO of any such claim promptly in writing and to allow TreasuryDAO to control the proceedings. You agree to cooperate fully with TreasuryDAO during such proceedings. The terms of this section will survive any termination or cancellation of this Agreement. "},{"title":"Trademark or Copyright Claims.​","type":1,"pageTitle":"Acceptable Use Policy (AUP)","url":"user/legal/Resources/others/acceptable-use#trademark-or-copyright-claims","content":"TreasuryDAO is a service provider and respects the copyrights and other intellectual property rights of others [and herein incorporates its Copyright Infringement Policy]. To the extent TreasuryDAO receives a proper notice of infringement of copyright, trademark or other intellectual property, TreasuryDAO reserves the right to access, preserve and disclose to third parties any of Your information or data (including personally identifiable information and private communications) related to a written complaint of infringement if TreasuryDAO believes in its sole discretion that such access, preservation, or disclosure is necessary or useful to respond to or otherwise address such complaint. "},{"title":"No Agency Relationship.​","type":1,"pageTitle":"Acceptable Use Policy (AUP)","url":"user/legal/Resources/others/acceptable-use#no-agency-relationship","content":"Nothing contained in this Agreement shall be construed as creating any agency, partnership, or other form of joint enterprise between the parties hereto. Each party shall ensure that the foregoing persons shall not represent to the contrary, either expressly, implicitly, by appearance or otherwise. "},{"title":"Enforceability.​","type":1,"pageTitle":"Acceptable Use Policy (AUP)","url":"user/legal/Resources/others/acceptable-use#enforceability","content":"In the event that any provision of this Agreement shall be unenforceable or invalid under any applicable law or be so held by applicable court decision, such unenforceability or invalidity shall not render this Agreement unenforceable or invalid as a whole. We will amend or replace such provision with one that is valid and enforceable and which achieves, to the extent possible, our original objectives and intent as reflected in the original provision. "},{"title":"Force Majeure.​","type":1,"pageTitle":"Acceptable Use Policy (AUP)","url":"user/legal/Resources/others/acceptable-use#force-majeure","content":"Neither party shall be deemed in default hereunder, nor shall it hold the other party responsible for, any cessation, interruption or delay in the performance of its obligations hereunder due to causes beyond its control including, but not limited to: earthquake; flood; fire; storm; natural disaster; act of God; war; terrorism; armed conflict; labor strike; lockout; boycott; supplier failures, shortages, breaches, or delays; or any law, order regulation, direction, action or request of the government, including any federal, state and local governments having or claiming jurisdiction over TreasuryDAO, or of any department, agency, commission, bureau, corporation or other instrumentality of any federal, state, or local government, or of any civil or military authority; or any other cause or circumstance, whether of a similar or dissimilar nature to the foregoing, beyond the reasonable control of the affected party, provided that the party relying upon this section (i) shall have given the other party written notice thereof promptly and, in any event, within 60 (sixty) days of discovery thereof and (ii) shall take all steps reasonably necessary under the circumstances to mitigate the effects of the force majeure event upon which such notice is based; provided further, that in the event a force majeure event described in this Section extends for a period in excess of ninety (90) days in the aggregate, TreasuryDAO may immediately terminate this Agreement. "},{"title":"Headings.​","type":1,"pageTitle":"Acceptable Use Policy (AUP)","url":"user/legal/Resources/others/acceptable-use#headings","content":"The section headings appearing in this Agreement are inserted only as a matter of convenience and in no way define, limit, construe or describe the scope or extent of such section or in any way affect such section. "},{"title":"License Agreement","type":0,"sectionRef":"#","url":"user/legal/Resources/others/licensing","content":"License Agreement Licensing Agreement","keywords":""},{"title":"Privacy Policy","type":0,"sectionRef":"#","url":"user/legal/Resources/others/privacy-policy","content":"Privacy Policy We want to process as little personal information as possible when you use our website. That's why we've chosen Fathom Analytics for our website analytics, which doesn't use cookies and complies with the GDPR, ePrivacy (including PECR), COPPA and CCPA. Using this privacy-friendly website analytics software, your IP address is only briefly processed, and we (running this website) have no way of identifying you. As per the CCPA, your personal information is de-identified. You can read more about this on Fathom Analytics' website. The purpose of us using this software is to understand our website traffic in the most privacy-friendly way possible so that we can continually improve our website and business. The lawful basis as per the GDPR is &quot;where our legitimate interests are to improve our website and business continually.&quot; As per the explanation, no personal data is stored over time. Fathom Privacy Policy","keywords":""},{"title":"Agreement for Future Tokens","type":0,"sectionRef":"#","url":"user/legal/Resources/others/saft","content":"Agreement for Future Tokens Simple Agreement for Future Tokens SIMPLE AGREEMENT FOR FUTURE TOKENS Effective Date: THIS AGREEMENT (hereinafter “Agreement”) is entered into by (hereinafter “Consultant”) and (hereinafter “Company”), made of the Effective Date set forth above, in which Company agrees that a portion of the compensation paid to Consultant shall be in the form of certain units of Tokens (hereinafter “Tokens”), subject to the terms set forth below. Events (a) Token Generating Event (“TGE”). Upon the TGE, the Company will automatically issue to the Consultant a number of units of the Token equal to the amount owed to Consultant for work performed under the Consulting Agreement for Foundation to be paid as follows: % ( percent) of the total amount invoiced to Company shall be paid to Consultant in Tokens. The amount of the Tokens at the time of payment shall be the value of the Token as determined by the Company at the TGE. (b) Restricted Token. Consultant understands and acknowledges that there may be restrictions or limitations on the Tokens when sent to him which restrictions shall be left entirely to the discretion of the Company. Company Representations (a) The Company is a corporation duly organized, validly existing and in good standing under the laws of the State of . (b) The execution, delivery and performance by the Company of this instrument is within the power of the Company. This instrument constitutes a legal, valid and binding obligation of the Company. (c) No consents or approvals are required in connection with the performance of this instrument. Consultant Representations (a) The Consultant agrees acknowledges the following: THE SECURITIES REPRESENTED HEREBY HAVE NOT BEEN REGISTERED UNDER THE SECURITIES ACT OF 1933 (THE “ACT”) AND MAY NOT BE OFFERED, SOLD OR OTHERWISE TRANSFERRED, PLEDGED OR HYPOTHECATED UNLESS AND UNTIL REGISTERED UNDER THE ACT OR, IN THE OPINION OF COUNSEL SATISFACTORY TO THE ISSUER OF THESE SECURITIES, SUCH OFFER, SALE OR TRANSFER, PLEDGE OR HYPOTHECATION OTHERWISE COMPLIES WITH THE ACT. THE SHARES REPRESENTED BY THIS CERTIFICATE ARE SUBJECT TO CERTAIN RESTRICTIONS ON TRANSFER, A RIGHT OF FIRST REFUSAL, A LOCK-UP PERIOD IN THE EVENT OF A PUBLIC OFFERING AND A REPURCHASE OPTION HELD BY THE ISSUER OR ITS ASSIGNEE(S) AS SET FORTH IN THE RESTRICTED STOCK PURCHASE AGREEMENT BETWEEN THE ISSUER AND THE ORIGINAL HOLDER OF THESE SHARES, A COPY OF WHICH MAY BE OBTAINED AT THE PRINCIPAL OFFICE OF THE ISSUER. SUCH TRANSFER RESTRICTIONS, RIGHT OF FIRST REFUSAL, LOCK-UP PERIOD AND REPURCHASE OPTION ARE BINDING ON TRANSFEREES OF THESE SHARES. Miscellaneous (a) Entire Agreement. This instrument sets forth the entire agreement and understanding of the parties. Any provision of this instrument may be amended, waived or modified only upon the written consent of the Company and Consultant. (b) No Rights of Ownership/Governance. This Agreement does not grant to Consultant any of the rights of a stockholder or governor of the Company. (c) Severability. In the event any one or more of the provisions of this instrument is for any reason held to be invalid, illegal or unenforceable, then and in any such event, such provision(s) only will be deemed null and void and will not affect any other provision of this instrument. (d) Governing Law. This Agreement will be governed in all respects by the laws of the United States of America and by the laws of the State of , without giving effect to any conflicts of laws principles that require the application of the law of a different jurisdiction. (e) Tax Consequences. The Consultant shall review this Agreement with its own tax advisors regarding the federal, state, local and foreign tax consequences of the transactions contemplated by this Agreement. The Consultant is not relying on any statements or representations of the Company. The parties have executed this Agreement as of the Effective Date. Company: Consultant: By: By: Address: Address: Email: Email:","keywords":""},{"title":"Terms and Conditions","type":0,"sectionRef":"#","url":"user/legal/Resources/tos-simple","content":"Terms and Conditions PLEASE READ THESE TERMS OF SERVICE (HEREINAFTER TERMS) CAREFULLY BEFORE USING THE SERVICES DESCRIBED HEREIN. The following Terms govern all use of the Services and all content, services and products available at or through the Website and the App. The Services are owned and operated by TreasuryDAO. The Services are offered subject to User's acceptance without modification of all of the Terms contained herein and all other operating rules, policies and procedures. TreasuryDAO is operating under the OpenSource Licenses. The software licenses [find examples here]. Responsibility of ContributorsWebsite and App are used as the interfaces to view and add the content (hereinafter the &quot;Content &quot;). TreasuryDAO does not host the Content. All Content is hosted in IPFS (The InterPlanetary File System) and blockchains and it allows Users to publish and retrieve the Content from public blockchains. If a User posts Content through the Website or App, posts links on the Website or App, or otherwise make (or allow any third party to make) material available by means of the Website and App, User is entirely responsible for the Content of, and any harm resulting from, that Content. That is the case regardless of whether the Content in question constitutes text, graphics, an audio file, or computer software. By making Content available, User represents and warrants that: the downloading, copying and use of the Content will not infringe the proprietary rights, including but not limited to the copyright, patent, trademark or trade secret rights, of any third party; User has fully complied with any third-party licenses relating to the Content, and have done all things necessary to successfully pass through to end users any required terms; the Content does not contain or install any viruses, worms, malware, Trojan horses or other harmful or destructive content; the Content is not spam, is not machine- or randomly-generated, and does not contain unethical or unwanted commercial content designed to drive traffic to third party sites or boost the search engine rankings of third party sites, or to further unlawful acts (such as phishing) or mislead recipients as to the source of the material (such as spoofing); the Content is not pornographic, libellous, or defamatory, does not contain threats or incite violence towards individuals or entities, and does not violate the privacy or publicity rights of any third party. Limitation of LiabilityIn no event will TreasuryDAO be liable with respect to any subject matter of this Agreement under any contract, negligence, strict liability or other legal or equitable theory for: any special, incidental or consequential damages; any content published by third parties on Website or App, the cost of procurement of substitute products or services; for interruption of use or loss or corruption of data; or for any amounts that exceed the fees paid by User to TreasuryDAO under this Agreement during the twelve (12) month period prior to the cause of action. TreasuryDAO shall have no liability for any failure or delay due to matters beyond their reasonable control. The foregoing shall not apply to the extent prohibited by applicable law. General Representation and WarrantyUser represents and warrants that: use of the Services will be in strict accordance with the TreasuryDAO Privacy Policy, with this Agreement and with all applicable laws and regulations (including without limitation any local laws or regulations in User's country, state, city, or other governmental area, regarding online conduct and acceptable content, and including all applicable laws regarding the transmission of technical data exported from the country in which the User reside) and use of the Services will not infringe or misappropriate the intellectual property rights of any third party. IndemnificationUser agrees to indemnify and hold harmless TreasuryDAO, its contractors, and its licensors, and their respective directors, officers, employees and agents from and against any and all claims and expenses, including attorneys' fees, arising out of use of the Services, including but not limited to violation of this Agreement. ChangesContinued use of the Website and App following the posting of such changes will constitute assent to all such changes. Please periodically visit this section to review the current version of these Terms. TreasuryDAO reserves the right, at its sole discretion, to modify or replace any part of this Agreement. TreasuryDAO reserves the right, at its sole discretion, to modify or replace any part of this Agreement. TreasuryDAO will not make any change to this Agreement without a previous publicly announced and hearing the comments from the User and the community. TreasuryDAO may also, in the future, offer new Services and/or features through the Website and App (including, the release of new tools and resources). Such new features and/or services shall be subject to the Terms of this Agreement. Last review [date] I have read and accept the terms and conditions of service and TreasuryDAO privacy policy","keywords":""},{"title":"Trusts","type":0,"sectionRef":"#","url":"user/legal/Resources/trusts/","content":"Trusts","keywords":""},{"title":"Declaration of Trust","type":0,"sectionRef":"#","url":"user/legal/Resources/trusts/declaration-of-trust","content":"Declaration of Trust Declaration of Trust TRUST DECLARATION[TRUST NAME] Revocable Living Trust THE TRUST DECLARATION made as of [DATE] between **__** (the &quot;Trustee&quot;) and ********_******** (the &quot;Beneficiaries&quot;) WHEREAS the Trust is the registered owner of the &quot;Property&quot; (described herein as a [PROPERTY DESCRIPTION]) NOW THEREFORE this Trust Declaration witnesses as follows: The Trustee hereby declares that he holds the Property in the name of the Trust for the benefit of the Beneficiaries in equal share alike. The Trustee will at the request and cost of the Beneficiaries, transfer the Property to the Beneficiaries at such time or times and in such manner, or otherwise deal with the Property as the Beneficiaries shall direct or appoint, and will at all times execute and do all such documents and things as may be necessary to procure the appropriate registration to the Property to give effect to such transfer or dealing or if so required to protect the interest of the Beneficiaries. The Beneficiaries hereby declare that the Corpus of the Trust and any proceeds of its sale thereof shall be held in trust for them and that all expenditures incurred in respect of the Property shall be borne by the Beneficiaries. The Beneficiaries hereby covenant with the Trustee that they, and their heirs, executors, successors and assigns will at all times keep the Trustee indemnified against all costs, damages, expenses, claims, proceedings and demands in respect of the Property and any dealing therewith authorized by it. The Trustee shall not be required to incur any expenditure in respect of the Property except in so far as monies in respect thereof shall have been provided by the Beneficiaries for that purpose. IN WITNESS WHEREOF the Parties hereto have executed this Trust Declaration as of the date first written above. Witness******_******Trustee Witness******_****** Witness********____********Beneficiary Beneficiary","keywords":""},{"title":"Trust","type":0,"sectionRef":"#","url":"user/legal/Resources/trusts/trust","content":"Trust Trust Document TREASURYDAO REVOCABLE LIVING TRUST AGREEMENT DECEMBER 20, 2021 TREASURYDAO REVOCABLE LIVING TRUST AGREEMENT [CITY, STATE] GRANTOR[INDIVIDUAL], by and through his limited liability company, [ENTITY] (hereinafter “Grantor”), hereby establishes a Trust upon the conditions and for the purposes hereafter set forth and as of the date this document is executed by the Grantor. This Revocable Living Trust Agreement shall contain the Grantor’s wishes and directions regarding purpose outlined herein unless further amended in writing. No reference to the original Trust documents shall be required to execute the terms of this Trust. ARTICLE I Lifetime Rights and Appointment of co-Trustees This Trust is specifically set up to provide financial resources and economic support for the beneficiary named below. Grantor has deemed it appropriate to provide for the beneficiary and hereby establishes the Trust primarily to achieve those goals. The Trustee shall be empowered and directed to do the following: (1) Make any payment of income or principal of this Trust as Grantor may from time to time direct; (2) Pay or apply such part or all of the income and principal of this Trust as Grantor or the co-Trustees may deem necessary to fulfill the goals of the Trust; (3) Take any other action that Grantor may deem necessary for the goals and aims of the Trust. (4) The initial Trustee [INDIVIDUAL], who shall serve for as long as Grantor deems necessary. ARTICLE II Beneficiaries The beneficiaries of the Trust shall be: 1. [INDIVIDUAL], and 2. [INDIVIDUAL]Any time that neither beneficiary is no longer living than all assets of the Trust shall revert to the Grantor. ARTICLE III Assets and Property Allocations SECTION 1: Option to fund the Trust It is intended that the Grantor will fund the Trust with sufficient resources necessary to carry out the purpose of the Trust, which shall include, but are not limited to providing sufficient funding to allow beneficiaries to pay for the basic necessities of life. SECTION 2: Death of the Grantor If the Grantor dies while the Trust is still operational and valid then the roles, duties and rights of the Grantor shall pass to the Trustee. It is not anticipated that the Trust shall generate any income or have any discernible assets that would require a plan for distribution in this founding document. Any assets that are in the possession of the Trust shall pass to the Beneficiaries and the Trustee shall determine the use of any assets held by the Trust at the time of the demise of the Grantor. ARTICLE IV Fiduciary Powers of Trustee Grantor hereby grants the Trustee (and any successor Trustee or co-Trustee) the authority and power to exercise, in his or her sole discretion and without court order, in respect of any property forming part of any Trust created under this agreement or otherwise in its possession hereunder, all powers conferred by law upon Trustee, or expressed in this agreement, and we intend that the powers so granted be construed in the broadest possible manner. In addition, the Trustee shall also have the power, authority and discretion hereinafter set forth: (1) To take any action necessary to manage and operate the Trust: To make any decision he/she deems necessary to manage and operate the Trust or any other entity deemed appropriate and necessary by the Grantors to carry out the purpose of the Trust. (2) Transactions Between Related Entities: To transfer or move assets of any entity established or created by this Trust, as Executor or Trustee or any other Trust or estate, to fulfill the goals and purposes of the Trust. (3) Court Accounting and Bond Excused: The Trustee shall not be required to qualify, to make or file any inventory, appraisal, account or report to any court or to give bond while he/she serves as co-Trustee. (4) Withholding for Taxes: To withhold distribution of any amount of property sufficient, in his/her sole judgment, to cover any liability that may be imposed on the Trustee for taxes until such liability is finally determined and paid. (5) The Trustee shall not be personally liable to any Grantor or beneficiary or other party interested in this Trust, or to any third parties, for any claim against the Trust for any action undertaken by the Trust to achieve the purpose of the Trust; provided that the Trustee shall not be excused from liability for his/her own wrongful or willful acts. (6) The Trust and the Grantor shall indemnify and hold harmless Trustee for any action taken by Trustee on behalf of the Trust and at the direction of Grantor in good faith in the event any other entity or third party files a claim or suit naming Trustee. (7) Miscellaneous Powers: (a) To consent to the reorganization, consolidation, merger, liquidation, readjustment or other change in any corporation, company or association; (b) To compromise, settle, arbitrate, or defend any claim or demand in favor of or against the Trust; (c) To incur and pay the ordinary and necessary expenses of administration, including but not limited to reasonable attorneys’ fees, accounting fees, investment fees, etc. (d) To act through an agent or attorney-in-fact, by and under any power duly executed by any the Trustee, to the extent permitted by law; (e) The creation of any business entity, including a corporation, for any purpose deemed appropriate by the Trustee, including the retention of experts and professionals to assist in the formation and management of the corporation; (f) The creation of any banking account, payroll account, or other financial account deemed necessary by the Trustee to manage the affairs of the Trust or an entity controlled by the Trust; (g) The Trustee may freely act under all or any of the powers by this agreement given to him in all matters concerning the Trust, after forming their judgment based upon all the circumstances of any particular situation as to the wisest and best course to pursue in the interest of the Trust and the beneficiaries, without the necessity of obtaining the consent or permission of any interested person, or the consent or approval of any court. ARTICLE VI Additional Property Grantor reserves the right to establish or add to the corpus of the Trust, and any property added shall be held, administered, and distributed as part of the Trust. ARTICLE VI Successor Trustee The Grantor shall have the power to change or appoint a successor Trustee at any time. ARTICLE VII Situs SECTION 1: JURISDICTION. This Trust has been executed and the Trust created by this Agreement shall be regulated and governed in accordance with the laws of the State of Washington. This document is intended to comply with all statutory requirements as found in RCW 11.103 et seq. SECTION 2: COUNTERPART SIGNATURE. This Agreement may be executed in several counterparts, as long as each party to this Agreement executes at least one such counterpart. Each of such counterparts shall be an original, but all of the counterparts, when taken together, shall constitute one and the same instrument and shall become effective when each party hereto has executed at least one such counterpart. Counterparts may be delivered via facsimile, electronic mail (including pdf or any electronic signature complying with the U.S. federal ESIGN Act of 2000, Uniform Electronic Transactions Act or other applicable law) or other transmission method and any counterpart so delivered will be deemed to have been duly and validly delivered and be valid and effective for all purposes. ACCEPTANCE CLAUSE In Witness Whereof, the Grantor and the Trustee do hereby acknowledge execution of this Agreement. [Signature pages to follow] GRANTOR Executed this 20th day of December, 2021, at [city, state]. [INDIVIDUAL], Grantor STATE OF ) ) ss. COUNTY OF ) On this 20th day of December, 2021, before me personally appeared [INDIVIDUAL], to me known to be described in and who executed the within and foregoing instrument and acknowledged that he signed the same as his free and voluntary act and deed for the uses and purposes therein mentioned. Given under my hand and official seal the day and year last above written. Notary Public in and for the State of [STATE] ********__********Residing at [city, state] Notary Public: My Appointment expires:","keywords":""},{"title":"Tokens","type":0,"sectionRef":"#","url":"user/legal/token-disclaimer","content":"","keywords":""},{"title":"Juicebox Tokens​","type":1,"pageTitle":"Tokens","url":"user/legal/token-disclaimer#juicebox-tokens","content":"On the Project Creation workflow a number of questions were posed in the design of the specific token distribution for your project. This includes the initial token distribution, the reserved token amount, the reserved token allocations, discount rate if any, and the redemption rate, if any. Language in a terms of use agreement will be provided for a project configuration "},{"title":"TerminalV1","type":0,"sectionRef":"#","url":"dev/protocol-v1/ticketbooth/terminalv1","content":"","keywords":""},{"title":"Events​","type":1,"pageTitle":"TerminalV1","url":"dev/protocol-v1/ticketbooth/terminalv1#events","content":"event Configure( uint256 indexed fundingCycleId, uint256 indexed projectId, address caller )  event Tap( uint256 indexed fundingCycleId, uint256 indexed projectId, address indexed beneficiary, uint256 amount, uint256 currency, uint256 netTransferAmount, uint256 beneficiaryTransferAmount, uint256 govFeeAmount, address caller )  event Redeem( address indexed holder, address indexed beneficiary, uint256 indexed _projectId, uint256 amount, uint256 returnAmount, address caller )  event PrintReserveTickets( uint256 indexed fundingCycleId, uint256 indexed projectId, address indexed beneficiary, uint256 count, uint256 beneficiaryTicketAmount, address caller )  event DistributeToPayoutMod( uint256 indexed fundingCycleId, uint256 indexed projectId, PayoutMod mod, uint256 modCut, address caller )  event DistributeToTicketMod( uint256 indexed fundingCycleId, uint256 indexed projectId, TicketMod mod, uint256 modCut, address caller )  event AppointGovernance(address governance)  event AcceptGovernance(address governance)  event PrintPreminedTickets( uint256 indexed projectId, address indexed beneficiary, uint256 amount, uint256 currency, string memo, address caller )  event Deposit(uint256 amount)  event SetFee(uint256 _amount)  event Pay( uint256 indexed fundingCycleId, uint256 indexed projectId, address indexed beneficiary, uint256 amount, string note, address caller )  event AddToBalance( uint256 indexed projectId, uint256 value, address caller )  event AllowMigration(ITerminal allowed)  event Migrate( uint256 indexed projectId, ITerminal indexed to, uint256 _amount, address caller )  "},{"title":"Constructor​","type":1,"pageTitle":"TerminalV1","url":"dev/protocol-v1/ticketbooth/terminalv1#constructor","content":"/** @param _projects A Projects contract which mints ERC-721's that represent project ownership and transfers. @param _fundingCycles A funding cycle configuration store. @param _ticketBooth A contract that manages Ticket printing and redeeming. @param _modStore A storage for a project's mods. @param _prices A price feed contract to use. @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in. */ constructor( IProjects _projects, IFundingCycles _fundingCycles, ITicketBooth _ticketBooth, IOperatorStore _operatorStore, IModStore _modStore, IPrices _prices, ITerminalDirectory _terminalDirectory, address payable _governance ) Operatable(_operatorStore)  "},{"title":"Read​","type":1,"pageTitle":"TerminalV1","url":"dev/protocol-v1/ticketbooth/terminalv1#read","content":"/// @notice The governance of the contract who makes fees and can allow new TerminalV1 contracts to be migrated to by project owners. function governance() external view returns (address payable)  /// @notice The governance of the contract who makes fees and can allow new TerminalV1 contracts to be migrated to by project owners. function pendingGovernance() external view returns (address payable)  function projects() external view returns (IProjects)  function fundingCycles() external view returns (IFundingCycles)  function ticketBooth() external view returns (ITicketBooth)  function prices() external view returns (IPrices)  function modStore() external view returns (IModStore)  /// @notice The amount of ETH that each project has. function balanceOf(uint256 _projectId) external view returns (uint256)  /// @notice The percent fee the Juicebox project takes from tapped amounts. Out of 200. function fee() external view returns (uint256)  /// @notice Whether or not a particular contract is available for projects to migrate their funds and Tickets to. function migrationIsAllowed(ITerminal _terminal) external view returns (bool);   /** @notice Gets the current overflowed amount for a specified project. @param _projectId The ID of the project to get overflow for. @return overflow The current overflow of funds for the project. */ function currentOverflowOf(uint256 _projectId) external view override returns (uint256 overflow)  /** @notice Gets the amount of reserved tickets that a project has. @param _projectId The ID of the project to get overflow for. @param _reservedRate The reserved rate to use to make the calculation. @return amount overflow The current overflow of funds for the project. */ function reservedTicketBalanceOf(uint256 _projectId, uint256 _reservedRate) external view override returns (uint256)  /** @notice The amount of tokens that can be claimed by the given address. @dev The _account must have at least _count tickets for the specified project. @dev If there is a funding cycle reconfiguration ballot open for the project, the project's current bonding curve is bypassed. @param _account The address to get an amount for. @param _projectId The ID of the project to get a claimable amount for. @param _count The number of Tickets that would be redeemed to get the resulting amount. @return amount The amount of tokens that can be claimed. */ function claimableOverflowOf( address _account, uint256 _projectId, uint256 _count ) public view override returns (uint256)  /** @notice Whether or not a project can still print premined tickets. @param _projectId The ID of the project to get the status of. @return Boolean flag. */ function canPrintPreminedTickets(uint256 _projectId) public view override returns (bool)  "},{"title":"Write​","type":1,"pageTitle":"TerminalV1","url":"dev/protocol-v1/ticketbooth/terminalv1#write","content":"/** @notice Deploys a project. This will mint an ERC-721 into the `_owner`'s account, configure a first funding cycle, and set up any mods. @dev Each operation withing this transaction can be done in sequence separately. @dev Anyone can deploy a project on an owner's behalf. @param _owner The address that will own the project. @param _handle The project's unique handle. @param _uri A link to information about the project and this funding cycle. @param _properties The funding cycle configuration. @dev _properties.target The amount that the project wants to receive in this funding cycle. Sent as a wad. @dev _properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD. @dev _properties.duration The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time. @dev _properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle. @dev _properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage. If it's 200, each funding stage will have equal weight. If the number is 180, a contribution to the next funding stage will only give you 90% of tickets given to a contribution of the same amount during the current funding stage. If the number is 0, an non-recurring funding stage will get made. @dev _configuration.ballot The new ballot that will be used to approve subsequent reconfigurations. @param _metadata A struct specifying the TerminalV1 specific params _bondingCurveRate, and _reservedRate. @dev _reservedRate A number from 0-200 indicating the percentage of each contribution's tickets that will be reserved for the project owner. @dev _bondingCurveRate The rate from 0-200 at which a project's Tickets can be redeemed for surplus. The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk where x is _count, o is _currentOverflow, s is _totalSupply, and r is _bondingCurveRate. @dev _reconfigurationBondingCurveRate The bonding curve rate to apply when there is an active ballot. @param _payoutMods Any payout mods to set. @param _ticketMods Any ticket mods to set. */ function deploy( address _owner, bytes32 _handle, string calldata _uri, FundingCycleProperties calldata _properties, FundingCycleMetadata calldata _metadata, PayoutMod[] memory _payoutMods, TicketMod[] memory _ticketMods ) external override  /** @notice Configures the properties of the current funding cycle if the project hasn't distributed tickets yet, or sets the properties of the proposed funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot. @dev Only a project's owner or a designated operator can configure its funding cycles. @param _projectId The ID of the project being reconfigured. @param _properties The funding cycle configuration. @dev _properties.target The amount that the project wants to receive in this funding stage. Sent as a wad. @dev _properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD. @dev _properties.duration The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time. @dev _properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle. @dev _properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage. If it's 200, each funding stage will have equal weight. If the number is 180, a contribution to the next funding stage will only give you 90% of tickets given to a contribution of the same amount during the current funding stage. If the number is 0, an non-recurring funding stage will get made. @dev _properties.ballot The new ballot that will be used to approve subsequent reconfigurations. @param _metadata A struct specifying the TerminalV1 specific params _bondingCurveRate, and _reservedRate. @dev _metadata.reservedRate A number from 0-200 indicating the percentage of each contribution's tickets that will be reserved for the project owner. @dev _metadata.bondingCurveRate The rate from 0-200 at which a project's Tickets can be redeemed for surplus. The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk where x is _count, o is _currentOverflow, s is _totalSupply, and r is _bondingCurveRate. @dev _metadata.reconfigurationBondingCurveRate The bonding curve rate to apply when there is an active ballot. @return The ID of the funding cycle that was successfully configured. */ function configure( uint256 _projectId, FundingCycleProperties calldata _properties, FundingCycleMetadata calldata _metadata, PayoutMod[] memory _payoutMods, TicketMod[] memory _ticketMods ) external override requirePermission( projects.ownerOf(_projectId), _projectId, Operations.Configure ) returns (uint256)  /** @notice Allows a project to print tickets for a specified beneficiary before payments have been received. @dev This can only be done if the project hasn't yet received a payment after configuring a funding cycle. @dev Only a project's owner or a designated operator can print premined tickets. @param _projectId The ID of the project to premine tickets for. @param _amount The amount to base the ticket premine off of. @param _currency The currency of the amount to base the ticket premine off of. @param _beneficiary The address to send the printed tickets to. @param _memo A memo to leave with the printing. @param _preferUnstakedTickets If there is a preference to unstake the printed tickets. */ function printPreminedTickets( uint256 _projectId, uint256 _amount, uint256 _currency, address _beneficiary, string memory _memo, bool _preferUnstakedTickets )  /** @notice Contribute ETH to a project. @dev Print's the project's tickets proportional to the amount of the contribution. @dev The msg.value is the amount of the contribution in wei. @param _projectId The ID of the project being contribute to. @param _beneficiary The address to print Tickets for. @param _memo A memo that will be included in the published event. @param _preferUnstakedTickets Whether ERC20's should be unstaked automatically if they have been issued. @return The ID of the funding cycle that the payment was made during. */ function pay( uint256 _projectId, address _beneficiary, string calldata _memo, bool _preferUnstakedTickets ) external payable override returns (uint256)  /** @notice Tap into funds that have been contributed to a project's current funding cycle. @dev Anyone can tap funds on a project's behalf. @param _projectId The ID of the project to which the funding cycle being tapped belongs. @param _amount The amount being tapped, in the funding cycle's currency. @param _currency The expected currency being tapped. @param _minReturnedWei The minimum number of wei that the amount should be valued at. @return The ID of the funding cycle that was tapped. */ function tap( uint256 _projectId, uint256 _amount, uint256 _currency, uint256 _minReturnedWei ) external override nonReentrant returns (uint256)  /** @notice Addresses can redeem their Tickets to claim the project's overflowed ETH. @dev Only a ticket's holder or a designated operator can redeem it. @param _account The account to redeem tickets for. @param _projectId The ID of the project to which the Tickets being redeemed belong. @param _count The number of Tickets to redeem. @param _minReturnedWei The minimum amount of Wei expected in return. @param _beneficiary The address to send the ETH to. @param _preferUnstaked If the preference is to redeem tickets that have been converted to ERC-20s. @return amount The amount of ETH that the tickets were redeemed for. */ function redeem( address _account, uint256 _projectId, uint256 _count, uint256 _minReturnedWei, address payable _beneficiary, bool _preferUnstaked ) external override nonReentrant requirePermissionAllowingWildcardDomain( _account, _projectId, Operations.Redeem ) returns (uint256 amount)  /** @notice Allows a project owner to migrate its funds and operations to a new contract. @dev Only a project's owner or a designated operator can migrate it. @param _projectId The ID of the project being migrated. @param _to The contract that will gain the project's funds. */ function migrate(uint256 _projectId, ITerminal _to) external override requirePermission( projects.ownerOf(_projectId), _projectId, Operations.Migrate ) nonReentrant  /** @notice Receives and allocates funds belonging to the specified project. @param _projectId The ID of the project to which the funds received belong. */ function addToBalance(uint256 _projectId) external payable override  /** @notice Adds to the contract addresses that projects can migrate their Tickets to. @dev Only governance can add a contract to the migration allow list. @param _contract The contract to allow. */ function allowMigration(ITerminal _contract) external override onlyGov  /** @notice Allow the admin to change the fee. @dev Only funding cycle reconfigurations after the new fee is set will use the new fee. All future funding cycles based on configurations made in the past will use the fee that was set at the time of the configuration. @dev Only governance can set a new fee. @param _fee The new fee percent. Out of 200. */ function setFee(uint256 _fee) external override onlyGov  /** @notice Allows governance to transfer its privileges to another contract. @dev Only the currency governance can appoint a new governance. @param _pendingGovernance The governance to transition power to. @dev This address will have to accept the responsibility in a subsequent transaction. */ function appointGovernance(address payable _pendingGovernance) external override onlyGov  /** @notice Allows contract to accept its appointment as the new governance. */ function acceptGovernance() external override  /** @notice Prints all reserved tickets for a project. @param _projectId The ID of the project to which the reserved tickets belong. @return amount The amount of tickets that are being printed. */ function printReservedTickets(uint256 _projectId) public override returns (uint256 amount)  "},{"title":"Project Creation Guide","type":0,"sectionRef":"#","url":"user/project/","content":"","keywords":""},{"title":"Video Guide​","type":1,"pageTitle":"Project Creation Guide","url":"user/project/#video-guide","content":" "},{"title":"Investment Club LLC","type":0,"sectionRef":"#","url":"user/legal/Resources/investment-club","content":"Investment Club LLC Investment Club LLCSource [ENTITY LLC NAME ], A DELAWARE LIMITED LIABILITY COMPANY[SERIES NAME],] A SERIES OF [ENTITY LLC NAME ], SUBSCRIPTION DOCUMENTS [Note to User: You acknowledge and agree that the making available of this document to you by Syndicate Inc. shall not create any confidential or special relationship between you and Syndicate Inc. or its affiliates (collectively, “Syndicate”) and does not constitute the provision of legal advice or other professional advice by Syndicate or its legal counsel. You should seek advice from an attorney licensed in the relevant jurisdiction(s), as well as a tax professional, before relying on this template document. Additionally, the information provided in this document does not constitute tax advice. Any discussion of tax matters is not intended or written to be used, and cannot be used, for the purpose of avoiding penalties under the Internal Revenue Code (or equivalent in the relevant jurisdiction) or promoting, marketing or recommending to another party any transaction or matter. You further agree and acknowledge that this document has not been prepared with your specific circumstances in mind, may not be suitable for use in your business, and does not constitute legal or tax advice. Relying on this document, you assume all risk and liability that may result. Review all documents carefully for accuracy before using them. There may be [BRACKETED TEXT] requiring your attention. SYNDICATE PROVIDES THESE TERMS ON AN “AS IS” BASIS, AND SPECIFICALLY DISCLAIMS ALL WARRANTIES, TERMS, REPRESENTATIONS AND CONDITIONS WHETHER EXPRESS, IMPLIED, OR STATUTORY, AND INCLUDING ANY WARRANTIES, TERMS, REPRESENTATIONS AND CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, OR NONINFRINGEMENT.] TABLE OF CONTENTS SUBSCRIPTION INSTRUCTIONS 3 SUBSCRIPTION AGREEMENT 5 SIGNATURE PAGE TO SUBSCRIPTION AGREEMENT 17 Exhibit A 21 Exhibit B 24 Exhibit C 27 SUBSCRIPTION INSTRUCTIONS Prior to subscribing to [LLC / Series Name ] (the “Vehicle”), prospective members (“Subscribers”) should read: (i) the Limited Liability Company Agreement of [Vehicle / Master LLC Name][and the series addenda for the vehicle ] (as amended, restated, supplemented or otherwise modified from time to time, collectively the “Operating Agreement”); and (ii) these subscription documents (the “Subscription Documents”, which shall include the Subscription Agreement, exhibits, and any documents incorporated by reference). The Subscriber must also provide all of the applicable information and documents and execute the signature page outlined in the checklist below. Capitalized words that are used but not defined in this Agreement have the meaning given them in the Operating Agreement. SUBSCRIPTION DOCUMENTS CHECKLIST ◻ Complete and sign the Subscription Agreement (including additional representation page, if applicable). ◻ Review and sign the Operating Agreement Signature Page. ◻ Complete Exhibit A (Subscriber Information), and provide any documentation requested therein. ◻ Complete Exhibit B (Accredited Investor Status), and provide any documentation requested therein. ◻ Complete Exhibit C (USA Patriot Act Compliance), and provide any documentation requested therein. ◻ Complete and sign the applicable IRS Form: ◻ W-9 (for Subscribers who are U.S. persons) ◻ W-8BEN (for Individual Subscribers who are not U.S. persons) The Administrative Member may request additional documents it deems as necessary from any Subscriber. Scan and email your completed documents to [Administrative Member’s Name ] (the “Administrative Member”) and [Counsel, if any ], to arrive as soon as possible and in any event no later than [Date ]. Please keep a copy of the executed documents for your records. Documents should include applicable supporting documentation, as specified in the Subscription Documents. Documents should be sent to:[Vehicle Name]Email: [● ] [with a copy to: [Counsel Firm] Attn: [Attorney Name] Email: [●]] After notification from the Administrative Member that the subscription has been accepted, the Subscriber must send his or her subscription amount by wire transfer or as digital assets . Digital asset wallets and wire transfer information will be provided separately by the Administrative Member. Upon acceptance of the subscription, a copy of the executed Subscription Documents, signed as accepted on behalf of the Vehicle, will be returned to Subscriber. SUBSCRIPTION AGREEMENT This Subscription Agreement (this “Agreement”) is entered into by and between [LLC / Series Name ] (the “Vehicle”), [a Delaware Limited Liability Company / a Series of [Master LLC Name], a Delaware Limited Liability Company (the “Master LLC”)], and the undersigned party as Subscriber (the “Subscriber”), effective as of the date set forth on the Acceptance of Subscription page of this Agreement. Capitalized words that are used but not defined in this Agreement have the meaning given them in the Limited Liability Company Agreement of the [Vehicle / Master LLC, together with each applicable Series Addenda for the Vehicle ] (as amended, restated, supplemented or otherwise modified from time to time, the “Operating Agreement”). In consideration of the mutual covenants set forth in this Agreement and for other good and valuable consideration, the receipt and sufficiency of which are hereby acknowledged, the Subscriber and the Vehicle hereby agree as follows: Subscription. (a) Subject to the terms and conditions of this Agreement, the Subscriber hereby irrevocably tenders this subscription (this “Subscription”) for an interest in the Vehicle (an “Interest”) in the amount set forth on the “Subscription Amount” line (the “Subscription Amount”) on the Subscriber’s applicable signature page hereto (the “Signature Page”). (b) This Subscription, when and if accepted by the Administrative Member of the Vehicle, will constitute a commitment to contribute to the Vehicle that portion of the Subscription Amount accepted by the Administrative Member. The Subscriber will be admitted as a Member in the Vehicle at the time this Subscription is accepted by the Administrative Member pursuant to the terms of Section1(c) below, and the Subscriber hereby irrevocably agrees to be bound by the Operating Agreement as a Member of the Vehicle and to perform all obligations contained in the Operating Agreement applicable to him or her, including making contributions to the Vehicle. This Agreement will become irrevocable with respect to the Subscriber at the time of its submission to the Vehicle and may not be withdrawn by the Subscriber unless the Administrative Member rejects this Subscription. (c) The Administrative Member, on behalf of the Vehicle, may accept or reject this Subscription, in whole or in part, in its sole discretion. This Subscription will be deemed to be accepted by the Administrative Member and this Agreement will be binding against the Administrative Member only upon execution and delivery to the Subscriber of the Acceptance of Subscription attached to this Agreement. At the Closing, the Administrative Member will execute the Acceptance of Subscription and deliver notice of the Closing to the Subscriber within a reasonable time after the Closing. Upon acceptance, the Subscriber will be issued the Interest for which it has subscribed. Failure to deliver fully-completed and executed Subscription Documents, of which this Agreement is a part, may result in the Vehicle rejecting this Subscription. (d) The Vehicle has the unrestricted right to condition its acceptance of the Subscriber’s Subscription, in whole or in part, upon the receipt by the Vehicle of any additional instruments (including any designations, representations, warranties, or covenants), documentation and information requested by the Vehicle in its sole discretion, including an opinion of counsel to the Subscriber, evidencing the legality of an investment in the Vehicle by the Subscriber and the authority of the person executing this Agreement on behalf of the Subscriber (collectively the “Additional Documents”), in addition to these Subscription Documents. (e) The Subscriber understands that the Vehicle has entered into or expects to enter into separate subscription agreements with other members which are or will be substantially similar in all material respects to this Agreement providing for the admission of such other members as Members in the Vehicle. This Agreement and other separate subscription agreements are separate agreements and the sale arrangements between the Vehicle and other members are separate sales. The Subscriber also acknowledges and agrees that the Administrative Member may enter into side letters with certain Members (which may include the Subscriber) which contain terms different from those in this Agreement or amend and supplement certain provisions of the Operating Agreement as it applies to such Members. In the event of any inconsistency between the terms of this Agreement and the terms of any side letter, the terms of the side letter shall control.Representations and Warranties of the Subscriber. The Subscriber hereby represents and warrants to the Vehicle as of the date of this Agreement and as of the date of any Capital Contribution to the Vehicle (and the Subscriber agrees to notify the Vehicle in writing immediately if any changes in the information set forth in this Agreement occur): (a) The Subscriber has completed Exhibit B indicating if and how the Subscriber qualifies as an “Accredited Investor” within the meaning of Rule 501 of Regulation D under the Securities Act of 1933, as amended (the “Securities Act”). (b) The Subscriber has not reproduced, duplicated, or delivered the Operating Agreement or this Agreement to any other person, except professional advisers to the Subscriber or as instructed by the Administrative Member. Notwithstanding the foregoing, the Subscriber (and each employee, representative or other agent of the Subscriber) may disclose to any and all persons, without limitation of any kind, the tax treatment and tax structure of (i) the Vehicle and (ii) any of its transactions, and all materials of any kind (including opinions or other tax analyses) that are provided to the Subscriber relating to such tax treatment and tax structure. (c) The Subscriber (either alone or with the Subscriber’s professional advisers who are unaffiliated with the Vehicle, the Administrative Member, or its affiliates) has such knowledge and experience in financial and business matters that the Subscriber is capable of evaluating the merits and risks of membership in the Vehicle. (d) All questions of the Subscriber related to the Subscriber’s membership in the Vehicle have been answered to the full satisfaction of the Subscriber and the Subscriber has received all the information the Subscriber considers necessary or appropriate for deciding whether to purchase the Interest. (e) Upon acceptance of the Subscription by the Vehicle, this Agreement and the Operating Agreement will each constitute a valid and legally binding obligation of the Subscriber, enforceable in accordance with its terms except to the extent limited by applicable bankruptcy, insolvency, reorganization or other laws affecting the enforcement of creditors’ rights generally and by principles of equity. (f) The Subscriber (i) is a natural person, (ii) has full legal capacity to execute and deliver this Agreement and to perform the Subscriber’s obligations in this Agreement and (iii) is a bona fide resident of the state of residence set forth on Exhibit A and has no present intention of becoming a resident of any other state or jurisdiction. (g) Other than as set forth in this Agreement or in the Operating Agreement (and any separate agreement in writing with the Vehicle executed in conjunction with the Subscriber’s Subscription), the Subscriber is not relying upon any information, representation or warranty by the Vehicle, the Administrative Member, or any of their respective agents or representatives in determining to subscribe to the Vehicle. The Subscriber has consulted, to the extent deemed appropriate by the Subscriber, with the Subscriber’s own advisers as to the financial, tax, legal and other matters concerning the Vehicle and on that basis and the basis of its own independent investigations, without the assistance of the Vehicle, the Administrative Member, or any of their respective agents or representatives, believes that an investment in the Vehicle is suitable and appropriate for the Subscriber. Subscriber hereby represents and warrants that it has had the opportunity to have its own independent legal counsel review and approve all of the legal documents executed in connection with its Subscription. (h) The Subscriber understands and acknowledges that (i) any description of the Vehicle’s business and prospects given to the Subscriber is not necessarily exhaustive, (ii) all estimates, projections and forward-looking statements were based assumptions, estimates or projections at the time they were made, there is no guarantee that such assumptions, estimates or projections were at the time or remain reasonable and whether or not the estimates, projections or forward-looking statements will materialize depends upon many factors that are out of the control of the Vehicle and (iii) there is no assurance that any projections, estimates or forward-looking statements will be attained. (i) The Subscriber’s information provided in this Agreement (including the exhibits hereto) is complete and accurate and may be relied upon by the Vehicle and the Administrative Member. Additionally, by executing the Agreement, the Subscriber acknowledges and agrees that any identifying information or documentation regarding the Subscriber and/or its suitability to invest in the Vehicle that was furnished by the Subscriber to the Administrative Member, whether in connection with this Subscription or previously, may be made available to Administrative Member, remains true and correct in all respects and may, at the discretion of the Administrative Member, be incorporated by reference herein (collectively, “Supporting Documents”). (j) Neither this Subscription nor any of the Subscriber’s Capital Contributions do or will directly or indirectly contravene applicable laws and regulations, including anti-money-laundering laws and regulations. The Subscriber understands and agrees that the Vehicle may undertake any actions that the Vehicle deems necessary or appropriate to ensure compliance with applicable laws, rules and regulations regarding money laundering or terrorism. In furtherance of those efforts, the Subscriber hereby represents, covenants, and agrees that, to the best of the Subscriber’s knowledge based on reasonable investigation: (i) None of the Subscriber’s Capital Contributions to the Vehicle (whether payable in cash or otherwise) will be derived from money laundering or similar activities deemed illegal under federal laws and regulations. (ii) To the extent within the Subscriber’s control, none of the Subscriber’s Capital Contributions to the Vehicle will cause the Vehicle or any of its personnel to be in violation of federal anti-money laundering laws, including without limitation the Bank Secrecy Act (31 U.S.C. 5311 et seq.), the United States Money Laundering Control Act of 1986 or the International Money Laundering Abatement and Anti-Terrorist Financing Act of 2001, and any regulations promulgated thereunder. (iii) The Subscriber acknowledges that due to anti-money laundering requirements operating in the United States, as well as the Vehicle’s own internal anti-money laundering policies, the Vehicle and the Administrative Member may require further identification of the Subscriber and the source of its Capital Contribution before these Subscription Documents can be processed, Capital Contributions can be accepted, or distributions can be made. When requested by the Administrative Member, the Subscriber will provide any and all additional information, and the Subscriber understands and agrees that the Administrative Member may release confidential information about the Subscriber or persons related to Subscriber if the Administrative Member has determined that the release is necessary to ensure compliance with all applicable laws and regulations concerning money laundering and similar activities. (k) Except as otherwise disclosed in writing to the Administrative Member, the Subscriber represents and warrants that neither it nor any person or entity controlled by, controlling or under common control with the Subscriber nor any person having a beneficial or economic interest in the Subscriber or the Subscriber’s assets nor (without limiting the Subscriber’s representations in Section 9 below) for whom the Subscriber is acting as agent or nominee in connection with this investment, is: (i) a Prohibited Investor; (ii) a Senior Foreign Political Figure, any member of a Senior Foreign Political Figure’s “immediate family,” which includes the figure’s parents, siblings, spouse, children and in-laws, or any Close Associate of a Senior Foreign Political Figure, or a person or entity resident in, or organized or chartered under, the laws of a Non-Cooperative Jurisdiction; (iii) a person or entity resident in, or organized or chartered under, the laws of a jurisdiction that has been designated by the U.S. Secretary of the Treasury under Section 311 or 312 of the USA PATRIOT Act as warranting special measures due to money laundering concerns; or (iv) a person or entity who gives the Subscriber reason to believe that its funds originate from, or will be or have been routed through, an account maintained at a Foreign Shell Bank, an “offshore bank,” or a bank organized or chartered under the laws of a Non-Cooperative Jurisdiction. (l) The Subscriber understands the rights, obligations and restrictions of Members, including that withdrawals of capital from the Vehicle and transfers of interests in the Vehicle by Members are limited by the terms of the Operating Agreement. (m) The Subscriber understands the meaning and legal consequences of the representations and warranties made by the Subscriber in these Subscription Documents and the Operating Agreement, and that the Administrative Member is relying on those representations and warranties in making its determination to accept or reject this Subscription. The Subscriber represents and warrants that the information contained in this Agreement and in the Subscription Documents is true and correct as of the date hereof and shall be deemed repeated and reaffirmed by the Subscriber as of each date that it makes a Capital Contribution to the Vehicle and agrees to notify immediately the Administrative Member of any changes in such information (or, if there have been any changes in the information provided to the Vehicle by the Subscriber in the Subscription Documents since the date the Subscription Documents were furnished, the Subscriber has advised the Vehicle in writing of such changes). The Subscriber hereby agrees to indemnify and hold harmless the Vehicle and each member thereof from and against any and all losses, damages, expenses, liabilities or reasonable attorneys’ fees (including attorneys’ fees and expenses incurred in a securities or other action in which no judgment in favor of the Subscriber is rendered) due to or arising out of a breach of any representation or warranty of the Subscriber, whether contained in the Operating Agreement, this Subscription Agreement or the Subscription Documents. Notwithstanding any of the representations, warranties, acknowledgments or agreements made in this Subscription Agreement and in the Subscription Documents by the Subscriber, the Subscriber does not thereby or in any other manner waive any rights granted to the Subscriber under federal or state securities law. (n) The Subscriber understands the risks involved with acquiring an interest in the Vehicle, understands the business of the Vehicle, has thoroughly read and understands all the provisions of the Operating Agreement and can withstand a total loss of its Capital Contributions to the Vehicle. (o) [The Subscriber understands that the use of a limited liability company with protected or registered Series (a “Series LLC”) has not yet been widely adopted and is subject to various legal uncertainties, including, without limitation, uncertainties relating to: (i) the potential non-recognition of the separate and segregated assets and liabilities of a Series in jurisdictions that do not have statutes permitting the establishment of a Series LLC; (ii) the risk of non-compliance with statutory requirements that must be met in order to maintain the separate liability and assets of a Series in Delaware or any applicable state even if that state otherwise recognizes or permits the establishment of a Series LLC; (iii) the novelty and lack of established precedent regarding Series LLCs and the potential for liability “spill-over” risks between a Series and the Series LLC or another Series; (iv) the lack of legal and regulatory clarity regarding the taxation of a Series and a Series LLC at both the federal and state level; and (v) the lack of legal and regulatory clarity regarding the treatment of a Series and a Series LLC in bankruptcy proceedings under federal law.]Liability. The Subscriber agrees that neither the Vehicle, the Administrative Member, nor any of their respective affiliates, nor their respective managers, officers, directors, members, equity holders, employees or other applicable representatives (collectively, the “Covered Persons”), will incur any liability (a) in respect of any action taken upon any information provided to the Vehicle by the Subscriber (including any Supporting Documents or Additional Documents) or for relying on any notice, consent, request, instructions or other instrument believed, in good faith, to be genuine or to be signed by properly authorized persons on behalf of the Subscriber, including any document transmitted by email or other electronic delivery or (b) for adhering to applicable anti-money laundering obligations whether now or later comes into effect.Power of Attorney. The Subscriber hereby irrevocably makes, constitutes and appoints the Administrative Member its true and lawful agent and attorney-in-fact, with full power of substitution and full power and authority in the name, place, and stead of the Subscriber, to make, execute, sign, swear to, acknowledge and record and file in all necessary or appropriate places all documents relating to the Vehicle and its activities, including, but not limited to: (a) the Operating Agreement and any amendment to the Operating Agreement that has been adopted as provided in the Operating Agreement; (b) a Certificate of Formation of the Vehicle and all amendments required or permitted by law or the provisions of the Operating Agreement; (c) any applications, forms, certificates, reports, or other documents that may be requested or required by any federal, state, or local governmental agency, securities exchange, securities association, self-regulatory organization, or similar institution and that are deemed necessary or advisable by the Administrative Member; (d) any other instrument that may be required to be filed or recorded in any state or county or by any governmental agency, or that the Administrative Member deems advisable to file or record, including, without limitation, applications for foreign qualification and certificates of assumed name; (e) any documents that may be required to effect the continuation of the Vehicle, the admission of additional Members, the admission of substitute Members, or the dissolution or termination of the Vehicle, provided such continuation, admission, dissolution or termination are in accordance with the terms of the Operating Agreement; (f) to make certain elections contained in the Internal Revenue Code (the “Code”) or state law governing taxation of limited liability companies; and (g) to perform any and all other ministerial duties or functions necessary for the conduct of the business of the Vehicle. Notwithstanding the foregoing, the Administrative Member may not exercise this power of attorney with respect to matters as to which the Operating Agreement requires the consent of the Members until such consent has been received. The foregoing power of attorney is coupled with an interest, is irrevocable and will survive the subsequent death or disability of the Subscriber or any subsequent power of attorney executed by the Subscriber and is coupled with an interest, is irrevocable and will survive the subsequent death or disability of the Subscriber or any subsequent power of attorney executed by the Subscriber. The Subscriber must execute and deliver to the Administrative Member within 5 business days after receipt of the Administrative Member’s request, any further designations, powers-of-attorney and other instruments as the Administrative Member reasonably deems necessary to carry out the terms of this Agreement.Dispute Resolution. Notwithstanding anything to the contrary in this Agreement or the Operating Agreement, and except for any claim or action that Administrative Member or the Vehicle may elect to commence to enforce any of its rights or the Subscriber’s obligations under this Agreement or the Operating Agreement, the Subscriber agrees that all disputes arising out of (i) this Agreement, (ii) the Vehicle’s offering of the Interest, (iii) the Subscriber’s Subscription for the Interest and (iv) the Subscriber’s rights and obligations under the Operating Agreement will be settled by binding arbitration, before three arbitrators, administered by the American Arbitration Association under and in accordance with its Commercial Arbitration Rules. The decision of the arbitrators shall be non-appealable, binding and conclusive upon all parties thereto and judgment on the award rendered by the arbitrators may be entered in any court having jurisdiction. The location of the arbitration will be [San Francisco, California ]. Each of the parties will equally bear any arbitration fees and administrative costs associated with the arbitration. The prevailing party, as determined by the arbitrators, will be awarded its costs and reasonable attorneys’ fees incurred in connection with the arbitration. Each party hereby irrevocably and unconditionally submits, for itself and its property, to the exclusive jurisdiction of any courts located in the Arbitration Location, for recognition or enforcement of any award determined pursuant to this Section 5. NOTICE: By becoming a party to this Agreement and the Operating Agreement, each party is agreeing to have all disputes, claims or controversies arising out of or relating to this Agreement and the Operating Agreement decided by neutral binding arbitration, and is giving up any rights it might possess to have those matters litigated in a court or jury trial. By becoming a party to this Agreement and the Operating Agreement, each party is giving up its judicial rights to discovery and appeal except to the extent that they are specifically provided for under this Agreement and the Operating Agreement. If any party refuses to submit to arbitration after agreeing to this provision, that party may be compelled to arbitrate under federal or state law. By becoming a party to this Agreement and the Operating Agreement, each party confirms that its agreement to this arbitration provision is voluntary.Waiver; Conflict of Interest. The Subscriber acknowledges and agrees that the Members (including the Administrative Member), and their affiliates will be subject to various conflicts of interest in carrying out responsibilities with respect to the Vehicle. Affiliates of Members may also be in competition with the Vehicle or its investments. Other vehicles may be formed in the future with objectives that are the same as or similar to the Vehicle’s objectives. Each Subscriber hereby waives any such conflicts by executing this Agreement.Confidentiality. The Subscriber must keep confidential, and not make use of or disclose to any person (other than for purposes reasonably related to its Interest or as required by law), any information or matter received from or relating to the Vehicle; provided, that the Subscriber may disclose any such information to the extent that such information (i) is or becomes generally available to the public through no act or omission of the Subscriber, (ii) was already in the possession of the Subscriber at the time of such disclosure or (iii) is communicated to the Subscriber by a third party without violation of confidentiality obligations.USA PATRIOT Act. To comply with applicable laws, rules and regulations designed to combat money laundering or terrorism, the Subscriber must provide the information on Exhibit C of this Agreement.Beneficial Ownership. The Subscriber represents and warrants that it is subscribing for Interests for Subscriber’s own account and own risk. The Subscriber also represents that it does not have the intention or obligation to sell, distribute, or transfer its Interests or any portion of Interests, directly or indirectly, to any other person or entity or to any nominee account. The Subscriber represents and warrants that the Subscriber is not acting as trustee, custodian, agent, representative or nominee for (or with respect to) another person or entity (howsoever characterized and regardless of whether such person or entity is deemed to have a property interest, or the like, with respect to the Interests under local law). The Subscriber further represents and warrants that the Subscriber will comply, in all respects, with the requirements of applicable anti-money laundering laws and regulations.Subscriber’s Sophistication. In view of the fact that Subscriber is sophisticated, has had access to information sufficient to make an investment decision and has conducted his or her own due diligence, and has made its investment decision without reliance on (a) the Administrative Member, (b) any material information the Administrative Member may have about the Portfolio Company Securities and Portfolio Company, or (c) any disclosures of non-public information that may have been made to the Administrative Member (or that the Administrative Member may have independently obtained), and further in view of all of the representations Subscriber has made in Section 2, Subscriber hereby irrevocably: (i) waives any right to any and all actions, suits, proceedings, investigations, claims or liabilities of any nature, including but not limited to actions under Rule 10b-5 of the Securities Exchange Act of 1934 or similar laws (collectively “Claims”) that may arise from or relate to the possession of or failure to disclose non-public information, (ii) releases any Claims against the Covered Persons, and (iii) agrees to refrain from pursuing against any Claims against those parties.Survival. The representations, warranties and agreements contained in this Agreement will survive the execution of this Agreement by the Subscriber and acceptance of the Subscription by the Vehicle.Additional Information. The Subscriber agrees that, upon demand, it will promptly furnish any information, and execute and deliver such documents, as reasonably required by the Administrative Member and furnish any information relating to the Subscriber’s relationship with the Vehicle as required by governmental agencies having jurisdiction over the Vehicle and/or the Administrative Member.Assignment and Successors. This Agreement may be assigned by the Subscriber only with the prior written consent of the Vehicle in accordance with Article VIII and Article 14.13 of the Operating Agreement. Subject to the foregoing, this Agreement (including the provisions of Section 5) will be binding on the respective successors, assigns, heirs and legal representatives of the parties to this Agreement.No Third-Party Beneficiaries. This Agreement does not confer any rights or remedies upon any person, other than the Parties to the Operating Agreement and this Agreement.Amendment; Waiver. This Agreement may not be amended other than by written consent of the Subscriber and the Vehicle. No provision in this Agreement may be waived other than in a writing signed by the waiving party. Unless expressly provided otherwise, no waiver will constitute an ongoing or future waiver of any provision of this Agreement.Governing Law. This Agreement is governed by and will be construed in accordance with the laws of the State of Delaware, without regard to conflict of laws principles. For the purpose of any judicial proceeding to enforce an award or incidental to arbitration or to compel arbitration, the Subscriber and the Vehicle hereby submit to the non-exclusive jurisdiction of the courts located in [San Francisco, California ], and agree that service of process in such arbitration or court proceedings will be satisfactorily made upon it if sent by registered mail addressed to it at the address set forth on the Subscriber Information page.Entire Agreement. This Agreement, the Operating Agreement and any side letter entered into between the Administrative Member and/or the Vehicle and the Subscriber, and all of the exhibits and appendices attached to those agreements, constitutes the entire agreement and understanding between the parties with respect to the subject matter those agreements and supersedes any prior written or oral agreements or understandings of the Parties.Notice. (a) Each Member hereby acknowledges that the Administrative Member will be entitled to transmit to that Member exclusively by email (or other means of electronic messaging) all notices, correspondence and reports, including, but not limited to, that Member’s Schedule K-1s. (b) Each notice or other communication to the Administrative Member or the Vehicle will for purposes of this Agreement be treated as effective or having been given upon the earlier of (i) receipt, (ii) the date transmitted by email, with evidence of transmission from the transmitting device, (iii) acknowledged receipt, (iv) when delivered in person, (v) when sent by electronic facsimile transfer or electronic mail at the number or address set forth below and receipt is acknowledged by the Administrative Member, (vi) one business day after having been dispatched by a nationally recognized overnight courier service if receipt is evidenced by a signature of a person regularly employed or residing at the address set forth below for that Party or (vii) three business days after being sent by registered or certified mail, return receipt requested, postage prepaid.Severability. If any provision of this Agreement is held by applicable authority to be unlawful, void or unenforceable to any extent, such provision, to the extent necessary, will be severed from this Agreement and the remainder of this Agreement will not be affected by the removal of that provision and will continue in full force and effect.Copies and Counterparts. Copies of signatures to this Agreement will be valid, binding and effective as original signatures for all purposes under this Agreement. This Agreement may be executed in any number of counterparts, each of which will be an original but all of which taken together will constitute one agreement.Electronic Delivery of Disclosures and Schedule K-1. The Subscriber understands that the Vehicle and the Administrative Member expect to deliver tax return information, including Schedule K-1s (each, a “K-1”) to the Subscriber by either electronic mail, a posting to a Subscriber-accessible platform, or some other form of electronic delivery. Pursuant to IRS Rev. Proc. 2012-17 (Feb. 13, 2012), the Subscriber hereby expressly understands, consents to, and acknowledges such electronic delivery of tax returns and related information. Federal law prohibits the Vehicle, the Administrative Member, or their affiliates and designees from disclosing, without consent, subscriber’s tax return information to third parties or use of that information for purposes other than the preparation of subscriber’s tax return. As part of subscription to this offering, the Vehicle, the Administrative Member, or their designees may disclose subscriber’s income tax return information to certain other affiliated entities or third-party service providers for tax return preparation and data aggregation purposes. The Vehicle and its designees covenant they will keep and maintain subscriber’s information in strict confidence, using such degree of care as is appropriate to avoid unauthorized access, use or disclosure, and will not use such information in violation of law. In executing this Agreement, subscriber authorizes the Vehicle or the Administrative Member to disclose tax return information to various service providers, their respective successors, affiliates and, or such other third-party service providers as subscriber may request or as may be required by the Vehicle or the Administrative Member for purposes of completing tax return preparation and K-1 delivery pursuant to this agreement. (a) The Subscriber’s consent to electronic delivery will apply to all future K-1s unless such consent is withdrawn by the Subscriber. (b) If for any reason the Subscriber would like a paper copy of the K-1 after the Subscriber has consented to electronic delivery, the Subscriber may submit a request to the Administrative Member. Requesting a paper copy of the Subscriber’s K-1 will not be treated as a withdrawal of consent. (c) If the Subscriber in the future determines that it no longer consents to electronic delivery, the Subscriber will need to notify the Vehicle so that it can arrange for a paper K-1 to be delivered to the address that the Vehicle then currently has on file. The Subscriber may submit notice to the Administrative Member. The Subscriber’s consent is considered withdrawn on the date the Vehicle receives the written request to withdraw consent. The Vehicle will confirm the withdrawal and its effective date in writing. A withdrawal of consent does not apply to a K-1 that was emailed to the Subscriber before the effective date of the withdrawal of consent. (d) The Vehicle (or the Administrative Member) will cease providing statements to the Subscriber electronically if the Subscriber provides notice to withdraw consent, if the Subscriber ceases to be a Member of the Vehicle, or if regulations change to prohibit the form of delivery. (e) If the Subscriber needs to update the Subscriber’s contact information that is on file, please email the update to the Administrative Member. The Subscriber will be notified if there are any changes to the contact information of the Vehicle. (f) The Subscriber’s K-1 may be required to be printed and attached to a federal, state, or local income tax return.Elections and Audits. The Subscriber covenants and agrees to take any action reasonably requested by the Vehicle in connection with an election by the Vehicle under Section 6221(b) or 6226 of the Code or an audit or a final adjustment of the Vehicle by a taxing authority (including, without limitation, promptly filing amended tax returns and promptly paying any related taxes, including penalties and interest). Without limiting the generality of the foregoing, the Subscriber covenants and agrees, if applicable, to take into account and report to the IRS any adjustment to its items for any reviewed year as notified to them by the Vehicle in a statement, in the manner provided in Section 6226(b), whether or not such Subscriber owns any Interests in the Vehicle in the year of the Vehicle’s statement. Any Subscriber that fails to report its share of such adjustments on its U.S. tax return for its taxable year including the date of the Vehicle’s statement as described immediately above shall indemnify and hold harmless the Vehicle, the Administrative Member, and each of their Affiliates from and against any and all liabilities related to taxes (including penalties and interest) imposed on the Vehicle as a result of the Subscriber’s inaction. In addition, each Subscriber covenant and agrees to indemnify and hold harmless the Vehicle, the Administrative Member, and each of their affiliates from and against any and all liabilities related to taxes (including penalties and interest) imposed on the Vehicle (i) pursuant to Section 6221 of the Code, which liabilities relate to adjustments that would have been made to the tax items allocated to such Subscriber had such adjustments been made for a tax year beginning prior to January 1, 2018 (and assuming that the Vehicle had not made an election to have Section 6221 of the Code as amended by P.L. 114-74 apply for such earlier tax years) and (ii) resulting from or attributable to such Subscriber’s failure to comply with certain of its covenants contained in the Operating Agreement.U.S. Foreign Account Tax Compliance Act. The Subscriber covenants that it (i) will provide any form, certification or other information reasonably requested by and acceptable to the Vehicle that is necessary for the Vehicle (A) to prevent withholding or qualify for a reduced rate of withholding or backup withholding in any jurisdiction from or through which the Vehicle receives payments or (B) to satisfy reporting or other obligations under the Code and the Treasury Regulations; (ii) will update or replace such form, certification or other information in accordance with its terms or subsequent amendments; and (iii) will otherwise comply with any reporting obligations imposed by the United States or any other jurisdiction, including reporting obligations that may be imposed by future legislation. The Subscriber understands and acknowledges that if Subscriber fails to provide any such form, certification or other information as requested, Subscriber would be subject to a withholding tax and the Administrative Member may take any action in relation to Subscriber’s Interest or withdrawal proceeds to ensure that such withholding is economically borne by Subscriber. BY SIGNING THIS AGREEMENT, THE SUBSCRIBER: (i) ACKNOWLEDGES THAT ANY MISSTATEMENT MAY RESULT IN A FORCED SALE OF SUBSCRIBER’S INTERESTS. (ii) AGREES THAT IF THE VEHICLE BELIEVES THAT SUBSCRIBER’S REPRESENTATION IN SECTION 2(K) IS NO LONGER CORRECT, THE VEHICLE MAY BE OBLIGATED TO FREEZE SUBSCRIBER’S INVESTMENT, DECLINE TO MAKE DISTRIBUTIONS OR SEGREGATE THE ASSETS CONSTITUTING SUBSCRIBER’S INVESTMENT WITH THE VEHICLE IN ACCORDANCE WITH APPLICABLE LAW. (Signature Pages Follow) SIGNATURE PAGE TO SUBSCRIPTION AGREEMENT INDIVIDUALS IN WITNESS WHEREOF, the Subscriber hereby executes this Agreement as of the date set forth below. Date: Subscription Amount: $****___**** Subscriber: (Signature) (Signature) (Print Name) (Print Name) ACCEPTANCE OF SUBSCRIPTION (to be filled out only by the Vehicle) By signing below, the Administrative Member and the Vehicle hereby accept Subscriber’s Subscription for Interests in the Vehicle with a Subscription Amount of $**____**, admit the Subscriber as a Member of the Vehicle as of the date set forth below in accordance with the terms of the Subscription Agreement and the Operating Agreement, and authorize this signature page to be attached to the Subscription Agreement related to the Vehicle.[ADMINISTRATIVE MEMBER Name ], in its capacity as Administrative Member, and for and on behalf of [LLC / SERIES NAME ] By: ********____******** Date: ********_********Name: Title: LIMITED LIABILITY COMPANY AGREEMENT SIGNATURE PAGE After reviewing the Operating Agreement, please execute and return the Operating Agreement signature page along with the rest of the Subscriber’s Subscription Documents. For your convenience, a copy of the Operating Agreement signature page is included on the next page of this packet. Member Signature Page The undersigned Member hereby executes the Limited Liability Company Operating Agreement of the Company, dated as of the Effective Date, and hereby authorizes this signature page to be attached to a counterpart of that document executed by the Administrative Member of the Company. (Print Name of Member) Dated: **__**(Signature of Member or Authorized Signatory) EXHIBIT A SUBSCRIBER INFORMATION Instructions for Subscribers: Please provide the information requested and make the representations applicable to the Subscriber. If the Subscriber cannot provide the requested information or make a certain representation, it should consult with its attorney on how to complete the Subscription Documents, including this Exhibit A. Full Legal Name of the Subscriber:Subscription Amount:U.S. Taxpayer Identification Number or Social Security Number (as applicable):Country of Citizenship:Subscriber’s Address of Residence:Address for Delivery and Notices (if different from above):Phone Number:Email Address:Payment of Distributions: The Subscriber hereby requests that the Vehicle pay any cash distributions to the following account or digital asset wallet, except as the Subscriber otherwise notifies the Administrative Member in writing: Bank Account Name of Bank: Name of Banking Officer: Address: ABA Number: IBAN Number: Swift Number: Account Number: Account Name: Telephone Number of Bank: Facsimile Number of Bank: Address for Notices/Declarations: Digital Asset Wallet Name and Address of Wallet: Telephone Number Associated with Wallet: Has the Subscriber reviewed the portion of the Operating Agreement outlining the risk factors in making an investment in the Vehicle? Yes _ No _Does the Subscriber consent to electronic delivery of disclosures and Schedules K-1? Yes _ No _Please check the box that best describes the Subscriber’s intended ownership: ◻ Single Individual (one signatory required) ◻ Joint Tenants with Right of Survivorship (each individual must sign) ◻ Tenants-in-Common (each individual must sign) ◻ Community Property (one signatory required) ◻ Other: ********___********Does the Subscriber acknowledge that it may not purchase Interests in the Vehicle using assets of an individual retirement account, individual retirement annuity, employee benefit plan or other similar arrangement, such as a “Keogh” plan? Yes _ No _If the Subscriber responded “No ” above, its ability to invest in the Vehicle may be limited.Does the Subscriber make its own investment decisions? Yes _ No _If the Subscriber responded “No”, please provide the name of the Person who makes investment decisions on behalf of the Subscriber: EXHIBIT B ACCREDITED INVESTOR STATUS The Subscriber makes one or more of the following representations regarding the Subscriber’s status as an “Accredited Investor” (within the meaning of Rule 501 of Regulation D under the Securities Act of 1933, (the “Securities Act”) as amended by Section 412 of the Dodd-Frank Wall Street Reform and Consumer Protection Act of 2010), and has checked the applicable representations. ◻ 1. The Subscriber is a natural person with a net worth, either individually or upon a joint basis with the Subscriber’s spouse or spousal equivalent, of at least $1,000,000. ◻ 2. The Subscriber is a natural person with individual income (without including any income of the Subscriber’s spouse or spousal equivalent) in excess of $200,000, or a joint income with the Subscriber’s spouse or spousal equivalent in excess of $300,000, in each of the two most recent years and has a reasonable expectation of reaching the same income level in the current year. ◻ 3. The Subscriber is a natural person holding in good standing one or more of the following professional certifications or designations or other credentials: (a) Licensed General Securities Representative (Series 7); (b) Licensed Private Securities Offerings Representative (Series 82); (c) Licensed Investment Adviser Representative (Series 65); or (d) any other professional certification or designation or other credential from an accredited educational institution that the SEC has designated, as of the date hereof, as qualifying an individual for accredited investor status. . ◻ 4. The Subscriber has reviewed, either independently or with the assistance of counsel, and understands the representations set forth in Items 1 through 13 above. ◻ 5. The Subscriber cannot make any of the representations set forth in Items 1 through 13 above. EXHIBIT C USA PATRIOT ACT COMPLIANCE Name of the bank from which the Subscriber’s payment to the Vehicle is being wired (the “Wiring Bank”):Is the Wiring Bank located in the United States or another “FATF Country” ? ◻ Yes ◻ NoIf the Subscriber answered “Yes,” is the Subscriber a customer of the Wiring Bank? ◻ Yes ◻ No If the Subscriber answered “No” to questions 2 or 3 above, the Subscriber may be required, if the Subscriber is an individual, to produce a copy of a passport or identification card, together with any evidence of the Subscriber’s address, such as a utility bill or bank statement, and date of birth.","keywords":""},{"title":"Project Details","type":0,"sectionRef":"#","url":"user/project/details","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Project Details","url":"user/project/details#overview","content":"Project Details are displayed on your juicebox.money project page. This section includes your project's title, description, logo, important links, and pay button customization. These details can be updated later.Emojis can be used in these fields.This information is stored on IPFS via Pinata. "},{"title":"Options​","type":1,"pageTitle":"Project Details","url":"user/project/details#options","content":"Field\tDescriptionProject name The title of your project, which will appear on your project page and on the juicebox.money home page. Project description This description will appear on your project page. Project creators often use this space for stating their project's goals and providing context. Logo Your project's logo, which will be displayed on your project page and on the juicebox.money home page. Upload a GIF for an animated logo! Filesize must be under 1 MB. Website A link to any website, which will be displayed on your project page. Project creators often link to their project's landing page. If unnecessary, this field can be left blank. Twitter handle A Twitter handle, which will be displayed as a link on your project page. Do not type an @ before the handle—it will be added automatically. Project creators often link to their project's official Twitter account. If unnecessary, this field can be left blank. Discord link A Discord server invite, which will be displayed as a link on your project page. Project creators often link to an official project Discord server. If unnecessary, this field can be left blank. Pay button text The pay button text on your project page. The default is Pay, and Donate is a popular alternative. Pay disclosure The pay disclosure will be shown to people before they pay your project. Project creators often use this to provide context or to display an agreement. "},{"title":"Examples​","type":1,"pageTitle":"Project Details","url":"user/project/details#examples","content":" Project page on juicebox.money   Payment page on juicebox.money "},{"title":"Funding","type":0,"sectionRef":"#","url":"user/project/funding","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Funding","url":"user/project/funding#overview","content":"Funding parameters dictate how your project distributes funds. This section also dictates the behaviour of your project's funding cycle. A project's funding cycle determines how its time-locked rules operate. These details can be updated over time. "},{"title":"Options​","type":1,"pageTitle":"Funding","url":"user/project/funding#options","content":"Field\tDescriptionAutomate funding cycles Projects are expressed in terms of funding cycles. Payouts happen once per funding cycle.Some token incentives are calculated using funding cycles.Most importantly, projects cannot be reconfigured in the middle of a funding cycle. Instead, changes are queued for the next funding cycle. With automated funding cycles turned off, the project owner can reconfigure the project at any time, triggering a new funding cycle in the process. This provides flexibility for the project owner, but increases the community's percieved risk of rugpulls or other malicious behaviour. When automated funding cycles are turned on, the project owner must choose a cycle duration. A shorter funding cycle provides more flexibility, but greater percieved risk. A longer funding cycle will do the opposite. Automated funding cycles are particularly useful for projects with regular costs or payouts. Payouts Payouts dictate how funds leave a treasury. Amounts payouts are specific ETH or dollar amounts.Percentages payouts are percentages of the entire treasury. Payouts to Ethereum addresses invoke a 2.5% fee, which is routed to the Juicebox DAO treasury. These fees issue JBX tokens, granting projects partial ownership of the ecosystem. Payouts to other Juicebox projects do not invoke fees. Funds not needed for a project's payouts are considered overflow. Community members can redeem their tokens for a portion of overflow funds, if enabled by the project owner. Overflow also serves as a project's runway. Projects using percentages payouts do not have any overflow. "},{"title":"Examples​","type":1,"pageTitle":"Funding","url":"user/project/funding#examples","content":" Funding cycle information on juicebox.money   A project with ETH payout amounts on juicebox.money "},{"title":"Rules","type":0,"sectionRef":"#","url":"user/project/rules","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Rules","url":"user/project/rules#overview","content":"Rules include restrictions on project reconfigurations and global toggles for pausing payments and enabling at-will token minting. "},{"title":"Options​","type":1,"pageTitle":"Rules","url":"user/project/rules#options","content":"Field\tDescriptionPause payments When enabled, people cannot pay your project. Project owners have used this in between fundraising periods, or when wanting to completely shut off token issuance. Allow token minting When enabled, the project owner can mint project tokens to any address at will. This could be used for setting up a &quot;premine&quot;, or to create an additional token reserve for the DAO. Reconfiguration rules Reconfiguration rules are conditions which must be met for a project to be reconfigured. Under the default 3-day delay, a reconfiguration must be submitted at least 3 days before the next funding cycle starts. This gives the community time to verify queued reconfigurations and prevents a last-second rug pull. "},{"title":"Token","type":0,"sectionRef":"#","url":"user/project/token","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Token","url":"user/project/token#overview","content":"When people pay a project, project tokens are minted. Token parameters dictate how those tokens work. Token balances are tracked in the Juicebox contracts by default. If desired, project owners can issue an ERC-20 on juicebox.money once their project is deployed. This ERC-20 can be claimed by community members.Project tokens are often used for voting in governance, gated access to a Discord server, an NFT mint, or something else.These rules can be updated over time. "},{"title":"Options​","type":1,"pageTitle":"Token","url":"user/project/token#options","content":"Field\tDescriptionInitial mint rate The number of project tokens minted when 1 ETH is contributed. Reserved tokens Tokens are minted when people pay your project. Reserved tokens can be used to control where those tokens go. By default, all tokens go to the person that pays your project. If the reserved rate is set to 30%, the person that pays your project will only receive 70% of the tokens minted by that payment. The remaining 30% of tokens will go to Ethereum addresses and Juicebox projects chosen by the project owner. Project owners often use reserved tokens to ensure that core project members maintain a voice in governance as a project grows. A higher reserve rate makes a project more resilient to takeover, but reduces the incentive for individuals to contribute to your project (as they will receive fewer project tokens). A lower reserve rate will do the opposite. Discount rate The percentage your mint rate will decrease by every funding cycle. In other words: how much more expensive do project tokens become each funding cycle? If a project has an intial mint rate of 1,000,000 tokens per ETH and a discount rate of 10%, that project's mint rate will be 900,000 tokens per ETH in its second funding cycle, and 810,000 tokens per ETH in the funding cycle after that. This mechanic encourages early contributions, but may also discourage later contributors if too extreme. Redemption rate By default, tokens can be redeemed for a proportional amount of overflow. Funds exceeding your costs/payouts are considered overflow.By default, a token holder who redeems ten percent of all project tokens will receive ten percent of the overflow. The redemption rate alters this behaviour—if set to 60%, project tokens are only redeemable for 60% of the overflow they would otherwise correspond to. This means that somebody redeeming 10% of project tokens would only receive ~6% of the overflow, leaving the other ~4% in the treasury. The funds remaining in the treasury increase the proportional value of other tokens. The redemption rate mechanic rewards individuals who redeem their project tokens later rather than earlier. "},{"title":"Examples​","type":1,"pageTitle":"Token","url":"user/project/token#examples","content":" A mint rate displayed on juicebox.money   Reserved tokens on juicebox.money   Token incentive information on juicebox.money "},{"title":"Example Nevada UNA","type":0,"sectionRef":"#","url":"user/legal/Resources/nv-una","content":"Example Nevada UNA TreasuryDAO a Nevada nonprofit GUIDING PRINCIPLES These guiding principles constitute an Agreement (hereinafter the &quot;Agreement&quot;) and are entered into by and amongst members of TreasuryDAO (hereinafter “DAO” or “Treasury”), an unincorporated nonprofit association organized under the laws of the State of Nevada. The following terms apply when you click to view or access DAO's Decentralized Application (or &quot;Dapp&quot;) or DAO's other online services, contribute Ethereum via https://juicebox.money (or via any project hosted therein, or https://juicebox.wtf), become a Member of the DAO, receive DAO Tokens, hold Governance Rights for Treasury, interact with or access Treasury's smart contracts in any way, provide services to Treasury, donate or transfer any property to Treasury, or otherwise interact with or access Treasury's services through the Dapp. By doing any of the above, you signify your agreement to these terms. If you do not agree to be bound by the Agreement in its entirety, you may not access, interact with, or use Treasury. Capitalized terms used herein have the meanings ascribed to them in Section 17. Organization (a) Formation. Treasury was formed on August 7, 2021. The duties and obligations of the Members of the DAO shall be determined pursuant to the Revised Uniform Unincorporated Nonprofit Association Act of 2008 (the &quot;Act&quot;), NRS §§ 81.700 to 81.890 inclusive, and this Agreement. (b) Purpose. The primary purpose of the DAO is to build and create a blockchain-native treasury focused on the accounting and governance of other treasuries for the same purpose. The DAO shall have the power to do any and all acts appropriate, convenient, desirable, incidental, or necessary to or in furtherance of the purposes described in this Agreement, including, without limitation, any and all of the powers that may be exercised on behalf of the DAO by its members. The DAO shall not engage in profit-making activities. Any profits that are incidentally accrued or earned from any of the DAO's activities will be used or set aside for the DAO's nonprofit purposes. Membership; Governance Rights and Tokens; Limitations (a) Governance Rights. Governance Rights in the DAO are represented by cryptographically secured tokens (&quot;Tokens&quot;), with each Token representing a fractional part of the Governance Rights of all Members (or assignees, as the case may be) equal to the quotient of one (1) divided by the total number of Tokens claimed at any time. (b) Tokens. As of the date hereof, Tokens authorized to represent membership interests in the DAO. The DAO shall provide to each Member One Million (1,000,000) Tokens for each Ethereum donated to the DAO, unless otherwise agreed to by the Members via a vote occurring through the Dapp. Notwithstanding the foregoing or any other provision of this Agreement, the DAO shall provide the members in Exhibit A and members of its technical partners, Two Hundred Thousands (200,000) Tokens, each, for their role in conceiving and supporting the DAO.* (c) Governance Rights and Token Limitations. Possession or ownership of any of the Tokens issued by the DAO do not provide any right of ownership or management of the DAO and does no provide the holder of a token any possibility of a profit, nor any right to a future distribution or dividends paid by the DAO. By entering this Agreement each Member (or assignees, as the case may be) who receives or holds governance Tokens expressly and unequivocally agrees that the Tokens provide no rights to an expectation of profit, no entitlement to distributions or dividends from the DAO, and no right of ownership or management of the DAO. Liability (a) No Member Liability. Except as otherwise provided in this Agreement or the Act, no Member (or former Member) shall be personally liable for the obligations of the DAO, including any obligations owed by such Member in connection with any breach of this Agreement. A debt, obligation, or other liability of the DAO is solely the debt, obligation, or other liability of the DAO. Members (or former Members) are not personally liable, directly or indirectly, by way of contribution or otherwise, for a debt, obligation, or other liability of the DAO solely by reason of being or acting as a Member or acting on behalf of the DAO. The failure of the DAO to observe formalities relating to the exercise of its powers or management of its activities and affairs is not grounds for imposing liability on a Member of the DAO for a debt, obligation, or other liability of the DAO. (b) Member Limitations. No Member shall have the right or power: (i) to cause the dissolution and winding up of the DAO; or (ii) to demand or receive property, including any NFTs donated to the DAO, except as agreed to by the Members or otherwise provided herein. Admission of Additional Members (a) Subject to the provisions of this Agreement, the Members are authorized to accept additional donations from one or more Members, and to admit other Persons to the DAO as additional Members (each such additional Member and such existing Member an &quot;Additional Member&quot;). Unless otherwise determined by the Members, any such Additional Members shall be admitted to the DAO only if such Member or Additional Member makes a donation via the Dapp. (b) Accession to Agreement. Each Person who is to be admitted as an Additional Member pursuant to this Agreement shall agree to be bound by all of the terms of this Agreement as if they were a member from the inception of the DAO. Management (a) Except as otherwise expressly required in this Agreement, the affairs of the DAO shall be carried on and managed exclusively by the Members, who shall have sole and absolute discretion with respect thereto. No Member shall be a manager, as defined under the Act. (b) Whenever any action, including any approval, consent, decision, determination, or resolution is to be taken or given by the Members or the DAO under this Agreement or under the Act, it shall be authorized by a vote of the Members via the Dapp, unless otherwise provided herein. Such an authorization may be evidenced by a vote facilitated via the Dapp and one or more smart contracts, or by a written consent, in accordance with this Agreement. The Members intend that any action (which has been duly approved in accordance with this Agreement) taken by the DAO via a Dapp, a smart contract or the blockchain, shall be a valid action of the Members or the DAO, as applicable, and no Member shall challenge the authority or validity of any such action based solely upon such fact. (c) Except as otherwise expressly required in this Agreement or in the Act, no single Member (in their capacity as a Member) shall have authority to bind the DAO in any way or to enter into any agreement or contract obligating the DAO in any way unless approved via a vote of the Members occurring through the Dapp. (d) To the extent that the Members have approved a document in accordance with the terms of this Agreement and the Act, any Member can be expressly authorized to execute and deliver such document on behalf of the DAO. (e) Members may appoint a proxy to vote or otherwise act for the Member with regards to the any vote taken by the DAO via Dapp or any other action taken by the DAO on behalf of that Member. (f) The DAO has the right to delegate or retain third parties or independent contractors to perform certain technical or administrative responsibilities and provide them with reasonable compensation. (g) Reliance by Third Parties. Persons dealing with the DAO are entitled to rely conclusively upon the power and authority of the Members (and any Person to whom the Members delegated any such power and authority pursuant to this Agreement) and acknowledge that such Member or designee is authorized to act on behalf of the DAO and may bind the DAO or otherwise enter into a binding contract. (h) Other Activities. Each Member acknowledges and agrees that in addition to transactions specifically contemplated by this Agreement, and subject to applicable law, the Members, the DAO, and their respective Affiliates and Representatives are each hereby authorized to obtain property or obtain services from, to provide property or provide services to, or otherwise enter into any transaction with any Member, or any Affiliate or Representative of any of the foregoing Persons. Withdrawal Rights; Compulsory Withdrawal (a) Limited Right to Withdraw. A Member may withdraw at any time by transferring their Tokens to a third party. Such withdrawal shall be facilitated and executed, in part, using one or more smart contracts and shall be effective as of the date of transfer of the Tokens. Any withdrawal by a Member from the DAO is irrevocable. (b) Compulsory Withdrawal. Not in limitation of Section 6(a), the Members acting by vote via the Dapp may cause a Member to be compulsory withdrawn from the DAO to the extent that such Members, in their reasonable discretion, determine it to be necessary, desirable, or appropriate, including, without limitation, to comply with applicable law or regulations, or to avoid a material adverse effect on the DAO or the other Members. For fairness, any Member proposed to be compulsorily withdrawn from the DAO shall be entitled to vote on the proposal with respect to any vote of the Members regarding their compulsory withdrawal. Fees and Expenses (a) Organizational Expenses. The DAO shall bear all of its organizational expenses and costs, and may amortize these expenses for accounting and/or tax purposes. (b) Operating Expenses. (i) The DAO shall bear all costs and expenses relating to its activities, maintenance, and operations, including, without limitation, all fees, expenses, and costs associated (directly or indirectly) with the acquiring, holding, monitoring, managing tokens, including NFTs, software development, including graphic design, frontend, smart contract, auditing and any extraordinary expenses (including, without limitation, litigation-related and indemnification expenses), legal, regulatory, research, consulting, compliance, auditing, accounting, and other professional fees and expenses, the costs of any administrator, the costs of any reporting to Members, expenses of any administrative proceedings undertaken by the applicable Member in its capacity, expenses incurred in connection with the dissolution, liquidation, and termination of the DAO, and other expenses related to the DAO as determined by the Members by a vote via the Dapp (collectively, and together with organizational expenses, the &quot;DAO Expenses&quot;). (ii) DAO expenses, costs or other fees shall be allocated to and funded by the DAO. Distributions; Dividends; Compensation; Sale of Assets (a) The DAO shall not make any distributions of any kind and it will not pay dividends of any kind to any Member or director/officer or other person who may have an ownership interest in the DAO. (b) The DAO may pay reasonable compensation or reimburse reasonable expenses to a Member or third-party for services rendered, confer benefits on a Member or third party in conformity with its nonprofit purposes, repurchase a membership and repay a capital contribution made by a Member to the extent authorized by this Agreement, or make distributions of property to Members upon winding up and termination to the extent permitted by this Agreement. (c) Unless otherwise agreed to by Members via a Majority Vote, the DAO shall not sell any assets. Dissolution (a) General. The DAO shall be dissolved and its affairs shall be wound up upon the earliest to occur of: (i) a determination of dissolution by majority vote of the Members; or (ii) the entry of a decree of judicial dissolution pursuant to the Act or other court of competent jurisdiction. (b) Upon the dissolution of the DAO, assets shall be distributed for one or more exempt purposes within the meaning of section 501(c)(3) of the Internal Revenue Code or the corresponding section of any future federal tax code and consistent with the goals and purpose of the DAO, or shall be distributed to the federal government, or to a state or local government, for a public purpose. Any such assets not so disposed of shall be disposed of by a court of competent jurisdiction of the county in which the principal office of the corporation is then located, exclusively for such purposes or to such organization or organizations, as said Court shall determine, which are organized and operated exclusively for such purposes. Limitations on Transfers (a) Transfers. Governance Rights and Tokens are not transferable. Members may vote to allow or disallow the ability of Members to transfer their Governance Rights and/or Tokens by a vote facilitated via the Dapp. Tokens may become freely transferable to Ethereum addresses outside of the DAO (&quot;External Addresses&quot;) by a vote of the Members. Tokens issued for the purpose of participating in governance by the DApp, or Snapshot, are transferable via &quot;delegation&quot;. In the event the Tokens become freely transferable to an External Addresses, each Member agrees that holders of the External Address shall automatically be granted Membership rights within the DAO which “new” Members shall be subject to this Agreement. (b) Admission of Substituted Members. If the transferee is not already a Member, any transferee of Tokens that were transferred in accordance with the provisions of this Section shall be admitted as a Member. The DAO shall not recognize for any purpose any purported transfer of all or any part of a Member's interest or Tokens in the DAO, and no purchaser, assignee, transferee, or other recipient of all or any part of such Tokens shall become a Member hereunder unless: (i) Transfer of Tokens. The transferee of Tokens transferred the Tokens pursuant to this Section is admitted to the DAO as a transferee Member and shall succeed to the rights and liabilities of the transferor Member with respect to such transferred Tokens. (ii) Effect of Death, Dissolution, or Bankruptcy of a Member. Upon the death, incompetence, bankruptcy, insolvency, liquidation, or dissolution of a Member, the rights and obligations of that Member under this Agreement shall accrue to that Member's successor(s), estate, or legal representative, and each such Person shall be treated as an unadmitted transferee of that Member's Tokens, as described in the Act. Books and Records; Accounting and Tax Matters The DAO shall not be obligated to keep any books or records beyond what is made available via the Dapp or available via the Ethereum blockchain. Waiver of Fiduciary Duties (a) Except as expressly set forth in this Section, in the event that any Member initiates any Proceeding against the DAO and a judgment or order not subject to further appeal or discretionary review is rendered in respect of such Proceeding, as the case may be, such Member shall be solely liable for all costs and expenses related to the Proceeding. (b) Limitation by Law. No provision of this Agreement shall be construed to provide for the indemnification for any liability to the extent (but only to the extent) that such indemnification would be in violation of applicable law, but instead shall be construed so as to effectuate the provisions thereof to the fullest extent permitted by law. (c) Waiver of Fiduciary Duties. To the fullest extent permitted by applicable law, notwithstanding any other provision of this Agreement or otherwise of applicable law, including any in equity or at law, no Member shall have any fiduciary duty to the DAO or to any Member by reason of this Agreement or in its capacity as a Member, except that the Members shall be subject to the implied contractual covenant of good faith and fair dealing and the terms and provisions of this Agreement. The provisions of this Agreement, to the extent that they restrict or eliminate the duties and liabilities of the Members otherwise existing at law or in equity, are agreed by the parties hereto to replace such other duties and liabilities of the Members. Members will exercise any rights under this Agreement consistent with this Agreement. Intellectual Property Rights (a) Grant of Rights. Members that join the DAO via the Juicebox payout or reserved rate grant to the DAO a perpetual, non-exclusive, royalty-free license and right, and all ancillary and subsidiary rights therein and thereto, throughout the world, to use, edit, modify, include, incorporate, adapt, record, reproduce, display, and archive any copyrightable work associated with any contributions (the &quot;Work&quot;) in any manner whatsoever, in or out of context, by any and all means and/or devices and in any and all media now or known hereafter–all in connection with the production, exhibition, distribution, exploitation, advertising, marketing, publicity, and promotion of the DAO and its works such as the smart contracts, website, or partners including PeelDAO, WAGMI DAO, and its members but which license shall be limited for the nonprofit, charitable, or public goods purposes of the DAO as defined herein. The term of this license begins whenever an individual or entity is added to the DAO payouts, receives a payout, or the reserved rate, or any tokens from JuiceboxDAO thereby entering into this Agreement as a Member or is subsequently admitted as a Member pursuant to the terms of this Agreement (i.e., any and all Members). Any transfer of intellectual property or property is agreed to occur in the State of Nevada, regardless of the residence or location of the donor and in no instance is any transfer intellectual property from the United Kingdom to the DAO subject to the Copyright Designs and Patents Act (CDPA) of 1988. (b) Reservation of Rights. All rights in any donated works not specifically granted to the DAO here are reserved by the donating Member. Specifically, the DAO acknowledges that its use of the Work will not affect the Member's continued and separate copyright ownership in the Work, and that the Member may use the Work and license others to use the Work elsewhere or separately from the DAO. (c) Representations and Warranties, Indemnification. The Member represents and warrants that it is the owner of the entirety of the rights in and to the Work and that the Member has the full authorization and authority to enter into this Agreement and grant the licenses herein. No other rights, permissions, or consents are necessary for the DAO to use the Work in accordance with the licenses granted herein, and no fees, royalties, or use payments of any kind are due to the Member or third parties in connection with the exercise of the licenses granted herein. The Member guarantees that the Work does not infringe any copyright or trademark, and that the Work does not violate any privacy, personal, proprietary, common law, or statutory right, of any Person. Licensor shall indemnify and hold Licensee (and its agents, Affiliates, assigns, heirs, or other successors in interest) harmless from any claim, loss, liability, damage, or expense (including reasonable attorneys' fees) arising out of any claim, lawsuit, or demand which is inconsistent with or arises out of warranties or representations in this Section. Amendments (a) Except as otherwise provided herein, the terms and provisions of this Agreement may be amended only with the prior consent of Members acting by a vote via the Dapp. (b) Amendments to this Agreement shall only be made via the Dapp. Service Provider (a) Appointment and Compensation of Service Provider. Treasury shall have the right to appoint a Service Provider to perform administrative services, responsibilities, and duties to carry on the DAO's operations, including maintenance of the Dapp and underlying smart contracts. Treasury shall have the right to provide the Service Provider with reasonable compensation. (b) Limitation of Liability. Notwithstanding anything contained in this Agreement to the contrary, any Service Provider of Treasury shall not be liable for any error of judgment, mistake of law, or for any loss suffered by the DAO, its Members, Persons affiliated with the DAO or its Members, or third parties in connection with the matters to which this Agreement relates or for any services provided by the Service Provider, except for a loss resulting from the Service Provider's willful misfeasance, gross negligence, or reckless disregard in the performance of its duties under this Agreement. Furthermore, the Service Provider shall not be liable for: (i) any action taken or omitted in accordance with or in reliance upon written or oral instructions, advice, data, documents, or information (without investigation or verification) received by the Service Provider from any Person; (ii) any liability arising from the transfer or use of any Governance Rights or Tokens, including with respect to matters arising under applicable laws or private rights of action; or (iii) any action taken or omitted by the DAO, its Members, any affiliated Persons of the DAO or its Members, or any third party. General Provisions (a) Notices. Subject to Section 5, all notices required to be delivered under this Agreement shall be effective only if sent by electronic mail or other form of electronic communication through the Dapp. In computing the period of time for the giving of any notice, the day on which the notice is given shall be excluded, and the day on which the matter noticed is to occur shall be included. If notice is given by electronic means, it shall be deemed given when sent; provided, that the sending party does not have reason to believe that such notice was not delivered. (b) Further Assurance. Each Member agrees to perform all further acts and to execute, acknowledge, and deliver any document (including tax forms and information) that may reasonably be necessary to carry out the provisions of this Agreement. (c) Interpretation. Unless otherwise indicated to the contrary herein by the context or use thereof the words, &quot;herein,&quot; &quot;hereto,&quot; &quot;hereof,&quot; and words of similar import refer to this Agreement as a whole and not to any particular section or paragraph hereof; words importing the masculine gender shall include the feminine and neutral genders, and vice versa; and words importing the singular shall include the plural, and vice versa; plural forms of singular defined terms shall have corresponding meanings and singular forms of plural defined terms shall have corresponding meanings; the section headings contained in this Agreement are for reference purposes only and shall not affect the interpretation of this Agreement; references to statutes or regulations include amendments and successor or replacement statutes or regulations. (d) Severability. If any term or provision of this Agreement or any application of this Agreement shall be declared or held invalid, illegal, or unenforceable, in whole or in part, whether generally or in any particular jurisdiction, such provision shall be deemed amended to the extent, but only to the extent, necessary to cure such invalidity, illegality, or unenforceability, and the validity, legality, and enforceability of the remaining provisions, both generally and in every other jurisdiction, shall not in any way be affected or impaired thereby. (e) Binding Agreement. This Agreement shall be binding upon and inure to the benefit of the parties and their respective heirs, executors, administrators, successors, permitted assigns, trustees, and legal representatives. (f) Creditors. None of the provisions of this Agreement shall be for the benefit of, or enforceable by, any creditor of any Member or of the DAO. No creditor who makes a loan to the DAO may have or acquire, as a result of making the loan, any direct or indirect interest in the DAO's property. (g) Waiver. Any term or condition of this Agreement may be waived at any time by the party or parties entitled to the benefit thereof, but only by a writing signed by the party or parties waiving such term or condition. No waiver of any provision of this Agreement or of any right or benefit arising hereunder shall be deemed to constitute or shall constitute a waiver of any other provision of this Agreement (whether or not similar), nor shall any such waiver constitute a continuing waiver, unless otherwise expressly so provided in writing. (h) Waiver of Partition; No Bill for DAO Accounting. Each Member hereby irrevocably waives any and all rights that it may have to maintain an action for partition of any of the DAO's property. Each Member covenants that it shall not file a bill for DAO accounting. (i) Limitation of Liability. Except for any remedies that cannot be excluded or limited by law, no party, or its agent, Affiliate, assigns, heirs, or other successors in interest, will be liable under this Agreement to another party, or that party's agent, Affiliate, assigns, heirs, or other successors in interest, or other third party, for any special, reliance, punitive, indirect, incidental, or consequential damages or lost or imputed profits, lost data, lost property, or any costs and fees. This limitation of liability may not be valid in some jurisdictions. Parties to this Agreement may have rights that cannot be waived under some laws. The DAO and its Members do not seek to limit the DAO's or Members' warranties or remedies to any extent not permitted by law. (j) Governing Law; Jurisdiction; Venue. Notwithstanding the place where this Agreement may be executed by any of the parties hereto, the parties expressly agree that all of the terms and provisions hereof shall be construed in accordance with and governed by the laws of the State of Nevada, without giving effect to the principles of choice or conflicts of laws thereof that would require that this Agreement be governed by the laws of another state. Each of the parties hereto consents and agrees to the exclusive personal jurisdiction of any state or federal court sitting in Nevada, and waives any objection based on venue or forum non conveniens with respect to any action instituted therein and agrees that any dispute concerning the conduct of any party in connection with this Agreement shall be heard only in the courts described above. (k) Arbitration. In consideration of the promises in this agreement, the parties agree that any and all controversies, claims, or disputes with anyone (including the DAO and any employee, officer, director, shareholder or benefit plan of the company in their capacity as such or otherwise) arising out of, relating to, or resulting from this Agreement, shall be subject to binding arbitration under the arbitration rules set forth in Nevada law and thereby agrees to waive any right to a trial by jury, include any statutory claims under state or federal law, including, but not limited to, claims under title vii of the civil rights act of 1964, the Americans with Disabilities Act of 1990, the Age Discrimination in Employment Act of 1967, the Older Workers Benefit Protection Act, the Worker Adjustment and Retraining Notification Act, discrimination or wrongful termination and any statutory claims. The parties further understand that this Agreement to Arbitrate also applies to any disputes that the DAO may have with a Member. (l) Procedure. The parties agree that any arbitration will be administered by the American Arbitration Association (“AAA”) and that the neutral arbitrator will be selected in a manner consistent with its national rules for the resolution of employment disputes. The parties agree that the Arbitrator shall have the power to decide any motions brought by any party to the arbitration, including motions for summary judgment and/or adjudication and motions to dismiss and demurrers, prior to any arbitration hearing. The parties also agree that the arbitrator shall have the power to award any remedies, including attorneys’ fees and costs, available under applicable law. The parties understand that they shall share equally in paying for the administrative or hearing fees charged by the arbitrator or AAA. The parties agree that the Arbitrator shall administer and conduct any arbitration in a manner consistent with the rules and that to the extent that the AAA’s national rules for the resolution of employment disputes conflict with the rules, the rules shall take precedence. The parties agree that the decision of the Arbitrator shall be in writing. (m) Entire Agreement. This Agreement (including the exhibits hereto) supersedes any and all other understandings and agreements, either oral or in writing, among the parties with respect to the subject matter hereof and constitutes the sole agreement among the parties with respect thereto, including but not limited to the Original Agreement. (n) Amendment. This Agreement may not be amended, modified, or revoked, in whole or in part, or any provisions waived, except via a vote occurring through the Dapp. (n) Securities Laws Matters. THE TOKENS HAVE NOT BEEN REGISTERED UNDER THE SECURITIES ACT OF 1933, AS AMENDED, STATE SECURITIES LAWS, OR THE LAWS OF ANY COUNTRY OUTSIDE THE UNITED STATES. THEY PROVIDE NO RIGHT TO ANY PROFITS OR LOSSES OF THE DAO NOR IS THERE A REASONABLE EXPECTATION OF PROFIT FROM BUYING OR RECEIVING THE TOKENS. THE TOKENS ONLY PROVIDE THE HOLDER WITH GOVERNANCE RIGHTS THAT ARE SPECIFICALLY LIMITED IN THIS AGREEMENT. Definitions &quot;Act&quot; has the meaning ascribed to that term in Section 1(a). &quot;Affiliate&quot; means, with respect to any Person, any other Person controlling, controlled by, or under common control with such Person; in such context, &quot;control&quot; means the possession, directly or indirectly, of the power to direct the management or policies of another, whether through the ownership of voting securities, by contract, or otherwise. &quot;Agreement&quot; means this Guiding Principles Agreement of Treasury DAO. &quot;DAO&quot; means Treasury DAO, a Nevada unincorporated nonprofit association. &quot;DAO Expenses&quot; has the meaning ascribed to that term in Section 7(b)(i). &quot;Dapp&quot; means an online portal (juicebox.money, juicebox.wtf) or other interactive software used by the DAO including Snapshot (snapshot.org), which is maintained by the DAO, its Members, or another Person. &quot;Governance Rights&quot; means the entire interest of a Member in the DAO, as measured by a Member's Tokens, including, without limitation, all rights and obligations contemplated or agreed to under this Agreement, and any right to vote on, consent to, or otherwise participate in any decision or action of or by the Members granted by this Agreement or the Act. &quot;Majority Vote&quot; means the approval of Members holding at least a majority-in-interest of all claimed Tokens. &quot;Member&quot; means each Person entering into this Agreement as a member or subsequently admitted as a member pursuant to the terms of this Agreement, but does not include any Person that has ceased to be a Member of the DAO. If at any time there is only one Member, then all references to &quot;Members&quot; shall be deemed to mean &quot;Member.&quot; &quot;Non-Fungible Tokens&quot; (&quot;NFT&quot; or &quot;NFTs&quot;) means a cryptographic token based on the Ethereum ERC 721, 1155, or similar standard or other blockchain based asset. &quot;Person&quot; means an individual, corporation, association, partnership, joint venture, limited liability company, estate, trust, or any other legal entity. &quot;Proceeding&quot; means any action, claim, suit, investigation, or proceeding by or before any court, arbitrator, governmental body, self-regulatory agency, or other agency. &quot;Representative&quot; means a member, manager, officer, director, partner, employee, or agent. &quot;Service Provider&quot; means the Person appointed by Treasury to perform administrative services, responsibilities, and duties to carry on the DAO's operations. The initial Service Provider shall be dao-lawfirm.eth, its predecessor entities, or any future entity of dao-lawfirm.eth. Token mechanic examples in-line with the funding cycles and Juicebox token distribution will be provided in a separate document.","keywords":""},{"title":"Series LLC","type":0,"sectionRef":"#","url":"user/legal/Resources/op-llc-series","content":"Series LLC Operating Agreement LLCSource LIMITED LIABILITY COMPANY AGREEMENT [ENTITY NAME] NEITHER THE UNITED STATES SECURITIES AND EXCHANGE COMMISSION NOR ANY STATE REGULATORY AUTHORITY HAS APPROVED OR DISAPPROVED THIS LIMITED LIABILITY COMPANY AGREEMENT (THIS “AGREEMENT”) OR THE LIMITED LIABILITY COMPANY INTERESTS (THE “INTERESTS”) OR THE MERITS OF ACQUIRING INTERESTS PROVIDED FOR HEREIN OR THE MERITS OF ACQUIRING INTERESTS. ANY REPRESENTATION TO THE CONTRARY IS UNLAWFUL. THE INTERESTS HAVE NOT BEEN REGISTERED UNDER THE SECURITIES ACT OF 1933, AS AMENDED (THE “SECURITIES ACT”), OR THE SECURITIES LAWS OF ANY STATE. THE INTERESTS ARE NOT INTENDED TO BE SECURITIES UNDER THE SECURITIES ACT OR UNDER ANY STATE SECURITIES LAWS. TO THE EXTENT THE INTERESTS ARE DEEMED TO BE SECURITIES UNDER THE SECURITIES ACT, THEY ARE BEING OFFERED AND SOLD IN RELIANCE UPON EXEMPTIONS FROM THE REGISTRATION REQUIREMENTS OF THE SECURITIES ACT AND THOSE STATES. ANY TRANSFER OR RESALE OF THE INTERESTS IS FURTHER SUBJECT TO RESTRICTIONS, THE TERMS AND CONDITIONS OF WHICH ARE SET FORTH IN THIS AGREEMENT. Note to User: You acknowledge and agree that the making available of this document to you by Syndicate Inc. shall not create any confidential or special relationship between you and Syndicate Inc. or its affiliates (collectively, “Syndicate”) and does not constitute the provision of legal advice or other professional advice by Syndicate or its legal counsel. You should seek advice from an attorney licensed in the relevant jurisdiction(s), as well as a tax professional, before relying on this template document. Additionally, the information provided in this document, any subscription agreement or otherwise by Syndicate does not constitute tax advice. Any discussion of tax matters is not intended or written to be used, and cannot be used or relied on, for the purpose of tax planning or avoiding penalties under the Internal Revenue Code (or equivalent in the relevant jurisdiction) or promoting, marketing or recommending to another party any transaction or matter. You further agree and acknowledge that this document, any subscription agreement or any other document otherwise provided by Syndicate has not been prepared with your specific circumstances in mind, may not be suitable for use in your personal circumstances. Any reliance on this document, any subscription agreement or anything otherwise provided by Syndicate or any information contained therein is at your sole risk and you assume all losses and liability that may result. Review all documents carefully for accuracy before using them. There may be [BRACKETED TEXT] requiring your attention. THIS TEMPLATE IS FOR USE ONLY BY AN INVESTMENT CLUB WITH INDIVIDUALS AND NOT ENTITIES AS MEMBERS . SYNDICATE PROVIDES THESE TERMS ON AN “AS IS” BASIS, AND SPECIFICALLY DISCLAIMS ALL WARRANTIES, TERMS, REPRESENTATIONS AND CONDITIONS WHETHER EXPRESS, IMPLIED, OR STATUTORY, AND INCLUDING ANY WARRANTIES, TERMS, REPRESENTATIONS AND CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, OR NONINFRINGEMENT. LIMITED LIABILITY COMPANY AGREEMENT[FULL ENTITY NAME] This limited liability company agreement is made as of [DATE] (the “Effective Date”) by and among the Members identified on the signature pages hereto and those Persons who have or may become parties to this Agreement in the future, in accordance with the terms of this Agreement (collectively the “Parties”) of the Company. In consideration of the mutual covenants in this Agreement the Parties agree as follows: ARTICLE I DEFINITIONS Definitions. When used in this Agreement, the following terms have the meanings specified in this Article I: “Account Address” means a public key address on the Designated Blockchain Network that is uniquely associated with a single private key, and at which no smart contract has been deployed. “Act” means the Delaware Limited Liability Company Act, Section 18-101, et seq., as it may be amended from time to time and any successor to said law. “Additional Capital Contributions” has the meaning set forth in Section 4.5(d). “Administrative Member” means [Administrative Member Name] or such other Person as may be appointed as a replacement Administrative Member pursuant to Section 5.1(b). For the avoidance of doubt, the Administrative Member is a Member of the Company. “Advance” has the meaning set forth in Section 4.5(c). “Affiliate” of another Person means (a) a Person directly or indirectly (through one or more intermediaries) controlling, controlled by or under common control with that other Person; (b) a Person owning or controlling 10% or more of the outstanding voting securities or beneficial interests of that other Person; or (c) an officer, Administrative Member, director, partner or member of that other Person. For purposes of this Agreement, “control” of a Person means the possession, directly or indirectly, of the power to direct the management and policies of that Person, whether through the ownership of voting securities, by contract or otherwise. For the avoidance of doubt, no Member will be deemed, solely by virtue of that membership, to be an Affiliate of the Company. “Agreement” means this limited liability company agreement of the Company, as amended from time to time. “Arbitration Location” means [San Francisco, California] . “Attorney” has the meaning specified in Section 13.1. “Business Day” means any day other than Saturday, Sunday, any day which is a federal legal holiday in the United States or any other day on which commercial banks in New York, New York are authorized or required by law to remain closed. “Capital Account” of a Member means the capital account of the Member determined in accordance with Section 3.4 in this Agreement. “Capital Call” has the meaning set forth in Section 4.5(d). “Capital Contribution” of a Member means the total amount of cash and other assets contributed (or deemed contributed under Section 1.7041(b)(2)(iv)(d) of the Treasury Regulations) to the Company or the applicable Series by that Member, net of liabilities assumed or to which the assets are subject. “Certificate of Formation” means the Certificate of Formation of the Company, as amended and restated from time to time, filed with the Office of the Secretary of State of the State of Delaware pursuant to the Act. “Claim” means any past, present or future dispute, claim, controversy, demand, right, obligation, liability, action or cause of action of any kind or nature. “Closing” means the date a Member is admitted to the Company as a Member or the Commitment of a Member is increased (as agreed to by such Member and the Administrative Member). “Closing Date” means the date of a Closing as determined by the Administrative Member. “Closing Conditions” means the conditions of the Closing, as determined by the Administrative Member. “Code” means the Internal Revenue Code of 1986, as amended, from time to time. “Commitment” has the meaning set forth in Section 3.1. “Company” means [Full Entity Name] . “Company Minimum Gain” means the “partnership minimum gain” of the Company or the applicable Series computed in accordance with the principles of Sections 1.7042(b)(2) and 1.704-2(d) of the Treasury Regulations. “Confirmation” of a transaction shall be deemed to have occurred if and only if such transaction has been recorded in accordance with the Consensus Rules in a valid block whose hashed header is referenced by at least [ten] subsequent valid blocks on the Designated Blockchain. “Consensus Attack” means an attack that: (a) is undertaken by or on behalf of a block producer who controls, or group of cooperating block producers who collectively control, a preponderance of the means of block production on the Designated Blockchain Network; and (b) has the actual or intended effect of: (i) reversing any transaction made to or by the Designated Smart Contract after Confirmation of such transaction, including any “double spend” attack having or intended to have such effect; or (ii) preventing inclusion in blocks or Confirmation of any transaction made to or by the Designated Smart Contract, including any “censorship attack,” “transaction withholding attack” or “block withholding attack” having or intended to have such effect. “Consensus Rules” means the rules for transaction validity, block validity and determination of the canonical blockchain that are embodied in the Designated Client. “Consent” means the approval of a Person to do the act or thing for which the approval is solicited, or the act of granting the approval, as the context may require. “Contract” means any: (a) written, oral, implied by course of performance or otherwise or other agreement, contract, understanding, arrangement, settlement, instrument, warranty, license, insurance policy, benefit plan or legally binding commitment or undertaking; or (b) any representation, statement, promise, commitment, undertaking, right or obligation that may be enforceable, or become subject to an Order directing performance thereof, based on equitable principles or doctrines such as estoppel, reliance, or quasi-contract. “Contributing Member” has the meaning set forth in Section 4.5(e). “Covered Losses” has the meaning set forth in Section 11.3. “Covered Person” means the Administrative Member, the Partnership Representative, the Liquidating Trustee, any officer of the Company, and their respective Affiliates. “Deadline” has the meaning set forth in Section 4.5(d). “Designated Blockchain” means at any given time, the version of the digital blockchain ledger commonly known as “Ethereum” that at least a majority of nodes running the Designated Client recognize as canonical as of such time. For the avoidance of doubt, the “Designated Blockchain” does not refer to the digital blockchain ledger commonly known as “Ethereum Classic” or any other blockchain ledgers from which or to which the Designated Blockchain has been “forked” or “split”. “Designated Blockchain Network” means the Ethereum mainnet (networkID:1, chainID:1), as recognized by the Designated Client. “Designated Client” means the Official Go Ethereum client available at https://github.com/ethereum/go-ethereum. “Designated Smart Contract” means the smart contract deployed at address [____] on the Designated Blockchain. “Digital Assets” means tokens, cryptocurrencies, and other digital assets the record of which is primarily stored in a distributed ledger system utilizing cryptographic verification. “Disability” of an individual means the incapacity of the individual to engage in any substantial gainful activity with the Company by reason of any medically determinable physical or mental impairment that reasonably can be expected to last for a continuous period of not less than 12 months as determined by a competent physician chosen by the Company and Consented to by the individual or his legal representative, which Consent will not be unreasonably withheld, conditioned or delayed. “Distributable Cash” at any time means that amount of the cash then on hand or in bank accounts of the Company or the applicable Series which the Administrative Member determines is legally available for Distribution, taking into account (a) the amount of cash required for the payment of all current expenses, liabilities and obligations of the Company or the applicable Series and (b) the amount of cash which the Administrative Member deems necessary or appropriate to establish reserves for the payment of future expenses, liabilities, or obligations, including liabilities which may be incurred in litigation and liabilities undertaken pursuant to the indemnification provisions of this Agreement. “Distributed Subject Property” means any asset, right or property that was once Subject Property and has been distributed to a Member. “Distribution” means the transfer of money or property by the Company or the applicable Series to one or more Members with respect to their Interests, without separate consideration. “Distribution Expenses” has the meaning set forth in Section 7.1(c). “Effective Date” has the meaning set forth in the initial paragraph of this Agreement. “ERISA” has the meaning set forth in Section 8.4(d). “Exception Handling Addendum” has the meaning set forth in Section 2.12(b)(3)(A). “Exception Handling Proposal” has the meaning set forth in Section 2.12(b)(1)(C). “Exception Notice” has the meaning set forth in Section 2.12(b)(1). “Exception Objection Notice” has the meaning set forth in Section 2.12(b)(3)(C). “Fair Market Value” of any property means, subject to Section 3.4(b), the amount that would be paid for that property in cash by a hypothetical willing buyer to a hypothetical willing seller, each having knowledge of all relevant facts and neither being under a compulsion to buy or sell, as determined by the Administrative Member in good faith; provided, however, the Fair Market Value of any Digital Asset shall be the price in US Dollars per token of the relevant Digital Asset as set forth at 5:00 pm Pacific Time on the day immediately preceding the applicable valuation date on coinmarketcap.com (or, if not valued on coinmarketcap.com, such other publicly available third party valuation website as the Administrative Member may reasonably select), if such price is available. “Family Members” means an individual who is a Member’s spouse, child, stepchild, son-in-law, daughter-in-law, father, or mother, including adoptive relationships. “Fiscal Year” means the Company’s or the applicable Series' taxable year, which will be the taxable year ended December 31, or other taxable year as may be selected by the Administrative Member in accordance with applicable law. “Initial Closing” means the first Closing. “Initial Closing Date” means the date selected by the Administrative Member for the Initial Closing. “Interest” means with respect to each Member, as of any date, its fractional ownership of the membership interest in the Company or the applicable Series which is expressed as a percentage, the numerator of which is that Member's then Capital Contributions and the denominator of which is the sum of the then Capital Contributions of all Members to the Company or the applicable Series. A Member’s Interest represents the totality of the Member’s interests in the Company or the applicable Series and the right of that Member to all benefits (including, without limitation, allocations of Net Income and Net Losses and the receipt of Distributions) to which a Member may be entitled pursuant to this Agreement and under the Act, together with all obligations of that Member to comply with the terms and provisions of this Agreement and the Act. If one or more Series are established pursuant to Section 2.13, the combined Interests of all Members of each Series shall at all times equal 100%. If no Series are established, the combined Interests of all Members of the Company shall at all times equal 100%. “Interest Register” has the meaning specified in Section 2.8. “Investment” means an investment by the Company or the applicable Series in a Digital Asset or a Portfolio Company Security. “Legal Order” means any restraining order, preliminary or permanent injunction, stay or other order, writ, injunction, judgment or decree that either: (a) is issued by a court of competent jurisdiction, or (b) arises by operation of applicable law as if issued by a court of competent jurisdiction, including, in the case of clause “(b)” an automatic stay imposed by applicable law upon the filing of a petition for bankruptcy. “Liquidating Trustee” means the Administrative Member (or its authorized designee) or, if there is none, a Person selected by a Majority in Interest to act as a liquidating trustee of the Company or the applicable Series. “Liquidity Event Proceeds” means (a) the receipt by the Company or the applicable Series of a material amount of cash, or non-cash assets that may readily be transferred or liquidated for cash, as set forth in Section 7.1, in respect of an Investment as a result of (i) the sale or other liquidation of such Investment; (ii) a Merger Event or a sale of all or substantially all of the assets, of a Portfolio Company; (iii) the bankruptcy, liquidation or dissolution of a Portfolio Company or (b) in the case of a Portfolio Security, the determination by the Administrative Member that such Portfolio Security is then freely or readily transferable by the holder thereof without restriction under applicable law and the documents governing the terms of such Portfolio Security or the Company’s investment therein. “Majority in Interest” means, at any time, a majority of the total Interests held by all Members in the Company or the applicable Series. Except as otherwise expressly required under this Agreement, whenever in this Agreement the Members are permitted or required to vote on, approve, make a determination as to, or consent to any matter or proposed action, such vote, approval, determination or consent shall only require a Majority in Interest. “Material Adverse Exception Event” means that one or more of the following has occurred, is occurring or would reasonably be expected to occur: (a) a Consensus Attack adversely affecting the results or operations of the Designated Smart Contract; (b) the Designated Smart Contract having become inoperable, inaccessible or unusable, including as the result of any code library or repository incorporated by reference into the Designated Smart Contract or any other smart contract or oracle on which the Designated Smart Contract depends having become inoperable, inaccessible or unusable or having itself suffered a Material Adverse Exception Event, mutatis mutandis; (c) a material and adverse effect on the use, functionality or performance of the Designated Smart Contract as the result of any bug, defect or error in the Designated Smart Contract or the triggering, use or exploitation (whether intentional or unintentional) thereof (it being understood that for purposes of this clause “(iii)”, a bug, defect or error will be deemed material only if it results in a loss to a Party of at least 20 percent of the Subject Property); (d) any unauthorized use of an administrative function or privilege of the Designated Smart Contract, including: (i) any use of any administrative credential, key, password, account or address by a Person who has misappropriated or gained unauthorized access to such administrative credential, key, password, account or address or (ii) any unauthorized use of an administrative function or privilege by a Party or a representative of a Party; or (e) the Designated Smart Contract, the Company or the applicable Series or the Subject Property is subject to a Legal Order that prohibits the Designated Smart Contract (or that, if the Designated Smart Contract were a Person, would prohibit the Designated Smart Contract) from executing any function or operation it would otherwise reasonably be expected to execute. “Member” means any Person admitted as a Member pursuant to Section 4.1 that has not ceased to be a Member pursuant to this Agreement or the Act. “Member Minimum Gain” means the “partner nonrecourse debt minimum gain” of the Company or the applicable Series computed in accordance with the principles of Section 1.7042(i)(3) of the Treasury Regulations. “Member Nonrecourse Deductions” means the “partner nonrecourse deductions” of the Company or the applicable Series computed in accordance with the principles of Sections 1.704-2(i)(1) and (2) of the Treasury Regulations. “Merger Event” means a Portfolio Company has merged or consolidated with or into any other entity, and after giving effect to that transaction, the equity owners of a Portfolio Company immediately prior to that transaction ceased to own at least a majority of the equity interest of the surviving or resulting entity. “Negotiation Period” has the meaning set forth in Section 2.12(b)(3)(D). “Net Fair Market Value” of an asset means its Fair Market Value net of any liability secured by the asset that the Member or the Company or the applicable Series, as applicable, assumes or takes subject to. “Non-Contributing Member” has the meaning set forth in Section 4.5(e). “Nonrecourse Deductions” means the “nonrecourse deductions” of the Company or the applicable Series computed in accordance with Section 1.704-2(b) of the Treasury Regulations. “Net Income” and “Net Loss” means, for each Fiscal Year, the taxable income and taxable loss, as the case may be, of the Company or the applicable Series for that Fiscal Year determined in accordance with federal income tax principles, including items required to be separately stated, taking into account income that is exempt from federal income taxation, items that are neither deductible nor chargeable to a capital account and rules governing depreciation and amortization, except that in computing taxable income or taxable loss, the “tax book” value of an asset will be substituted for its adjusted tax basis if the two differ, and any gain, income, deductions or losses specially allocated under Article VI will be excluded from the computation. Any adjustment to the “tax” book value of an asset pursuant to Section 1.704-1(b)(2)(iv)(e), (f) and (g) of the Treasury Regulations will be treated as Net Income or Net Loss from the sale of that asset. “Partnership Representative” means the Person designated pursuant to Section 9.4. “Permitted Transferee” has the meaning set forth in Section 8.2. “Person” means any human, robot, bot, artificial intelligence, corporation, partnership, association or other individual or entity recognized as having the status of a person under the law. “Portfolio Company” means the issuer of a Portfolio Company Security. “Portfolio Company Securities” means debt or equity securities acquired by the Company or the applicable Series in accordance with this Agreement. “Proceeding” has the meaning set forth in Section 11.3. “Receiving Party” has the meaning set forth in Section 2.12(b)(1). “Registered Agent” means the registered agent appointed by the Company as the Company’s registered agent for the service of process on the Company in the State of Delaware. “Sending Party” has the meaning set forth in Section 2.12(b)(1). “Series” means one or more separate series of Interests established by the Administrative Member pursuant to this Section 2.13, each of which shall be separate and distinct from any other Series and may be a “protected series” or a “registered series” for purposes of the Act. To the extent any Series are established, the provisions of this Agreement relating to Series shall apply. If no Series are established, then the provisions of this Agreement relating to Series shall not apply. “Shortfall Amount” has the meaning set forth in Section 4.5(e). “Standstill Period” has the meaning set forth in Section 2.12(b)(2). “Subject Property” means the property of the Company that is the subject of the Designated Smart Contract. “Subscription Agreement” means a Subscription Agreement in the form of Exhibit A or such other form as is determined by the Administrative Member to be acceptable. “Syndicate” means Syndicate Inc., a Delaware corporation. “Transfer” means, with respect to an Interest, the sale, assignment, transfer, other disposition, pledge, hypothecation or other encumbrance, whether direct or indirect, voluntary, involuntary or by operation of law, and whether or not for value, of that Interest. Transfer includes any transfer by gift, devise, intestate succession, sale, operation of law, upon the termination of a trust, because of or in connection with any property settlement or judgment incident to a divorce, dissolution of marriage or separation, by decree of distribution or other court order or otherwise. “Treasury Regulations” means the income tax regulations, including temporary regulations, promulgated by the United States Treasury Department under the Code, as such regulations may be amended from time to time (including corresponding provisions of superseding regulations). “40 Act” has the meaning set forth in Section 8.4(c). ARTICLE II ORGANIZATIONAL MATTERS II.1 Name. The name of the Company is set forth on the cover page of this Agreement. The business of the Company may be conducted under that name or under any other name that the Members may determine. II.2 Term. The Parties hereto as of the Effective Date, by execution of this Agreement and the filing of the Certificate of Formation, hereby form the Company as a limited liability company under and pursuant to the Act as of the Effective Date. The term of the Company commenced on the Effective Date and will continue in full force and effect until the Company is terminated pursuant to Article X. II.3 Member Information. Each Member may be required by the Company, at any time, to provide basic Know Your Customer (KYC) information, such as copy of national ID, name, proof of address, Form W-9, among others, in the event where: (a) the Company desires to obtain a bank account, (b) the Company is legally required to provide such information, or (c) any Series will be formed or become a “registered series” (as defined in the Act) in the State of Delaware. II.4 Office and Agent. The Company will maintain its principal office at a place as the Administrative Member may determine from time to time. The Administrative Member will notify the Members of any change in principal office of the Company. The Registered Agent and the address of the registered office of the Company in the State of Delaware as of the Effective Date is set forth in the Certificate of Formation. The Administrative Member may change the identity of the Registered Agent and the Company’s registered office in accordance with the Act. The Administrative Member will notify the Members of any change in the identity of the Registered Agent or the location of the Company’s registered office in the State of Delaware. II.5 Purpose of the Company. The Company has been created to [____] and the purpose of the Company shall be to engage in the foregoing and in any and all lawful activities and transactions as may be necessary, advisable, or desirable, as determined by the Administrative Member, in its sole discretion, to carry out the foregoing or any reasonably related activities. II.6 Intent. It is the intent of the Members that [the Company][the company and each series]will be treated as a “partnership” for federal income tax purposes. It also is the intent of the Members that the Company not be operated or treated as a “partnership” for purposes of Section 303 of the United States Bankruptcy Code. II.7 Qualification. The Administrative Member shall cause the Company to qualify to do business in each jurisdiction where qualification is required. The Administrative Member has the power and authority to execute, file and publish all certificates, notices, statements or other instruments necessary to permit the Company to conduct business as a limited liability company in all jurisdictions where the Company elects to do business. II.8 Interest Register. The Administrative Member will maintain a register (the (“Interest Register”) that sets forth the name, contact information, Commitment, Capital Contributions and Interest of each Member. The Interest Register will be available to each Member at request of such Member. Each Member shall promptly provide, upon request, the Administrative Member with the information required to be set forth for that Member on the Interest Register and shall promptly notify the Administrative Member of any change to that information. The Administrative Member, or a designee of the Administrative Member, shall update the Interest Register from time to time as necessary to accurately reflect the information therein as known by the Administrative Member, including, without limitation, admission of new Members, but no update will constitute an amendment for purposes of Section 14.1. Any reference in this Agreement to the Interest Register will be deemed to be a reference to the Interest Register as amended and in effect from time to time. II.9 Maintenance of Separate Existence. The Company will do all things necessary to maintain its limited liability company existence separate and apart from the existence of each Member, any Affiliate of a Member and any Affiliate of the Company, including maintaining the Company’s books and records on a current basis separate from that of any Affiliate of the Company or any other Person. In furtherance of the foregoing, the Company must (a) maintain or cause to be maintained by an agent under the Company’s control physical possession of all its books and records (including, as applicable, storage of electronic records online or in “cloud” services), (b) account for and manage all of its liabilities separately from those of any other Person, and (c) identify separately all its assets from those of any other Person. II.10 Title to Assets. All assets of the Company will be deemed to be owned by the Company as an entity, and no Member, individually, will have any direct ownership interest in those assets. Each Member, to the extent permitted by applicable law, hereby irrevocably waives its rights to a partition of the assets of the Company and, to that end, agrees that it will not seek or be entitled to a partition of any assets, whether by way of physical partition, judicial sale or otherwise. II.11 Events Affecting a Member. The death, bankruptcy, withdrawal, insanity, incompetency, temporary or permanent incapacity, liquidation, dissolution, reorganization, merger, sale of all or substantially all the stock or assets of, or other change in the ownership or nature of a Member will not dissolve the Company and, upon the happening of any such event, the affairs of the Company will be continued without dissolution by the remaining Members or any successor entities thereto. II.12 Effects of Designated Smart Contract. (a) General Binding Effect. (1) Smart Contract Results Binding. Subject to Section 2.12(b) the results of operation of the Designated Smart Contract shall be determinative of the rights and obligations of, and shall be final, binding upon and non-appealable by, each of the Parties with respect to the Subject Property. (2) Smart Contract Trumps Other Contracts. Except as set forth in Section 2.12(b), if there is any conflict or inconsistency between: (A) this Agreement or any other Contract between or involving the Parties; and (B) any Contract created or implied by, or embodied in, the machine, assembly or other code, or the results of operation, of the Designated Smart Contract, then the Contract referred to in the preceding clause “(B)” shall prevail over the Contract referred to in the preceding clause “(A).” (3) Prohibition of Transfers. Each Party shall not, without the prior written consent of all of the other Parties, directly or indirectly take or attempt to take any of the following actions: (A) convey any of the Subject Property other than such Party’s Distributed Subject Property it being understood that for a Party to “convey” any of the Subject Property means for such Party to or enter into any Contract that may obligate such Party to: (1) create, perfect or enforce any lien on, (2) pledge, hypothecate, grant an option or derivative security with respect to or (3) convey, sell, transfer or dispose of such Subject Property or any right or interest of a Party to or in such Subject Property; or (B) cause, encourage or facilitate, a Material Adverse Exception Event. (b) Exception Handling. Notwithstanding anything to the contrary set forth in Section 2.12(a), if there is a Material Adverse Exception Event, then the rules and procedures set forth in this Section 2.12(b) shall determine the rights and obligations of the Parties relating to the Subject Property. (1) Exception Notice. If any Party becomes aware that there is a Material Adverse Exception Event, such Party (the “Sending Party”) shall deliver to the other Parties (the “Receiving Parties”) a notice (an “Exception Notice”) signed by such Party: (A) certifying that the Sending Party believes in good faith that there is a Material Adverse Exception Event; (B) describing in reasonable detail the events, facts, circumstances and reasons forming the basis of such belief; (C) describing in reasonable detail any proposal by the Sending Party of the actions to be taken, the agreements to be entered into, and the remedies to be sought by the Parties in response to the Material Adverse Exception Event (an “Exception Handling Proposal”); (D) including copies of any written evidence or other material written information, and summaries of any other evidence, relevant to, and material for the consideration of, the Material Adverse Exception Event and the other matters referred to in the Exception Notice; and (E) containing a representation by the Sending Party, made to and for the benefit of the Receiving Parties with the understanding that the Receiving Party will rely thereon, that, to the Sending Party’s knowledge, the certification and statements made pursuant to the preceding clauses “(A)” and “(B)” are accurate as of the date of the Exception Notice, and, considered collectively, do not contain any untrue statement of a material fact or omit to state any material fact necessary in order to make such statements, in light of the circumstances in which they were made, not misleading. (2) Exception Standstill. During the period commencing upon the earlier of any Party becoming aware that there is a Material Adverse Exception Event or being delivered an Exception Notice and ending with the Parties entering into an Exception Handling Addendum, agreeing that no Material Adverse Exception Event has occurred or receiving a final decision of an arbitrator in accordance with Section 2.12(b)(3) (the “Standstill Period”), such Party shall: (A) treat all of the Distributed Subject Property of such Party that may have been transferred to such Party as a result of the Material Adverse Exception Event as if it were Subject Property; and (B) deposit and maintain such Distributed Subject Property in a segregated Account Address to be treated, to the extent permitted by applicable legal requirements, as a custodial trust held for the benefit of the other Parties. (3) Determination of Exception Handling. (A) The term “Exception Handling Addendum” refers to an addendum to this Agreement approved by a Majority in Interest which sets forth a description of the Material Adverse Exception Event and the actions to be taken, the agreements to be entered into, and the remedies to be sought in response thereto. Each Exception Handling Addendum shall automatically and without further action of the Parties be deemed incorporated into and to form a part of this Agreement. (B) Notwithstanding Section 2.14(b)(3)(A), if the Sending Party has provided an Exception Handling Proposal, and no Receiving Party disputes the existence of the Material Adverse Exception Event described in the Exception Notice or objects to the terms of the Exception Handling Proposal included in the Exception Notice within [3] Business Days after delivery of the Exception Notice, then the Exception Handling Proposal shall be deemed to have been approved by all Parties as the Exception Handling Addendum. (C) If a Receiving Party disputes the existence of a Material Adverse Exception Event, or does not wish to accept all or any part of the Exception Handling Proposal included in the Exception Notice, if any, then the Receiving Party shall promptly (but in any event within [3] Business Days of delivery of the Exception Notice) deliver a written notice of such non-acceptance (an “Exception Objection Notice”) to the Sending Party and each other Receiving Party. The Exception Objection Notice shall include the same categories of information, statements, evidence and representations and warranties as would be required for an Exception Notice, mutatis mutandis, and the basis for the objection to the Exception Handling Proposal. (D) If any Receiving Party delivers a timely Exception Objection Notice, then during the continuous 30-day period beginning on the date such Exception Notice is delivered to the other Parties (the “Negotiation Period”), the Parties shall use commercially reasonable efforts to negotiate in good faith to agree upon the existence or non-existence of a Material Adverse Exception Event and the Exception Handling Addendum to be approved in response to such Material Adverse Exception Event. (E) If the Parties fail to reach an agreement resulting in an Exception Handling Addendum during the Negotiation Period (or a determination that no Material Adverse Exception Event has occurred), then any Party may initiate an arbitration action to resolve the issues in accordance with the procedures set forth in Section 14.7; provided the decision of the arbitrators shall include, among any other determinations, a determination of the treatment of any Distributed Subject Property and whether to extend, modify or terminate the covenants applying to the Distributed Subject Property during the Standstill Period. II.13 Establishment of Series. The Members, acting by a Majority in Interest, shall have full power and authority to approve the establishment of one or more Series (as defined below), and upon such approval, the Administrative Member shall establish such Series pursuant to the provisions of this Section 2.3 through the adoption of a Series Addendum (as defined below) and, if such Series shall be a “registered series” (within the meaning of the Act), the execution and filing of a Certificate of Registered Series with the Office of the Secretary of State of Delaware in the form attached hereto as Exhibit C hereto, whereupon such Series shall be established. The Interests in each Series are and shall be separate and distinct from the Interests in any other Series. In connection with the establishment of a Series hereunder, the Administrative Member may, in its sole discretion and without obtaining the consent, vote or other approval of the other Members: (i) issue Interests without limitation as to number to such persons or entities and for such amount and type of consideration, including cash or securities, at such time or times and on such terms as the Administrative Member may deem appropriate and in connection therewith to admit such persons or entities as Members associated with such Series, (ii) establish, designate and fix such preferences, voting powers, rights, duties and privileges and business purpose of each Series as the Administrative Member may from time to time determine, which preferences, voting powers, rights, duties and privileges may be senior or subordinate to (or in the case of business purpose, different from) any existing Series and may be limited to specified property or obligations of the Company or profits and losses associated with specified property or obligations of the Company, (iii) divide or combine the Interests of any Series into a greater or lesser number without thereby materially changing the proportionate beneficial interest of the Interests of such Series in the assets held with respect to that Series and (iv) combine the assets and liabilities belonging to any two or more Series into assets and liabilities belonging to a single Series. The relative preferences, voting powers, rights, duties and privileges and business purpose of any Series established by the Administrative Member will be as set forth in an addendum to this Agreement that covers the terms specific to a particular Series, each of which shall be a part of this Agreement (each, a “Series Addendum”) and, to the extent of any inconsistency between the provisions set forth herein and in the Series Addendum, the terms of the Series Addendum shall control. A form of Series Addendum is attached as Exhibit B hereto. [Without limiting the authority of the Members to establish Series in the future as set forth above, the Parties hereby establish [insert name of Series] as a Series, and the Series Addendum for [name of Series] is annexed hereto and, if such Series is intended to be a “registered series” (within the meaning of the Act), the Administrative Member shall file a Certificate of Registered Series for such Series, whereupon such Series shall be formed] . Subject to variation by any Series Addendum, Interests of any Series that may from time to time be established by the Administrative Member shall (unless the Administrative Member otherwise determines at the time of establishing the same) have the following relative rights and preferences: (a) Assets Belonging to Series. All consideration received by the Company for the issue or sale of Interests of a particular Series, together with all assets in which such consideration is invested or reinvested, all income, earnings, profits, and proceeds thereof, including any proceeds derived from the sale, exchange or liquidation of such assets, and any funds or payments derived from any reinvestment of such proceeds in whatever form the same may be, shall be held for the benefit of the Members who have Interests in that Series and shall irrevocably belong to that Series for all purposes, subject only to the rights of creditors of such Series and shall be so recorded upon the books of account of the Company. Such consideration, assets, income, earnings, profits, and proceeds thereof, including any proceeds derived from the sale, exchange or liquidation of such assets, and any funds or payments derived from any reinvestment of such proceeds, in whatever form the same may be, are herein referred to as “assets belonging to” or “assets of” that Series. In the event that there are any assets, income, earnings, profits and proceeds thereof, funds or payments that are not readily identifiable as assets of any particular Series (collectively “General Assets”), the Administrative Member shall allocate such General Assets to, between or among any one or more of the Series in such manner and on such basis as the Administrative Member, in its sole discretion, deems fair and equitable, and any General Assets so allocated to a particular Series shall be assets belonging to that Series. Each such allocation by the Administrative Member shall be conclusive and binding upon the Members associated with all Series for all purposes. Pursuant to the applicable provisions of the Act, the records maintained for each Series shall account for the assets of Series separately from the assets of all other Series and the General Assets of the Company not allocated to such Series. No Series shall have any right to or interest in the assets belonging to any other Series, and no Member shall have any right or interest with respect to the assets belonging to any Series in which it does not have an Interest. The Administrative Member shall operate the business and manage the assets belonging to each Series in the manner described in this Agreement (including the Series Addendum relating to such Series). (b) Liabilities Belonging to Series. The assets belonging to each particular Series shall be charged with the liabilities of that Series and all expenses, costs, charges and reserves attributable to that Series. The debts, liabilities, obligations, expenses, costs, charges and reserves so charged to a Series are herein referred to as “liabilities belonging to” or “liabilities of” that Series. The Administrative Member shall allocate general debts, liabilities, obligations, expenses, costs or charges of the Company that are not readily identifiable with respect to any particular Series (“General Liabilities”) among the Series in such manner as may be determined by the Administrative Member, in its sole discretion, to be fair and reasonable. (c) Liabilities of Series. In accordance with the applicable provisions of the Act, without limitation of the provisions of paragraph (ii) hereof relating to the allocation of General Liabilities, the debts, liabilities, obligations and expenses incurred, contracted for or otherwise existing with respect to a particular Series shall be enforceable against the assets of such Series only, and not against the assets of the Company generally or against any other Series thereof, and, except to the extent provided in paragraph (ii) hereof relating to the allocation of the General Liabilities, none of the debts, liabilities, obligations and expenses incurred, contracted for or otherwise existing with respect to the Company generally or any other Series shall be enforceable against the assets of such Series. Notice of the foregoing limitation on liabilities of a Series shall be set forth in the Certificate of Formation. (d) Voting. On each matter submitted to a vote or permitted or required to be taken by the Members: (1) with respect to any vote, matter or action affecting a Series, each Member who holds an Interest in such Series shall be entitled to a vote proportionate to its Interest in such Series as recorded on the books of the Company with respect to such Series, all Members who hold an Interest in such Series shall vote as a separate class, and the vote or action of a Majority in Interest of the Members associated with such Series shall control; and (2) notwithstanding the foregoing, in the event of a vote, matter or action affecting the Company as a whole (regardless of whether such vote, matter of action also affects one or more Series), each Member shall be entitled to a vote proportionate to the proportion that its Capital Contributions to all Series and the Company bears to the Capital Contributions of all Members to all Series and the Company, all Members shall vote together as a single class, and the vote or action of Members holding a majority of all Capital Contributions to all Series and the Company shall control. • For the avoidance of doubt, the provisions of this Section 2.3(d) shall apply solely to the extent that one or more Series has been established. (e) Application of this Agreement with respect to Series. References to the Company in this Agreement shall be deemed to include references to each Series, as applicable, as determined by the Administrative Member in its sole discretion. This Agreement and all provisions herein will be interpreted in a manner to give full effect to the separateness of each Series. The Administrative Member shall take reasonable steps as are necessary to implement the provisions of this Section. II.14 Specific Disclaimer. The Members agree to the disclaimers set forth here: The use of an LLC with protected or registered Series is a relatively recent legal advent and is subject to various legal uncertainties regarding its validity and use cases, including, without limitation, uncertainties relating to: ● the non-recognition of such type of legal entity and structure by other U.S. States, such as California, New York and Massachusetts; ● the novelty and lack of established precedent regarding LLCs with Series and any liability “spill-over” risks between the Series and the Company; ● the lack of regulatory clarity regarding the taxation of Series of an LLC and an LLC with Series; and ● the lack of legal and regulatory clarity regarding the treatment of Series of an LLC and an LLC with Series in bankruptcy proceedings under federal law; Notwithstanding anything to the contrary in the Agreement, the Members shall be entitled to dissolve or terminate, as applicable, the Company or any Series at any time, in the event where there is any risk or threatened risk of liability with respect to the existence of Series or the Company in relation to the Company’s or any Series’ affairs. • ARTICLE III MEMBERSHIP CAPITAL; CAPITAL ACCOUNTS III.1 Membership Capital. Upon each Closing, each participating Member shall make a Capital Contribution in an amount equal to its accepted Subscription Amount as set forth in its Subscription Agreement (its “Commitment”) in exchange for an Interest. III.2 No Further Capital Contributions. No Member will be required to make Capital Contributions in the aggregate in excess of that Member’s then accepted Commitment or lend money to the Company or the applicable Series. III.3 In-Kind Contributions. In the sole discretion of the Administrative Member, Capital Contributions can be made via non-cash assets, such as Portfolio Company Securities or Digital Assets. Non-cash assets will be valued at their Net Fair Market Value on the date of contribution. III.4 Capital Accounts. (a) A separate capital account will be established and maintained for each Member (“Capital Account”) reflecting each Member’s Interest in the Company or in each Series as applicable. (b) The Capital Accounts of Members will be maintained in accordance with the rules of Section 704(b) of the Code and the related Treasury Regulations (including Section 1.704-1(b)(2)(iv)). The Capital Accounts will be adjusted by the Administrative Member upon an event described in Sections 1.704-1(b)(2)(iv)(e) and (f)(5) of the Treasury Regulations in the manner described in Sections 1.704-1(b)(2)(iv)(e), (f) and (g) of the Treasury Regulations if the Administrative Member determines that the adjustments are necessary or appropriate to reflect the relative economic interests of the Members in the Company, and at other times as the Administrative Member may determine is necessary or appropriate to reflect the relative economic interests of the Members. In determining Fair Market Value of an asset, the provisions of Section 1.704-1 of the Treasury Regulations shall be applied. (c) If any Interest is Transferred pursuant to the terms of this Agreement, the transferee will succeed to the Capital Account and the respective Interest of the transferor to the extent the Capital Account and Interest is attributable to the Interests so Transferred. III.5 Interest on Capital. No Member will be entitled to receive any interest on its Capital Contributions or Capital Account. III.6 Return of Capital Contributions. Except as otherwise provided in this Agreement, no Member has any right to withdraw or reduce its Capital Contribution or Commitment. III.7 No Priorities of Members. Subject to the provisions of this Agreement, no Member will have a priority over any other Member as to any Distribution, whether by way of return of capital or by way of profits, or as to any allocation of Net Income, Net Loss or special allocations. ARTICLE IV MEMBERS IV.1 Admission of Members. (a) Except in connection with a Transfer permitted pursuant to Article VIII, only individuals will be admitted to the Company as Members. The individuals who, as of the Initial Closing Date, have supplied the Company with a signed, fully completed Subscription Agreement, which has been accepted by the Administrative Member, together with an executed signature page to this Agreement and any other information that may be required pursuant to Section 12.3 (as determined in good faith by the Administrative Member) shall be admitted as Members effective as of the Initial Closing Date. [With the consent of a Majority in Interest or in the case of a Transfer permitted by Article VIII, with the consent of the Administrative Member pursuant to Section 8.3] additional Members may be admitted to the Company and existing Members may increase their Commitments from time to time on such date and upon such terms and conditions, including Closing Conditions, as determined by the Administrative Member; provided no Person shall be admitted as a Member unless and until such Person has supplied the Company with a signed, fully completed Subscription Agreement, which has been accepted by the Administrative Member, together with an executed signature page to this Agreement and any other information that may be required pursuant to Section 12.3 (as determined in good faith by the Administrative Member). (b) Notwithstanding Section 4.1(a), the Company will be deemed “closed”, such that no additional Members may be admitted except in connection with a Transfer permitted by Article VIII, or increased Commitments are no longer accepted following the earliest of (i) the date the Administrative Member closes the Company, (ii) the maximum number of Members is reached (as specified by the Administrative Member), and (iii) the set maximum amount of Capital Contributions to the Company is reached (as specified by the Administrative Member ). This can be seen when the closedSyndicate event is emitted for a given Syndicate address within the Syndicate smart contract. IV.2 Nature of Ownership. Interests held by Members constitute personal property. IV.3 Dealing with Third Parties. Unless admitted as a Member as provided in this Agreement, no Person will be considered a Member. The Company and the Administrative Member need deal only with Persons admitted as Members. The Company, the Series, and the Administrative Member will not be required to deal with any other Person (other than with respect to Distributions to assignees pursuant to assignments in compliance with Article VIII) merely because of an assignment or transfer of any Interest to that Person whether by reason of the Disability of a Member or otherwise; provided, however, that any Distribution by the Company or the applicable Series to the Person shown on the Interest Register as a Member or to its legal representatives, or to the assignee of the right to receive such Member’s Distributions as provided in this Agreement, will relieve the Company or the applicable Series and the Administrative Member of all liability to any other Person who may be interested in that Distribution by reason of any other assignment by the Member or by reason of its Disability, or for any other reason. IV.4 Members are not Agents. Pursuant to Article V of this Agreement, the management of the Company and each Series is vested in the Members as a group. No Member acting alone has any right to direct the management of the Company or any Series except as expressly authorized by the Act or this Agreement. Except as expressly authorized in this Agreement or in writing by a Majority in Interest, no Member, acting solely in the capacity of a Member, is an agent of the Company or any Series, nor does any Member, have any power or authority to bind or act on behalf of the Company or any Series in any way, to pledge its credit, to execute any instrument on its behalf or to render it liable for any purpose. IV.5 Expenses. (a) The Company or the applicable Series shall maintain reserves from the assets of the Company or the applicable Series (including Capital Contributions made by the Members) for the payment of the expenses, liabilities and obligations of the Company or the applicable Series, including for taxes, contingent liabilities or probable losses or foreseeable expenses, in such accounts and in such amounts that the Administrative Member deems necessary or appropriate, subject to increase or reduction at the Administrative Member’s sole discretion. All organizational and operating costs and expenses of the Company or the applicable Series will be paid by the Company or the applicable Series (excluding any regulatory expenses, or other costs incurred by the Administrative Member in connection with its daily operations, including but not limited to salary and other payments to employees of the Administrative Member). (b) The Administrative Member will, to the extent of available funds of the Company or the applicable Series, pay or cause to be paid, all Company operating costs and expenses incurred by the Company or the applicable Series or on its behalf, including (i) out-of-pocket expenses that are associated with disposing of Investments, including transactions not completed; (ii) extraordinary expenses, if any (such as certain valuation expenses, litigation and indemnification payments); (iii) interest on borrowed money, investment banking, financing and brokerage fees and expenses, if any; (iv) expenses associated with the Company or the applicable Series’ tax compliance costs, tax returns and Schedules K-1, custodial, legal and insurance expenses, any taxes, fees or other governmental charges levied against the Company or the applicable Series; (v) attorneys’ and accountants’ fees and disbursements on behalf of the Company or the applicable Series; (vi) insurance, regulatory or litigation expenses (and damages); (vii) expenses incurred in connection with the winding up or liquidation of the Company or the applicable Series; (viii) expenses incurred in connection with any amendments to the constituent documents of the Company or the applicable Series, and related entities; (ix) except as set forth in Section 4.5(a), all out of pocket costs and expenses incurred by the Administrative Member in connection with its services as such to the Company or the applicable Series; and (x) expenses incurred in connection with the distributions to the Members and in connection with any meetings of the Members called by the Administrative Member. (c) If the Administrative Member determines at any time, or from time to time, that the available funds of the Company or the applicable Series (after the drawdown of any then unfunded Commitments) are not sufficient to pay the Company’s or the applicable Series’ operating costs and expenses, then the Administrative Member may, but is not required to, loan its own funds to the Company or the applicable Series for the payment of such costs and expenses (an “Advance”). The Company or the applicable Series shall reimburse the Administrative Member for any such Advance together with interest on such Advance from the date of such Advance at an annual rate of [10%]. Any such Advance, together with the interest thereon, shall be an expense of the Company or the applicable Series and shall be paid by the Company or the applicable Series prior to making any further Distributions. Payments by the Company or the applicable Series shall be applied first to accrued interest on and then to the principal of such Advance. The determination to apply funds of the Company or the applicable Series to the payment of such Advance shall be at the Administrative Member’s discretion. For the avoidance of doubt, an Advance by the Administrative Member will not constitute a Capital Contribution by the Administrative Member. (d) If the Administrative Member does not make an Advance, then the Administrative Member shall notify the Members and describe in reasonable detail the operating costs and expenses requiring additional Company funds. Such notification shall also state the aggregate amount of additional Capital Contributions (“Additional Capital Contributions”) being requested from the Members and each Member’s pro rata share of such amount. (such a request, a “Capital Call”) Within 15 days following the date of such Capital Call (the “Deadline”), each Member may, but is not obligated to, make an Additional Capital Contribution in an amount equal to its pro rata share (based on its Interest) of the aggregate amount of the Additional Capital Contributions requested by the Administrative Member. An Additional Capital Contribution made by a Member shall be treated as having been received on the later of the Deadline with respect to the applicable Capital Call or the date on which such Additional Capital Contribution is actually made. (e) If any Member (the “Non-Contributing Member”) fails to make any Additional Capital Contribution (or any portion thereof) requested by a Capital Call (a “Shortfall Amount”) by the Deadline, the Administrative Member shall notify each Member that is not a Non-Contributing Member in respect of such Capital Call (a “Contributing Member”) of the aggregate Shortfall Amount in writing, and each Contributing Member may elect to make a further Additional Capital Contribution in the amount of such Shortfall Amount (or a portion thereof). If more than one Contributing Member elects to make a further Additional Contribution, the Shortfall Amount shall be allocated to such Contributing Members pro rata based on their Interests, but not in excess of the actual Additional Capital Contribution such Contributing Member has elected to contribute. Such further Additional Capital Contributions shall be made within 15 days after the Deadline. (f) If the Company or the applicable Series has insufficient funds to pay its operating costs and expenses after a Capital Call and any Advances, the Administrative Member, in its discretion, may sell assets of the Company or the applicable Series without any Consent of the Members in order to pay the Company’s or the applicable Series’ operating costs and expenses. IV.6 Nature of Obligations between Members. Except as otherwise required by applicable law, nothing contained in this Agreement will be deemed to constitute any Member, in that Member’s capacity as a Member, an agent or legal representative of any other Member or to create any fiduciary relationship between Members for any purpose whatsoever. Except as otherwise expressly provided in this Agreement, a Member has no authority to act for, or to assume any obligation or responsibility on behalf of, any other Member or the Company or any Series. IV.7 Status Under the Uniform Commercial Code. All Interests will be securities governed by Article 8 of the Uniform Commercial Code as in effect from time to time in the State of Delaware. The Interests are not evidenced by certificates and will remain not evidenced by certificates. Neither the Company nor any Series is authorized to issue certificated Interests. The Company will record all Transfers of Members’ Interests made in accordance with Article VIII of this Agreement in the Interest Register. ARTICLE V MANAGEMENT AND CONTROL OF THE COMPANY V.1 Management. (a) Management of the Company and each Series is vested in the Members. Except for those matters delegated to the Administrative Member pursuant to this Agreement, the Members, acting by Majority in Interest (or such greater percentage specified in this Agreement with respect to a specified matter), have the exclusive management and control of the Company and its business and affairs, including all decisions related to the acquisition and disposition of Investments or otherwise required to be made by the Company as the holder of an Investment. Except as otherwise provided in this Agreement and subject to the provisions of the Act, the Administrative Member has all power and authority to take all actions necessary to execute the decisions made by a Majority in Interest or otherwise delegated to it under this Agreement. (b) A [Majority in Interest ] of the Members may at any time remove the Person then serving as the Administrative Member. The Administrative Member may also at any time, upon not less than 30 days prior notice, resign as the Administrative Member. The Members, by Majority in Interest, may also appoint an alternate Administrative Member to act on behalf of the Company or the applicable Series and the Members if the Administrative Member is temporarily unable to serve or is unwilling to serve in any particular circumstance. When so acting, the alternative Administrative Member shall have all the powers and authority delegated to the Administrative Member. Any vacancy in the position of the Administrative Member (whether from the removal, resignation or death of such Administrative Member or otherwise) shall be automatically filled by the then appointed alternate Administrative Member, or if none, by the Members acting by a Majority in Interest. (c) The Members may agree to (i) delegate any matters or actions authorized to be taken by the Members under this Agreement to the Administrative Member, specified Member(s) or third Persons and (ii) appoint any Persons, with titles as the Members may select, to act on behalf of the Company or the applicable Series, with power and authority as the Members may delegate from time to time. Any delegation by the Members may be rescinded at any time by a Majority in Interest. If a Person is appointed as an officer of the Company, then, unless otherwise specified in such appointment, such Person shall have the authority and duties customarily held by an officer of a Delaware corporation with such title. (d) Third parties dealing with the Company or the applicable Series or its assets shall not be required to investigate the authority of the Administrative Member or whether any approval of the Members is required or has been obtained with respect to any matter and may rely conclusively upon any certificate of the Administrative Member to the effect that it is authorized to and is acting on behalf of the Company or the applicable Series as to any matter relating to the Company or its assets and Members. The Administrative Member shall have the authority to execute any agreements, instruments, documents and certificates on behalf of the Company or the applicable Series as its authorized signatory and the signature of the Administrative Member , when acting pursuant to this Article V, will be sufficient to bind the Company or the applicable Series. V.2 Duties and Obligations of the Administrative Member. In addition to the duties and services of the Administrative Member elsewhere in this Agreement, (a) The Administrative Member shall take all action that may be necessary or appropriate for the continuation of the Company’s valid existence and authority to do business as a limited liability company under the laws of the State of Delaware and of each other jurisdiction in which authority to do business is, in the judgment of the Administrative Member, necessary or advisable. (b) The Administrative Member shall prepare or cause to be prepared and shall file on or before the due date (or any extension) any federal, state or local tax returns required to be prepared or filed by the Company and each Series. (c) To the extent of available funds of the Company and each Series, the Administrative Member shall cause the Company and each Series to pay any taxes or other governmental charges levied against or payable by the Company or such Series; provided, however, that the Administrative Member will not be required to cause the Company or any series to pay any tax so long as the Administrative Member or the Company (or any series) is in good faith and by appropriate legal proceedings contesting the validity, applicability or amount the tax and the contest does not materially endanger any right or interest of the Company or the applicable Series. (d) Notwithstanding any other provision of this Agreement or otherwise applicable provision of law or equity, whenever in this Agreement, the Administrative Member is permitted or required to make a decision (i) in its “sole discretion” or “discretion” or under a grant of similar authority or latitude, the Administrative Member will be entitled to consider only those interests and factors as it desires, including its own interests, and will, to the fullest extent permitted by applicable law, have no duty or obligation to give any consideration to any interest of or factors affecting the Company or the Members, or (ii) in its “good faith” or under another expressed standard, the Administrative Member shall act under that express standard and will not be subject to any other or different standards. Unless otherwise expressly stated, for purposes of this Section 5.2(d), the Administrative Member will be deemed to be permitted or required to make all decisions hereunder in its sole discretion. V.3 No Fiduciary Duty. To the fullest extent permitted by applicable law, no Member, including the Administrative Member when acting as such, owes any fiduciary duties of any kind whatsoever to the Company or any Series, or to any of the Members, including, but not limited to, the duties of due care and loyalty, whether those duties were established as of the date of this Agreement or any time hereafter, and whether established under common law, at equity or legislatively defined. It is the intention of the Members and the Company that those fiduciary duties be affirmatively eliminated to the fullest extent permitted by Delaware law, including the Act, and the Members hereby waive any rights with respect to those fiduciary duties. Notwithstanding the foregoing, the Members have the duties, liabilities and obligations expressly set forth in this Agreement. V.4 The Members May Engage in Other Activities. Subject to the terms of any other agreement between a Member and the Company or any Series, no Member (including the Administrative Member) is obligated to devote all of its time or business efforts to the affairs of the Company or any Series, provided that the Administrative Member shall devote the time, effort and skill as it determines in its sole discretion may be necessary or appropriate for the responsibilities delegated to it under this Agreement. Subject to the foregoing, any Member may have other business interests and may engage in other activities in addition to those related to the Company and the Series. The Members and their respective Affiliates may acquire or possess interests in a Portfolio Company and the interests may be of a different class or type, with different rights and preferences, than those held by the Company or the applicable Series. Likewise, the Members and their respective Affiliates may acquire or possess interests in other companies or business ventures that are competitive with a Portfolio Company or the Company or any Series. Neither the Company or the Series nor any Member will have the right, by virtue of this Agreement, to share or participate in other investments or activities of any other Member or to the income derived therefrom. ARTICLE VI ALLOCATIONS OF NET INCOME AND NET LOSS VI.1 Allocation of Net Income and Net Loss. Except as otherwise provided in this Agreement, Net Income and Net Loss (including individual items of profit, income, gain, loss, credit, deduction and expense) of the Company or the applicable Series will be allocated among the Members in a manner such that the Capital Account balance of each Member, immediately after making that allocation, is, as nearly as possible, equal (proportionately) to the Distributions that would be made to that Member pursuant to Section 10.4 if the Company or the applicable Series were dissolved or terminated, its affairs wound up and its assets sold for cash equal to their Fair Market Value, all Company liabilities were satisfied (limited with respect to each nonrecourse liability to the Fair Market Value of the assets securing that liability), and the net assets of the Company or the applicable Series were distributed in accordance with Section 10.4 to the Members immediately after making that allocation, adjusted for applicable special allocations, computed immediately prior to the hypothetical sale of assets. VI.2 Allocation Rules. In the event that Members are issued Interests on different dates, the Net Income or Net Loss allocated to the Members for each Fiscal Year during which Members receive Interests will be allocated among the Members in accordance with Section 706 of the Code, using any convention permitted by law and selected by the Administrative Member. For purposes of determining the Net Income, Net Loss and individual items of income, gain, loss credit, deduction and expense allocable to any period, Net Income, Net Loss and any other items will be determined on a daily, monthly or other basis, as determined by the Administrative Member using any method that is permissible under Section 706 of the Code and the Treasury Regulations. Except as otherwise provided in this Agreement, all individual items of Company or Series income, gain, loss and deduction will be divided among the Members in the same proportions as they share Net Income and Net Loss for the Fiscal Year or other period in question. VI.3 Limitation on Allocation of Net Losses. There will be no allocation of Net Losses to any Member to the extent that the allocation would create a negative balance in the Capital Account of that Member (or increase the amount by which that Member’s Capital Account balance is negative). VI.4 General Tax Allocations. Except as otherwise provided in this Section 6.4, the taxable income or loss of the Company or the applicable Series will be allocated pro rata among the Members associated therewith in the same manner as the corresponding items of Net Income, Net Loss and separate items of income, gain, loss, credit, deduction and expense (excluding items for which there are no related tax items) are allocated among the Member for Capital Account purposes; provided, that in the event there is a difference between the “tax book” value of a Company or Series asset and the asset’s adjusted tax basis at the time of the asset’s contribution or revaluation pursuant to this Agreement, all items of tax depreciation, cost recovery, amortization, and gain or loss with respect to such asset shall be allocated among the Members to take into account the disparities between the “tax book” values and the adjusted tax basis with respect to such properties in accordance with any method selected by the Administrative Member that is permitted by the Treasury Regulations promulgated under Sections 704(b) and 704(c) of the Code. VI.5 Special Tax Allocations. (a) Minimum Gain Chargeback. In the event there is a net decrease in the Company Minimum Gain during any Fiscal Year, the minimum gain chargeback provisions described in Sections 1.704-2(f) and (g) of the Treasury Regulations will apply. (b) Member Minimum Gain Chargeback. In the event there is a net decrease in Member Minimum Gain during any Fiscal Year, the partner minimum gain chargeback provisions described in Section 1.704-2(i) of the Treasury Regulations will apply. (c) Qualified Income Offset. In the event a Member unexpectedly receives an adjustment, allocation or Distribution described in of Section 1.704-1(b)(2)(ii)(d)(4), (5) or (6) of the Treasury Regulations, which adjustment, allocation or Distribution creates or increases a deficit balance in that Member’s Capital Account, the “qualified income offset” provisions described in Section 1.704-1(b)(2)(ii)(d) of the Treasury Regulations will apply. (d) Nonrecourse Deductions. Nonrecourse Deductions will be allocated in accordance with and as required in the Treasury Regulations. (e) Member Nonrecourse Deductions. Member Nonrecourse Deductions will be allocated to the Members as required in Section 1.704-2(i)(1) of the Treasury Regulations. (f) Intention. The special allocations in this Section 6.5 are intended to comply with certain requirements of the Treasury Regulations and will be interpreted consistently. It is the intent of the Members that any special allocation pursuant to this Section 6.5 will be offset with other special allocations pursuant to this Section 6.5. Accordingly, special allocations of Company or Series income, gain, loss or deduction will be made in such manner so that, in the reasonable determination of the Administrative Member, taking into account likely future allocations under this Section 6.5, after those allocations are made, each Member’s Capital Account is, to the extent possible, equal to the Capital Account it would have been were this Section 6.5 not part of this Agreement. (g) Recapture Items. In the event that the Company or the applicable Series has taxable income in any Fiscal Year that is characterized as ordinary income under the recapture provisions of the Code, each Member’s distributive share of taxable gain or loss from the sale of Company or Series assets (to the extent possible) will include a proportionate share of this recapture income equal to that Member’s share of prior cumulative depreciation deductions with respect to the assets which gave rise to the recapture income. (h) Tax Credits and Similar Items. Allocations of tax credits, tax credit recapture, and any items related thereto will be allocated in those items as determined by the Administrative Member considering the principles of Treasury Regulation Section 1.704-1(b)(4)(ii). (i) Consistent Treatment. All items of income, gain, loss, deduction and credit of the Company or the applicable Series will be allocated among the Members for federal income tax purposes in a manner consistent with the allocation under this Article VI. Each Member is aware of the income tax consequences of the allocations made by this Article VI and hereby agrees to be bound by the provisions of this Article VI in reporting its share of Company or Series income and loss for income tax purposes. No Member will report on its tax return any transaction by the Company or the applicable Series, any amount allocated or distributed from the Company or the applicable Series or contributed to the Company or the applicable Series inconsistently with the treatment reported (or to be reported) by the Company or the applicable Series on its tax return nor take a position for tax purposes that is inconsistent with the position taken by the Company or the applicable Series. (j) Modifications to Preserve Underlying Economic Objectives. If, in the opinion of counsel to the Company, there is a change in the Federal income tax law (including the Code as well as the Treasury Regulations, rulings, and administrative practices thereunder) which makes modifying the allocation provisions of this Article VI it necessary or prudent to preserve the underlying economic objectives of the Members as reflected in this Agreement, the Administrative Member will make the minimum modification necessary to achieve that purpose. VI.6 Allocation of Excess Nonrecourse Liabilities. “Excess nonrecourse liabilities” of the Company or the applicable Series as used in Section 1.752-3(a)(3) of the Treasury Regulations will first be allocated among the Member pursuant to the “additional method” described in that section and then in accordance with the manner in which the Administrative Member expects the nonrecourse deductions allocable to those liabilities will be allocated. VI.7 Allocations in Respect of a Transferred Interest. Except as otherwise provided in this Agreement, amounts of Net Income, Net Loss and special allocations allocated to the Members will be allocated among the appropriate Members in proportion to their respective Interests. If there is a change in any Member’s Interest for any reason during any Fiscal Year, each item of income, gain, loss, deduction or credit of the Company or the applicable Series for that Fiscal Year will be assigned pro rata to each day in that Fiscal Year in the case of items allocated based on Interests, and the amount of that item so assigned to that day will be allocated to the Member based upon that Member’s Interest at the close of that day. Notwithstanding the immediately preceding sentence, the net amount of gain or loss realized by the Company or the applicable Series in connection with a sale or other disposition of property by the Company or the applicable Series will be allocated solely to the Members having Interests on the date of that sale or other disposition. VI.8 Allocations in Year of Liquidation Event. Notwithstanding anything else in this Agreement to the contrary, the Parties intend for the allocation provisions of this Article VI to produce final Capital Account balances of the Members that will permit liquidating Distributions to be made pursuant to the order set forth in Section 10.4. To the extent that the allocation provisions of this Article VI would fail to produce the final Capital Account balances, the Administrative Member may elect, in its sole discretion, to (a) amend those provisions if and to the extent necessary to produce that result and (b) reallocate income and loss of the Company or the applicable Series for prior open years (including items of gross income and deduction of the Company or the applicable Series for those years) among the Members to the extent it is not possible to achieve that result with allocations of items of income (including gross income) and deduction for the current year and future years, as approved by the Administrative Member. This Section 6.8 will control notwithstanding any reallocation or adjustment of taxable income, taxable loss, or related items by the Internal Revenue Service or any other taxing authority. Notwithstanding any provision of this Agreement to the contrary, the Administrative Member will have the power to amend this Agreement without the Consent of the other Members, as it reasonably considers advisable, to make the allocations and adjustments described in this Section 6.8. To the extent that the allocations and adjustments described in this Section 6.8 result in a reduction in the Distributions that any Member will receive under this Agreement compared to the amount of the Distributions that Member would receive if all those Distributions were made pursuant to the order set forth in Section 10.4, the Company or the applicable Series may make a guaranteed payment (within the meaning of Section 707(c) of the Code) to that Member (to be made at the time that Member would otherwise receive the Distributions that have been reduced) to the extent that payment does not violate the requirements of Section 704(b) of the Code or may take other action as reasonably determined by the Administrative Member to offset that reduction. ARTICLE VII DISTRIBUTIONS VII.1 Generally. (a) The Company or the applicable Series will first use available assets to pay or set aside reserves for the payment of the costs, expenses, debts, liabilities and obligations of the Company or the applicable Series as set forth in Section 4.5. (b) Subject to Sections 7.4 and 7.5, the Company or the applicable Series will make Distributions, at such times, in such amounts and of such types (i.e. in cash or in kind) as determined by a Majority in Interest. Distributions shall be made to the Members associated therewith pro rata in accordance with their respective Interests. (c) For the avoidance of doubt, prior to the dissolution of the Company or the applicable Series pursuant to Section 10.1, the Company or the applicable Series will not make Distributions in kind except to the extent of Liquidity Event Proceeds without the consent of the Administrative Member. Any expenses relating to brokerage commissions, escrow fees, clearing and settlement charges, custodial fees, and any other costs relating to the event giving rise to such Liquidity Event Proceeds and the receipt and Distribution of Liquidity Event Proceeds by the Company or the applicable Series (“Distribution Expenses”) will be paid by the Company or the applicable Series prior to any Distributions. The amount of Liquidity Event Proceeds distributable to the Members will be net of any Distribution Expenses. VII.2 Non-Cash Distributions. Whenever a Distribution provided for in this Section 7.2 is payable in property other than cash, the value of the Distribution will be deemed to be its Net Fair Market Value as of the date of Distribution. The Capital Accounts of the Members will be adjusted accordingly as the result of any Distribution in kind. VII.3 Return of Distributions. Any Member receiving a Distribution in violation of the terms of this Agreement shall return that Distribution (or cash equal to the Net Fair Market Value of any property so distributed, determined as of the date of Distribution) promptly following the Member’s receipt of a request to return the Distribution from the Administrative Member. No third party will be entitled to rely on or enforce the obligations to return Distributions set forth in this Agreement or to demand that the Company, any Series, or any Member make any request for any such return. VII.4 Form of Distribution. Distributions pursuant to this Article VII will be comprised of (a) assets and securities constituting Liquidity Event Proceeds, and/or (b) Distributable Cash. Notwithstanding the foregoing, no Distribution of securities will be made to any Member to the extent that Member would be prohibited by applicable law from holding those securities. Unless otherwise agreed to by the Administrative Member, Distributions will be made to its respective brokerage account; provided that any Distribution of Distributable Cash may, in the sole discretion of the Administrative Member, be made, in whole or in part, to the account from which such Member’s Capital Contributions were paid. VII.5 Amounts Withheld. Any amounts withheld with respect to a Member pursuant to any federal, state, local or foreign tax law from a Distribution by the Company or the applicable Series to the Member will be treated as paid or distributed, as the case may be, to the Member for all purposes of this Agreement. In addition, the Company or the applicable Series may withhold from Distributions amounts deemed necessary, in the sole discretion of the Administrative Member, to be held in reserve for payment of accrued or foreseeable permitted expenses of the Company or the applicable Series. Each Member hereby agrees to indemnify and hold harmless the Company and the applicable Series from and against any liability with respect to income attributable to or Distributions or other payments to that Member (including, without limitation, any “imputed underpayment” within the meaning of Section 6225 of the Code attributable to such Member, as determined by the Administrative Member). Any other amount that the Administrative Member determines is required to be paid by the Company or the applicable Series to a taxing authority with respect to a Member pursuant to any federal, state, local or foreign tax law in connection with any payment to or tax liability (estimated or otherwise) of the Member shall be treated as a loan from the Company or the applicable Series to that Member. If that loan is not repaid within 30 days from the date the Administrative Member notifies that Member of that withholding, the loan will bear interest from the date of the applicable notice to the date of repayment at a rate at the lesser of (a) [10]% or (b) the maximum legal interest rate under applicable law, compounded annually. In addition to all other remedies the Company or the applicable Series may have, the Company or the applicable Series may withhold Distributions that would otherwise be payable to that Member and apply that amount toward repayment of the loan and interest. Any payment made by a Member to the Company or the applicable Series pursuant to this Section 7.5 will not constitute a Capital Contribution. The obligations of a Member pursuant to this Section 7.5 shall survive the termination, dissolution, liquidation and winding up of the Company or applicable Series and the withdrawal of such Member from the Company or applicable Series or transfer of its interest in the Company or applicable Series. VII.6 Member Giveback. Except as required by applicable law, Section 7.3 or Section 7.5, no Member will be required to repay to the Company or the applicable Series, any other Member, or any creditor of the Company or the applicable Series, all or any part of the Distributions made to that Member. VII.7 No Creditor Status. A Member will not have the status of, and is not entitled to the remedies available to, a creditor of the Company or the applicable Series with regard to Distributions that the Member becomes entitled to receive pursuant to this Agreement and the Act. VII.8 Limitations on Distributions. Notwithstanding any provision to the contrary contained in this Agreement, no Distribution shall be made to any Member on account of its Interest if the Distribution would violate the Act or other applicable law. ARTICLE VIII TRANSFERS VIII.1 Transfers. Except as otherwise expressly provided in this Article VIII, no Member may Transfer all or any portion of its Interests without (a) providing the Administrative Member with a written opinion of counsel that such Transfer would not be considered a securities transaction under applicable securities laws if required by the Administrative Member; (b) compliance with the provisions of Section 8.4; (c) the approval of the Administrative Member; and (d) the approval of such Members (which may include the Administrative Member) as represents two-thirds of the aggregate Interests in the Company or the applicable Series. Any attempted Transfer in violation of this Article VIII will be null and void ab initio and will not bind the Company or the applicable Series. VIII.2 Permitted Transfers. The consent of the Members pursuant to Section 8.1(d) will not be required for any Transfer (a) by a Member who is an individual to an entity controlled (which for this purpose shall require that the Member own more than 50% of the voting control and equity securities of that entity) by that Member and all of the remaining beneficial ownership of such entity is owned by the Family Members of such Member or (b) by a Member to another Member (each transferee, a “Permitted Transferee”); provided, however, that unless otherwise consented to by the Administrative Member, in connection with a Transfer permitted pursuant to clause (a) of this Section 8.2, the transferring Member shall remain jointly and severally liable for the obligations of the Permittee Transferee under this Agreement. VIII.3 Admission of Transferee as a Member. A Transfer permitted by this Article VIII will only transfer the rights of an assignee as set forth in Section 8.6 unless (a) the transferee is a Member or is admitted as a Member with the consent of the Administrative Member and otherwise complies with Section 4.1 and (b) payment to the Company or the applicable Series of a transfer fee in cash which is sufficient, in the Administrative Member’s sole determination, to cover all reasonable expenses incurred by the Company or the applicable Series in connection with the Transfer and admission of the transferee as a Member. VIII.4 Additional Restrictions. Notwithstanding any other provision of this Agreement, no Transfer of an Interest (including any Transfer of an interest in Company profits, losses or distributions) shall be permitted unless the Administrative Member otherwise consents, in its sole discretion, if such Transfer would cause the Company or the applicable Series (a) to have more than 100 partners, as determined for purposes Section 7704 of the Code; (b) to be treated as a publicly traded partnership within the meaning of Section 7704 of the Code; (c) to be required to be registered as an “investment company” under the Investment Company Act of 1940 (the “40 Act”); (d) to hold any “plan assets” under the Employee Retirement Income Security Act of 1974 (“ERISA”), or (e) in the Administrative Member’s sole determination, to be subject to any burdensome regulatory or reporting requirements, any adverse tax or fiscal consequences or otherwise in breach of any applicable law or agreement to which the Company or the applicable Series is a party. VIII.5 Involuntary Transfer of Interests. In the event of any involuntary transfer of Interests to a Person, that Person will have only the rights of an assignee set forth in Section 8.6 with respect to those Interests. VIII.6 Rights of Assignee. An assignee has no right to vote, receive information concerning the business and affairs of the Company or the applicable Series and is entitled only to receive Distributions and allocations attributable to the Interest held by the assignee as determined by the Member and in accordance with this Agreement. VIII.7 Enforcement. The restrictions on Transfers contained in this Agreement are an essential element in the ownership of an Interest. Upon application to any court of competent jurisdiction, the Administrative Member will be entitled to a decree against any Person violating or about to violate those restrictions, requiring their specific performance, including those prohibiting a Transfer of all or a portion of its Interests. VIII.8 Death or Disability of a Member. Upon the Disability or death of a Member, the provisions of Section 18-705 of the Act shall apply. VIII.9 Compulsory Redemption. A Majority in Interest may, by notice to any Member, force the sale of all or a portion of that Member’s Interest on terms as the Administrative Member determines to be fair and reasonable, or take other action as it determines to be fair and reasonable in the event that the Administrative Member determines or has reason to believe that: (a) that Member has attempted to effect a Transfer of, or a Transfer has occurred with respect to, any portion of that Member’s Interest in violation of this Agreement; (b) continued ownership of that Interest by that Member is reasonably likely to cause any of the events set forth in Section 8.4; (c) continued ownership of that Interest by that Member may be harmful to the business or reputation of the Company or the applicable Series or the Administrative Member; (d) any of the representations or warranties made by that Member under this Agreement or its Subscription Agreement was not true when made or has ceased to be true; (e) any portion of that Member’s Interest has vested in any other Person by reason of the bankruptcy, dissolution, incompetency or death of that Member; (f) such Member has failed to fund any Additional Capital Contribution; or (g) it would not be in the best interests of the Company or the applicable Series, as determined by the Administrative Member in its sole discretion, for that Member to continue ownership of its Interest. ARTICLE IX RECORDS, REPORTS AND TAXES IX.1 Books and Records. The Administrative Member will maintain all of the information required to be maintained by the Act at the Company’s principal office, with copies available at all times during normal business hours for inspection and copying upon reasonable notice by any Member or its authorized representatives for any purpose reasonably related to that Member’s status as a member of the Company or the applicable Series, including as applicable: (a) true and full information regarding the status of the business and financial condition of the Company and such Series; (b) promptly after becoming available, a copy of the Company’s and the applicable Series’ federal, state and local income tax returns, if any, for each Fiscal Year; (c) the Interest Register; (d) a copy of this Agreement and all amendments, including any Exception Handling Addendum, together with executed copies of (i) any powers of attorney and (ii) any other document pursuant to which this Agreement or any amendments have been executed or have been deemed to be executed; and (e) true and full information regarding the amount of Capital Contributions by that Member and the date on which that Member became a Member. IX.2 Reports. (a) Governmental Reports. The Administrative Member will cause to be prepared and filed, at the Company’s and Series’ expense, all documents and reports required to be filed with any governmental agency in accordance with the Act. (b) Tax Reports. The Administrative Member will cause to be prepared and duly and timely filed, at the Company’s and Series’ expense, all tax returns required to be filed by the Company and each Series. The Administrative Member will send or cause to be sent to each Member within [90] days after the end of each Fiscal Year, or a later date as determined in the discretion of the Administrative Member, an Internal Revenue Service Schedule K-1 with respect to the Member’s interest in the Company or applicable Series (or substantially similar information if an Internal Revenue Service Schedule K-1 is not required to be provided to Members). IX.3 Tax Elections. Except as otherwise expressly provided in this Agreement, the Company will make any tax elections as the Administrative Member may determine. The Administrative Member may, in its sole discretion, make an election under Section 754 of the Code. IX.4 Partnership Representative. The Administrative Member will be the “partnership representative” within the meaning of Code Section 6223 (the “Partnership Representative”). The Partnership Representative will have all of the powers and authority of a “partnership representative” under the Code. The Partnership Representative will represent the Company and each Series (at its expense) in connection with all administrative and judicial proceedings by the Internal Revenue Service or any taxing authority involving any tax return of the Company and each Series, and may expend the Company’s and Series’ funds for professional services and associated costs. The Partnership Representative will provide to the Members notice of any communication to or from or agreements with a federal, state or local authority regarding any return of the Company or the applicable Series, including a summary of the provisions. IX.5 Confidentiality. All information concerning the business, affairs and properties of the Company and each Series and all of the terms and provisions of this Agreement will be held in confidence by each Member and their respective Affiliates, subject to any obligation to comply with (a) any applicable law, (b) any rule or regulation of any legal authority or securities exchange, (c) any subpoena or other legal process to make information available to the Persons entitled thereto or (d) the enforcement of that Party’s rights under this Agreement in any legal process, arbitration, as a Member, or employee, as applicable. Confidentiality will be maintained until that time, if any, as the confidential information either is, or becomes, published or a matter of public knowledge (other than as a result of a breach of this Section 9.5); provided that each Party recognizes that the privilege each has to maintain, in its sole discretion, the confidentiality of a communication relating to the transactions, including a confidential communication with its attorney or a confidential communication with a federally authorized tax practitioner under Section 7525 of the Code, is not intended to be affected by the foregoing provisions of this sentence. Notwithstanding this Section 9.5, the Administrative Member may use confidential information about the Company, the Series, and the Members in data aggregation, so long as the data use does not include the disclosure of information that could reasonably be used to identify any Member. ARTICLE X DISSOLUTION AND LIQUIDATION X.1 Dissolution. (a) The Company. The Company will be dissolved and its affairs wound up solely upon the first to occur of any of the following: (1) the disposition (which may include by Distribution to the Members) of the final Investment of the Company; (2) the determination by a Majority in Interest to dissolve the Company; or (3) the entry of a judicial decree of dissolution of the Company pursuant to the Act. (b) Series. A Series will be dissolved or terminated, as applicable, and its affairs wound up solely upon the first to occur of any of the following: (1) the final Distribution of the net assets of the Series to the Members or a Liquidating Vehicle in accordance with this Article X; (2) determination by a Majority in Interest to dissolve or terminate the Series; or (3) entry of a judicial decree of dissolution of the Series pursuant to the Act. • At any time that (i) there are no Interests outstanding of any particular Series previously established or (ii) a particular Series never acquired any Portfolio Company or any other assets, has no liabilities, and did not receive any Capital Contributions, the Administrative Member may terminate that Series, cancel any Interests therein for no consideration and rescind the establishment thereof. X.2 Date of Dissolution. Dissolution of the Company or the applicable Series will be effective on the day on which the event occurs giving rise to the dissolution, but the Company or the applicable Series will not terminate or cease to exist until the assets of the Company or the applicable Series have been liquidated and distributed as provided in this Agreement and a Certificate of Cancellation for the Company or the applicable Series has been filed in accordance with Section 10.8. Notwithstanding the dissolution of the Company or the applicable Series, prior to the termination of the Company or the applicable Series, the business of the Company or the applicable Series and the rights and obligations of the Members will continue to be governed by this Agreement. X.3 Winding Up. Upon the occurrence of any event specified in Section 10.1, the Company or the applicable Series will continue solely for the purpose of winding up its affairs in an orderly manner, liquidating its assets, satisfying the claims of its creditors, and distributing any remaining assets in cash or in kind, to the Members in accordance with this Agreement. The Liquidating Trustee will be responsible for overseeing the winding up and liquidation of the Company or the applicable Series and will cause the Company or the applicable Series to sell or otherwise liquidate all of the Company’s or the applicable Series’ assets except to the extent the Liquidating Trustee determines to distribute any assets to the Members in kind, discharge or make provision for all liabilities of the Company or the applicable Series and all costs relating to the dissolution, winding up, and liquidation and distribution of assets, establish reserves as may be necessary to provide for contingent liabilities of the Company or the applicable Series (for purposes of determining the Capital Accounts of the Members, the amounts of those reserves will be deemed to be an expense of the Company or the applicable Series and will be deemed income to the extent it ceases to be reserved), and distribute the remaining assets to the Members, in the manner specified in Section 10.4. The Liquidating Trustee will be allowed a reasonable time for the orderly liquidation of the Company or the applicable Series’ assets and discharge of its liabilities, so as to preserve and upon disposition maximize, to the extent possible, the value of the Company’s or the applicable Series’ assets. X.4 Liquidation. The Company’s or the applicable Series’ assets, or the proceeds from the liquidation of the Company’s or the applicable Series’ assets, will be paid or distributed in the following order: (a) first, to creditors to the extent otherwise permitted by applicable law in satisfaction of all liabilities and obligations of the Company or the applicable Series, including expenses of the liquidation (whether by payment or the making of reasonable provision for payment), other than liabilities for which reasonable provision for payment has been made and liabilities, if any, for Distributions to Members; (b) next, to the establishment of those reserves for contingent liabilities of the Company or the applicable Series as are deemed necessary by the Liquidating Trustee (other than liabilities for which reasonable provision for payment has been made and liabilities, if any, for Distribution to Members and former Members under the Act); (c) next, to Members and former Members in satisfaction of any liabilities for Distributions under the Act, if any; (d) next, to the Members, on a pro rata in accordance with their Interests. X.5 Distributions in Kind. Any non-cash asset distributed to one or more Members will first be valued by the Administrative Member at its Fair Market Value to determine the Net Income, Loss and special allocations that would have resulted if that asset had been sold for that value, which amounts will be allocated pursuant to Article VI, and the Members’ Capital Accounts will be adjusted to reflect those allocations. The amount distributed and charged to the Capital Account of each Member receiving an interest in the distributed asset will be the Net Fair Market Value of that interest. X.6 No Liability. Notwithstanding anything in this Agreement to the contrary, upon a liquidation within the meaning of Section 1.704-1(b)(2)(ii)(g) of the Treasury Regulations, if any Member has a negative Capital Account balance (after giving effect to all contributions, Distributions, allocations and other Capital Account adjustments for all Fiscal Years, including the Year in which that liquidation occurs), neither that Member nor the Liquidating Trustee will have any obligation to make any contribution to the capital of the Company or the applicable Series, and the negative balance of that Member’s Capital Account will not be considered a debt owed by that Member or any Liquidating Trustee to the Company or the applicable Series or to any other Person for any purpose; provided, however, that nothing in this Section 10.6 will relieve any Member from any liability under any promissory note or other affirmative commitment that Member has made to contribute capital to the Company or the applicable Series. X.7 Limitations on Payments Made in Dissolution. Except as otherwise specifically provided in this Agreement, each Member will be entitled to look only to the assets of the Company or the applicable Series for Distributions (including Distributions in liquidation) and the Parties will have no personal liability for any Distributions. X.8 Certificate of Cancellation. Upon completion of the winding up of the Company’s affairs, the Liquidating Trustee will cause to be filed a Certificate of Cancellation, in accordance with the Act, of the Certificate of Formation. X.9 Conversion to a Trust. If, on the Outside Date, a Liquidity Event has not occurred, the Administrative Member may appoint a third-party liquidator or custodian at the expense of the Company or the applicable Series or distribute the assets of the Company or the applicable Series to a liquidating trust or Entity for the benefit of the Members (a “Liquidating Vehicle”). Interests in any Liquidating Vehicle will generally be subject to terms comparable to Interests (including, for the avoidance of doubt, Distribution Expenses); provided that, in addition to other expenses contemplated in this Agreement, interests in a Liquidating Vehicle may be subject to actual expenses incurred in connection with the ongoing operations of the liquidating vehicle. The Administrative Member or the liquidating trustee, in its sole discretion, may establish reserves for contingencies under this Section 10.9, including with respect to interests in any liquidating vehicle. ARTICLE XI LIMITATION OF LIABILITY; STANDARD OF CARE; INDEMNIFICATION XI.1 Limitation of Liability. Unless explicitly agreed upon, the debts, obligations and liabilities of the Company and each Series, whether arising in contract, tort or otherwise, will be solely the debts, obligations and liabilities of the Company or such Series, and will not be those of the Members, or the Covered Persons. XI.2 Standard of Care; Liability. Neither the Members nor the Covered Persons will have any personal liability whatsoever to the Company, any Series, any Member, or their Affiliates on account of that Person’s role within the Company or any Series or by reason of that Person’s acts or omissions in connection with the conduct of the business of the Company or any Series so long as that Person acts in good faith for a purpose which the Person reasonably believes to be in, or not opposed to, the best interests of the Company or such Series. Notwithstanding the preceding, nothing contained in this Agreement will protect that Person against any liability to which that Person would otherwise be subject by reason of (a) any act or omission of that Person that involves gross negligence, willful misconduct, bad faith, fraud, or willful and material breach of a material provision of this Agreement or any Subscription Agreement or any management agreement or other agreement with or for the benefit of the Company; (b) any transaction from which that Person or its Affiliate derives any improper personal benefit; or (c) a breach of any representation or warranty by such Member made in this Agreement or its Subscription Agreement. XI.3 Indemnification. To the fullest extent permitted by applicable law, the Members and the Covered Persons will be entitled, out of the Company or Series assets, to be indemnified against and held harmless from any and all liabilities, judgments, obligations, losses, damages, claims, actions, suits or other proceedings (whether civil or criminal, pending or threatened, before any court or administrative or legislative body, and as the same are accrued, in which a Member or Covered Person may be or may have been involved as a party or otherwise or with which he, she or it may be or may have been threatened (a “Proceeding”)) and reasonable costs, expenses and disbursements (including legal and accounting fees and expenses) of any kind and nature whatsoever (collectively, “Covered Losses”) that may be imposed on, incurred by, or asserted at any time against a Member or Covered Person (whether or not indemnified against by other parties) in any way related to or arising out of this Agreement, the administration of the Company or any Series, or the action or inaction of a Member or Covered Person (including actions or inactions pursuant to Article X on the Company’s or Series’ dissolution or termination) or under contracts with the Company or any Series, except that the Members and Covered Persons will not be entitled to indemnity for Covered Losses with respect to any matter as to which such Member or Covered Person has been finally adjudicated in any action, suit, or other proceeding, or otherwise by a court of competent jurisdiction, to have committed an act or omission involving his, her or its own gross negligence, willful misconduct, bad faith, fraud, willful and material breach of a material provision of this Agreement or any Subscription Agreement or any management agreement or other agreement with or for the benefit of the Company or any Series, or from which such Person derived an improper personal benefit. The indemnities contained in this Article XI will survive the termination of this Agreement. XI.4 Contract Right; Expenses. The right to indemnification conferred in this Article XI will be a contract right. A Member’s or a Covered Person’s right to indemnification under this Agreement includes the right to require the Company or the applicable Series to advance the expenses incurred by that Member or Covered Person in defending any Proceeding in advance of its final disposition subject to an obligation to return the amount so advanced if it is ultimately determined that the Member or Covered Person has not met the standard of conduct required for indemnification. XI.5 Nonexclusive Right. The right to indemnification and the payment of expenses incurred in defending a Proceeding in advance of its final disposition conferred in this Article XI will not be exclusive of any other right which any Person may have or later acquire under any statute or agreement, or under any insurance policy obtained for the benefit of any Administrative Member, Partnership Representative or officer of the Company or the applicable Series (it being understood that if any such insurance policy is obtained, it shall be at the expense of the Company or the applicable Series). XI.6 Severability. If any provision of this Article XI is determined to be unenforceable in whole or in part, that provision will nonetheless be enforced to the fullest extent permissible, it being the intent of this Article XI to provide indemnification to all Persons eligible under this Agreement to the fullest extent permitted by applicable law. XI.7 Insurance. The Administrative Member may cause the Company or the applicable Series to purchase and maintain insurance on behalf of any Covered Person who is or was an agent of the Company or the applicable Series against any liability asserted against that Covered Person capacity as an agent. ARTICLE XII REPRESENTATIONS, WARRANTIES AND COVENANTS XII.1 Representations and Warranties of the Members. Each Member is fully aware that the Company, each Series, and the Administrative Member are relying upon the truth and accuracy of the following representations by each of the Members. Each of the Members hereby represents, warrants and covenants to the Administrative Member, the Company, and each Series that: (a) (i) In the case of any entity, it has been duly formed and is validly existing and in good standing under the laws of its jurisdiction of organization with full power and authority to enter into and to perform this Agreement in accordance with its terms or (ii) in the case of an individual, he or she has the full legal capacity to enter into and to perform this Agreement in accordance with its terms; (b) This Agreement is a legal, valid and binding obligation of that Member, enforceable against that Member in accordance with its terms, subject to the effect of any applicable bankruptcy, insolvency, reorganization or similar laws affecting creditors’ rights, and subject, as to enforceability, to the effect of general principles of equity; (c) Its Interest is being acquired for its own account, for investment and not with a view to the distribution or resale, subject, however, to any requirement of law that the disposition of its property will at all times be within its control; (d) It is not a participant-directed defined contribution plan; (e) It is not an “investment company” registered under the 40 Act; (f) It is not a “benefit plan investor” under Section 3(42) of ERISA and its ownership of an Interest does not cause the Company or the applicable Series to hold “plan assets” under ERISA; (g) It will conduct its business and affairs (including its investment activities) in a manner that it will be able to honor its obligations under this Agreement; (h) It understands and acknowledges that the investments contemplated by the Company involve a high degree of risk. The Member has substantial experience in evaluating and investing in Portfolio Company Securities and is capable of evaluating the merits and risks of its investments, including an investment in its Interest, and has the capacity to protect its own interests. The Member, by reason of its business or financial experience, has the capacity to protect its own interests in connection with Investments. The Member has sufficient resources to bear the economic risk of its investment in its Interest and the underlying Investments, including any diminution in value, and will solely bear such economic risk.; (i) It has undertaken its own independent investigation, and formed its own independent business judgment, based on its own conclusions, as to the merits of investing in the Company and any Investments to be acquired by the Company. The Member is not relying and has not relied on the Administrative Member or any of their Affiliates for any evaluation or other investment advice in respect of any Investments or the advisability of investing in the Company and has had all questions answered and requests fulfilled that the Member has deemed to be material to the Member’s decision to invest in the Company. (j) It has had the opportunity to consult with legal counsel of its choice and has read and understands this Agreement. (k) It has received and carefully reviewed all code for the Designated Smart Contract sufficiently in advance of signing this Agreement. It is a Person who is, or in connection with this Agreement and the matters contemplated thereby has received the advice of Persons who are, knowledgeable, sophisticated and experienced in making, and qualified to make, evaluations and decisions with respect to the quality, security and intended and expected functionality of the Designated Smart Contract and the other matters contemplated by this Agreement. XII.2 Derivative Transactions. No Member may, without providing the Administrative Member with a written opinion of counsel satisfactory to the Administrative Member regarding the compliance of the proposed transfer with all applicable securities laws, and the prior written consent of the Administrative Member (which may be granted, withheld, conditioned or delayed in its sole discretion), directly or indirectly, (a) offer, pledge, sell, contract to sell, sell any option or contract to purchase, purchase any option or contract to sell, grant any option, right or warrant to purchase, lend, or otherwise assign, transfer or dispose of any Interests or Portfolio Company Securities, or publicly disclose the intention to make any offer, sale, pledge or disposition, or (b) engage in any short selling of any Interests or Portfolio Company Securities. Notwithstanding the foregoing, any permitted transfers of Interests that are approved by the Members will be governed by Article VIII. XII.3 Further Instruments and Cooperation of Members. Each Member will furnish, from time to time, to the Administrative Member within 5 Business Days after receipt of the Administrative Member’s request (or other amounts of time as specified by the Administrative Member) any further instruments (including any designations, representations, warranties, and covenants), documentation and information as the Administrative Member deems to be reasonably necessary, appropriate or convenient: (a) to facilitate the Closing or satisfy any Closing Conditions; (b) to satisfy applicable anti-money laundering requirements; (c) for any tax purpose, including, for the avoidance of doubt, a Form W-9; or (d) for any other purpose that is consistent with the terms of this Agreement. ARTICLE XIII POWER OF ATTORNEY XIII.1 Function of Power of Attorney. Each Member, by its execution of this Agreement, hereby irrevocably makes, constitutes and appoints each of the Administrative Member and the Liquidating Trustee, if any, in the capacity as Liquidating Trustee (each is referred to as the “Attorney”), as its true and lawful agent and attorney-in-fact, with full power of substitution and full power and authority in its name, place and stead, to make, execute, sign, acknowledge, swear to, record and file (a) this Agreement and any amendment to this Agreement that has been adopted as provided in this Agreement; (b) the original Certificate of Formation and all amendments required or permitted by law or the provisions of this Agreement; (c) all instruments or documents required to effect a transfer of Interest; (d) all certificates and other instruments deemed advisable by the Administrative Member or the Liquidating Trustee, if any, to carry out the provisions of this Agreement, and applicable law or to permit the Company to become or to continue as a limited liability company wherein the Members have limited liability in each jurisdiction where the Company may be doing business; (e) all instruments that the Administrative Member or the Liquidating Trustee, if any, deems appropriate to reflect a change, modification or termination of this Agreement or the Company or the Series in accordance with this Agreement including, the admission of additional Members or substituted members pursuant to the provisions of this Agreement, as applicable; (f) all fictitious or assumed name certificates required or permitted to be filed on behalf of the Company or the Series; (g) all conveyances and other instruments or papers deemed advisable by the Administrative Member or the Liquidating Trustee, if any, including, those to effect the dissolution and termination of the Company (including a Certificate of Cancellation) or the Series; (h) all other agreements and instruments necessary or advisable to consummate any purchase of Investments; (i) all forms, instruments, or documents required to make certain elections pursuant to the Code or state law governing the taxation of limited liability companies; and (j) all other instruments or papers that may be required or permitted by law to be filed on behalf of the Company or the Series. Notwithstanding the foregoing, the Administrative Member may not exercise this power of attorney with respect to matters as to which this Agreement requires the consent of the Members until such consent has been received. XIII.2 Additional Functions. The foregoing power of attorney: (a) is coupled with an interest, is irrevocable and will survive the subsequent death or Disability of any Member or any subsequent power of attorney executed by a Member; (b) may be exercised by the Attorney, either by signing separately as attorney-in-fact for each Member or by a single signature of the Attorney, acting as attorney-in-fact for all of them; (c) will survive the delivery of an assignment by a Member of all or any portion of its Interest; except that, where the assignee of all of that Member’s Interest has been approved by the Administrative Member for admission to the Company or the applicable Series, as a substituted Member, the power of attorney of the assignor will survive the delivery of that assignment for the sole purpose of enabling the Attorney to execute, swear to, acknowledge and file any instrument necessary or appropriate to effect that substitution. XIII.3 Delivery of Power of Attorney. Each Member must execute and deliver to the Administrative Member within 5 Business Days after receipt of the Administrative Member’s request, any further designations, powers-of-attorney and other instruments as the Administrative Member reasonably deems necessary to carry out the terms of this Agreement. ARTICLE XIV MISCELLANEOUS XIV.1 Ministerial and Administrative Amendments. Amendments that under this Agreement are expressly permitted to be made by the Administrative Member, ministerial or administrative amendments to cure ambiguities or inconsistencies as may in the discretion of the Administrative Member be necessary or appropriate and those amendments as may be required by law may be made from time to time without the Consent of any of the Members. Other amendments may be made to this Agreement only with the Consent of a Majority in Interest. Amendments may be made to a Series Addendum with the Consent of Majority in Interest of such Series. Notwithstanding the foregoing, (a) no amendment will be adopted pursuant to this Section 14.1 unless that amendment would not alter, or result in the alteration of, the limited liability of the Members or the status of the Company or any Series as a “partnership” for federal income tax purposes and (b) no amendment that increases the liabilities or duties of a Member (including the Administrative Member under this Agreement may be made without the consent of that Member. XIV.2 Amendment Recordation. Upon the adoption of any amendment to this Agreement, the amendment will be executed by the Administrative Member and, if required, will be recorded in the proper records of each jurisdiction in which recordation is necessary for the Company or any Series to conduct business. Any adopted amendment may be executed by the Administrative Member on behalf of the Members pursuant to the power of attorney granted in Section 13.1. XIV.3 Offset Privilege. The Company may offset against any monetary obligation owing from the Company or any Series to any Members or Administrative Member any monetary obligation then owing from that Member or Administrative Member to the Company or such Series; provided, however, that the offset right will only apply to any monetary obligation owed to that Member or Administrative Member in their capacity as a Member or Administrative Member. XIV.4 Notices. (a) Any notice or other communication to be given to the Company or the Series, the Administrative Member or any Member in connection with this Agreement will be in writing and will be delivered or mailed by registered or certified mail, postage prepaid, sent by facsimile or electronic mail or otherwise delivered by hand or messenger. (b) Each Member hereby acknowledges that the Administrative Member is entitled to transmit to that Member exclusively by e-mail (or other means of electronic messaging) all notices, correspondence and reports, including, but not limited to, that Member’s Schedule K-1s. (c) Each notice or other communication to the Administrative Member will for purposes of this Agreement be treated as effective or having been given upon the earlier of (i) receipt, (ii) the date transmitted by email, with evidence of transmission from the transmitting device, (iii) acknowledged receipt, (iv) when delivered in person, (v) when sent by electronic facsimile transfer or electronic mail at the number or address set forth below and receipt is acknowledged by the Administrative Member, (vi) 1 Business Day after having been dispatched by a nationally recognized overnight courier service if receipt is evidenced by a signature of a person regularly employed or residing at the address set forth below for that Party or (vii) 3 Business Days after being sent by registered or certified mail, return receipt requested, postage prepaid. (d) Any notice must be given, if (x) to the Company or any Series, to the Company’s or Series’ email address, to the attention of the Administrative Member and (y) to any Member, to that Member’s address or number specified in the Interest Register of the Company or the applicable Series. Any Party may by notice pursuant to this Section 14.4 designate any other physical address or email address to which notice to that Party must be given. XIV.5 Waiver. No course of dealing or omission or delay on the part of any Party in asserting or exercising any right under this Agreement will constitute or operate as a waiver of any right. No waiver of any provision of this Agreement will be effective, unless in writing and signed by or on behalf of the Party to be charged with the waiver. No waiver will be deemed a continuing waiver or future waiver or waiver in respect of any other breach or default, unless expressly so stated in writing. XIV.6 Governing Law. This Agreement will be construed, performed and enforced in accordance with the laws of the State of Delaware, without giving effect to its conflict of laws principles to the extent those principles or rules would require or permit the application of the laws of another jurisdiction. XIV.7 Dispute Resolution. Any dispute, controversy or claim arising out of or relating to this Agreement, or the breach of this Agreement, except for any claim or action that the Administrative Member, any Series or Company may elect to commence to enforce any of its rights or the Members’ obligations under this Agreement, will be settled by binding arbitration, before three arbitrators, administered by the American Arbitration Association under and in accordance with its Commercial Arbitration Rules. The decision of the arbitrators shall be non-appealable, binding and conclusive upon all parties thereto and judgment on the award rendered by the arbitrators may be entered in any court having jurisdiction. (a) Location. Any arbitration will be held in the Arbitration Location. (b) Costs. Each of the Parties will equally bear any arbitration fees and administrative costs associated with the arbitration. The prevailing Party, as determined by the arbitrators, will be awarded its costs and reasonable attorneys’ fees incurred in connection with the arbitration. (c) Consent to Jurisdiction. The Parties hereby irrevocably and unconditionally submits, for itself and its property, to the exclusive jurisdiction of any courts located in the Arbitration Location, for recognition or enforcement of any award determined pursuant to this Section 14.7. NOTICE: By becoming a party to this Agreement, each Party is agreeing to have all disputes, claims or controversies arising out of or relating to this Agreement decided by neutral binding arbitration, and is giving up any rights it might possess to have those matters litigated in a court or jury trial. By becoming a party to this Agreement, each Party is giving up its judicial rights to discovery and appeal except to the extent that they are specifically provided for under this Agreement. If any Party refuses to submit to arbitration after agreeing to this provision, that Party may be compelled to arbitrate under federal or state law. By becoming a party to this Agreement, each Party confirms that its agreement to this arbitration provision is voluntary. XIV.8 Remedies. In the event of any actual or prospective breach or default of this Agreement by any Party, the other Parties will be entitled to seek equitable relief, including remedies in the nature of injunction and specific performance (without being required to post a bond or other security or to establish any actual damages). In this regard, the Parties acknowledge that they will be irreparably damaged in the event this Agreement is not specifically enforced, since (among other things) the Interests are not readily marketable. All remedies under this Agreement are cumulative and not exclusive, may be exercised concurrently and nothing in this Agreement will be deemed to prohibit or limit any Party from pursuing any other remedy or relief available at law or in equity for any actual or prospective breach or default, including the recovery of damages. XIV.9 Severability. The provisions of this Agreement are severable and in the event that any provision of this Agreement is determined to be illegal, invalid or unenforceable in any respect by a court of competent jurisdiction, the remaining provisions of this Agreement will not be affected, but will, subject to the discretion of that court, remain in full force and effect, and any illegal, invalid or unenforceable provision will be deemed, without further action on the part of the Parties, amended and limited to the extent necessary to render that provision, as so amended and limited, legal, valid and enforceable, it being the intention of the Parties that this Agreement and each provision will be legal, valid and enforceable to the fullest extent permitted by applicable law. XIV.10 Counterparts. This Agreement may be executed in counterparts, each of which will be deemed an original, but all of which together will constitute one and the same agreement. A facsimile, PDF or DocuSign (or similar service) signature will be deemed an original. The Parties hereby Consent to transact business with the Company and each of the other via electronic signature (including via DocuSign, eSignLive, or a similar service). Each Party understands and agrees that their signature page may be disassembled and attached to the final version of this Agreement. XIV.11 IRS Circular 230 disclosure. Any discussion of United States federal tax issues contained in this Agreement, or concerning the investment in the Company, by the Company, Administrative Member, and their respective counsel, is not intended or written to be relied on by the Parties for purpose of avoiding penalties imposed under the Code. Each Party should seek advice from an independent tax adviser based on their particular circumstances. XIV.12 Further Assurances. Each Party shall promptly execute, deliver, file or record those agreements, instruments, certificates and other documents and take other actions as the Administrative Member may reasonably request or as may otherwise be necessary or proper to carry out the terms and provisions of this Agreement and to consummate and perfect the transactions contemplated hereby. XIV.13 Assignment. The rights, interests or obligations of a Party may not be assigned by such Party except in accordance with a Transfer permitted by Article VIII. Any purported assignment without such Consent will be null and void ab initio. XIV.14 Binding Effect. This Agreement will be binding upon and inure to the benefit of the Parties and their respective legal representatives, successors and permitted assigns. This Agreement is not intended, and will not be deemed, to create or confer any right or interest for the benefit of any Person not a party to this Agreement. XIV.15 Titles and Captions. The titles and captions of the Articles and Sections of this Agreement are for convenience of reference only and do not in any way define or interpret the intent of the Parties or modify or otherwise affect any of the provisions hereof and shall not have any effect on the construction or interpretation of this Agreement. XIV.16 Construction. This Agreement will not be construed against any party by reason of that party having caused this Agreement to be drafted. XIV.17 Entire Agreement. This Agreement, the Subscription Agreements of each Member and any side letter with a Member constitutes the entire understanding and agreement among the Parties and supersedes all prior and contemporaneous understandings and agreements whether written or oral. The Administrative Member and the Company and any Series may enter into side letters with any Member or prospective Member which contain terms different from those in this Agreement or amend and supplement provisions of this Agreement as it applies to such Member. In the event of any inconsistency between the terms of this Agreement and the terms of any side letter, the terms of the side letter shall control. (Signature Page Follows) IN WITNESS WHEREOF, the undersigned has executed this Agreement effective as of the Effective Date. COMPANY: [FULL ENTITY NAME], a Delaware limited liability company By: Name: Title: Administrative Member IN WITNESS WHEREOF, the undersigned has executed this Agreement effective as of the Effective Date or as of the date of such Member’s Closing. ADMINISTRATIVE MEMBER: Name: [Print Administrative Member’s Name]Date:**____** Member Signature Page The undersigned Member hereby executes the Limited Liability Company Operating Agreement of the Company, dated as of the Effective Date, and hereby authorizes this signature page to be attached to a counterpart of that document executed by the Administrative Member of the Company. (Print Name of Member) Dated: **__**(Signature of Member or Authorized Signatory) Exhibit A FORM OF SUBSCRIPTION AGREEMENT Exhibit B SERIES ADDENDUM to Limited Liability Company Agreement of [Insert Name of LLC ] (the “LLC Agreement”) Name of Series: Date Established: Members, Addresses, Capital Contributions, and Percentage Interests: As set forth on the Interest Register Objective / Purpose: Investments: Description of Assets: Additional Capital Contribution Requirements (if any): Distribution Policies (if different that those set forth in the LLC Agreement): Exhibit C CERTIFICATE OF REGISTERED SERIES (see attached) CERTIFICATE OF REGISTERED SERIES OF LIMITED LIABILITY COMPANY This Certificate of Registered Series is being filed pursuant to Section 18-218 of the Delaware Limited Liability Company Act, 6 Del. C. §§ 18-101 et seq. (the “Act”), to form a registered series of a limited liability company pursuant to the Act. The undersigned, being duly authorized to execute and file this Certificate of Registered Series, does hereby certify as follows: The name of the limited liability company is [Name of LLC ]. The name of the registered series is [Name of LLC ] – [Name of Series]. (Signature Page Follows) IN WITNESS WHEREOF, the undersigned has duly executed this Certificate of Registered Series. ____________________________ Name: Authorized Person Available from Syndicate","keywords":""},{"title":"Standalone LLC","type":0,"sectionRef":"#","url":"user/legal/Resources/standalone-llc","content":"Standalone LLC Standalone LLCSource LIMITED LIABILITY COMPANY AGREEMENT [ENTITY NAME]NEITHER THE UNITED STATES SECURITIES AND EXCHANGE COMMISSION NOR ANY STATE REGULATORY AUTHORITY HAS APPROVED OR DISAPPROVED THIS LIMITED LIABILITY COMPANY AGREEMENT (THIS “AGREEMENT”) OR THE LIMITED LIABILITY COMPANY INTERESTS (THE “INTERESTS”) OR THE MERITS OF ACQUIRING INTERESTS PROVIDED FOR HEREIN OR THE MERITS OF ACQUIRING INTERESTS. ANY REPRESENTATION TO THE CONTRARY IS UNLAWFUL. THE INTERESTS HAVE NOT BEEN REGISTERED UNDER THE SECURITIES ACT OF 1933, AS AMENDED (THE “SECURITIES ACT”), OR THE SECURITIES LAWS OF ANY STATE. THE INTERESTS ARE NOT INTENDED TO BE SECURITIES UNDER THE SECURITIES ACT OR UNDER ANY STATE SECURITIES LAWS. TO THE EXTENT THE INTERESTS ARE DEEMED TO BE SECURITIES UNDER THE SECURITIES ACT, THEY ARE BEING OFFERED AND SOLD IN RELIANCE UPON EXEMPTIONS FROM THE REGISTRATION REQUIREMENTS OF THE SECURITIES ACT AND THOSE STATES. ANY TRANSFER OR RESALE OF THE INTERESTS IS FURTHER SUBJECT TO RESTRICTIONS, THE TERMS AND CONDITIONS OF WHICH ARE SET FORTH IN THIS AGREEMENT. Note to User: You acknowledge and agree that the making available of this document to you by Syndicate Inc. shall not create any confidential or special relationship between you and Syndicate Inc. or its affiliates (collectively, “Syndicate”) and does not constitute the provision of legal advice or other professional advice by Syndicate or its legal counsel. You should seek advice from an attorney licensed in the relevant jurisdiction(s), as well as a tax professional, before relying on this template document. Additionally, the information provided in this document, any subscription agreement or otherwise by Syndicate does not constitute tax advice. Any discussion of tax matters is not intended or written to be used, and cannot be used or relied on, for the purpose of tax planning or avoiding penalties under the Internal Revenue Code (or equivalent in the relevant jurisdiction) or promoting, marketing or recommending to another party any transaction or matter. You further agree and acknowledge that this document, any subscription agreement or any other document otherwise provided by Syndicate has not been prepared with your specific circumstances in mind, may not be suitable for use in your personal circumstances. Any reliance on this document, any subscription agreement or anything otherwise provided by Syndicate or any information contained therein is at your sole risk and you assume all losses and liability that may result. Review all documents carefully for accuracy before using them. There may be BRACKETED TEXT requiring your attention. THIS TEMPLATE IS FOR USE ONLY BY AN INVESTMENT CLUB WITH INDIVIDUALS AND NOT ENTITIES AS MEMBERS. SYNDICATE PROVIDES THESE TERMS ON AN “AS IS” BASIS, AND SPECIFICALLY DISCLAIMS ALL WARRANTIES, TERMS, REPRESENTATIONS AND CONDITIONS WHETHER EXPRESS, IMPLIED, OR STATUTORY, AND INCLUDING ANY WARRANTIES, TERMS, REPRESENTATIONS AND CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, OR NONINFRINGEMENT. LIMITED LIABILITY COMPANY AGREEMENT[FULL ENTITY NAME] This limited liability company agreement is made as of [DATE] (the “Effective Date”) by and among the Members identified on the signature pages hereto and those Persons who have or may become parties to this Agreement in the future, in accordance with the terms of this Agreement (collectively the “Parties”) of the Company. In consideration of the mutual covenants in this Agreement the Parties agree as follows: ARTICLE I DEFINITIONS Definitions. When used in this Agreement, the following terms have the meanings specified in this Article I: “Account Address” means a public key address on the Designated Blockchain Network that is uniquely associated with a single private key, and at which no smart contract has been deployed. “Act” means the Delaware Limited Liability Company Act, Section 18-101, et seq., as it may be amended from time to time and any successor to said law. “Additional Capital Contributions” has the meaning set forth in Section 4.5(d). “Administrative Member” means [Administrative Member Name] or such other Person as may be appointed as a replacement Administrative Member pursuant to Section 5.1(b). For the avoidance of doubt, the Administrative Member is a Member of the Company. “Advance” has the meaning set forth in Section 4.5(c). “Affiliate” of another Person means (a) a Person directly or indirectly (through one or more intermediaries) controlling, controlled by or under common control with that other Person; (b) a Person owning or controlling 10% or more of the outstanding voting securities or beneficial interests of that other Person; or (c) an officer, Administrative Member, director, partner or member of that other Person. For purposes of this Agreement, “control” of a Person means the possession, directly or indirectly, of the power to direct the management and policies of that Person, whether through the ownership of voting securities, by contract or otherwise. For the avoidance of doubt, no Member will be deemed, solely by virtue of that membership, to be an Affiliate of the Company. “Agreement” means this limited liability company agreement of the Company, as amended from time to time. “Arbitration Location” means [San Francisco, California]. “Attorney” has the meaning specified in Section 13.1. “Business Day” means any day other than Saturday, Sunday, any day which is a federal legal holiday in the United States or any other day on which commercial banks in New York, New York are authorized or required by law to remain closed. “Capital Account” of a Member means the capital account of the Member determined in accordance with Section 3.4 in this Agreement. “Capital Call” has the meaning set forth in Section 4.5(d). “Capital Contribution” of a Member means the total amount of cash and other assets contributed (or deemed contributed under Section 1.7041(b)(2)(iv)(d) of the Treasury Regulations) to the Company by that Member, net of liabilities assumed or to which the assets are subject. “Certificate of Formation” means the Certificate of Formation of the Company, as amended and restated from time to time, filed with the Office of the Secretary of State of the State of Delaware pursuant to the Act. “Claim” means any past, present or future dispute, claim, controversy, demand, right, obligation, liability, action or cause of action of any kind or nature. “Closing” means the date a Member is admitted to the Company as a Member or the Commitment of a Member is increased (as agreed to by such Member and the Administrative Member). “Closing Date” means the date of a Closing as determined by the Administrative Member. “Closing Conditions” means the conditions of the Closing, as determined by the Administrative Member. “Code” means the Internal Revenue Code of 1986, as amended, from time to time. “Commitment” has the meaning set forth in Section 3.1. “Company” means [Full Entity Name]. “Company Minimum Gain” means the “partnership minimum gain” of the Company computed in accordance with the principles of Sections 1.7042(b)(2) and 1.704-2(d) of the Treasury Regulations. “Confirmation” of a transaction shall be deemed to have occurred if and only if such transaction has been recorded in accordance with the Consensus Rules in a valid block whose hashed header is referenced by at least [ten] subsequent valid blocks on the Designated Blockchain. “Consensus Attack” means an attack that: (a) is undertaken by or on behalf of a block producer who controls, or group of cooperating block producers who collectively control, a preponderance of the means of block production on the Designated Blockchain Network; and (b) has the actual or intended effect of: (i) reversing any transaction made to or by the Designated Smart Contract after Confirmation of such transaction, including any “double spend” attack having or intended to have such effect; or (ii) preventing inclusion in blocks or Confirmation of any transaction made to or by the Designated Smart Contract, including any “censorship attack,” “transaction withholding attack” or “block withholding attack” having or intended to have such effect. “Consensus Rules” means the rules for transaction validity, block validity and determination of the canonical blockchain that are embodied in the Designated Client. “Consent” means the approval of a Person to do the act or thing for which the approval is solicited, or the act of granting the approval, as the context may require. “Contract” means any: (a) written, oral, implied by course of performance or otherwise or other agreement, contract, understanding, arrangement, settlement, instrument, warranty, license, insurance policy, benefit plan or legally binding commitment or undertaking; or (b) any representation, statement, promise, commitment, undertaking, right or obligation that may be enforceable, or become subject to an Order directing performance thereof, based on equitable principles or doctrines such as estoppel, reliance, or quasi-contract. “Contributing Member” has the meaning set forth in Section 4.5(e). “Covered Losses” has the meaning set forth in Section 11.3. “Covered Person” means the Administrative Member, the Partnership Representative, the Liquidating Trustee, any officer of the Company, and their respective Affiliates. “Deadline” has the meaning set forth in Section 4.5(d). “Designated Blockchain” means at any given time, the version of the digital blockchain ledger commonly known as “[Ethereum]” that at least a majority of nodes running the Designated Client recognize as canonical as of such time. For the avoidance of doubt, the “Designated Blockchain” does not refer to the digital blockchain ledger commonly known as “Ethereum Classic” or any other blockchain ledgers from which or to which the Designated Blockchain has been “forked” or “split”. “Designated Blockchain Network” means the Ethereum mainnet (networkID:1, chainID:1), as recognized by the Designated Client. “Designated Client” means the Official Go Ethereum client available at https://github.com/ethereum/go-ethereum. “Designated Smart Contract” means the smart contract deployed at address [____] on the Designated Blockchain. “Digital Assets” means tokens, cryptocurrencies, and other digital assets the record of which is primarily stored in a distributed ledger system utilizing cryptographic verification. “Disability” of an individual means the incapacity of the individual to engage in any substantial gainful activity with the Company by reason of any medically determinable physical or mental impairment that reasonably can be expected to last for a continuous period of not less than 12 months as determined by a competent physician chosen by the Company and Consented to by the individual or his legal representative, which Consent will not be unreasonably withheld, conditioned or delayed. “Distributable Cash” at any time means that amount of the cash then on hand or in bank accounts of the Company which the Administrative Member determines is legally available for Distribution, taking into account (a) the amount of cash required for the payment of all current expenses, liabilities and obligations of the Company and (b) the amount of cash which the Administrative Member deems necessary or appropriate to establish reserves for the payment of future expenses, liabilities, or obligations, including liabilities which may be incurred in litigation and liabilities undertaken pursuant to the indemnification provisions of this Agreement. “Distributed Subject Property” means any asset, right or property that was once Subject Property and has been distributed to a Member. “Distribution” means the transfer of money or property by the Company to one or more Members with respect to their Interests, without separate consideration. “Distribution Expenses” has the meaning set forth in Section 7.1(c). “Effective Date” has the meaning set forth in the initial paragraph of this Agreement. “ERISA” has the meaning set forth in Section 8.4(d). “Exception Handling Addendum” has the meaning set forth in Section 2.12(b)(3)(A). “Exception Handling Proposal” has the meaning set forth in Section 2.12(b)(1)(C). “Exception Notice” has the meaning set forth in Section 2.12(b)(1). “Exception Objection Notice” has the meaning set forth in Section 2.12(b)(3)(C). “Fair Market Value” of any property means, subject to Section 3.4(b), the amount that would be paid for that property in cash by a hypothetical willing buyer to a hypothetical willing seller, each having knowledge of all relevant facts and neither being under a compulsion to buy or sell, as determined by the Administrative Member in good faith; provided, however, the Fair Market Value of any Digital Asset shall be the price in US Dollars per token of the relevant Digital Asset as set forth at 5:00 pm Pacific Time on the day immediately preceding the applicable valuation date on coinmarketcap.com (or, if not valued on coinmarketcap.com, such other publicly available third party valuation website as the Administrative Member may reasonably select), if such price is available. “Family Members” means an individual who is a Member’s spouse, child, stepchild, son-in-law, daughter-in-law, father, or mother, including adoptive relationships. “Fiscal Year” means the Company's taxable year, which will be the taxable year ended December 31, or other taxable year as may be selected by the Administrative Member in accordance with applicable law. “Initial Closing” means the first Closing. “Initial Closing Date” means the date selected by the Administrative Member for the Initial Closing. “Interest” means with respect to each Member, as of any date, its fractional ownership of the membership interest in the Company which is expressed as a percentage, the numerator of which is that Member's then Capital Contributions and the denominator of which is the sum of the then Capital Contributions of all Members to the Company. A Member’s Interest represents the totality of the Member’s interests in the Company and the right of that Member to all benefits (including, without limitation, allocations of Net Income and Net Losses and the receipt of Distributions) to which a Member may be entitled pursuant to this Agreement and under the Act, together with all obligations of that Member to comply with the terms and provisions of this Agreement and the Act. “Interest Register” has the meaning specified in Section 2.8. “Investment” means an investment by the Company in a Digital Asset or a Portfolio Company Security. “Legal Order” means any restraining order, preliminary or permanent injunction, stay or other order, writ, injunction, judgment or decree that either: (a) is issued by a court of competent jurisdiction, or (b) arises by operation of applicable law as if issued by a court of competent jurisdiction, including, in the case of clause “(b)” an automatic stay imposed by applicable law upon the filing of a petition for bankruptcy. “Liquidating Trustee” means the Administrative Member (or its authorized designee) or, if there is none, a Person selected by a Majority in Interest to act as a liquidating trustee of the Company. “Liquidity Event Proceeds” means (a) the receipt by the Company of a material amount of cash, or non-cash assets that may readily be transferred or liquidated for cash, as set forth in Section 7.1, in respect of an Investment as a result of (i) the sale or other liquidation of such Investment; (ii) a Merger Event or a sale of all or substantially all of the assets, of a Portfolio Company; (iii) the bankruptcy, liquidation or dissolution of a Portfolio Company or (b) in the case of a Portfolio Security, the determination by the Administrative Member that such Portfolio Security is then freely or readily transferable by the holder thereof without restriction under applicable law and the documents governing the terms of such Portfolio Security or the Company’s investment therein. “Majority in Interest” means, at any time, a majority of the total Interests held by all Members in the Company. Except as otherwise expressly required under this Agreement, whenever in this Agreement the Members are permitted or required to vote on, approve, make a determination as to, or consent to any matter or proposed action, such vote, approval, determination or consent shall only require a Majority in Interest. “Material Adverse Exception Event” means that one or more of the following has occurred, is occurring or would reasonably be expected to occur: (a) a Consensus Attack adversely affecting the results or operations of the Designated Smart Contract; (b) the Designated Smart Contract having become inoperable, inaccessible or unusable, including as the result of any code library or repository incorporated by reference into the Designated Smart Contract or any other smart contract or oracle on which the Designated Smart Contract depends having become inoperable, inaccessible or unusable or having itself suffered a Material Adverse Exception Event, mutatis mutandis; (c) a material and adverse effect on the use, functionality or performance of the Designated Smart Contract as the result of any bug, defect or error in the Designated Smart Contract or the triggering, use or exploitation (whether intentional or unintentional) thereof (it being understood that for purposes of this clause “(iii)”, a bug, defect or error will be deemed material only if it results in a loss to a Party of at least 20 percent of the Subject Property); (d) any unauthorized use of an administrative function or privilege of the Designated Smart Contract, including: (i) any use of any administrative credential, key, password, account or address by a Person who has misappropriated or gained unauthorized access to such administrative credential, key, password, account or address or (ii) any unauthorized use of an administrative function or privilege by a Party or a representative of a Party; or (e) the Designated Smart Contract[, any of the Parties] or the Subject Property is subject to a Legal Order that prohibits the Designated Smart Contract [(or that, if the Designated Smart Contract were a Person, would prohibit the Designated Smart Contract)] from executing any function or operation it would otherwise reasonably be expected to execute. “Member” means any Person admitted as a Member pursuant to Section 4.1 that has not ceased to be a Member pursuant to this Agreement or the Act. “Member Minimum Gain” means the “partner nonrecourse debt minimum gain” of the Company computed in accordance with the principles of Section 1.7042(i)(3) of the Treasury Regulations. “Member Nonrecourse Deductions” means the “partner nonrecourse deductions” of the Company computed in accordance with the principles of Sections 1.704-2(i)(1) and (2) of the Treasury Regulations. “Merger Event” means a Portfolio Company has merged or consolidated with or into any other entity, and after giving effect to that transaction, the equity owners of a Portfolio Company immediately prior to that transaction ceased to own at least a majority of the equity interest of the surviving or resulting entity. “Negotiation Period” has the meaning set forth in Section 2.12(b)(3)(D). “Net Fair Market Value” of an asset means its Fair Market Value net of any liability secured by the asset that the Member or the Company, as applicable, assumes or takes subject to. “Non-Contributing Member” has the meaning set forth in Section 4.5(e). “Nonrecourse Deductions” means the “nonrecourse deductions” of the Company computed in accordance with Section 1.704-2(b) of the Treasury Regulations. “Net Income” and “Net Loss” means, for each Fiscal Year, the taxable income and taxable loss, as the case may be, of the Company for that Fiscal Year determined in accordance with federal income tax principles, including items required to be separately stated, taking into account income that is exempt from federal income taxation, items that are neither deductible nor chargeable to a capital account and rules governing depreciation and amortization, except that in computing taxable income or taxable loss, the “tax book” value of an asset will be substituted for its adjusted tax basis if the two differ, and any gain, income, deductions or losses specially allocated under Article VI will be excluded from the computation. Any adjustment to the “tax” book value of an asset pursuant to Section 1.704-1(b)(2)(iv)(e), (f) and (g) of the Treasury Regulations will be treated as Net Income or Net Loss from the sale of that asset. “Partnership Representative” means the Person designated pursuant to Section 9.4. “Permitted Transferee” has the meaning set forth in Section 8.2. “Person” means any human, robot, bot, artificial intelligence, corporation, partnership, association or other individual or entity recognized as having the status of a person under the law. “Portfolio Company” means the issuer of a Portfolio Company Security. “Portfolio Company Securities” means debt or equity securities acquired by the Company in accordance with this Agreement. Any non-fungible token held by the Company shall not be deemed a Portfolio Company Security. “Proceeding” has the meaning set forth in Section 11.3. “Receiving Party” has the meaning set forth in Section 2.12(b)(1). “Registered Agent” means the registered agent appointed by the Company as the Company’s registered agent for the service of process on the Company in the State of Delaware. “Sending Party” has the meaning set forth in Section 2.12(b)(1). “Shortfall Amount” has the meaning set forth in Section 4.5(e). “Standstill Period” has the meaning set forth in Section 2.12(b)(2). “Subject Property” means the property of the Company [that is the subject of the Designated Smart Contract]. “Subscription Agreement” means a Subscription Agreement in the form of Exhibit A or such other form as is determined by the Administrative Member to be acceptable. “Syndicate” means Syndicate Inc., a Delaware corporation. “Transfer” means, with respect to an Interest, the sale, assignment, transfer, other disposition, pledge, hypothecation or other encumbrance, whether direct or indirect, voluntary, involuntary or by operation of law, and whether or not for value, of that Interest. Transfer includes any transfer by gift, devise, intestate succession, sale, operation of law, upon the termination of a trust, because of or in connection with any property settlement or judgment incident to a divorce, dissolution of marriage or separation, by decree of distribution or other court order or otherwise. “Treasury Regulations” means the income tax regulations, including temporary regulations, promulgated by the United States Treasury Department under the Code, as such regulations may be amended from time to time (including corresponding provisions of superseding regulations). “40 Act” has the meaning set forth in Section 8.4(c). ARTICLE II ORGANIZATIONAL MATTERS II.1 Name. The name of the Company is set forth on the cover page of this Agreement. The business of the Company may be conducted under that name or under any other name that the Members may determine. II.2 Term. The Parties hereto as of the Effective Date, by execution of this Agreement and the filing of the Certificate of Formation, hereby form the Company as a limited liability company under and pursuant to the Act as of the Effective Date. The term of the Company commenced on the Effective Date and will continue in full force and effect until the Company is terminated pursuant to Article X. II.3 Member Information. Each Member may be required by the Company, at any time, to provide basic Know Your Customer (KYC) information, such as copy of national ID, name, proof of address, Form W-9, among others, in the event where: (a) the Company desires to obtain a bank account or (b) the Company is legally required to provide such information. II.4 Office and Agent. The Company will maintain its principal office at a place as the Administrative Member may determine from time to time. The Administrative Member will notify the Members of any change in principal office of the Company. The Registered Agent and the address of the registered office of the Company in the State of Delaware as of the Effective Date is set forth in the Certificate of Formation. The Administrative Member may change the identity of the Registered Agent and the Company’s registered office in accordance with the Act. The Administrative Member will notify the Members of any change in the identity of the Registered Agent or the location of the Company’s registered office in the State of Delaware. II.5 Purpose of the Company. The Company has been created to [____] and the purpose of the Company shall be to engage in the foregoing and in any and all lawful activities and transactions as may be necessary, advisable, or desirable, as determined by the Administrative Member, in its sole discretion, to carry out the foregoing or any reasonably related activities. II.6 Intent. It is the intent of the Members that the Company will be treated as a “partnership” for federal income tax purposes. It also is the intent of the Members that the Company not be operated or treated as a “partnership” for purposes of Section 303 of the United States Bankruptcy Code. II.7 Qualification. The Administrative Member shall cause the Company to qualify to do business in each jurisdiction where qualification is required. The Administrative Member has the power and authority to execute, file and publish all certificates, notices, statements or other instruments necessary to permit the Company to conduct business as a limited liability company in all jurisdictions where the Company elects to do business. II.8 Interest Register. The Administrative Member will maintain a register (the (“Interest Register”) that sets forth the name, contact information, Commitment, Capital Contributions and Interest of each Member. The Interest Register will be available to each Member at request of such Member. Each Member shall promptly provide, upon request, the Administrative Member with the information required to be set forth for that Member on the Interest Register and shall promptly notify the Administrative Member of any change to that information. The Administrative Member, or a designee of the Administrative Member, shall update the Interest Register from time to time as necessary to accurately reflect the information therein as known by the Administrative Member, including, without limitation, admission of new Members, but no update will constitute an amendment for purposes of Section 14.1. Any reference in this Agreement to the Interest Register will be deemed to be a reference to the Interest Register as amended and in effect from time to time. II.9 Maintenance of Separate Existence. The Company will do all things necessary to maintain its limited liability company existence separate and apart from the existence of each Member, any Affiliate of a Member and any Affiliate of the Company, including maintaining the Company’s books and records on a current basis separate from that of any Affiliate of the Company or any other Person. In furtherance of the foregoing, the Company must (a) maintain or cause to be maintained by an agent under the Company’s control physical possession of all its books and records (including, as applicable, storage of electronic records online or in “cloud” services), (b) account for and manage all of its liabilities separately from those of any other Person, and (c) identify separately all its assets from those of any other Person. II.10 Title to Assets. All assets of the Company will be deemed to be owned by the Company as an entity, and no Member, individually, will have any direct ownership interest in those assets. Each Member, to the extent permitted by applicable law, hereby irrevocably waives its rights to a partition of the assets of the Company and, to that end, agrees that it will not seek or be entitled to a partition of any assets, whether by way of physical partition, judicial sale or otherwise. II.11 Events Affecting a Member. The death, bankruptcy, withdrawal, insanity, incompetency, temporary or permanent incapacity, liquidation, dissolution, reorganization, merger, sale of all or substantially all the stock or assets of, or other change in the ownership or nature of a Member will not dissolve the Company and, upon the happening of any such event, the affairs of the Company will be continued without dissolution by the remaining Members or any successor entities thereto. II.12 Effects of Designated Smart Contract. (a) General Binding Effect. (1) Smart Contract Results Binding. Subject to Section 2.12(b) the results of operation of the Designated Smart Contract shall be determinative of the rights and obligations of, and shall be final, binding upon and non-appealable by, each of the Parties with respect to the Subject Property. (2) Smart Contract Trumps Other Contracts. Except as set forth in Section 2.12(b), if there is any conflict or inconsistency between: (A) this Agreement or any other Contract between or involving the Parties; and (B) any Contract created or implied by, or embodied in, the machine, assembly or other code, or the results of operation, of the Designated Smart Contract, then the Contract referred to in the preceding clause “(B)” shall prevail over the Contract referred to in the preceding clause “(A).” (3) Prohibition of Transfers. Each Party shall not, without the prior written consent of all of the other Parties, directly or indirectly take or attempt to take any of the following actions: (A) convey any of the Subject Property other than such Party’s Distributed Subject Property it being understood that for a Party to “convey” any of the Subject Property means for such Party to or enter into any Contract that may obligate such Party to: (1) create, perfect or enforce any lien on, (2) pledge, hypothecate, grant an option or derivative security with respect to or (3) convey, sell, transfer or dispose of such Subject Property or any right or interest of a Party to or in such Subject Property; or (B) cause, encourage or facilitate, a Material Adverse Exception Event. (b) Exception Handling. Notwithstanding anything to the contrary set forth in Section 2.12(a), if there is a Material Adverse Exception Event, then the rules and procedures set forth in this Section 2.12(b) shall determine the rights and obligations of the Parties relating to the Subject Property. (1) Exception Notice. If any Party becomes aware that there is a Material Adverse Exception Event, such Party (the “Sending Party”) shall deliver to the other Parties (the “Receiving Parties”) a notice (an “Exception Notice”) signed by such Party: (A) certifying that the Sending Party believes in good faith that there is a Material Adverse Exception Event; (B) describing in reasonable detail the events, facts, circumstances and reasons forming the basis of such belief; (C) describing in reasonable detail any proposal by the Sending Party of the actions to be taken, the agreements to be entered into, and the remedies to be sought by the Parties in response to the Material Adverse Exception Event (an “Exception Handling Proposal”); (D) including copies of any written evidence or other material written information, and summaries of any other evidence, relevant to, and material for the consideration of, the Material Adverse Exception Event and the other matters referred to in the Exception Notice; and (E) containing a representation by the Sending Party, made to and for the benefit of the Receiving Parties with the understanding that the Receiving Party will rely thereon, that, to the Sending Party’s knowledge, the certification and statements made pursuant to the preceding clauses “(A)” and “(B)” are accurate as of the date of the Exception Notice, and, considered collectively, do not contain any untrue statement of a material fact or omit to state any material fact necessary in order to make such statements, in light of the circumstances in which they were made, not misleading. (2) Exception Standstill. During the period commencing upon the earlier of any Party becoming aware that there is a Material Adverse Exception Event or being delivered an Exception Notice and ending with the Parties entering into an Exception Handling Addendum, agreeing that no Material Adverse Exception Event has occurred or receiving a final decision of an arbitrator in accordance with Section 2.12(b)(3) (the “Standstill Period”), such Party shall: (A) treat all of the Distributed Subject Property of such Party that may have been transferred to such Party as a result of the Material Adverse Exception Event as if it were Subject Property; and (B) deposit and maintain such Distributed Subject Property in a segregated Account Address to be treated, to the extent permitted by applicable legal requirements, as a custodial trust held for the benefit of the other Parties. (3) Determination of Exception Handling. (A) The term “Exception Handling Addendum” refers to an addendum to this Agreement approved by a Majority in Interest which sets forth a description of the Material Adverse Exception Event and the actions to be taken, the agreements to be entered into, and the remedies to be sought in response thereto. Each Exception Handling Addendum shall automatically and without further action of the Parties be deemed incorporated into and to form a part of this Agreement. (B) Notwithstanding Section 2.14(b)(3)(A), if the Sending Party has provided an Exception Handling Proposal, and no Receiving Party disputes the existence of the Material Adverse Exception Event described in the Exception Notice or objects to the terms of the Exception Handling Proposal included in the Exception Notice within [3] Business Days after delivery of the Exception Notice, then the Exception Handling Proposal shall be deemed to have been approved by all Parties as the Exception Handling Addendum. (C) If a Receiving Party disputes the existence of a Material Adverse Exception Event, or does not wish to accept all or any part of the Exception Handling Proposal included in the Exception Notice, if any, then the Receiving Party shall promptly (but in any event within [3] Business Days of delivery of the Exception Notice) deliver a written notice of such non-acceptance (an “Exception Objection Notice”) to the Sending Party and each other Receiving Party. The Exception Objection Notice shall include the same categories of information, statements, evidence and representations and warranties as would be required for an Exception Notice, mutatis mutandis, and the basis for the objection to the Exception Handling Proposal. (D) If any Receiving Party delivers a timely Exception Objection Notice, then during the continuous 30-day period beginning on the date such Exception Notice is delivered to the other Parties (the “Negotiation Period”), the Parties shall use commercially reasonable efforts to negotiate in good faith to agree upon the existence or non-existence of a Material Adverse Exception Event and the Exception Handling Addendum to be approved in response to such Material Adverse Exception Event. (E) If the Parties fail to reach an agreement resulting in an Exception Handling Addendum during the Negotiation Period (or a determination that no Material Adverse Exception Event has occurred), then any Party may initiate an arbitration action to resolve the issues in accordance with the procedures set forth in Section 14.7; provided the decision of the arbitrators shall include, among any other determinations, a determination of the treatment of any Distributed Subject Property and whether to extend, modify or terminate the covenants applying to the Distributed Subject Property during the Standstill Period. ARTICLE III MEMBERSHIP CAPITAL; CAPITAL ACCOUNTS III.1 Membership Capital. Upon each Closing, each participating Member shall make a Capital Contribution in an amount equal to its accepted Subscription Amount as set forth in its Subscription Agreement (its “Commitment”) in exchange for an Interest. III.2 No Further Capital Contributions. No Member will be required to make Capital Contributions in the aggregate in excess of that Member’s then accepted Commitment or lend money to the Company. III.3 In-Kind Contributions. In the sole discretion of the Administrative Member, Capital Contributions can be made via non-cash assets, such as Portfolio Company Securities or Digital Assets. Non-cash assets will be valued at their Net Fair Market Value on the date of contribution. III.4 Capital Accounts. (a) A separate capital account will be established and maintained for each Member (“Capital Account”) reflecting each Member’s Interest in the Company. (b) The Capital Accounts of Members will be maintained in accordance with the rules of Section 704(b) of the Code and the related Treasury Regulations (including Section 1.704-1(b)(2)(iv)). The Capital Accounts will be adjusted by the Administrative Member upon an event described in Sections 1.704-1(b)(2)(iv)(e) and (f)(5) of the Treasury Regulations in the manner described in Sections 1.704-1(b)(2)(iv)(e), (f) and (g) of the Treasury Regulations if the Administrative Member determines that the adjustments are necessary or appropriate to reflect the relative economic interests of the Members in the Company, and at other times as the Administrative Member may determine is necessary or appropriate to reflect the relative economic interests of the Members. In determining Fair Market Value of an asset, the provisions of Section 1.704-1 of the Treasury Regulations shall be applied. (c) If any Interest is Transferred pursuant to the terms of this Agreement, the transferee will succeed to the Capital Account and the respective Interest of the transferor to the extent the Capital Account and Interest is attributable to the Interests so Transferred. III.5 Interest on Capital. No Member will be entitled to receive any interest on its Capital Contributions or Capital Account. III.6 Return of Capital Contributions. Except as otherwise provided in this Agreement, no Member has any right to withdraw or reduce its Capital Contribution or Commitment. III.7 No Priorities of Members. Subject to the provisions of this Agreement, no Member will have a priority over any other Member as to any Distribution, whether by way of return of capital or by way of profits, or as to any allocation of Net Income, Net Loss or special allocations. ARTICLE IV MEMBERS IV.1 Admission of Members. (a) Except in connection with a Transfer permitted pursuant to Article VIII, only individuals will be admitted to the Company as Members. The individuals who, as of the Initial Closing Date, have supplied the Company with a signed, fully completed Subscription Agreement, which has been accepted by the Administrative Member, together with an executed signature page to this Agreement and any other information that may be required pursuant to Section 12.3 (as determined in good faith by the Administrative Member) shall be admitted as Members effective as of the Initial Closing Date. [With the consent of a Majority in Interest or in the case of a Transfer permitted by Article VIII, with the consent of the Administrative Member pursuant to Section 8.3] additional Members may be admitted to the Company and existing Members may increase their Commitments from time to time on such date and upon such terms and conditions, including Closing Conditions, as determined by the Administrative Member; provided no Person shall be admitted as a Member unless and until such Person has supplied the Company with a signed, fully completed Subscription Agreement, which has been accepted by the Administrative Member, together with an executed signature page to this Agreement and any other information that may be required pursuant to Section 12.3 (as determined in good faith by the Administrative Member). (b) Notwithstanding Section 4.1(a), the Company will be deemed “closed”, such that no additional Members may be admitted except in connection with a Transfer permitted by Article VIII, or increased Commitments are no longer accepted following the earliest of (i) the date the Administrative Member closes the Company, (ii) the maximum number of Members is reached (as specified by the Administrative Member), and (iii) the set maximum amount of Capital Contributions to the Company is reached (as specified by the Administrative Member). This can be seen when the closed Syndicate event is emitted for a given Syndicate address within the Syndicate smart contract. IV.2 Nature of Ownership. Interests held by Members constitute personal property. IV.3 Dealing with Third Parties. Unless admitted as a Member as provided in this Agreement, no Person will be considered a Member. The Company and the Administrative Member need deal only with Persons admitted as Members. The Company and the Administrative Member will not be required to deal with any other Person (other than with respect to Distributions to assignees pursuant to assignments in compliance with Article VIII) merely because of an assignment or transfer of any Interest to that Person whether by reason of the Disability of a Member or otherwise; provided, however, that any Distribution by the Company to the Person shown on the Interest Register as a Member or to its legal representatives, or to the assignee of the right to receive such Member’s Distributions as provided in this Agreement, will relieve the Company and the Administrative Member of all liability to any other Person who may be interested in that Distribution by reason of any other assignment by the Member or by reason of its Disability, or for any other reason. IV.4 Members are not Agents. Pursuant to Article V of this Agreement, the management of the Company is vested in the Members as a group. No Member acting alone has any right to direct the management of the Company except as expressly authorized by the Act or this Agreement. Except as expressly authorized in this Agreement or in writing by a Majority in Interest, no Member, acting solely in the capacity of a Member, is an agent of the Company, nor does any Member, have any power or authority to bind or act on behalf of the Company in any way, to pledge its credit, to execute any instrument on its behalf or to render it liable for any purpose. IV.5 Expenses. (a) The Company shall maintain reserves from the assets of the Company (including Capital Contributions made by the Members) for the payment of the expenses, liabilities and obligations of the Company, including for taxes, contingent liabilities or probable losses or foreseeable expenses, in such accounts and in such amounts that the Administrative Member deems necessary or appropriate, subject to increase or reduction at the Administrative Member’s sole discretion. All organizational and operating costs and expenses of the Company will be paid by the Company (excluding any regulatory expenses, or other costs incurred by the Administrative Member in connection with its daily operations, including but not limited to salary and other payments to employees of the Administrative Member). (b) The Administrative Member will, to the extent of available funds of the Company, pay or cause to be paid, all Company operating costs and expenses incurred by the Company or on its behalf, including (i) out-of-pocket expenses that are associated with disposing of Investments, including transactions not completed; (ii) extraordinary expenses, if any (such as certain valuation expenses, litigation and indemnification payments); (iii) interest on borrowed money, investment banking, financing and brokerage fees and expenses, if any; (iv) expenses associated with the Company’s tax compliance costs, tax returns and Schedules K-1, custodial, legal and insurance expenses, any taxes, fees or other governmental charges levied against the Company; (v) attorneys’ and accountants’ fees and disbursements on behalf of the Company; (vi) insurance, regulatory or litigation expenses (and damages); (vii) expenses incurred in connection with the winding up or liquidation of the Company; (viii) expenses incurred in connection with any amendments to the constituent documents of the Company, and related entities; (ix) except as set forth in Section 4.5(a), all out of pocket costs and expenses incurred by the Administrative Member in connection with its services as such to the Company; and (x) expenses incurred in connection with the distributions to the Members and in connection with any meetings of the Members called by the Administrative Member. (c) If the Administrative Member determines at any time, or from time to time, that the available funds of the Company (after the drawdown of any then unfunded Commitments) are not sufficient to pay the Company’s operating costs and expenses, then the Administrative Member may, but is not required to, loan its own funds to the Company for the payment of such costs and expenses (an “Advance”). The Company shall reimburse the Administrative Member for any such Advance together with interest on such Advance from the date of such Advance at an annual rate of [10%]. Any such Advance, together with the interest thereon, shall be an expense of the Company and shall be paid by the Company prior to making any further Distributions. Payments by the Company shall be applied first to accrued interest on and then to the principal of such Advance. The determination to apply funds of the Company to the payment of such Advance shall be at the Administrative Member’s discretion. For the avoidance of doubt, an Advance by the Administrative Member will not constitute a Capital Contribution by the Administrative Member. (d) If the Administrative Member does not make an Advance, then the Administrative Member shall notify the Members and describe in reasonable detail the operating costs and expenses requiring additional Company funds. Such notification shall also state the aggregate amount of additional Capital Contributions (“Additional Capital Contributions”) being requested from the Members and each Member’s pro rata share of such amount. (such a request, a “Capital Call”) Within 15 days following the date of such Capital Call (the “Deadline”), each Member may, but is not obligated to, make an Additional Capital Contribution in an amount equal to its pro rata share (based on its Interest) of the aggregate amount of the Additional Capital Contributions requested by the Administrative Member. An Additional Capital Contribution made by a Member shall be treated as having been received on the later of the Deadline with respect to the applicable Capital Call or the date on which such Additional Capital Contribution is actually made. (e) If any Member (the “Non-Contributing Member”) fails to make any Additional Capital Contribution (or any portion thereof) requested by a Capital Call (a “Shortfall Amount”) by the Deadline, the Administrative Member shall notify each Member that is not a Non-Contributing Member in respect of such Capital Call (a “Contributing Member”) of the aggregate Shortfall Amount in writing, and each Contributing Member may elect to make a further Additional Capital Contribution in the amount of such Shortfall Amount (or a portion thereof). If more than one Contributing Member elects to make a further Additional Contribution, the Shortfall Amount shall be allocated to such Contributing Members pro rata based on their Interests, but not in excess of the actual Additional Capital Contribution such Contributing Member has elected to contribute. Such further Additional Capital Contributions shall be made within 15 days after the Deadline. (f) If the Company has insufficient funds to pay its operating costs and expenses after a Capital Call and any Advances, the Administrative Member, in its discretion, may sell assets of the Company without any Consent of the Members in order to pay the Company’s operating costs and expenses. IV.6 Nature of Obligations between Members. Except as otherwise required by applicable law, nothing contained in this Agreement will be deemed to constitute any Member, in that Member’s capacity as a Member, an agent or legal representative of any other Member or to create any fiduciary relationship between Members for any purpose whatsoever. Except as otherwise expressly provided in this Agreement, a Member has no authority to act for, or to assume any obligation or responsibility on behalf of, any other Member or the Company. IV.7 Status Under the Uniform Commercial Code. All Interests will be securities governed by Article 8 of the Uniform Commercial Code as in effect from time to time in the State of Delaware. The Interests are not evidenced by certificates and will remain not evidenced by certificates. The Company is not authorized to issue certificated Interests. The Company will record all Transfers of Members’ Interests made in accordance with Article VIII of this Agreement in the Interest Register. ARTICLE V MANAGEMENT AND CONTROL OF THE COMPANY V.1 Management. (a) Management of the Company is vested in the Members. Except for those matters delegated to the Administrative Member pursuant to this Agreement, the Members, acting by Majority in Interest (or such greater percentage specified in this Agreement with respect to a specified matter), have the exclusive management and control of the Company and its business and affairs, including all decisions related to the acquisition and disposition of Investments or otherwise required to be made by the Company as the holder of an Investment. Except as otherwise provided in this Agreement and subject to the provisions of the Act, the Administrative Member has all power and authority to take all actions necessary to execute the decisions made by a Majority in Interest or otherwise delegated to it under this Agreement. (b) A [Majority in Interest] of the Members may at any time remove the Person then serving as the Administrative Member. The Administrative Member may also at any time, upon not less than 30 days prior notice, resign as the Administrative Member. The Members, by Majority in Interest, may also appoint an alternate Administrative Member to act on behalf of the Company and the Members if the Administrative Member is temporarily unable to serve or is unwilling to serve in any particular circumstance. When so acting, the alternative Administrative Member shall have all the powers and authority delegated to the Administrative Member. Any vacancy in the position of the Administrative Member (whether from the removal, resignation or death of such Administrative Member or otherwise) shall be automatically filled by the then appointed alternate Administrative Member, or if none, by the Members acting by a Majority in Interest. (c) The Members may agree to (i) delegate any matters or actions authorized to be taken by the Members under this Agreement to the Administrative Member, specified Member(s) or third Persons and (ii) appoint any Persons, with titles as the Members may select, to act on behalf of the Company, with power and authority as the Members may delegate from time to time. Any delegation by the Members may be rescinded at any time by a Majority in Interest. If a Person is appointed as an officer of the Company, then, unless otherwise specified in such appointment, such Person shall have the authority and duties customarily held by an officer of a Delaware corporation with such title. (d) Third parties dealing with the Company or its assets shall not be required to investigate the authority of the Administrative Member or whether any approval of the Members is required or has been obtained with respect to any matter and may rely conclusively upon any certificate of the Administrative Member to the effect that it is authorized to and is acting on behalf of the Company as to any matter relating to the Company or its assets and Members. The Administrative Member shall have the authority to execute any agreements, instruments, documents and certificates on behalf of the Company as its authorized signatory and the signature of the Administrative Member, when acting pursuant to this Article V, will be sufficient to bind the Company. V.2 Duties and Obligations of the Administrative Member. In addition to the duties and services of the Administrative Member elsewhere in this Agreement, (a) The Administrative Member shall take all action that may be necessary or appropriate for the continuation of the Company’s valid existence and authority to do business as a limited liability company under the laws of the State of Delaware and of each other jurisdiction in which authority to do business is, in the judgment of the Administrative Member, necessary or advisable. (b) The Administrative Member shall prepare or cause to be prepared and shall file on or before the due date (or any extension) any federal, state or local tax returns required to be prepared or filed by the Company. (c) To the extent of available funds of the Company, the Administrative Member shall cause the Company to pay any taxes or other governmental charges levied against or payable by the Company; provided, however, that the Administrative Member will not be required to cause the Company to pay any tax so long as the Administrative Member or the Company is in good faith and by appropriate legal proceedings contesting the validity, applicability or amount the tax and the contest does not materially endanger any right or interest of the Company. (d) Notwithstanding any other provision of this Agreement or otherwise applicable provision of law or equity, whenever in this Agreement, the Administrative Member is permitted or required to make a decision (i) in its “sole discretion” or “discretion” or under a grant of similar authority or latitude, the Administrative Member will be entitled to consider only those interests and factors as it desires, including its own interests, and will, to the fullest extent permitted by applicable law, have no duty or obligation to give any consideration to any interest of or factors affecting the Company or the Members, or (ii) in its “good faith” or under another expressed standard, the Administrative Member shall act under that express standard and will not be subject to any other or different standards. Unless otherwise expressly stated, for purposes of this Section 5.2(d), the Administrative Member will be deemed to be permitted or required to make all decisions hereunder in its sole discretion. V.3 No Fiduciary Duty. To the fullest extent permitted by applicable law, no Member, including the Administrative Member when acting as such, owes any fiduciary duties of any kind whatsoever to the Company, or to any of the Members, including, but not limited to, the duties of due care and loyalty, whether those duties were established as of the date of this Agreement or any time hereafter, and whether established under common law, at equity or legislatively defined. It is the intention of the Members and the Company that those fiduciary duties be affirmatively eliminated to the fullest extent permitted by Delaware law, including the Act, and the Members hereby waive any rights with respect to those fiduciary duties. Notwithstanding the foregoing, the Members have the duties, liabilities and obligations expressly set forth in this Agreement. V.4 The Members May Engage in Other Activities. Subject to the terms of any other agreement between a Member and the Company, no Member (including the Administrative Member) is obligated to devote all of its time or business efforts to the affairs of the Company, provided that the Administrative Member shall devote the time, effort and skill as it determines in its sole discretion may be necessary or appropriate for the responsibilities delegated to it under this Agreement. Subject to the foregoing, any Member may have other business interests and may engage in other activities in addition to those related to the Company. The Members and their respective Affiliates may acquire or possess interests in a Portfolio Company and the interests may be of a different class or type, with different rights and preferences, than those held by the Company. Likewise, the Members and their respective Affiliates may acquire or possess interests in other companies or business ventures that are competitive with a Portfolio Company or the Company. Neither the Company nor any Member will have the right, by virtue of this Agreement, to share or participate in other investments or activities of any other Member or to the income derived therefrom. ARTICLE VI ALLOCATIONS OF NET INCOME AND NET LOSS VI.1 Allocation of Net Income and Net Loss. Except as otherwise provided in this Agreement, Net Income and Net Loss (including individual items of profit, income, gain, loss, credit, deduction and expense) of the Company will be allocated among the Members in a manner such that the Capital Account balance of each Member, immediately after making that allocation, is, as nearly as possible, equal (proportionately) to the Distributions that would be made to that Member pursuant to Section 10.4 if the Company were dissolved or terminated, its affairs wound up and its assets sold for cash equal to their Fair Market Value, all Company liabilities were satisfied (limited with respect to each nonrecourse liability to the Fair Market Value of the assets securing that liability), and the net assets of the Company were distributed in accordance with Section 10.4 to the Members immediately after making that allocation, adjusted for applicable special allocations, computed immediately prior to the hypothetical sale of assets. VI.2 Allocation Rules. In the event that Members are issued Interests on different dates, the Net Income or Net Loss allocated to the Members for each Fiscal Year during which Members receive Interests will be allocated among the Members in accordance with Section 706 of the Code, using any convention permitted by law and selected by the Administrative Member. For purposes of determining the Net Income, Net Loss and individual items of income, gain, loss credit, deduction and expense allocable to any period, Net Income, Net Loss and any other items will be determined on a daily, monthly or other basis, as determined by the Administrative Member using any method that is permissible under Section 706 of the Code and the Treasury Regulations. Except as otherwise provided in this Agreement, all individual items of Company income, gain, loss and deduction will be divided among the Members in the same proportions as they share Net Income and Net Loss for the Fiscal Year or other period in question. VI.3 Limitation on Allocation of Net Losses. There will be no allocation of Net Losses to any Member to the extent that the allocation would create a negative balance in the Capital Account of that Member (or increase the amount by which that Member’s Capital Account balance is negative). VI.4 General Tax Allocations. Except as otherwise provided in this Section 6.4, the taxable income or loss of the Company will be allocated pro rata among the Members associated therewith in the same manner as the corresponding items of Net Income, Net Loss and separate items of income, gain, loss, credit, deduction and expense (excluding items for which there are no related tax items) are allocated among the Member for Capital Account purposes; provided, that in the event there is a difference between the “tax book” value of a Company asset and the asset’s adjusted tax basis at the time of the asset’s contribution or revaluation pursuant to this Agreement, all items of tax depreciation, cost recovery, amortization, and gain or loss with respect to such asset shall be allocated among the Members to take into account the disparities between the “tax book” values and the adjusted tax basis with respect to such properties in accordance with any method selected by the Administrative Member that is permitted by the Treasury Regulations promulgated under Sections 704(b) and 704(c) of the Code. VI.5 Special Tax Allocations. (a) Minimum Gain Chargeback. In the event there is a net decrease in the Company Minimum Gain during any Fiscal Year, the minimum gain chargeback provisions described in Sections 1.704-2(f) and (g) of the Treasury Regulations will apply. (b) Member Minimum Gain Chargeback. In the event there is a net decrease in Member Minimum Gain during any Fiscal Year, the partner minimum gain chargeback provisions described in Section 1.704-2(i) of the Treasury Regulations will apply. (c) Qualified Income Offset. In the event a Member unexpectedly receives an adjustment, allocation or Distribution described in of Section 1.704-1(b)(2)(ii)(d)(4), (5) or (6) of the Treasury Regulations, which adjustment, allocation or Distribution creates or increases a deficit balance in that Member’s Capital Account, the “qualified income offset” provisions described in Section 1.704-1(b)(2)(ii)(d) of the Treasury Regulations will apply. (d) Nonrecourse Deductions. Nonrecourse Deductions will be allocated in accordance with and as required in the Treasury Regulations. (e) Member Nonrecourse Deductions. Member Nonrecourse Deductions will be allocated to the Members as required in Section 1.704-2(i)(1) of the Treasury Regulations. (f) Intention. The special allocations in this Section 6.5 are intended to comply with certain requirements of the Treasury Regulations and will be interpreted consistently. It is the intent of the Members that any special allocation pursuant to this Section 6.5 will be offset with other special allocations pursuant to this Section 6.5. Accordingly, special allocations of Company income, gain, loss or deduction will be made in such manner so that, in the reasonable determination of the Administrative Member, taking into account likely future allocations under this Section 6.5, after those allocations are made, each Member’s Capital Account is, to the extent possible, equal to the Capital Account it would have been were this Section 6.5 not part of this Agreement. (g) Recapture Items. In the event that the Company has taxable income in any Fiscal Year that is characterized as ordinary income under the recapture provisions of the Code, each Member’s distributive share of taxable gain or loss from the sale of Company assets (to the extent possible) will include a proportionate share of this recapture income equal to that Member’s share of prior cumulative depreciation deductions with respect to the assets which gave rise to the recapture income. (h) Tax Credits and Similar Items. Allocations of tax credits, tax credit recapture, and any items related thereto will be allocated in those items as determined by the Administrative Member considering the principles of Treasury Regulation Section 1.704-1(b)(4)(ii). (i) Consistent Treatment. All items of income, gain, loss, deduction and credit of the Company will be allocated among the Members for federal income tax purposes in a manner consistent with the allocation under this Article VI. Each Member is aware of the income tax consequences of the allocations made by this Article VI and hereby agrees to be bound by the provisions of this Article VI in reporting its share of Company income and loss for income tax purposes. No Member will report on its tax return any transaction by the Company, any amount allocated or distributed from the Company or contributed to the Company inconsistently with the treatment reported (or to be reported) by the Company on its tax return nor take a position for tax purposes that is inconsistent with the position taken by the Company. (j) Modifications to Preserve Underlying Economic Objectives. If, in the opinion of counsel to the Company, there is a change in the Federal income tax law (including the Code as well as the Treasury Regulations, rulings, and administrative practices thereunder) which makes modifying the allocation provisions of this Article VI it necessary or prudent to preserve the underlying economic objectives of the Members as reflected in this Agreement, the Administrative Member will make the minimum modification necessary to achieve that purpose. VI.6 Allocation of Excess Nonrecourse Liabilities. “Excess nonrecourse liabilities” of the Company as used in Section 1.752-3(a)(3) of the Treasury Regulations will first be allocated among the Member pursuant to the “additional method” described in that section and then in accordance with the manner in which the Administrative Member expects the nonrecourse deductions allocable to those liabilities will be allocated. VI.7 Allocations in Respect of a Transferred Interest. Except as otherwise provided in this Agreement, amounts of Net Income, Net Loss and special allocations allocated to the Members will be allocated among the appropriate Members in proportion to their respective Interests. If there is a change in any Member’s Interest for any reason during any Fiscal Year, each item of income, gain, loss, deduction or credit of the Company for that Fiscal Year will be assigned pro rata to each day in that Fiscal Year in the case of items allocated based on Interests, and the amount of that item so assigned to that day will be allocated to the Member based upon that Member’s Interest at the close of that day. Notwithstanding the immediately preceding sentence, the net amount of gain or loss realized by the Company in connection with a sale or other disposition of property by the Company will be allocated solely to the Members having Interests on the date of that sale or other disposition. VI.8 Allocations in Year of Liquidation Event. Notwithstanding anything else in this Agreement to the contrary, the Parties intend for the allocation provisions of this Article VI to produce final Capital Account balances of the Members that will permit liquidating Distributions to be made pursuant to the order set forth in Section 10.4. To the extent that the allocation provisions of this Article VI would fail to produce the final Capital Account balances, the Administrative Member may elect, in its sole discretion, to (a) amend those provisions if and to the extent necessary to produce that result and (b) reallocate income and loss of the Company for prior open years (including items of gross income and deduction of the Company for those years) among the Members to the extent it is not possible to achieve that result with allocations of items of income (including gross income) and deduction for the current year and future years, as approved by the Administrative Member. This Section 6.8 will control notwithstanding any reallocation or adjustment of taxable income, taxable loss, or related items by the Internal Revenue Service or any other taxing authority. Notwithstanding any provision of this Agreement to the contrary, the Administrative Member will have the power to amend this Agreement without the Consent of the other Members, as it reasonably considers advisable, to make the allocations and adjustments described in this Section 6.8. To the extent that the allocations and adjustments described in this Section 6.8 result in a reduction in the Distributions that any Member will receive under this Agreement compared to the amount of the Distributions that Member would receive if all those Distributions were made pursuant to the order set forth in Section 10.4, the Company may make a guaranteed payment (within the meaning of Section 707(c) of the Code) to that Member (to be made at the time that Member would otherwise receive the Distributions that have been reduced) to the extent that payment does not violate the requirements of Sections 704(b) of the Code or may take other action as reasonably determined by the Administrative Member to offset that reduction. ARTICLE VII DISTRIBUTIONS VII.1 Generally. (a) The Company will first use available assets to pay or set aside reserves for the payment of the costs, expenses, debts, liabilities and obligations of the Company as set forth in Section 4.5. (b) Subject to Sections 7.4 and 7.5, the Company will make Distributions, at such times, in such amounts and of such types (i.e. in cash or in kind) as determined by a Majority in Interest. Distributions shall be made to the Members associated therewith pro rata in accordance with their respective Interests. (c) For the avoidance of doubt, prior to the dissolution of the Company pursuant to Section 10.1, the Company will not make Distributions in kind except to the extent of Liquidity Event Proceeds without the consent of the Administrative Member. Any expenses relating to brokerage commissions, escrow fees, clearing and settlement charges, custodial fees, and any other costs relating to the event giving rise to such Liquidity Event Proceeds and the receipt and Distribution of Liquidity Event Proceeds by the Company (“Distribution Expenses”) will be paid by the Company prior to any Distributions. The amount of Liquidity Event Proceeds distributable to the Members will be net of any Distribution Expenses. VII.2 Non-Cash Distributions. Whenever a Distribution provided for in this Section 7.2 is payable in property other than cash, the value of the Distribution will be deemed to be its Net Fair Market Value as of the date of Distribution. The Capital Accounts of the Members will be adjusted accordingly as the result of any Distribution in kind. VII.3 Return of Distributions. Any Member receiving a Distribution in violation of the terms of this Agreement shall return that Distribution (or cash equal to the Net Fair Market Value of any property so distributed, determined as of the date of Distribution) promptly following the Member’s receipt of a request to return the Distribution from the Administrative Member. No third party will be entitled to rely on or enforce the obligations to return Distributions set forth in this Agreement or to demand that the Company or any Member make any request for any such return. VII.4 Form of Distribution. Distributions pursuant to this Article VII will be comprised of (a) assets and securities constituting Liquidity Event Proceeds, and/or (b) Distributable Cash. Notwithstanding the foregoing, no Distribution of securities will be made to any Member to the extent that Member would be prohibited by applicable law from holding those securities. Unless otherwise agreed to by the Administrative Member, Distributions will be made to its respective brokerage account; provided that any Distribution of Distributable Cash may, in the sole discretion of the Administrative Member, be made, in whole or in part, to the account from which such Member’s Capital Contributions were paid. VII.5 Amounts Withheld. Any amounts withheld with respect to a Member pursuant to any federal, state, local or foreign tax law from a Distribution by the Company to the Member will be treated as paid or distributed, as the case may be, to the Member for all purposes of this Agreement. In addition, the Company may withhold from Distributions amounts deemed necessary, in the sole discretion of the Administrative Member, to be held in reserve for payment of accrued or foreseeable permitted expenses of the Company. Each Member hereby agrees to indemnify and hold harmless the Company from and against any liability with respect to income attributable to or Distributions or other payments to that Member (including, without limitation, any “imputed underpayment” within the meaning of Section 6225 of the Code attributable to such Member, as determined by the Administrative Member). Any other amount that the Administrative Member determines is required to be paid by the Company to a taxing authority with respect to a Member pursuant to any federal, state, local or foreign tax law in connection with any payment to or tax liability (estimated or otherwise) of the Member shall be treated as a loan from the Company to that Member. If that loan is not repaid within 30 days from the date the Administrative Member notifies that Member of that withholding, the loan will bear interest from the date of the applicable notice to the date of repayment at a rate at the lesser of (a) [10]% or (b) the maximum legal interest rate under applicable law, compounded annually. In addition to all other remedies the Company may have, the Company may withhold Distributions that would otherwise be payable to that Member and apply that amount toward repayment of the loan and interest. Any payment made by a Member to the Company pursuant to this Section 7.5 will not constitute a Capital Contribution. The obligations of a Member pursuant to this Section 7.5 shall survive the termination, dissolution, liquidation and winding up of the Company and the withdrawal of such Member from the Company or transfer of its interest. VII.6 Member Giveback. Except as required by applicable law, Section 7.3 or Section 7.5, no Member will be required to repay to the Company, any other Member, or any creditor of the Company, all or any part of the Distributions made to that Member. VII.7 No Creditor Status. A Member will not have the status of, and is not entitled to the remedies available to, a creditor of the Company with regard to Distributions that the Member becomes entitled to receive pursuant to this Agreement and the Act. VII.8 Limitations on Distributions. Notwithstanding any provision to the contrary contained in this Agreement, no Distribution shall be made to any Member on account of its Interest if the Distribution would violate the Act or other applicable law. ARTICLE VIII TRANSFERS VIII.1 Transfers. Except as otherwise expressly provided in this Article VIII, no Member may Transfer all or any portion of its Interests without (a) providing the Administrative Member with a written opinion of counsel that such Transfer would not be considered a securities transaction under applicable securities laws if required by the Administrative Member; (b) compliance with the provisions of Section 8.4; (c) the approval of the Administrative Member; and (d) the approval of such Members (which may include the Administrative Member) as represents two-thirds of the aggregate Interests in the Company. Any attempted Transfer in violation of this Article VIII will be null and void ab initio and will not bind the Company. VIII.2 Permitted Transfers. The consent of the Members pursuant to Section 8.1(d) will not be required for any Transfer (a) by a Member who is an individual to an entity controlled (which for this purpose shall require that the Member own more than 50% of the voting control and equity securities of that entity) by that Member and all of the remaining beneficial ownership of such entity is owned by the Family Members of such Member or (b) by a Member to another Member (each transferee, a “Permitted Transferee”); provided, however, that unless otherwise consented to by the Administrative Member, in connection with a Transfer permitted pursuant to clause (a) of this Section 8.2, the transferring Member shall remain jointly and severally liable for the obligations of the Permittee Transferee under this Agreement. VIII.3 Admission of Transferee as a Member. A Transfer permitted by this Article VIII will only transfer the rights of an assignee as set forth in Section 8.6 unless (a) the transferee is a Member or is admitted as a Member with the consent of the Administrative Member and otherwise complies with Section 4.1 and (b) payment to the Company of a transfer fee in cash which is sufficient, in the Administrative Member’s sole determination, to cover all reasonable expenses incurred by the Company in connection with the Transfer and admission of the transferee as a Member. VIII.4 Additional Restrictions. Notwithstanding any other provision of this Agreement, no Transfer of an Interest (including any Transfer of an interest in Company profits, losses or distributions) shall be permitted unless the Administrative Member otherwise consents, in its sole discretion, if such Transfer would cause the Company (a) to have more than 100 partners, as determined for purposes Section 7704 of the Code; (b) to be treated as a publicly traded partnership within the meaning of Section 7704 of the Code; (c) to be required to be registered as an “investment company” under the Investment Company Act of 1940 (the “40 Act”); (d) to hold any “plan assets” under the Employee Retirement Income Security Act of 1974 (“ERISA”), or (e) in the Administrative Member’s sole determination, to be subject to any burdensome regulatory or reporting requirements, any adverse tax or fiscal consequences or otherwise in breach of any applicable law or agreement to which the Company is a party. VIII.5 Involuntary Transfer of Interests. In the event of any involuntary transfer of Interests to a Person, that Person will have only the rights of an assignee set forth in Section 8.6 with respect to those Interests. VIII.6 Rights of Assignee. An assignee has no right to vote, receive information concerning the business and affairs of the Company and is entitled only to receive Distributions and allocations attributable to the Interest held by the assignee as determined by the Member and in accordance with this Agreement. VIII.7 Enforcement. The restrictions on Transfers contained in this Agreement are an essential element in the ownership of an Interest. Upon application to any court of competent jurisdiction, the Administrative Member will be entitled to a decree against any Person violating or about to violate those restrictions, requiring their specific performance, including those prohibiting a Transfer of all or a portion of its Interests. VIII.8 Death or Disability of a Member. Upon the Disability or death of a Member, the provisions of Section 18-705 of the Act shall apply. VIII.9 Compulsory Redemption. A Majority in Interest may, with a by notice to any Member, force the sale of all or a portion of that Member’s Interest on terms as the Administrative Member determines to be fair and reasonable, or take other action as it determines to be fair and reasonable in the event that the Administrative Member determines or has reason to believe that: (a) that Member has attempted to effect a Transfer of, or a Transfer has occurred with respect to, any portion of that Member’s Interest in violation of this Agreement; (b) continued ownership of that Interest by that Member is reasonably likely to cause any of the events set forth in Section 8.4; (c) continued ownership of that Interest by that Member may be harmful to the business or reputation of the Company or the Administrative Member; (d) any of the representations or warranties made by that Member under this Agreement or its Subscription Agreement was not true when made or has ceased to be true; (e) any portion of that Member’s Interest has vested in any other Person by reason of the bankruptcy, dissolution, incompetency or death of that Member; (f) such Member has failed to fund any Additional Capital Contribution; or (g) it would not be in the best interests of the Company, as determined by the Administrative Member in its sole discretion, for that Member to continue ownership of its Interest. ARTICLE IX RECORDS, REPORTS AND TAXES IX.1 Books and Records. The Administrative Member will maintain all of the information required to be maintained by the Act at the Company’s principal office, with copies available at all times during normal business hours for inspection and copying upon reasonable notice by any Member or its authorized representatives for any purpose reasonably related to that Member’s status as a member of the Company, including as applicable: (a) true and full information regarding the status of the business and financial condition of the Company; (b) promptly after becoming available, a copy of the Company’s federal, state and local income tax returns, if any, for each Fiscal Year; (c) the Interest Register; (d) a copy of this Agreement and all amendments, including any Exception Handling Addendum, together with executed copies of (i) any powers of attorney and (ii) any other document pursuant to which this Agreement or any amendments have been executed or have been deemed to be executed; and (e) true and full information regarding the amount of Capital Contributions by that Member and the date on which that Member became a Member. IX.2 Reports. (a) Governmental Reports. The Administrative Member will cause to be prepared and filed, at the Company’s expense, all documents and reports required to be filed with any governmental agency in accordance with the Act. (b) Tax Reports. The Administrative Member will cause to be prepared and duly and timely filed, at the Company’s expense, all tax returns required to be filed by the Company. The Administrative Member will send or cause to be sent to each Member within [90] days after the end of each Fiscal Year, or a later date as determined in the discretion of the Administrative Member, an Internal Revenue Service Schedule K-1 with respect to the Member’s interest in the Company (or substantially similar information if an Internal Revenue Service Schedule K-1 is not required to be provided to Members). IX.3 Tax Elections. Except as otherwise expressly provided in this Agreement, the Company will make any tax elections as the Administrative Member may determine. The Administrative Member may, in its sole discretion, make an election under Section 754 of the Code. IX.4 Partnership Representative. The Administrative Member will be the “partnership representative” within the meaning of Code Section 6223 (the “Partnership Representative”). The Partnership Representative will have all of the powers and authority of a “partnership representative” under the Code. The Partnership Representative will represent the Company (at its expense) in connection with all administrative and judicial proceedings by the Internal Revenue Service or any taxing authority involving any tax return of the Company, and may expend the Company’s funds for professional services and associated costs. The Partnership Representative will provide to the Members notice of any communication to or from or agreements with a federal, state or local authority regarding any return of the Company, including a summary of the provisions. IX.5 Confidentiality. All information concerning the business, affairs and properties of the Company and all of the terms and provisions of this Agreement will be held in confidence by each Member and their respective Affiliates, subject to any obligation to comply with (a) any applicable law, (b) any rule or regulation of any legal authority or securities exchange, (c) any subpoena or other legal process to make information available to the Persons entitled thereto or (d) the enforcement of that Party’s rights under this Agreement in any legal process, arbitration, as a Member, or employee, as applicable. Confidentiality will be maintained until that time, if any, as the confidential information either is, or becomes, published or a matter of public knowledge (other than as a result of a breach of this Section 9.5); provided that each Party recognizes that the privilege each has to maintain, in its sole discretion, the confidentiality of a communication relating to the transactions, including a confidential communication with its attorney or a confidential communication with a federally authorized tax practitioner under Section 7525 of the Code, is not intended to be affected by the foregoing provisions of this sentence. Notwithstanding this Section 9.5, the Administrative Member may use confidential information about the Company and the Members in data aggregation, so long as the data use does not include the disclosure of information that could reasonably be used to identify any Member. ARTICLE X DISSOLUTION AND LIQUIDATION X.1 Dissolution. (a) The Company. The Company will be dissolved and its affairs wound up solely upon the first to occur of any of the following: (1) the disposition (which may include by Distribution to the Members) of the final Investment of the Company; (2) the determination by a Majority in Interest to dissolve the Company; or (3) the entry of a judicial decree of dissolution of the Company pursuant to the Act. X.2 Date of Dissolution. Dissolution of the Company will be effective on the day on which the event occurs giving rise to the dissolution, but the Company will not terminate or cease to exist until the assets of the Company have been liquidated and distributed as provided in this Agreement and a Certificate of Cancellation for the Company has been filed in accordance with Section 10.8. Notwithstanding the dissolution of the Company, prior to the termination of the Company, the business of the Company and the rights and obligations of the Members will continue to be governed by this Agreement. X.3 Winding Up. Upon the occurrence of any event specified in Section 10.1, the Company will continue solely for the purpose of winding up its affairs in an orderly manner, liquidating its assets, satisfying the claims of its creditors, and distributing any remaining assets in cash or in kind, to the Members in accordance with this Agreement. The Liquidating Trustee will be responsible for overseeing the winding up and liquidation of the Company and will cause the Company to sell or otherwise liquidate all of the Company’s assets except to the extent the Liquidating Trustee determines to distribute any assets to the Members in kind, discharge or make provision for all liabilities of the Company and all costs relating to the dissolution, winding up, and liquidation and distribution of assets, establish reserves as may be necessary to provide for contingent liabilities of the Company (for purposes of determining the Capital Accounts of the Members, the amounts of those reserves will be deemed to be an expense of the Company and will be deemed income to the extent it ceases to be reserved), and distribute the remaining assets to the Members, in the manner specified in Section 10.4. The Liquidating Trustee will be allowed a reasonable time for the orderly liquidation of the Company’s assets and discharge of its liabilities, so as to preserve and upon disposition maximize, to the extent possible, the value of the Company’s assets. X.4 Liquidation. The Company’s assets, or the proceeds from the liquidation of the Company’s assets, will be paid or distributed in the following order: (a) first, to creditors to the extent otherwise permitted by applicable law in satisfaction of all liabilities and obligations of the Company, including expenses of the liquidation (whether by payment or the making of reasonable provision for payment), other than liabilities for which reasonable provision for payment has been made and liabilities, if any, for Distributions to Members; (b) next, to the establishment of those reserves for contingent liabilities of the Company as are deemed necessary by the Liquidating Trustee (other than liabilities for which reasonable provision for payment has been made and liabilities, if any, for Distribution to Members and former Members under the Act); (c) next, to Members and former Members in satisfaction of any liabilities for Distributions under the Act, if any; (d) next, to the Members, on a pro rata in accordance with their Interests. X.5 Distributions in Kind. Any non-cash asset distributed to one or more Members will first be valued by the Administrative Member at its Fair Market Value to determine the Net Income, Loss and special allocations that would have resulted if that asset had been sold for that value, which amounts will be allocated pursuant to Article VI, and the Members’ Capital Accounts will be adjusted to reflect those allocations. The amount distributed and charged to the Capital Account of each Member receiving an interest in the distributed asset will be the Net Fair Market Value of that interest. X.6 No Liability. Notwithstanding anything in this Agreement to the contrary, upon a liquidation within the meaning of Section 1.704-1(b)(2)(ii)(g) of the Treasury Regulations, if any Member has a negative Capital Account balance (after giving effect to all contributions, Distributions, allocations and other Capital Account adjustments for all Fiscal Years, including the Year in which that liquidation occurs), neither that Member nor the Liquidating Trustee will have any obligation to make any contribution to the capital of the Company, and the negative balance of that Member’s Capital Account will not be considered a debt owed by that Member or any Liquidating Trustee to the Company or to any other Person for any purpose; provided, however, that nothing in this Section 10.6 will relieve any Member from any liability under any promissory note or other affirmative commitment that Member has made to contribute capital to the Company. X.7 Limitations on Payments Made in Dissolution. Except as otherwise specifically provided in this Agreement, each Member will be entitled to look only to the assets of the Company for Distributions (including Distributions in liquidation) and the Parties will have no personal liability for any Distributions. X.8 Certificate of Cancellation. Upon completion of the winding up of the Company’s affairs, the Liquidating Trustee will cause to be filed a Certificate of Cancellation, in accordance with the Act, of the Certificate of Formation. ARTICLE XI LIMITATION OF LIABILITY; STANDARD OF CARE; INDEMNIFICATION XI.1 Limitation of Liability. Unless explicitly agreed upon, the debts, obligations and liabilities of the Company, whether arising in contract, tort or otherwise, will be solely the debts, obligations and liabilities of the Company, and will not be those of the Members, or the Covered Persons. XI.2 Standard of Care; Liability. Neither the Members nor the Covered Persons will have any personal liability whatsoever to the Company, any Member, or their Affiliates on account of that Person’s role within the Company or by reason of that Person’s acts or omissions in connection with the conduct of the business of the Company so long as that Person acts in good faith for a purpose which the Person reasonably believes to be in, or not opposed to, the best interests of the Company. Notwithstanding the preceding, nothing contained in this Agreement will protect that Person against any liability to which that Person would otherwise be subject by reason of (a) any act or omission of that Person that involves gross negligence, willful misconduct, bad faith, fraud, or willful and material breach of a material provision of this Agreement or any Subscription Agreement or any management agreement or other agreement with or for the benefit of the Company; (b) any transaction from which that Person or its Affiliate derives any improper personal benefit; or (c) a breach of any representation or warranty by such Member made in this Agreement or its Subscription Agreement. XI.3 Indemnification. To the fullest extent permitted by applicable law, the Members and the Covered Persons will be entitled, out of the Company assets, to be indemnified against and held harmless from any and all liabilities, judgments, obligations, losses, damages, claims, actions, suits or other proceedings (whether civil or criminal, pending or threatened, before any court or administrative or legislative body, and as the same are accrued, in which a Member or Covered Person may be or may have been involved as a party or otherwise or with which he, she or it may be or may have been threatened (a “Proceeding”)) and reasonable costs, expenses and disbursements (including legal and accounting fees and expenses) of any kind and nature whatsoever (collectively, “Covered Losses”) that may be imposed on, incurred by, or asserted at any time against a Member or Covered Person (whether or not indemnified against by other parties) in any way related to or arising out of this Agreement, the administration of the Company, or the action or inaction of a Member or Covered Person (including actions or inactions pursuant to Article X on the Company’s dissolution or termination) or under contracts with the Company, except that the Members and Covered Persons will not be entitled to indemnity for Covered Losses with respect to any matter as to which such Member or Covered Person has been finally adjudicated in any action, suit, or other proceeding, or otherwise by a court of competent jurisdiction, to have committed an act or omission involving his, her or its own gross negligence, willful misconduct, bad faith, fraud, willful and material breach of a material provision of this Agreement or any Subscription Agreement or any management agreement or other agreement with or for the benefit of the Company, or from which such Person derived an improper personal benefit. The indemnities contained in this Article XI will survive the termination of this Agreement. XI.4 Contract Right; Expenses. The right to indemnification conferred in this Article XI will be a contract right. A Member’s or a Covered Person’s right to indemnification under this Agreement includes the right to require the Company to advance the expenses incurred by that Member or Covered Person in defending any Proceeding in advance of its final disposition subject to an obligation to return the amount so advanced if it is ultimately determined that the Member or Covered Person has not met the standard of conduct required for indemnification. XI.5 Nonexclusive Right. The right to indemnification and the payment of expenses incurred in defending a Proceeding in advance of its final disposition conferred in this Article XI will not be exclusive of any other right which any Person may have or later acquire under any statute or agreement, or under any insurance policy obtained for the benefit of any Administrative Member, Partnership Representative or officer of the Company (it being understood that if any such insurance policy is obtained, it shall be at the expense of the Company). XI.6 Severability. If any provision of this Article XI is determined to be unenforceable in whole or in part, that provision will nonetheless be enforced to the fullest extent permissible, it being the intent of this Article XI to provide indemnification to all Persons eligible under this Agreement to the fullest extent permitted by applicable law. XI.7 Insurance. The Administrative Member may cause the Company to purchase and maintain insurance on behalf of any Covered Person who is or was an agent of the Company against any liability asserted against that Covered Person capacity as an agent. ARTICLE XII REPRESENTATIONS, WARRANTIES AND COVENANTS XII.1 Representations and Warranties of the Members. Each Member is fully aware that the Company and the Administrative Member are relying upon the truth and accuracy of the following representations by each of the Members. Each of the Members hereby represents, warrants and covenants to the Administrative Member and the Company that: (a) (i) In the case of any entity, it has been duly formed and is validly existing and in good standing under the laws of its jurisdiction of organization with full power and authority to enter into and to perform this Agreement in accordance with its terms or (ii) in the case of an individual, he or she has the full legal capacity to enter into and to perform this Agreement in accordance with its terms; (b) This Agreement is a legal, valid and binding obligation of that Member, enforceable against that Member in accordance with its terms, subject to the effect of any applicable bankruptcy, insolvency, reorganization or similar laws affecting creditors’ rights, and subject, as to enforceability, to the effect of general principles of equity; (c) Its Interest is being acquired for its own account, for investment and not with a view to the distribution or resale, subject, however, to any requirement of law that the disposition of its property will at all times be within its control; (d) It is not a participant-directed defined contribution plan; (e) It is not an “investment company” registered under the 40 Act; (f) It is not a “benefit plan investor” under Section 3(42) of ERISA and its ownership of an Interest does not cause the Company to hold “plan assets” under ERISA; (g) It will conduct its business and affairs (including its investment activities) in a manner that it will be able to honor its obligations under this Agreement; (h) It understands and acknowledges that the investments contemplated by the Company involve a high degree of risk. The Member has substantial experience in evaluating and investing in Portfolio Company Securities and is capable of evaluating the merits and risks of its investments, including an investment in its Interest, and has the capacity to protect its own interests. The Member, by reason of its business or financial experience, has the capacity to protect its own interests in connection with Investments. The Member has sufficient resources to bear the economic risk of its investment in its Interest and the underlying Investments, including any diminution in value, and will solely bear such economic risk.; (i) It has undertaken its own independent investigation, and formed its own independent business judgment, based on its own conclusions, as to the merits of investing in the Company and any Investments to be acquired by the Company. The Member is not relying and has not relied on the Administrative Member or any of their Affiliates for any evaluation or other investment advice in respect of any Investments or the advisability of investing in the Company and has had all questions answered and requests fulfilled that the Member has deemed to be material to the Member’s decision to invest in the Company. (j) It has had the opportunity to consult with legal counsel of its choice and has read and understands this Agreement. (k) It has received and carefully reviewed all code for the Designated Smart Contract sufficiently in advance of signing this Agreement. It is a Person who is, or in connection with this Agreement and the matters contemplated thereby has received the advice of Persons who are, knowledgeable, sophisticated and experienced in making, and qualified to make, evaluations and decisions with respect to the quality, security and intended and expected functionality of the Designated Smart Contract and the other matters contemplated by this Agreement. XII.2 Derivative Transactions. No Member may, without providing the Administrative Member with a written opinion of counsel satisfactory to the Administrative Member regarding the compliance of the proposed transfer with all applicable securities laws, and the prior written consent of the Administrative Member (which may be granted, withheld, conditioned or delayed in its sole discretion), directly or indirectly, (a) offer, pledge, sell, contract to sell, sell any option or contract to purchase, purchase any option or contract to sell, grant any option, right or warrant to purchase, lend, or otherwise assign, transfer or dispose of any Interests or Portfolio Company Securities, or publicly disclose the intention to make any offer, sale, pledge or disposition, or (b) engage in any short selling of any Interests or Portfolio Company Securities. Notwithstanding the foregoing, any permitted transfers of Interests that are approved by the Members will be governed by Article VIII. XII.3 Further Instruments and Cooperation of Members. Each Member will furnish, from time to time, to the Administrative Member within 5 Business Days after receipt of the Administrative Member’s request (or other amounts of time as specified by the Administrative Member) any further instruments (including any designations, representations, warranties, and covenants), documentation and information as the Administrative Member deems to be reasonably necessary, appropriate or convenient: (a) to facilitate the Closing or satisfy any Closing Conditions; (b) to satisfy applicable anti-money laundering requirements; (c) for any tax purpose, including, for the avoidance of doubt, a Form W-9; or (d) for any other purpose that is consistent with the terms of this Agreement. ARTICLE XIII POWER OF ATTORNEY XIII.1 Function of Power of Attorney. Each Member, by its execution of this Agreement, hereby irrevocably makes, constitutes and appoints each of the Administrative Member and the Liquidating Trustee, if any, in the capacity as Liquidating Trustee (each is referred to as the “Attorney”), as its true and lawful agent and attorney-in-fact, with full power of substitution and full power and authority in its name, place and stead, to make, execute, sign, acknowledge, swear to, record and file (a) this Agreement and any amendment to this Agreement that has been adopted as provided in this Agreement; (b) the original Certificate of Formation and all amendments required or permitted by law or the provisions of this Agreement; (c) all instruments or documents required to effect a transfer of Interest; (d) all certificates and other instruments deemed advisable by the Administrative Member or the Liquidating Trustee, if any, to carry out the provisions of this Agreement, and applicable law or to permit the Company to become or to continue as a limited liability company wherein the Members have limited liability in each jurisdiction where the Company may be doing business; (e) all instruments that the Administrative Member or the Liquidating Trustee, if any, deems appropriate to reflect a change, modification or termination of this Agreement or the Company in accordance with this Agreement including, the admission of additional Members or substituted members pursuant to the provisions of this Agreement, as applicable; (f) all fictitious or assumed name certificates required or permitted to be filed on behalf of the Company; (g) all conveyances and other instruments or papers deemed advisable by the Administrative Member or the Liquidating Trustee, if any, including, those to effect the dissolution and termination of the Company (including a Certificate of Cancellation); (h) all other agreements and instruments necessary or advisable to consummate any purchase of Investments; (i) all forms, instruments, or documents required to make certain elections pursuant to the Code or state law governing the taxation of limited liability companies; and (j) all other instruments or papers that may be required or permitted by law to be filed on behalf of the Company. Notwithstanding the foregoing, the Administrative Member may not exercise this power of attorney with respect to matters as to which this Agreement requires the consent of the Members until such consent has been received. XIII.2 Additional Functions. The foregoing power of attorney: (a) is coupled with an interest, is irrevocable and will survive the subsequent death or Disability of any Member or any subsequent power of attorney executed by a Member; (b) may be exercised by the Attorney, either by signing separately as attorney-in-fact for each Member or by a single signature of the Attorney, acting as attorney-in-fact for all of them; (c) will survive the delivery of an assignment by a Member of all or any portion of its Interest; except that, where the assignee of all of that Member’s Interest has been approved by the Administrative Member for admission to the Company, as a substituted Member, the power of attorney of the assignor will survive the delivery of that assignment for the sole purpose of enabling the Attorney to execute, swear to, acknowledge and file any instrument necessary or appropriate to effect that substitution. XIII.3 Delivery of Power of Attorney. Each Member must execute and deliver to the Administrative Member within 5 Business Days after receipt of the Administrative Member’s request, any further designations, powers-of-attorney and other instruments as the Administrative Member reasonably deems necessary to carry out the terms of this Agreement. ARTICLE XIV MISCELLANEOUS XIV.1 Ministerial and Administrative Amendments. Amendments that under this Agreement are expressly permitted to be made by the Administrative Member, ministerial or administrative amendments to cure ambiguities or inconsistencies as may in the discretion of the Administrative Member be necessary or appropriate and those amendments as may be required by law may be made from time to time without the Consent of any of the Members. Other amendments may be made to this Agreement only with the Consent of a Majority in Interest. Notwithstanding the foregoing, (a) no amendment will be adopted pursuant to this Section 14.1 unless that amendment would not alter, or result in the alteration of, the limited liability of the Members or the status of the Company as a “partnership” for federal income tax purposes and (b) no amendment that increases the liabilities or duties of a Member (including the Administrative Member under this Agreement may be made without the consent of that Member. XIV.2 Amendment Recordation. Upon the adoption of any amendment to this Agreement, the amendment will be executed by the Administrative Member and, if required, will be recorded in the proper records of each jurisdiction in which recordation is necessary for the Company to conduct business. Any adopted amendment may be executed by the Administrative Member on behalf of the Members pursuant to the power of attorney granted in Section 13.1. XIV.3 Offset Privilege. The Company may offset against any monetary obligation owing from the Company to any Members or Administrative Member any monetary obligation then owing from that Member or Administrative Member to the Company; provided, however, that the offset right will only apply to any monetary obligation owed to that Member or Administrative Member in their capacity as a Member or Administrative Member. XIV.4 Notices. (a) Any notice or other communication to be given to the Company, the Administrative Member or any Member in connection with this Agreement will be in writing and will be delivered or mailed by registered or certified mail, postage prepaid, sent by facsimile or electronic mail or otherwise delivered by hand or messenger. (b) Each Member hereby acknowledges that the Administrative Member is entitled to transmit to that Member exclusively by e-mail (or other means of electronic messaging) all notices, correspondence and reports, including, but not limited to, that Member’s Schedule K-1s. (c) Each notice or other communication to the Administrative Member will for purposes of this Agreement be treated as effective or having been given upon the earlier of (i) receipt, (ii) the date transmitted by email, with evidence of transmission from the transmitting device, (iii) acknowledged receipt, (iv) when delivered in person, (v) when sent by electronic facsimile transfer or electronic mail at the number or address set forth below and receipt is acknowledged by the Administrative Member, (vi) 1 Business Day after having been dispatched by a nationally recognized overnight courier service if receipt is evidenced by a signature of a person regularly employed or residing at the address set forth below for that Party or (vii) 3 Business Days after being sent by registered or certified mail, return receipt requested, postage prepaid. (d) Any notice must be given, if (x) to the Company, to the Company’s email address, to the attention of the Administrative Member and (y) to any Member, to that Member’s address or number specified in the Interest Register of the Company. Any Party may by notice pursuant to this Section 14.4 designate any other physical address or email address to which notice to that Party must be given. XIV.5 Waiver. No course of dealing or omission or delay on the part of any Party in asserting or exercising any right under this Agreement will constitute or operate as a waiver of any right. No waiver of any provision of this Agreement will be effective, unless in writing and signed by or on behalf of the Party to be charged with the waiver. No waiver will be deemed a continuing waiver or future waiver or waiver in respect of any other breach or default, unless expressly so stated in writing. XIV.6 Governing Law. This Agreement will be construed, performed and enforced in accordance with the laws of the State of Delaware, without giving effect to its conflict of laws principles to the extent those principles or rules would require or permit the application of the laws of another jurisdiction. XIV.7 Dispute Resolution. Any dispute, controversy or claim arising out of or relating to this Agreement, or the breach of this Agreement, except for any claim or action that the Administrative Member or Company may elect to commence to enforce any of its rights or the Members’ obligations under this Agreement, will be settled by binding arbitration, before three arbitrators, administered by the American Arbitration Association under and in accordance with its Commercial Arbitration Rules. The decision of the arbitrators shall be non-appealable, binding and conclusive upon all parties thereto and judgment on the award rendered by the arbitrators may be entered in any court having jurisdiction. (a) Location. Any arbitration will be held in the Arbitration Location. (b) Costs. Each of the Parties will equally bear any arbitration fees and administrative costs associated with the arbitration. The prevailing Party, as determined by the arbitrators, will be awarded its costs and reasonable attorneys’ fees incurred in connection with the arbitration. (c) Consent to Jurisdiction. The Parties hereby irrevocably and unconditionally submits, for itself and its property, to the exclusive jurisdiction of any courts located in the Arbitration Location, for recognition or enforcement of any award determined pursuant to this Section 14.7. NOTICE: By becoming a party to this Agreement, each Party is agreeing to have all disputes, claims or controversies arising out of or relating to this Agreement decided by neutral binding arbitration, and is giving up any rights it might possess to have those matters litigated in a court or jury trial. By becoming a party to this Agreement, each Party is giving up its judicial rights to discovery and appeal except to the extent that they are specifically provided for under this Agreement. If any Party refuses to submit to arbitration after agreeing to this provision, that Party may be compelled to arbitrate under federal or state law. By becoming a party to this Agreement, each Party confirms that its agreement to this arbitration provision is voluntary. XIV.8 Remedies. In the event of any actual or prospective breach or default of this Agreement by any Party, the other Parties will be entitled to seek equitable relief, including remedies in the nature of injunction and specific performance (without being required to post a bond or other security or to establish any actual damages). In this regard, the Parties acknowledge that they will be irreparably damaged in the event this Agreement is not specifically enforced, since (among other things) the Interests are not readily marketable. All remedies under this Agreement are cumulative and not exclusive, may be exercised concurrently and nothing in this Agreement will be deemed to prohibit or limit any Party from pursuing any other remedy or relief available at law or in equity for any actual or prospective breach or default, including the recovery of damages. XIV.9 Severability. The provisions of this Agreement are severable and in the event that any provision of this Agreement is determined to be illegal, invalid or unenforceable in any respect by a court of competent jurisdiction, the remaining provisions of this Agreement will not be affected, but will, subject to the discretion of that court, remain in full force and effect, and any illegal, invalid or unenforceable provision will be deemed, without further action on the part of the Parties, amended and limited to the extent necessary to render that provision, as so amended and limited, legal, valid and enforceable, it being the intention of the Parties that this Agreement and each provision will be legal, valid and enforceable to the fullest extent permitted by applicable law. XIV.10 Counterparts. This Agreement may be executed in counterparts, each of which will be deemed an original, but all of which together will constitute one and the same agreement. A facsimile, PDF or DocuSign (or similar service) signature will be deemed an original. The Parties hereby Consent to transact business with the Company and each of the other via electronic signature (including via DocuSign, eSignLive, or a similar service). Each Party understands and agrees that their signature page may be disassembled and attached to the final version of this Agreement. XIV.11 IRS Circular 230 disclosure. Any discussion of United States federal tax issues contained in this Agreement, or concerning the investment in the Company, by the Company, Administrative Member, and their respective counsel, is not intended or written to be relied on by the Parties for purpose of avoiding penalties imposed under the Code. Each Party should seek advice from an independent tax adviser based on their particular circumstances. XIV.12 Further Assurances. Each Party shall promptly execute, deliver, file or record those agreements, instruments, certificates and other documents and take other actions as the Administrative Member may reasonably request or as may otherwise be necessary or proper to carry out the terms and provisions of this Agreement and to consummate and perfect the transactions contemplated hereby. XIV.13 Assignment. The rights, interests or obligations of a Party may not be assigned by such Party except in accordance with a Transfer permitted by Article VIII. Any purported assignment without such Consent will be null and void ab initio. XIV.14 Binding Effect. This Agreement will be binding upon and inure to the benefit of the Parties and their respective legal representatives, successors and permitted assigns. This Agreement is not intended, and will not be deemed, to create or confer any right or interest for the benefit of any Person not a party to this Agreement. XIV.15 Titles and Captions. The titles and captions of the Articles and Sections of this Agreement are for convenience of reference only and do not in any way define or interpret the intent of the Parties or modify or otherwise affect any of the provisions hereof and shall not have any effect on the construction or interpretation of this Agreement. XIV.16 Construction. This Agreement will not be construed against any party by reason of that party having caused this Agreement to be drafted. XIV.17 Entire Agreement. This Agreement, the Subscription Agreements of each Member and any side letter with a Member constitutes the entire understanding and agreement among the Parties and supersedes all prior and contemporaneous understandings and agreements whether written or oral. The Administrative Member and the Company may enter into side letters with any Member or prospective Member which contain terms different from those in this Agreement or amend and supplement provisions of this Agreement as it applies to such Member. In the event of any inconsistency between the terms of this Agreement and the terms of any side letter, the terms of the side letter shall control. (Signature Page Follows) IN WITNESS WHEREOF, the undersigned has executed this Agreement effective as of the Effective Date. COMPANY: [FULL ENTITY NAME], a Delaware limited liability company By: Name: Title: Administrative Member IN WITNESS WHEREOF, the undersigned has executed this Agreement effective as of the Effective Date or as of the date of such Member’s Closing. ADMINISTRATIVE MEMBER: Name: [Print Administrative Member’s Name]Date:**____** Member Signature Page The undersigned Member hereby executes the Limited Liability Company Operating Agreement of the Company, dated as of the Effective Date, and hereby authorizes this signature page to be attached to a counterpart of that document executed by the Administrative Member of the Company. (Print Name of Member) Dated: **__**(Signature of Member or Authorized Signatory) Exhibit A FORM OF SUBSCRIPTION AGREEMENT","keywords":""}]